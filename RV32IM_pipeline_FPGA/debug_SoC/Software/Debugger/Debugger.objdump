
Debugger.elf:     file format elf32-littlenios2
Debugger.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000401b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x00013cb0 memsz 0x00013cb0 flags r-x
    LOAD off    0x00014cd0 vaddr 0x00053cd0 paddr 0x000557c8 align 2**12
         filesz 0x00001af8 memsz 0x00001af8 flags rw-
    LOAD off    0x000172c0 vaddr 0x000572c0 paddr 0x000572c0 align 2**12
         filesz 0x00000000 memsz 0x00000408 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00013320  000401b4  000401b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000007fc  000534d4  000534d4  000144d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001af8  00053cd0  000557c8  00014cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000408  000572c0  000572c0  000172c0  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  000167c8  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000011b8  00000000  00000000  000167f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001af3  00000000  00000000  000179a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000356fa  00000000  00000000  0001949b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000b4b7  00000000  00000000  0004eb95  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001c3b0  00000000  00000000  0005a04c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002358  00000000  00000000  000763fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002de9  00000000  00000000  00078754  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00012608  00000000  00000000  0007b53d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000050  00000000  00000000  0008db48  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000ba0  00000000  00000000  0008db98  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00092425  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00092428  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0009242b  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0009242c  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0009242d  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00092431  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00092435  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00092439  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00092444  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0009244f  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000003  00000000  00000000  0009245a  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000068  00000000  00000000  0009245d  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     0006d666  00000000  00000000  000924c5  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
000401b4 l    d  .text	00000000 .text
000534d4 l    d  .rodata	00000000 .rodata
00053cd0 l    d  .rwdata	00000000 .rwdata
000572c0 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000401ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 counter.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fscanf.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 impure.c
00053cd0 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
00042140 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 scanf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 vfprintf.c
000426dc l     F .text	00000058 __sprint_r
000536f6 l     O .rodata	00000010 blanks.3452
000536e6 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 vfscanf.c
0005370e l     O .rodata	00000022 basefix.3357
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 ctype_.c
00053831 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
00045fc8 l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000479f0 l     F .text	00000058 std
00047afc l     F .text	00000008 __fp_lock
00047b04 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
00055754 l     O .rwdata	00000004 charset
000539d4 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00053b1c l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strtod.c
0004a9c0 l     F .text	00000048 match
000544f8 l     O .rwdata	00000014 fpi.1950
00053b38 l     O .rodata	00000028 tinytens
000544e4 l     O .rwdata	00000014 fpinan.1986
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
0004ce00 l     F .text	00000024 htinit
0004ce8c l     F .text	000000b0 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
0004d738 l     F .text	0000004c L_shift
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
0004e9c8 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0004fbf0 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
00050328 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00050388 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0005048c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000505b0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00050690 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000507f0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
000508fc l     F .text	000000f8 alt_file_locked
00050b80 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_read.c
00050d04 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00055770 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00050fec l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
000546b4 l     O .rwdata	00001060 jtag_uart_0
00055714 l     O .rwdata	00000028 altera_hostfs
000510e8 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00051328 l     F .text	00000228 altera_avalon_jtag_uart_irq
00051550 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00051bcc l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_hostfs.c
00055774 l     O .rwdata	00000004 hcinfo.2234
00055780 l     O .rwdata	00000004 hcinfo.2276
0005578c l     O .rwdata	00000004 hcinfo.2289
00055798 l     O .rwdata	00000004 hcinfo.2311
000557a4 l     O .rwdata	00000004 hcinfo.2333
000557b0 l     O .rwdata	00000004 hcinfo.2368
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000525ec l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_fs_reg.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00052d24 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
000532bc l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00053470 l     F .text	00000040 alt_sim_halt
0004940c g     F .text	00000094 _mprec_log10
000494f8 g     F .text	00000088 __any_on
00048a2c g     F .text	00000070 _isatty_r
00053af4 g     O .rodata	00000028 __mprec_tinytens
00050850 g     F .text	0000006c alt_main
00041ec8 g     F .text	000000a0 _puts_r
00057438 g     O .bss	00000100 alt_irq
00048b8c g     F .text	00000078 _lseek_r
000557c8 g       *ABS*	00000000 __flash_rwdata_start
00047ce4 g     F .text	000000a0 __sflags
0004f4e8 g     F .text	00000088 __eqdf2
000576c8 g       *ABS*	00000000 __alt_heap_start
00041e50 g     F .text	00000044 printf
000422b0 g     F .text	00000068 __sseek
00047a58 g     F .text	000000a4 __sinit
00048aec g     F .text	00000084 _setlocale_r
00047b58 g     F .text	0000009c __sfmoreglue
0004cbf8 g     F .text	0000001c ungetc
000508dc g     F .text	00000020 __malloc_unlock
00051ccc g     F .text	00000154 alt_hostfs_open
0004aa08 g     F .text	000015cc _strtod_r
00040618 g     F .text	00000048 toggleInterupt
00048e88 g     F .text	000000e0 memmove
00047b48 g     F .text	00000010 _cleanup
00049580 g     F .text	000000bc _Balloc
0004f5f8 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00040000 g     F .entry	0000001c __reset
000572c8 g     O .bss	00000004 returnFromISRStatus
00040020 g       *ABS*	00000000 __flash_exceptions_start
00041368 g     F .text	00000074 _fstat_r
000572cc g     O .bss	00000004 errno
00040978 g     F .text	00000038 __make_dp
000421a8 g     F .text	00000014 __srget
00045ca4 g     F .text	00000024 __svfscanf
0004fe9c g     F .text	0000002c __make_fp
000572ec g     O .bss	00000004 alt_argv
0005d73c g       *ABS*	00000000 _gp
00050e98 g     F .text	00000030 usleep
000401f0 g     F .text	00000098 reset
00040ec4 g     F .text	00000044 fscanf
00054534 g     O .rwdata	00000180 alt_fd_list
00040430 g     F .text	000000f0 printSpike
00041474 g     F .text	00000090 _getc_r
000413dc g     F .text	00000098 getc
00051fb4 g     F .text	000000a0 alt_hostfs_seek
00052714 g     F .text	00000094 alt_find_dev
00048de8 g     F .text	000000a0 memcpy
0004d784 g     F .text	00000248 __hexnan
00047b3c g     F .text	0000000c _cleanup_r
0004f818 g     F .text	000000f8 __floatsidf
000528c8 g     F .text	00000090 alt_fs_reg
00052dfc g     F .text	00000078 alt_io_redirect
0004f708 g     F .text	00000088 __ltdf2
000534d4 g       *ABS*	00000000 __DTOR_END__
00041f68 g     F .text	00000014 puts
00048c84 g     F .text	00000040 mbrtowc
00045cc8 g     F .text	00000068 _vfscanf_r
0004935c g     F .text	000000b0 __ratio
00051768 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00041e94 g     F .text	00000034 _printf_r
0004fd2c g     F .text	00000008 __udivsi3
000504ec g     F .text	000000c4 isatty
00048a9c g     F .text	0000002c iswspace
00053a04 g     O .rodata	000000c8 __mprec_tens
00048ac8 g     F .text	00000008 __locale_charset
0004daf0 g     F .text	000000a4 __fixunsdfsi
00053038 g     F .text	00000090 alt_icache_flush
000572d0 g     O .bss	00000004 __malloc_top_pad
0004c66c g     F .text	00000024 strtoul
00055750 g     O .rwdata	00000004 __mb_cur_max
00048ad0 g     F .text	0000000c _localeconv_r
0004c690 g     F .text	000002f0 _strtoull_r
00049ce4 g     F .text	0000003c __i2b
00048410 g     F .text	0000049c __sfvwrite_r
000421bc g     F .text	00000070 _sbrk_r
00051e74 g     F .text	000000a0 alt_hostfs_read
0004a08c g     F .text	00000078 _read_r
000544d8 g     O .rwdata	0000000c __lc_ctype
00055768 g     O .rwdata	00000004 alt_max_fd
0004fec8 g     F .text	00000138 __unpack_d
0004ccdc g     F .text	00000110 _fclose_r
000479bc g     F .text	00000034 fflush
000572d4 g     O .bss	00000004 __malloc_max_sbrked_mem
00040924 g     F .text	00000054 __extendsfdf2
0004ee58 g     F .text	00000074 __adddf3
0004e860 g     F .text	00000078 __nesf2
0004923c g     F .text	00000120 __b2d
000406a8 g     F .text	00000060 injectByte
0004e200 g     F .text	00000660 __umoddi3
000506fc g     F .text	000000f4 lseek
00055740 g     O .rwdata	00000004 _global_impure_ptr
0004a104 g     F .text	000005f4 _realloc_r
000576c8 g       *ABS*	00000000 __bss_end
00052c2c g     F .text	000000f8 alt_iic_isr_register
00052f0c g     F .text	0000010c alt_tick
00057338 g     O .bss	00000100 __hexdig
0004db94 g     F .text	0000066c __udivdi3
00053acc g     O .rodata	00000028 __mprec_bigtens
00049f6c g     F .text	00000120 __s2b
0004fa5c g     F .text	00000194 __floatunsidf
0004915c g     F .text	00000060 __mcmp
0005574c g     O .rwdata	00000004 __ctype_ptr
00047b24 g     F .text	00000018 __fp_lock_all
00052be4 g     F .text	00000048 alt_ic_irq_enabled
00040520 g     F .text	00000040 printALUSelect
00052e74 g     F .text	00000098 alt_alarm_stop
000426b8 g     F .text	00000024 strtol
000572f4 g     O .bss	00000004 alt_irq_active
00051e20 g     F .text	00000054 alt_hostfs_close
00040000 g       *ABS*	00000000 __alt_mem_onchip_mem
000400ec g     F .exceptions	000000c8 alt_irq_handler
0005450c g     O .rwdata	00000028 alt_dev_null
000409b0 g     F .text	000000c8 __unpack_f
0005251c g     F .text	0000001c alt_dcache_flush_all
00049028 g     F .text	00000070 __hi0bits
0004f910 g     F .text	000000d8 __fixdfsi
0004c0f8 g     F .text	0000001c strtod
000557c8 g       *ABS*	00000000 __ram_rwdata_end
00055760 g     O .rwdata	00000008 alt_dev_list
00050ec8 g     F .text	00000124 write
0004e8d8 g     F .text	00000078 __gtsf2
00053cd0 g       *ABS*	00000000 __ram_rodata_end
000503b4 g     F .text	000000d8 fstat
0004f790 g     F .text	00000088 __ledf2
00049e4c g     F .text	00000120 __pow5mult
000572dc g     O .bss	00000004 __nlocale_changed
0004fd34 g     F .text	00000008 __umodsi3
0004222c g     F .text	00000034 _scanf_r
000576c8 g       *ABS*	00000000 end
000500c8 g     F .text	00000160 __pack_f
00041344 g     F .text	00000024 fseek
00051268 g     F .text	000000c0 altera_avalon_jtag_uart_init
000534d0 g       *ABS*	00000000 __CTOR_LIST__
00080000 g       *ABS*	00000000 __alt_stack_pointer
00051c3c g     F .text	00000090 alt_avalon_timer_sc_init
0004fd74 g     F .text	00000080 __clzsi2
0005198c g     F .text	00000240 altera_avalon_jtag_uart_write
00047a48 g     F .text	00000004 __sfp_lock_acquire
00048d04 g     F .text	000000e4 memchr
00042734 g     F .text	00001ec4 ___vfprintf_internal_r
0004a8a4 g     F .text	00000060 _sprintf_r
000480fc g     F .text	00000314 _free_r
000532c0 g     F .text	000001b0 __call_exitprocs
0004215c g     F .text	0000004c __srget_r
000572e0 g     O .bss	00000004 __mlocale_changed
00055748 g     O .rwdata	00000004 __malloc_sbrk_base
000401b4 g     F .text	0000003c _start
000572f8 g     O .bss	00000004 _alt_tick_rate
0004c114 g     F .text	00000318 _strtoll_r
00049944 g     F .text	0000014c __lshift
000572fc g     O .bss	00000004 _alt_nticks
00050be0 g     F .text	00000124 read
00051080 g     F .text	00000068 alt_sys_init
00041dd8 g     F .text	00000078 _open_r
00053188 g     F .text	00000134 __register_exitproc
00049a90 g     F .text	00000254 __multiply
00051600 g     F .text	00000074 altera_avalon_jtag_uart_close
0004fd3c g     F .text	00000038 __mulsi3
00053cd0 g       *ABS*	00000000 __ram_rwdata_start
000534d4 g       *ABS*	00000000 __ram_rodata_start
00057300 g     O .bss	00000028 __malloc_current_mallinfo
0004963c g     F .text	0000017c __d2b
00051120 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0004c42c g     F .text	00000240 _strtoul_r
00052958 g     F .text	000000d0 alt_get_fd
000523c0 g     F .text	0000015c alt_busy_sleep
00050000 g     F .text	000000c8 __fpcmp_parts_d
00045f58 g     F .text	00000070 _close_r
00053114 g     F .text	00000074 memcmp
000511d0 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
000576c8 g       *ABS*	00000000 __alt_stack_base
00051218 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00045e1c g     F .text	0000013c __swsetup_r
0004f290 g     F .text	00000258 __divdf3
00047bf4 g     F .text	000000f0 __sfp
000494a0 g     F .text	00000058 __copybits
000540d0 g     O .rwdata	00000408 __malloc_av_
00047a54 g     F .text	00000004 __sinit_lock_release
0004eecc g     F .text	000003c4 __muldf3
00042394 g     F .text	00000060 __sread
00047f90 g     F .text	00000040 fread
000527a8 g     F .text	00000120 alt_find_file
00052538 g     F .text	000000b4 alt_dev_llist_insert
000508bc g     F .text	00000020 __malloc_lock
00050ddc g     F .text	000000bc sbrk
000477c0 g     F .text	000001fc _fflush_r
0004cc14 g     F .text	000000c8 _calloc_r
00040e80 g     F .text	0000001c fopen
000572c0 g       *ABS*	00000000 __bss_start
00040e9c g     F .text	00000028 _fscanf_r
00048f68 g     F .text	00000098 memset
00040830 g     F .text	000000f4 main
000572f0 g     O .bss	00000004 alt_envp
000572d8 g     O .bss	00000004 __malloc_max_total_mem
00051178 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0004e950 g     F .text	00000078 __ltsf2
00047d84 g     F .text	0000020c _fread_r
000422a8 g     F .text	00000008 __sclose
00080000 g       *ABS*	00000000 __alt_heap_limit
0004cdec g     F .text	00000014 fclose
0004f9e8 g     F .text	00000074 __truncdfsf2
00042468 g     F .text	00000250 _strtol_r
00057538 g     O .bss	00000190 _atexit0
0004620c g     F .text	000015b4 _dtoa_r
00041698 g     F .text	00000740 _malloc_r
0005576c g     O .rwdata	00000004 alt_errno
0004c980 g     F .text	000000dc __submore
00048974 g     F .text	000000b8 _fwalk
00048cc4 g     F .text	00000040 _mbtowc_r
0004fc6c g     F .text	00000060 __divsi3
00053b7c g     O .rodata	00000014 __thenan_df
00047fd0 g     F .text	0000012c _malloc_trim_r
000534d4 g       *ABS*	00000000 __CTOR_END__
0004a904 g     F .text	000000bc strcmp
000534d4 g       *ABS*	00000000 __flash_rodata_start
000534d4 g       *ABS*	00000000 __DTOR_LIST__
0004f570 g     F .text	00000088 __nedf2
0005104c g     F .text	00000034 alt_irq_init
00050d64 g     F .text	00000078 alt_release_fd
0004a830 g     F .text	00000074 sprintf
00053b90 g     O .rodata	00000100 __clz_tab
000572e4 g     O .bss	00000004 _PathLocale
0004bfd4 g     F .text	00000124 strtof
000530c8 g     F .text	00000014 atexit
00045da4 g     F .text	00000078 _write_r
00040320 g     F .text	00000110 printRegisters
00048b70 g     F .text	0000001c setlocale
00042260 g     F .text	00000048 scanf
00040288 g     F .text	00000098 printBits
0004a828 g     F .text	00000008 nanf
0005573c g     O .rwdata	00000004 _impure_ptr
000572e8 g     O .bss	00000004 alt_argc
00048c04 g     F .text	00000080 _mbrtowc_r
000526b0 g     F .text	00000064 _do_dtors
00040f08 g     F .text	0000043c _fseek_r
00041f7c g     F .text	000001c4 __srefill_r
000572c0 g     O .bss	00000004 spikeValue
00040020 g       .exceptions	00000000 alt_irq_entry
000491bc g     F .text	00000080 __ulp
0004a6f8 g     F .text	00000040 __isinfd
00047b0c g     F .text	00000018 __fp_unlock_all
00055758 g     O .rwdata	00000008 alt_fs_list
00051f14 g     F .text	000000a0 alt_hostfs_write
00040560 g     F .text	00000044 printPC
00040020 g       *ABS*	00000000 __ram_exceptions_start
00048adc g     F .text	00000010 localeconv
00057328 g     O .bss	00000010 g_file_buffer
00052a58 g     F .text	00000050 alt_ic_isr_register
0004ce24 g     F .text	00000068 __hexdig_init
000557c8 g       *ABS*	00000000 _edata
000576c8 g       *ABS*	00000000 _end
000401b4 g       *ABS*	00000000 __ram_exceptions_end
00045d30 g     F .text	00000074 vfscanf
00051674 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00052b44 g     F .text	000000a0 alt_ic_irq_disable
00042318 g     F .text	0000007c __swrite
00055744 g     O .rwdata	00000004 __malloc_trim_threshold
00053018 g     F .text	00000020 altera_nios2_qsys_irq_init
000530dc g     F .text	00000038 exit
000488ac g     F .text	000000c8 _fwalk_reent
000497b8 g     F .text	0000018c __mdiff
0004fccc g     F .text	00000060 __modsi3
00080000 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
00047a4c g     F .text	00000004 __sfp_lock_release
0004a768 g     F .text	000000c0 __sccl
00053730 g     O .rodata	00000101 _ctype_
000405a4 g     F .text	00000074 genPulseAndPrint
0004fdf4 g     F .text	000000a8 __fpcmp_parts_f
00040d8c g     F .text	000000f4 _fopen_r
000534b0 g     F .text	00000020 _exit
0004a738 g     F .text	00000030 __isnand
0005226c g     F .text	00000154 alt_alarm_start
0004d9cc g     F .text	00000124 __muldi3
000572c4 g     O .bss	00000004 interuptStatus
00041504 g     F .text	00000194 __smakebuf_r
000423f4 g     F .text	00000074 strlen
000509f4 g     F .text	0000018c open
00040708 g     F .text	00000128 loadProgramme
0004f680 g     F .text	00000088 __gedf2
0004cf3c g     F .text	000007fc __gethex
00052a28 g     F .text	00000030 alt_icache_flush_all
000557bc g     O .rwdata	00000004 alt_priority_mask
00052aa8 g     F .text	0000009c alt_ic_irq_enable
000445f8 g     F .text	00000024 __vfprintf_internal
0004edd8 g     F .text	00000080 __subdf3
00049098 g     F .text	000000c4 __lo0bits
0004461c g     F .text	00001688 __svfscanf_r
000557c0 g     O .rwdata	00000008 alt_alarm_list
0004ca5c g     F .text	0000019c _ungetc_r
00040660 g     F .text	00000048 toggleRISR
0005264c g     F .text	00000064 _do_ctors
00050228 g     F .text	00000100 close
00050610 g     F .text	00000080 alt_load
00040a78 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
00047a50 g     F .text	00000004 __sinit_lock_acquire
00049d20 g     F .text	0000012c __multadd
00049000 g     F .text	00000028 _Bfree
00052054 g     F .text	00000218 alt_hostfs_fstat



Disassembly of section .entry:

00040000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   40000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   40004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   40008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   4000c:	00bffd16 	blt	zero,r2,40004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40010:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40014:	08406d14 	ori	at,at,436
    jmp r1
   40018:	0800683a 	jmp	at
   4001c:	00000000 	call	0 <__alt_mem_onchip_mem-0x40000>

Disassembly of section .exceptions:

00040020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   40044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400ec0 	call	400ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000306 	br	40098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   4008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   40094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   40098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   4009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   400c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   400e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400e8:	ef80083a 	eret

000400ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400ec:	defff904 	addi	sp,sp,-28
   400f0:	dfc00615 	stw	ra,24(sp)
   400f4:	df000515 	stw	fp,20(sp)
   400f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   400fc:	0005313a 	rdctl	r2,ipending
   40100:	e0bffc15 	stw	r2,-16(fp)

  return active;
   40104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   40108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   4010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40110:	00800044 	movi	r2,1
   40114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   40118:	e0ffff17 	ldw	r3,-4(fp)
   4011c:	e0bffe17 	ldw	r2,-8(fp)
   40120:	1884703a 	and	r2,r3,r2
   40124:	1005003a 	cmpeq	r2,r2,zero
   40128:	1000161e 	bne	r2,zero,40184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4012c:	e0bffd17 	ldw	r2,-12(fp)
   40130:	00c00174 	movhi	r3,5
   40134:	18dd0e04 	addi	r3,r3,29752
   40138:	100490fa 	slli	r2,r2,3
   4013c:	10c5883a 	add	r2,r2,r3
   40140:	11400017 	ldw	r5,0(r2)
   40144:	e0bffd17 	ldw	r2,-12(fp)
   40148:	00c00174 	movhi	r3,5
   4014c:	18dd0e04 	addi	r3,r3,29752
   40150:	100490fa 	slli	r2,r2,3
   40154:	10c5883a 	add	r2,r2,r3
   40158:	10800104 	addi	r2,r2,4
   4015c:	11000017 	ldw	r4,0(r2)
   40160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40164:	0005313a 	rdctl	r2,ipending
   40168:	e0bffb15 	stw	r2,-20(fp)

  return active;
   4016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   40170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   40174:	e0bfff17 	ldw	r2,-4(fp)
   40178:	1004c03a 	cmpne	r2,r2,zero
   4017c:	103fe31e 	bne	r2,zero,4010c <alt_irq_handler+0x20>
   40180:	00000706 	br	401a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   40184:	e0bffe17 	ldw	r2,-8(fp)
   40188:	1085883a 	add	r2,r2,r2
   4018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
   40190:	e0bffd17 	ldw	r2,-12(fp)
   40194:	10800044 	addi	r2,r2,1
   40198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   4019c:	003fde06 	br	40118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   401a0:	e037883a 	mov	sp,fp
   401a4:	dfc00117 	ldw	ra,4(sp)
   401a8:	df000017 	ldw	fp,0(sp)
   401ac:	dec00204 	addi	sp,sp,8
   401b0:	f800283a 	ret

Disassembly of section .text:

000401b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   401b4:	06c00234 	movhi	sp,8
    ori sp, sp, %lo(__alt_stack_pointer)
   401b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   401bc:	06800174 	movhi	gp,5
    ori gp, gp, %lo(_gp)
   401c0:	d6b5cf14 	ori	gp,gp,55100
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   401c4:	00800174 	movhi	r2,5
    ori r2, r2, %lo(__bss_start)
   401c8:	109cb014 	ori	r2,r2,29376

    movhi r3, %hi(__bss_end)
   401cc:	00c00174 	movhi	r3,5
    ori r3, r3, %lo(__bss_end)
   401d0:	18ddb214 	ori	r3,r3,30408

    beq r2, r3, 1f
   401d4:	10c00326 	beq	r2,r3,401e4 <_start+0x30>

0:
    stw zero, (r2)
   401d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   401dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   401e0:	10fffd36 	bltu	r2,r3,401d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   401e4:	00506100 	call	50610 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   401e8:	00508500 	call	50850 <alt_main>

000401ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   401ec:	003fff06 	br	401ec <alt_after_alt_main>

000401f0 <reset>:
	int i;
	float f;
};

//reset the CPU
void reset(){
   401f0:	defffe04 	addi	sp,sp,-8
   401f4:	dfc00115 	stw	ra,4(sp)
   401f8:	df000015 	stw	fp,0(sp)
   401fc:	d839883a 	mov	fp,sp
	IOWR_8DIRECT(INTERUPT_SIGNAL,OFFSET,0); // to reset the interupt
   40200:	00800234 	movhi	r2,8
   40204:	10842c04 	addi	r2,r2,4272
   40208:	10000025 	stbio	zero,0(r2)

	IOWR_8DIRECT(RESET,OFFSET,1);
   4020c:	00c00234 	movhi	r3,8
   40210:	18c40804 	addi	r3,r3,4128
   40214:	00800044 	movi	r2,1
   40218:	18800025 	stbio	r2,0(r3)

	IOWR_8DIRECT(NIOS_CLK_OUT,OFFSET,0);
   4021c:	00800234 	movhi	r2,8
   40220:	10841004 	addi	r2,r2,4160
   40224:	10000025 	stbio	zero,0(r2)
	usleep(100000);
   40228:	010000b4 	movhi	r4,2
   4022c:	2121a804 	addi	r4,r4,-31072
   40230:	0050e980 	call	50e98 <usleep>
	IOWR_8DIRECT(NIOS_CLK_OUT,OFFSET,1);
   40234:	00c00234 	movhi	r3,8
   40238:	18c41004 	addi	r3,r3,4160
   4023c:	00800044 	movi	r2,1
   40240:	18800025 	stbio	r2,0(r3)
	usleep(100000);
   40244:	010000b4 	movhi	r4,2
   40248:	2121a804 	addi	r4,r4,-31072
   4024c:	0050e980 	call	50e98 <usleep>
	IOWR_8DIRECT(NIOS_CLK_OUT,OFFSET,0);
   40250:	00800234 	movhi	r2,8
   40254:	10841004 	addi	r2,r2,4160
   40258:	10000025 	stbio	zero,0(r2)

	IOWR_8DIRECT(RESET,OFFSET,0);
   4025c:	00800234 	movhi	r2,8
   40260:	10840804 	addi	r2,r2,4128
   40264:	10000025 	stbio	zero,0(r2)
	printf("core reset\n");
   40268:	01000174 	movhi	r4,5
   4026c:	210d3504 	addi	r4,r4,13524
   40270:	0041f680 	call	41f68 <puts>
}
   40274:	e037883a 	mov	sp,fp
   40278:	dfc00117 	ldw	ra,4(sp)
   4027c:	df000017 	ldw	fp,0(sp)
   40280:	dec00204 	addi	sp,sp,8
   40284:	f800283a 	ret

00040288 <printBits>:

// Assumes little endian
void printBits(int size, int data)
{
   40288:	defffa04 	addi	sp,sp,-24
   4028c:	dfc00515 	stw	ra,20(sp)
   40290:	df000415 	stw	fp,16(sp)
   40294:	df000404 	addi	fp,sp,16
   40298:	e13ffe15 	stw	r4,-8(fp)
   4029c:	e17fff15 	stw	r5,-4(fp)
    printf("ALU Select : %d -> ", data);
   402a0:	01000174 	movhi	r4,5
   402a4:	210d3804 	addi	r4,r4,13536
   402a8:	e17fff17 	ldw	r5,-4(fp)
   402ac:	0041e500 	call	41e50 <printf>
	int i;
    for (i = 0; i < size; i++) {
   402b0:	e03ffd15 	stw	zero,-12(fp)
   402b4:	00000f06 	br	402f4 <printBits+0x6c>
    	int tmp = data >> size-i-1;
   402b8:	e0fffe17 	ldw	r3,-8(fp)
   402bc:	e0bffd17 	ldw	r2,-12(fp)
   402c0:	1885c83a 	sub	r2,r3,r2
   402c4:	10ffffc4 	addi	r3,r2,-1
   402c8:	e0bfff17 	ldw	r2,-4(fp)
   402cc:	10c5d83a 	sra	r2,r2,r3
   402d0:	e0bffc15 	stw	r2,-16(fp)
    	printf("%u", tmp&1);
   402d4:	e0bffc17 	ldw	r2,-16(fp)
   402d8:	1140004c 	andi	r5,r2,1
   402dc:	01000174 	movhi	r4,5
   402e0:	210d3d04 	addi	r4,r4,13556
   402e4:	0041e500 	call	41e50 <printf>
// Assumes little endian
void printBits(int size, int data)
{
    printf("ALU Select : %d -> ", data);
	int i;
    for (i = 0; i < size; i++) {
   402e8:	e0bffd17 	ldw	r2,-12(fp)
   402ec:	10800044 	addi	r2,r2,1
   402f0:	e0bffd15 	stw	r2,-12(fp)
   402f4:	e0fffd17 	ldw	r3,-12(fp)
   402f8:	e0bffe17 	ldw	r2,-8(fp)
   402fc:	18bfee16 	blt	r3,r2,402b8 <printBits+0x30>
    	int tmp = data >> size-i-1;
    	printf("%u", tmp&1);
    }
    puts("");
   40300:	01000174 	movhi	r4,5
   40304:	210d3e04 	addi	r4,r4,13560
   40308:	0041f680 	call	41f68 <puts>
}
   4030c:	e037883a 	mov	sp,fp
   40310:	dfc00117 	ldw	ra,4(sp)
   40314:	df000017 	ldw	fp,0(sp)
   40318:	dec00204 	addi	sp,sp,8
   4031c:	f800283a 	ret

00040320 <printRegisters>:

// print the specific register values
void printRegisters() {
   40320:	defff904 	addi	sp,sp,-28
   40324:	dfc00615 	stw	ra,24(sp)
   40328:	df000515 	stw	fp,20(sp)
   4032c:	df000504 	addi	fp,sp,20
	int addr;
	union ConvFloat convData;
    for (addr = 0; addr < NUMBER_OF_REGS; addr++) {
   40330:	e03ffe15 	stw	zero,-8(fp)
   40334:	00001b06 	br	403a4 <printRegisters+0x84>
        // write the address to the IO port
        IOWR_8DIRECT(ADDR,OFFSET,addr);
   40338:	00c00234 	movhi	r3,8
   4033c:	18c41c04 	addi	r3,r3,4208
   40340:	e0bffe17 	ldw	r2,-8(fp)
   40344:	18800025 	stbio	r2,0(r3)
        usleep(DELAY); // Wait for about 0.1 seconds
   40348:	01000044 	movi	r4,1
   4034c:	0050e980 	call	50e98 <usleep>

        // getting data from the Register file
        int data = IORD_32DIRECT(DATA_IN,OFFSET);
   40350:	00800234 	movhi	r2,8
   40354:	10841804 	addi	r2,r2,4192
   40358:	10800037 	ldwio	r2,0(r2)
   4035c:	e0bffc15 	stw	r2,-16(fp)
        convData.i = data;
   40360:	e0bffc17 	ldw	r2,-16(fp)
   40364:	e0bfff15 	stw	r2,-4(fp)

        printf("Addr: %d->%d,%.4f   ",addr, data, convData.f);
   40368:	e0bfff17 	ldw	r2,-4(fp)
   4036c:	1009883a 	mov	r4,r2
   40370:	00409240 	call	40924 <__extendsfdf2>
   40374:	1009883a 	mov	r4,r2
   40378:	180b883a 	mov	r5,r3
   4037c:	d9400015 	stw	r5,0(sp)
   40380:	200f883a 	mov	r7,r4
   40384:	01000174 	movhi	r4,5
   40388:	210d3f04 	addi	r4,r4,13564
   4038c:	e17ffe17 	ldw	r5,-8(fp)
   40390:	e1bffc17 	ldw	r6,-16(fp)
   40394:	0041e500 	call	41e50 <printf>

// print the specific register values
void printRegisters() {
	int addr;
	union ConvFloat convData;
    for (addr = 0; addr < NUMBER_OF_REGS; addr++) {
   40398:	e0bffe17 	ldw	r2,-8(fp)
   4039c:	10800044 	addi	r2,r2,1
   403a0:	e0bffe15 	stw	r2,-8(fp)
   403a4:	e0bffe17 	ldw	r2,-8(fp)
   403a8:	10800410 	cmplti	r2,r2,16
   403ac:	103fe21e 	bne	r2,zero,40338 <printRegisters+0x18>
        printf("Addr: %d->%d,%.4f   ",addr, data, convData.f);
    }

    // check random number generation
	// write the address to the IO port
	IOWR_8DIRECT(ADDR,OFFSET,30);
   403b0:	00c00234 	movhi	r3,8
   403b4:	18c41c04 	addi	r3,r3,4208
   403b8:	00800784 	movi	r2,30
   403bc:	18800025 	stbio	r2,0(r3)
	usleep(DELAY); // Wait for about 0.1 seconds
   403c0:	01000044 	movi	r4,1
   403c4:	0050e980 	call	50e98 <usleep>

	// getting data from the Register file
	int data = IORD_32DIRECT(DATA_IN,OFFSET);
   403c8:	00800234 	movhi	r2,8
   403cc:	10841804 	addi	r2,r2,4192
   403d0:	10800037 	ldwio	r2,0(r2)
   403d4:	e0bffd15 	stw	r2,-12(fp)
	convData.i = data;
   403d8:	e0bffd17 	ldw	r2,-12(fp)
   403dc:	e0bfff15 	stw	r2,-4(fp)

	printf("Addr: %d->%d,%.4f   ",30, data, convData.f);
   403e0:	e0bfff17 	ldw	r2,-4(fp)
   403e4:	1009883a 	mov	r4,r2
   403e8:	00409240 	call	40924 <__extendsfdf2>
   403ec:	1009883a 	mov	r4,r2
   403f0:	180b883a 	mov	r5,r3
   403f4:	d9400015 	stw	r5,0(sp)
   403f8:	200f883a 	mov	r7,r4
   403fc:	01000174 	movhi	r4,5
   40400:	210d3f04 	addi	r4,r4,13564
   40404:	01400784 	movi	r5,30
   40408:	e1bffd17 	ldw	r6,-12(fp)
   4040c:	0041e500 	call	41e50 <printf>
    printf("\n\n");
   40410:	01000174 	movhi	r4,5
   40414:	210d4504 	addi	r4,r4,13588
   40418:	0041f680 	call	41f68 <puts>
}
   4041c:	e037883a 	mov	sp,fp
   40420:	dfc00117 	ldw	ra,4(sp)
   40424:	df000017 	ldw	fp,0(sp)
   40428:	dec00204 	addi	sp,sp,8
   4042c:	f800283a 	ret

00040430 <printSpike>:

// formated print for spike identification
void printSpike() {
   40430:	defffc04 	addi	sp,sp,-16
   40434:	dfc00315 	stw	ra,12(sp)
   40438:	df000215 	stw	fp,8(sp)
   4043c:	df000204 	addi	fp,sp,8
	union ConvFloat convData;

	// ========================================== print value
	// write the address to the IO port
	IOWR_8DIRECT(ADDR,OFFSET,4);
   40440:	00c00234 	movhi	r3,8
   40444:	18c41c04 	addi	r3,r3,4208
   40448:	00800104 	movi	r2,4
   4044c:	18800025 	stbio	r2,0(r3)
	usleep(DELAY); // Wait for about 0.1 seconds
   40450:	01000044 	movi	r4,1
   40454:	0050e980 	call	50e98 <usleep>

	// getting data from the Register file
	int data = IORD_32DIRECT(DATA_IN,OFFSET);
   40458:	00800234 	movhi	r2,8
   4045c:	10841804 	addi	r2,r2,4192
   40460:	10800037 	ldwio	r2,0(r2)
   40464:	e0bffe15 	stw	r2,-8(fp)
	convData.i = data;
   40468:	e0bffe17 	ldw	r2,-8(fp)
   4046c:	e0bfff15 	stw	r2,-4(fp)

	if (data != spikeValue) {
   40470:	d0e6e117 	ldw	r3,-25724(gp)
   40474:	e0bffe17 	ldw	r2,-8(fp)
   40478:	10c02426 	beq	r2,r3,4050c <printSpike+0xdc>
		spikeValue = data;
   4047c:	e0bffe17 	ldw	r2,-8(fp)
   40480:	d0a6e115 	stw	r2,-25724(gp)

		printf("value: %d,%.4f   ",data, convData.f);
   40484:	e0bfff17 	ldw	r2,-4(fp)
   40488:	1009883a 	mov	r4,r2
   4048c:	00409240 	call	40924 <__extendsfdf2>
   40490:	100f883a 	mov	r7,r2
   40494:	1811883a 	mov	r8,r3
   40498:	01000174 	movhi	r4,5
   4049c:	210d4604 	addi	r4,r4,13592
   404a0:	e17ffe17 	ldw	r5,-8(fp)
   404a4:	380d883a 	mov	r6,r7
   404a8:	400f883a 	mov	r7,r8
   404ac:	0041e500 	call	41e50 <printf>

		// =========================================== print spike count
		// write the address to the IO port
		IOWR_8DIRECT(ADDR,OFFSET,15);
   404b0:	00c00234 	movhi	r3,8
   404b4:	18c41c04 	addi	r3,r3,4208
   404b8:	008003c4 	movi	r2,15
   404bc:	18800025 	stbio	r2,0(r3)
		usleep(DELAY); // Wait for about 0.1 seconds
   404c0:	01000044 	movi	r4,1
   404c4:	0050e980 	call	50e98 <usleep>

		// getting data from the Register file
		data = IORD_32DIRECT(DATA_IN,OFFSET);
   404c8:	00800234 	movhi	r2,8
   404cc:	10841804 	addi	r2,r2,4192
   404d0:	10800037 	ldwio	r2,0(r2)
   404d4:	e0bffe15 	stw	r2,-8(fp)
		convData.i = data;
   404d8:	e0bffe17 	ldw	r2,-8(fp)
   404dc:	e0bfff15 	stw	r2,-4(fp)

		printf("spike count: %d,%.4f \n",data, convData.f);
   404e0:	e0bfff17 	ldw	r2,-4(fp)
   404e4:	1009883a 	mov	r4,r2
   404e8:	00409240 	call	40924 <__extendsfdf2>
   404ec:	100f883a 	mov	r7,r2
   404f0:	1811883a 	mov	r8,r3
   404f4:	01000174 	movhi	r4,5
   404f8:	210d4b04 	addi	r4,r4,13612
   404fc:	e17ffe17 	ldw	r5,-8(fp)
   40500:	380d883a 	mov	r6,r7
   40504:	400f883a 	mov	r7,r8
   40508:	0041e500 	call	41e50 <printf>

	}
}
   4050c:	e037883a 	mov	sp,fp
   40510:	dfc00117 	ldw	ra,4(sp)
   40514:	df000017 	ldw	fp,0(sp)
   40518:	dec00204 	addi	sp,sp,8
   4051c:	f800283a 	ret

00040520 <printALUSelect>:

//print ALU SELECT Signal
void printALUSelect() {
   40520:	defffd04 	addi	sp,sp,-12
   40524:	dfc00215 	stw	ra,8(sp)
   40528:	df000115 	stw	fp,4(sp)
   4052c:	df000104 	addi	fp,sp,4
	// getting data from the Register file
	int data = IORD_32DIRECT(ALU_SELECT,OFFSET);
   40530:	00800234 	movhi	r2,8
   40534:	10840c04 	addi	r2,r2,4144
   40538:	10800037 	ldwio	r2,0(r2)
   4053c:	e0bfff15 	stw	r2,-4(fp)
	printBits(32, data);
   40540:	01000804 	movi	r4,32
   40544:	e17fff17 	ldw	r5,-4(fp)
   40548:	00402880 	call	40288 <printBits>
}
   4054c:	e037883a 	mov	sp,fp
   40550:	dfc00117 	ldw	ra,4(sp)
   40554:	df000017 	ldw	fp,0(sp)
   40558:	dec00204 	addi	sp,sp,8
   4055c:	f800283a 	ret

00040560 <printPC>:

// print pc
void printPC() {
   40560:	defffd04 	addi	sp,sp,-12
   40564:	dfc00215 	stw	ra,8(sp)
   40568:	df000115 	stw	fp,4(sp)
   4056c:	df000104 	addi	fp,sp,4
	int data = IORD_32DIRECT(PC,OFFSET);
   40570:	00800234 	movhi	r2,8
   40574:	10843004 	addi	r2,r2,4288
   40578:	10800037 	ldwio	r2,0(r2)
   4057c:	e0bfff15 	stw	r2,-4(fp)
	printf("PC = %d \n", data);
   40580:	01000174 	movhi	r4,5
   40584:	210d5104 	addi	r4,r4,13636
   40588:	e17fff17 	ldw	r5,-4(fp)
   4058c:	0041e500 	call	41e50 <printf>
}
   40590:	e037883a 	mov	sp,fp
   40594:	dfc00117 	ldw	ra,4(sp)
   40598:	df000017 	ldw	fp,0(sp)
   4059c:	dec00204 	addi	sp,sp,8
   405a0:	f800283a 	ret

000405a4 <genPulseAndPrint>:

// genarate clock pulses and print registers
void genPulseAndPrint(int pulseCount) {
   405a4:	defffc04 	addi	sp,sp,-16
   405a8:	dfc00315 	stw	ra,12(sp)
   405ac:	df000215 	stw	fp,8(sp)
   405b0:	df000204 	addi	fp,sp,8
   405b4:	e13fff15 	stw	r4,-4(fp)
	int i;
	for (i = 0; i < pulseCount; i++) {
   405b8:	e03ffe15 	stw	zero,-8(fp)
   405bc:	00000e06 	br	405f8 <genPulseAndPrint+0x54>
		printPC();   // printing the corresponding to the instruction enters to the pipeline
   405c0:	00405600 	call	40560 <printPC>
        IOWR_8DIRECT(NIOS_CLK_OUT,OFFSET,1);
   405c4:	00c00234 	movhi	r3,8
   405c8:	18c41004 	addi	r3,r3,4160
   405cc:	00800044 	movi	r2,1
   405d0:	18800025 	stbio	r2,0(r3)
    	usleep(DELAY); // Wait for about 0.1 seconds
   405d4:	01000044 	movi	r4,1
   405d8:	0050e980 	call	50e98 <usleep>
    	IOWR_8DIRECT(NIOS_CLK_OUT,OFFSET,0);
   405dc:	00800234 	movhi	r2,8
   405e0:	10841004 	addi	r2,r2,4160
   405e4:	10000025 	stbio	zero,0(r2)
        // printing the register values
        printRegisters();
   405e8:	00403200 	call	40320 <printRegisters>
}

// genarate clock pulses and print registers
void genPulseAndPrint(int pulseCount) {
	int i;
	for (i = 0; i < pulseCount; i++) {
   405ec:	e0bffe17 	ldw	r2,-8(fp)
   405f0:	10800044 	addi	r2,r2,1
   405f4:	e0bffe15 	stw	r2,-8(fp)
   405f8:	e0fffe17 	ldw	r3,-8(fp)
   405fc:	e0bfff17 	ldw	r2,-4(fp)
   40600:	18bfef16 	blt	r3,r2,405c0 <genPulseAndPrint+0x1c>
        // printing the register values
        printRegisters();
        // printSpike();
        // printALUSelect();
    }
}
   40604:	e037883a 	mov	sp,fp
   40608:	dfc00117 	ldw	ra,4(sp)
   4060c:	df000017 	ldw	fp,0(sp)
   40610:	dec00204 	addi	sp,sp,8
   40614:	f800283a 	ret

00040618 <toggleInterupt>:

// enable or disable the interupt
void toggleInterupt() {
   40618:	deffff04 	addi	sp,sp,-4
   4061c:	df000015 	stw	fp,0(sp)
   40620:	d839883a 	mov	fp,sp
	if (interuptStatus == 0) {
   40624:	d0a6e217 	ldw	r2,-25720(gp)
   40628:	1004c03a 	cmpne	r2,r2,zero
   4062c:	1000031e 	bne	r2,zero,4063c <toggleInterupt+0x24>
		interuptStatus = 1;
   40630:	00800044 	movi	r2,1
   40634:	d0a6e215 	stw	r2,-25720(gp)
   40638:	00000106 	br	40640 <toggleInterupt+0x28>
	} else {
		interuptStatus = 0;
   4063c:	d026e215 	stw	zero,-25720(gp)
	}
	IOWR_8DIRECT(INTERUPT_SIGNAL,OFFSET,interuptStatus);
   40640:	d0e6e217 	ldw	r3,-25720(gp)
   40644:	00800234 	movhi	r2,8
   40648:	10842c04 	addi	r2,r2,4272
   4064c:	10c00025 	stbio	r3,0(r2)
}
   40650:	e037883a 	mov	sp,fp
   40654:	df000017 	ldw	fp,0(sp)
   40658:	dec00104 	addi	sp,sp,4
   4065c:	f800283a 	ret

00040660 <toggleRISR>:

// enable and disable return form ISR
void toggleRISR() {
   40660:	deffff04 	addi	sp,sp,-4
   40664:	df000015 	stw	fp,0(sp)
   40668:	d839883a 	mov	fp,sp
	if (returnFromISRStatus == 0) {
   4066c:	d0a6e317 	ldw	r2,-25716(gp)
   40670:	1004c03a 	cmpne	r2,r2,zero
   40674:	1000031e 	bne	r2,zero,40684 <toggleRISR+0x24>
		returnFromISRStatus = 1;
   40678:	00800044 	movi	r2,1
   4067c:	d0a6e315 	stw	r2,-25716(gp)
   40680:	00000106 	br	40688 <toggleRISR+0x28>
	} else {
		returnFromISRStatus = 0;
   40684:	d026e315 	stw	zero,-25716(gp)
	}
	IOWR_8DIRECT(RETURN_FROM_ISR,OFFSET,returnFromISRStatus);
   40688:	d0e6e317 	ldw	r3,-25716(gp)
   4068c:	00800234 	movhi	r2,8
   40690:	10843404 	addi	r2,r2,4304
   40694:	10c00025 	stbio	r3,0(r2)
}
   40698:	e037883a 	mov	sp,fp
   4069c:	df000017 	ldw	fp,0(sp)
   406a0:	dec00104 	addi	sp,sp,4
   406a4:	f800283a 	ret

000406a8 <injectByte>:

// inject byte to instruction memory
void injectByte(int data, int addr){
   406a8:	defffd04 	addi	sp,sp,-12
   406ac:	df000215 	stw	fp,8(sp)
   406b0:	df000204 	addi	fp,sp,8
   406b4:	e13ffe15 	stw	r4,-8(fp)
   406b8:	e17fff15 	stw	r5,-4(fp)
	// clock pulses
	IOWR_8DIRECT(INS_INJ_DATA,OFFSET,data);
   406bc:	00c00234 	movhi	r3,8
   406c0:	18c42404 	addi	r3,r3,4240
   406c4:	e0bffe17 	ldw	r2,-8(fp)
   406c8:	18800025 	stbio	r2,0(r3)
	IOWR_32DIRECT(INS_INJ_ADDR,OFFSET,addr);
   406cc:	00c00234 	movhi	r3,8
   406d0:	18c42804 	addi	r3,r3,4256
   406d4:	e0bfff17 	ldw	r2,-4(fp)
   406d8:	18800035 	stwio	r2,0(r3)
//	usleep(1000);
	IOWR_8DIRECT(INS_INJ_CLOCK,OFFSET,1);
   406dc:	00c00234 	movhi	r3,8
   406e0:	18c42004 	addi	r3,r3,4224
   406e4:	00800044 	movi	r2,1
   406e8:	18800025 	stbio	r2,0(r3)
//	usleep(1000);
	IOWR_8DIRECT(INS_INJ_CLOCK,OFFSET,0);
   406ec:	00800234 	movhi	r2,8
   406f0:	10842004 	addi	r2,r2,4224
   406f4:	10000025 	stbio	zero,0(r2)
}
   406f8:	e037883a 	mov	sp,fp
   406fc:	df000017 	ldw	fp,0(sp)
   40700:	dec00104 	addi	sp,sp,4
   40704:	f800283a 	ret

00040708 <loadProgramme>:

// programming the instruction to the ins memory
void loadProgramme(){
   40708:	deffe604 	addi	sp,sp,-104
   4070c:	dfc01915 	stw	ra,100(sp)
   40710:	df001815 	stw	fp,96(sp)
   40714:	df001804 	addi	fp,sp,96
	printf("Instruction loading started\n");
   40718:	01000174 	movhi	r4,5
   4071c:	210d5404 	addi	r4,r4,13648
   40720:	0041f680 	call	41f68 <puts>
	// pulling down the clock line of ins memory
	IOWR_8DIRECT(INS_INJ_CLOCK,OFFSET,0);
   40724:	00800234 	movhi	r2,8
   40728:	10842004 	addi	r2,r2,4224
   4072c:	10000025 	stbio	zero,0(r2)

	char file_name[80] = "/mnt/host/BIN_file/prog.bin";
   40730:	00c00174 	movhi	r3,5
   40734:	18cd6604 	addi	r3,r3,13720
   40738:	18800017 	ldw	r2,0(r3)
   4073c:	e0bfec15 	stw	r2,-80(fp)
   40740:	18800117 	ldw	r2,4(r3)
   40744:	e0bfed15 	stw	r2,-76(fp)
   40748:	18800217 	ldw	r2,8(r3)
   4074c:	e0bfee15 	stw	r2,-72(fp)
   40750:	18800317 	ldw	r2,12(r3)
   40754:	e0bfef15 	stw	r2,-68(fp)
   40758:	18800417 	ldw	r2,16(r3)
   4075c:	e0bff015 	stw	r2,-64(fp)
   40760:	18800517 	ldw	r2,20(r3)
   40764:	e0bff115 	stw	r2,-60(fp)
   40768:	18800617 	ldw	r2,24(r3)
   4076c:	e0bff215 	stw	r2,-56(fp)
   40770:	e03ff315 	stw	zero,-52(fp)
   40774:	e03ff415 	stw	zero,-48(fp)
   40778:	e03ff515 	stw	zero,-44(fp)
   4077c:	e03ff615 	stw	zero,-40(fp)
   40780:	e03ff715 	stw	zero,-36(fp)
   40784:	e03ff815 	stw	zero,-32(fp)
   40788:	e03ff915 	stw	zero,-28(fp)
   4078c:	e03ffa15 	stw	zero,-24(fp)
   40790:	e03ffb15 	stw	zero,-20(fp)
   40794:	e03ffc15 	stw	zero,-16(fp)
   40798:	e03ffd15 	stw	zero,-12(fp)
   4079c:	e03ffe15 	stw	zero,-8(fp)
   407a0:	e03fff15 	stw	zero,-4(fp)

	FILE *bmp_file = NULL;
   407a4:	e03feb15 	stw	zero,-84(fp)
	int bmp_file_size, bytes_read, addr;

	bmp_file = fopen(file_name, "rb");
   407a8:	e13fec04 	addi	r4,fp,-80
   407ac:	01400174 	movhi	r5,5
   407b0:	294d5b04 	addi	r5,r5,13676
   407b4:	0040e800 	call	40e80 <fopen>
   407b8:	e0bfeb15 	stw	r2,-84(fp)
	addr=0;
   407bc:	e03fe815 	stw	zero,-96(fp)
	while(fscanf(bmp_file, "%[^\n] ", g_file_buffer) != EOF) {
   407c0:	00000b06 	br	407f0 <loadProgramme+0xe8>
//		printf("%s-%d\n", g_file_buffer, (int) strtol(g_file_buffer, NULL, 2));
		injectByte((int) strtol(g_file_buffer, NULL, 2), addr);
   407c4:	01000174 	movhi	r4,5
   407c8:	211cca04 	addi	r4,r4,29480
   407cc:	000b883a 	mov	r5,zero
   407d0:	01800084 	movi	r6,2
   407d4:	00426b80 	call	426b8 <strtol>
   407d8:	1009883a 	mov	r4,r2
   407dc:	e17fe817 	ldw	r5,-96(fp)
   407e0:	00406a80 	call	406a8 <injectByte>
		addr++;
   407e4:	e0bfe817 	ldw	r2,-96(fp)
   407e8:	10800044 	addi	r2,r2,1
   407ec:	e0bfe815 	stw	r2,-96(fp)
	FILE *bmp_file = NULL;
	int bmp_file_size, bytes_read, addr;

	bmp_file = fopen(file_name, "rb");
	addr=0;
	while(fscanf(bmp_file, "%[^\n] ", g_file_buffer) != EOF) {
   407f0:	e13feb17 	ldw	r4,-84(fp)
   407f4:	01400174 	movhi	r5,5
   407f8:	294d5c04 	addi	r5,r5,13680
   407fc:	01800174 	movhi	r6,5
   40800:	319cca04 	addi	r6,r6,29480
   40804:	0040ec40 	call	40ec4 <fscanf>
   40808:	10bfffd8 	cmpnei	r2,r2,-1
   4080c:	103fed1e 	bne	r2,zero,407c4 <loadProgramme+0xbc>
//		printf("%s-%d\n", g_file_buffer, (int) strtol(g_file_buffer, NULL, 2));
		injectByte((int) strtol(g_file_buffer, NULL, 2), addr);
		addr++;
	}
	printf("Instruction loading completed\n");
   40810:	01000174 	movhi	r4,5
   40814:	210d5e04 	addi	r4,r4,13688
   40818:	0041f680 	call	41f68 <puts>
}
   4081c:	e037883a 	mov	sp,fp
   40820:	dfc00117 	ldw	ra,4(sp)
   40824:	df000017 	ldw	fp,0(sp)
   40828:	dec00204 	addi	sp,sp,8
   4082c:	f800283a 	ret

00040830 <main>:

int main(void)
{ 
   40830:	defffb04 	addi	sp,sp,-20
   40834:	dfc00415 	stw	ra,16(sp)
   40838:	df000315 	stw	fp,12(sp)
   4083c:	df000304 	addi	fp,sp,12

    /* 0x00-0xFF counting loop. */
    IOWR_8DIRECT(CLK_SEL,OFFSET,1);
   40840:	00c00234 	movhi	r3,8
   40844:	18c41404 	addi	r3,r3,4176
   40848:	00800044 	movi	r2,1
   4084c:	18800025 	stbio	r2,0(r3)
    IOWR_8DIRECT(NIOS_CLK_OUT,OFFSET,0);
   40850:	00800234 	movhi	r2,8
   40854:	10841004 	addi	r2,r2,4160
   40858:	10000025 	stbio	zero,0(r2)

    // loading the prog file to the instruction memory
    loadProgramme();
   4085c:	00407080 	call	40708 <loadProgramme>
    // resetting the cpu
    reset();
   40860:	00401f00 	call	401f0 <reset>
    while( 1 )
    {
        char answer;
        printf("Do you want the Auto clock?");
   40864:	01000174 	movhi	r4,5
   40868:	210d7a04 	addi	r4,r4,13800
   4086c:	0041e500 	call	41e50 <printf>
        answer = getc(stdin);
   40870:	00800174 	movhi	r2,5
   40874:	1095cf04 	addi	r2,r2,22332
   40878:	10800017 	ldw	r2,0(r2)
   4087c:	11000117 	ldw	r4,4(r2)
   40880:	00413dc0 	call	413dc <getc>
   40884:	e0bffe05 	stb	r2,-8(fp)
        if (answer == 'y') {
   40888:	e0bffe07 	ldb	r2,-8(fp)
   4088c:	10801e58 	cmpnei	r2,r2,121
   40890:	1000051e 	bne	r2,zero,408a8 <main+0x78>
            IOWR_8DIRECT(CLK_SEL,OFFSET,0);
   40894:	00800234 	movhi	r2,8
   40898:	10841404 	addi	r2,r2,4176
   4089c:	10000025 	stbio	zero,0(r2)
            while (1) {
                // printRegisters();
            	printSpike();
   408a0:	00404300 	call	40430 <printSpike>
            }
   408a4:	003ffe06 	br	408a0 <main+0x70>
        } else {
            int number_of_pulses;
            IOWR_8DIRECT(CLK_SEL,OFFSET,1);
   408a8:	00c00234 	movhi	r3,8
   408ac:	18c41404 	addi	r3,r3,4176
   408b0:	00800044 	movi	r2,1
   408b4:	18800025 	stbio	r2,0(r3)
   408b8:	00000006 	br	408bc <main+0x8c>
            while(1) {
				printf("How many clock pulses do you need to simulate (Enter 9999 to load & reset, 9998 toggle interrupt, 9997 toggle RISR): ");
   408bc:	01000174 	movhi	r4,5
   408c0:	210d8104 	addi	r4,r4,13828
   408c4:	0041e500 	call	41e50 <printf>
				int clock_pulse_count;
				scanf("%d", &clock_pulse_count);
   408c8:	e17fff04 	addi	r5,fp,-4
   408cc:	01000174 	movhi	r4,5
   408d0:	210d9f04 	addi	r4,r4,13948
   408d4:	00422600 	call	42260 <scanf>
				if (clock_pulse_count == 9999) {
   408d8:	e0bfff17 	ldw	r2,-4(fp)
   408dc:	1089c3d8 	cmpnei	r2,r2,9999
   408e0:	1000031e 	bne	r2,zero,408f0 <main+0xc0>
					// loading the prog file to the instruction memory
					loadProgramme();
   408e4:	00407080 	call	40708 <loadProgramme>
					// resetting the cpu
					reset();
   408e8:	00401f00 	call	401f0 <reset>
   408ec:	003ff306 	br	408bc <main+0x8c>
				} else if (clock_pulse_count == 9998) {
   408f0:	e0bfff17 	ldw	r2,-4(fp)
   408f4:	1089c398 	cmpnei	r2,r2,9998
   408f8:	1000021e 	bne	r2,zero,40904 <main+0xd4>
					toggleInterupt();
   408fc:	00406180 	call	40618 <toggleInterupt>
   40900:	003fee06 	br	408bc <main+0x8c>
				} else if (clock_pulse_count == 9997) {
   40904:	e0bfff17 	ldw	r2,-4(fp)
   40908:	1089c358 	cmpnei	r2,r2,9997
   4090c:	1000021e 	bne	r2,zero,40918 <main+0xe8>
					toggleRISR();
   40910:	00406600 	call	40660 <toggleRISR>
   40914:	003fe906 	br	408bc <main+0x8c>
				}
				else
					genPulseAndPrint(clock_pulse_count);
   40918:	e13fff17 	ldw	r4,-4(fp)
   4091c:	00405a40 	call	405a4 <genPulseAndPrint>
            }
   40920:	003fe606 	br	408bc <main+0x8c>

00040924 <__extendsfdf2>:
   40924:	defff904 	addi	sp,sp,-28
   40928:	d9000115 	stw	r4,4(sp)
   4092c:	d9400204 	addi	r5,sp,8
   40930:	d9000104 	addi	r4,sp,4
   40934:	dfc00615 	stw	ra,24(sp)
   40938:	00409b00 	call	409b0 <__unpack_f>
   4093c:	d9c00517 	ldw	r7,20(sp)
   40940:	0011883a 	mov	r8,zero
   40944:	400697ba 	slli	r3,r8,30
   40948:	3812d0ba 	srli	r9,r7,2
   4094c:	380497ba 	slli	r2,r7,30
   40950:	d9000217 	ldw	r4,8(sp)
   40954:	d9400317 	ldw	r5,12(sp)
   40958:	d9800417 	ldw	r6,16(sp)
   4095c:	48c6b03a 	or	r3,r9,r3
   40960:	100f883a 	mov	r7,r2
   40964:	d8c00015 	stw	r3,0(sp)
   40968:	00409780 	call	40978 <__make_dp>
   4096c:	dfc00617 	ldw	ra,24(sp)
   40970:	dec00704 	addi	sp,sp,28
   40974:	f800283a 	ret

00040978 <__make_dp>:
   40978:	defff904 	addi	sp,sp,-28
   4097c:	d8c00717 	ldw	r3,28(sp)
   40980:	d9000015 	stw	r4,0(sp)
   40984:	d809883a 	mov	r4,sp
   40988:	dfc00515 	stw	ra,20(sp)
   4098c:	d9c00615 	stw	r7,24(sp)
   40990:	d9400115 	stw	r5,4(sp)
   40994:	d9800215 	stw	r6,8(sp)
   40998:	d8c00415 	stw	r3,16(sp)
   4099c:	d9c00315 	stw	r7,12(sp)
   409a0:	0040a780 	call	40a78 <__pack_d>
   409a4:	dfc00517 	ldw	ra,20(sp)
   409a8:	dec00704 	addi	sp,sp,28
   409ac:	f800283a 	ret

000409b0 <__unpack_f>:
   409b0:	21800017 	ldw	r6,0(r4)
   409b4:	00c02034 	movhi	r3,128
   409b8:	18ffffc4 	addi	r3,r3,-1
   409bc:	3004d5fa 	srli	r2,r6,23
   409c0:	3008d7fa 	srli	r4,r6,31
   409c4:	30ce703a 	and	r7,r6,r3
   409c8:	10c03fcc 	andi	r3,r2,255
   409cc:	29000115 	stw	r4,4(r5)
   409d0:	1800131e 	bne	r3,zero,40a20 <__unpack_f+0x70>
   409d4:	38000f26 	beq	r7,zero,40a14 <__unpack_f+0x64>
   409d8:	380691fa 	slli	r3,r7,7
   409dc:	01bfe084 	movi	r6,-126
   409e0:	008000c4 	movi	r2,3
   409e4:	01100034 	movhi	r4,16384
   409e8:	213fffc4 	addi	r4,r4,-1
   409ec:	28800015 	stw	r2,0(r5)
   409f0:	29800215 	stw	r6,8(r5)
   409f4:	20c00536 	bltu	r4,r3,40a0c <__unpack_f+0x5c>
   409f8:	3005883a 	mov	r2,r6
   409fc:	18c7883a 	add	r3,r3,r3
   40a00:	10bfffc4 	addi	r2,r2,-1
   40a04:	20fffd2e 	bgeu	r4,r3,409fc <__unpack_f+0x4c>
   40a08:	28800215 	stw	r2,8(r5)
   40a0c:	28c00315 	stw	r3,12(r5)
   40a10:	f800283a 	ret
   40a14:	00800084 	movi	r2,2
   40a18:	28800015 	stw	r2,0(r5)
   40a1c:	f800283a 	ret
   40a20:	00803fc4 	movi	r2,255
   40a24:	18800826 	beq	r3,r2,40a48 <__unpack_f+0x98>
   40a28:	380491fa 	slli	r2,r7,7
   40a2c:	18ffe044 	addi	r3,r3,-127
   40a30:	28c00215 	stw	r3,8(r5)
   40a34:	10900034 	orhi	r2,r2,16384
   40a38:	28800315 	stw	r2,12(r5)
   40a3c:	008000c4 	movi	r2,3
   40a40:	28800015 	stw	r2,0(r5)
   40a44:	f800283a 	ret
   40a48:	3800031e 	bne	r7,zero,40a58 <__unpack_f+0xa8>
   40a4c:	00800104 	movi	r2,4
   40a50:	28800015 	stw	r2,0(r5)
   40a54:	f800283a 	ret
   40a58:	3080042c 	andhi	r2,r6,16
   40a5c:	10000426 	beq	r2,zero,40a70 <__unpack_f+0xc0>
   40a60:	00800044 	movi	r2,1
   40a64:	28800015 	stw	r2,0(r5)
   40a68:	29c00315 	stw	r7,12(r5)
   40a6c:	f800283a 	ret
   40a70:	28000015 	stw	zero,0(r5)
   40a74:	003ffc06 	br	40a68 <__unpack_f+0xb8>

00040a78 <__pack_d>:
   40a78:	20c00017 	ldw	r3,0(r4)
   40a7c:	defffd04 	addi	sp,sp,-12
   40a80:	dc000015 	stw	r16,0(sp)
   40a84:	dc800215 	stw	r18,8(sp)
   40a88:	dc400115 	stw	r17,4(sp)
   40a8c:	00800044 	movi	r2,1
   40a90:	22000317 	ldw	r8,12(r4)
   40a94:	001f883a 	mov	r15,zero
   40a98:	22400417 	ldw	r9,16(r4)
   40a9c:	24000117 	ldw	r16,4(r4)
   40aa0:	10c0552e 	bgeu	r2,r3,40bf8 <__pack_d+0x180>
   40aa4:	00800104 	movi	r2,4
   40aa8:	18804f26 	beq	r3,r2,40be8 <__pack_d+0x170>
   40aac:	00800084 	movi	r2,2
   40ab0:	18800226 	beq	r3,r2,40abc <__pack_d+0x44>
   40ab4:	4244b03a 	or	r2,r8,r9
   40ab8:	10001a1e 	bne	r2,zero,40b24 <__pack_d+0xac>
   40abc:	000d883a 	mov	r6,zero
   40ac0:	000f883a 	mov	r7,zero
   40ac4:	0011883a 	mov	r8,zero
   40ac8:	00800434 	movhi	r2,16
   40acc:	10bfffc4 	addi	r2,r2,-1
   40ad0:	301d883a 	mov	r14,r6
   40ad4:	3884703a 	and	r2,r7,r2
   40ad8:	400a953a 	slli	r5,r8,20
   40adc:	79bffc2c 	andhi	r6,r15,65520
   40ae0:	308cb03a 	or	r6,r6,r2
   40ae4:	00e00434 	movhi	r3,32784
   40ae8:	18ffffc4 	addi	r3,r3,-1
   40aec:	800497fa 	slli	r2,r16,31
   40af0:	30c6703a 	and	r3,r6,r3
   40af4:	1946b03a 	or	r3,r3,r5
   40af8:	01600034 	movhi	r5,32768
   40afc:	297fffc4 	addi	r5,r5,-1
   40b00:	194a703a 	and	r5,r3,r5
   40b04:	288ab03a 	or	r5,r5,r2
   40b08:	2807883a 	mov	r3,r5
   40b0c:	7005883a 	mov	r2,r14
   40b10:	dc800217 	ldw	r18,8(sp)
   40b14:	dc400117 	ldw	r17,4(sp)
   40b18:	dc000017 	ldw	r16,0(sp)
   40b1c:	dec00304 	addi	sp,sp,12
   40b20:	f800283a 	ret
   40b24:	21000217 	ldw	r4,8(r4)
   40b28:	00bf0084 	movi	r2,-1022
   40b2c:	20803f16 	blt	r4,r2,40c2c <__pack_d+0x1b4>
   40b30:	0080ffc4 	movi	r2,1023
   40b34:	11002c16 	blt	r2,r4,40be8 <__pack_d+0x170>
   40b38:	00803fc4 	movi	r2,255
   40b3c:	408c703a 	and	r6,r8,r2
   40b40:	00802004 	movi	r2,128
   40b44:	0007883a 	mov	r3,zero
   40b48:	000f883a 	mov	r7,zero
   40b4c:	2280ffc4 	addi	r10,r4,1023
   40b50:	30801e26 	beq	r6,r2,40bcc <__pack_d+0x154>
   40b54:	00801fc4 	movi	r2,127
   40b58:	4089883a 	add	r4,r8,r2
   40b5c:	220d803a 	cmpltu	r6,r4,r8
   40b60:	324d883a 	add	r6,r6,r9
   40b64:	2011883a 	mov	r8,r4
   40b68:	3013883a 	mov	r9,r6
   40b6c:	00880034 	movhi	r2,8192
   40b70:	10bfffc4 	addi	r2,r2,-1
   40b74:	12400d36 	bltu	r2,r9,40bac <__pack_d+0x134>
   40b78:	4804963a 	slli	r2,r9,24
   40b7c:	400cd23a 	srli	r6,r8,8
   40b80:	480ed23a 	srli	r7,r9,8
   40b84:	013fffc4 	movi	r4,-1
   40b88:	118cb03a 	or	r6,r2,r6
   40b8c:	01400434 	movhi	r5,16
   40b90:	297fffc4 	addi	r5,r5,-1
   40b94:	3104703a 	and	r2,r6,r4
   40b98:	3946703a 	and	r3,r7,r5
   40b9c:	5201ffcc 	andi	r8,r10,2047
   40ba0:	100d883a 	mov	r6,r2
   40ba4:	180f883a 	mov	r7,r3
   40ba8:	003fc706 	br	40ac8 <__pack_d+0x50>
   40bac:	480897fa 	slli	r4,r9,31
   40bb0:	4004d07a 	srli	r2,r8,1
   40bb4:	4806d07a 	srli	r3,r9,1
   40bb8:	52800044 	addi	r10,r10,1
   40bbc:	2084b03a 	or	r2,r4,r2
   40bc0:	1011883a 	mov	r8,r2
   40bc4:	1813883a 	mov	r9,r3
   40bc8:	003feb06 	br	40b78 <__pack_d+0x100>
   40bcc:	383fe11e 	bne	r7,zero,40b54 <__pack_d+0xdc>
   40bd0:	01004004 	movi	r4,256
   40bd4:	4104703a 	and	r2,r8,r4
   40bd8:	10c4b03a 	or	r2,r2,r3
   40bdc:	103fe326 	beq	r2,zero,40b6c <__pack_d+0xf4>
   40be0:	3005883a 	mov	r2,r6
   40be4:	003fdc06 	br	40b58 <__pack_d+0xe0>
   40be8:	000d883a 	mov	r6,zero
   40bec:	000f883a 	mov	r7,zero
   40bf0:	0201ffc4 	movi	r8,2047
   40bf4:	003fb406 	br	40ac8 <__pack_d+0x50>
   40bf8:	0005883a 	mov	r2,zero
   40bfc:	00c00234 	movhi	r3,8
   40c00:	408cb03a 	or	r6,r8,r2
   40c04:	48ceb03a 	or	r7,r9,r3
   40c08:	013fffc4 	movi	r4,-1
   40c0c:	01400434 	movhi	r5,16
   40c10:	297fffc4 	addi	r5,r5,-1
   40c14:	3104703a 	and	r2,r6,r4
   40c18:	3946703a 	and	r3,r7,r5
   40c1c:	100d883a 	mov	r6,r2
   40c20:	180f883a 	mov	r7,r3
   40c24:	0201ffc4 	movi	r8,2047
   40c28:	003fa706 	br	40ac8 <__pack_d+0x50>
   40c2c:	1109c83a 	sub	r4,r2,r4
   40c30:	00800e04 	movi	r2,56
   40c34:	11004316 	blt	r2,r4,40d44 <__pack_d+0x2cc>
   40c38:	21fff804 	addi	r7,r4,-32
   40c3c:	38004516 	blt	r7,zero,40d54 <__pack_d+0x2dc>
   40c40:	49d8d83a 	srl	r12,r9,r7
   40c44:	001b883a 	mov	r13,zero
   40c48:	0023883a 	mov	r17,zero
   40c4c:	01400044 	movi	r5,1
   40c50:	0025883a 	mov	r18,zero
   40c54:	38004716 	blt	r7,zero,40d74 <__pack_d+0x2fc>
   40c58:	29d6983a 	sll	r11,r5,r7
   40c5c:	0015883a 	mov	r10,zero
   40c60:	00bfffc4 	movi	r2,-1
   40c64:	5089883a 	add	r4,r10,r2
   40c68:	588b883a 	add	r5,r11,r2
   40c6c:	228d803a 	cmpltu	r6,r4,r10
   40c70:	314b883a 	add	r5,r6,r5
   40c74:	4104703a 	and	r2,r8,r4
   40c78:	4946703a 	and	r3,r9,r5
   40c7c:	10c4b03a 	or	r2,r2,r3
   40c80:	10000226 	beq	r2,zero,40c8c <__pack_d+0x214>
   40c84:	04400044 	movi	r17,1
   40c88:	0025883a 	mov	r18,zero
   40c8c:	00803fc4 	movi	r2,255
   40c90:	644eb03a 	or	r7,r12,r17
   40c94:	3892703a 	and	r9,r7,r2
   40c98:	00802004 	movi	r2,128
   40c9c:	6c90b03a 	or	r8,r13,r18
   40ca0:	0015883a 	mov	r10,zero
   40ca4:	48801626 	beq	r9,r2,40d00 <__pack_d+0x288>
   40ca8:	01001fc4 	movi	r4,127
   40cac:	3905883a 	add	r2,r7,r4
   40cb0:	11cd803a 	cmpltu	r6,r2,r7
   40cb4:	320d883a 	add	r6,r6,r8
   40cb8:	100f883a 	mov	r7,r2
   40cbc:	00840034 	movhi	r2,4096
   40cc0:	10bfffc4 	addi	r2,r2,-1
   40cc4:	3011883a 	mov	r8,r6
   40cc8:	0007883a 	mov	r3,zero
   40ccc:	11801b36 	bltu	r2,r6,40d3c <__pack_d+0x2c4>
   40cd0:	4004963a 	slli	r2,r8,24
   40cd4:	3808d23a 	srli	r4,r7,8
   40cd8:	400ad23a 	srli	r5,r8,8
   40cdc:	1813883a 	mov	r9,r3
   40ce0:	1108b03a 	or	r4,r2,r4
   40ce4:	00bfffc4 	movi	r2,-1
   40ce8:	00c00434 	movhi	r3,16
   40cec:	18ffffc4 	addi	r3,r3,-1
   40cf0:	208c703a 	and	r6,r4,r2
   40cf4:	28ce703a 	and	r7,r5,r3
   40cf8:	4a01ffcc 	andi	r8,r9,2047
   40cfc:	003f7206 	br	40ac8 <__pack_d+0x50>
   40d00:	503fe91e 	bne	r10,zero,40ca8 <__pack_d+0x230>
   40d04:	01004004 	movi	r4,256
   40d08:	3904703a 	and	r2,r7,r4
   40d0c:	0007883a 	mov	r3,zero
   40d10:	10c4b03a 	or	r2,r2,r3
   40d14:	10000626 	beq	r2,zero,40d30 <__pack_d+0x2b8>
   40d18:	3a45883a 	add	r2,r7,r9
   40d1c:	11cd803a 	cmpltu	r6,r2,r7
   40d20:	320d883a 	add	r6,r6,r8
   40d24:	100f883a 	mov	r7,r2
   40d28:	3011883a 	mov	r8,r6
   40d2c:	0007883a 	mov	r3,zero
   40d30:	00840034 	movhi	r2,4096
   40d34:	10bfffc4 	addi	r2,r2,-1
   40d38:	123fe52e 	bgeu	r2,r8,40cd0 <__pack_d+0x258>
   40d3c:	00c00044 	movi	r3,1
   40d40:	003fe306 	br	40cd0 <__pack_d+0x258>
   40d44:	0009883a 	mov	r4,zero
   40d48:	0013883a 	mov	r9,zero
   40d4c:	000b883a 	mov	r5,zero
   40d50:	003fe406 	br	40ce4 <__pack_d+0x26c>
   40d54:	4a47883a 	add	r3,r9,r9
   40d58:	008007c4 	movi	r2,31
   40d5c:	1105c83a 	sub	r2,r2,r4
   40d60:	1886983a 	sll	r3,r3,r2
   40d64:	4118d83a 	srl	r12,r8,r4
   40d68:	491ad83a 	srl	r13,r9,r4
   40d6c:	1b18b03a 	or	r12,r3,r12
   40d70:	003fb506 	br	40c48 <__pack_d+0x1d0>
   40d74:	2806d07a 	srli	r3,r5,1
   40d78:	008007c4 	movi	r2,31
   40d7c:	1105c83a 	sub	r2,r2,r4
   40d80:	1896d83a 	srl	r11,r3,r2
   40d84:	2914983a 	sll	r10,r5,r4
   40d88:	003fb506 	br	40c60 <__pack_d+0x1e8>

00040d8c <_fopen_r>:
   40d8c:	defffa04 	addi	sp,sp,-24
   40d90:	dcc00415 	stw	r19,16(sp)
   40d94:	2827883a 	mov	r19,r5
   40d98:	300b883a 	mov	r5,r6
   40d9c:	d80d883a 	mov	r6,sp
   40da0:	dc800315 	stw	r18,12(sp)
   40da4:	dc400215 	stw	r17,8(sp)
   40da8:	dc000115 	stw	r16,4(sp)
   40dac:	dfc00515 	stw	ra,20(sp)
   40db0:	2021883a 	mov	r16,r4
   40db4:	0047ce40 	call	47ce4 <__sflags>
   40db8:	1025883a 	mov	r18,r2
   40dbc:	8009883a 	mov	r4,r16
   40dc0:	0023883a 	mov	r17,zero
   40dc4:	1000081e 	bne	r2,zero,40de8 <_fopen_r+0x5c>
   40dc8:	8805883a 	mov	r2,r17
   40dcc:	dfc00517 	ldw	ra,20(sp)
   40dd0:	dcc00417 	ldw	r19,16(sp)
   40dd4:	dc800317 	ldw	r18,12(sp)
   40dd8:	dc400217 	ldw	r17,8(sp)
   40ddc:	dc000117 	ldw	r16,4(sp)
   40de0:	dec00604 	addi	sp,sp,24
   40de4:	f800283a 	ret
   40de8:	0047bf40 	call	47bf4 <__sfp>
   40dec:	1023883a 	mov	r17,r2
   40df0:	980b883a 	mov	r5,r19
   40df4:	8009883a 	mov	r4,r16
   40df8:	01c06d84 	movi	r7,438
   40dfc:	103ff226 	beq	r2,zero,40dc8 <_fopen_r+0x3c>
   40e00:	d9800017 	ldw	r6,0(sp)
   40e04:	0041dd80 	call	41dd8 <_open_r>
   40e08:	10001816 	blt	r2,zero,40e6c <_fopen_r+0xe0>
   40e0c:	00c00134 	movhi	r3,4
   40e10:	18c8c604 	addi	r3,r3,8984
   40e14:	923fffcc 	andi	r8,r18,65535
   40e18:	8880038d 	sth	r2,14(r17)
   40e1c:	00800134 	movhi	r2,4
   40e20:	1088e504 	addi	r2,r2,9108
   40e24:	88800815 	stw	r2,32(r17)
   40e28:	88c00915 	stw	r3,36(r17)
   40e2c:	00800134 	movhi	r2,4
   40e30:	1088ac04 	addi	r2,r2,8880
   40e34:	00c00134 	movhi	r3,4
   40e38:	18c8aa04 	addi	r3,r3,8872
   40e3c:	4200400c 	andi	r8,r8,256
   40e40:	8c80030d 	sth	r18,12(r17)
   40e44:	8009883a 	mov	r4,r16
   40e48:	880b883a 	mov	r5,r17
   40e4c:	000d883a 	mov	r6,zero
   40e50:	01c00084 	movi	r7,2
   40e54:	88800a15 	stw	r2,40(r17)
   40e58:	88c00b15 	stw	r3,44(r17)
   40e5c:	8c400715 	stw	r17,28(r17)
   40e60:	403fd926 	beq	r8,zero,40dc8 <_fopen_r+0x3c>
   40e64:	0040f080 	call	40f08 <_fseek_r>
   40e68:	003fd706 	br	40dc8 <_fopen_r+0x3c>
   40e6c:	0047a480 	call	47a48 <__sfp_lock_acquire>
   40e70:	8800030d 	sth	zero,12(r17)
   40e74:	0047a4c0 	call	47a4c <__sfp_lock_release>
   40e78:	0023883a 	mov	r17,zero
   40e7c:	003fd206 	br	40dc8 <_fopen_r+0x3c>

00040e80 <fopen>:
   40e80:	01800174 	movhi	r6,5
   40e84:	3195cf04 	addi	r6,r6,22332
   40e88:	2007883a 	mov	r3,r4
   40e8c:	31000017 	ldw	r4,0(r6)
   40e90:	280d883a 	mov	r6,r5
   40e94:	180b883a 	mov	r5,r3
   40e98:	0040d8c1 	jmpi	40d8c <_fopen_r>

00040e9c <_fscanf_r>:
   40e9c:	defffd04 	addi	sp,sp,-12
   40ea0:	dfc00115 	stw	ra,4(sp)
   40ea4:	d9c00215 	stw	r7,8(sp)
   40ea8:	d8800204 	addi	r2,sp,8
   40eac:	100f883a 	mov	r7,r2
   40eb0:	d8800015 	stw	r2,0(sp)
   40eb4:	004461c0 	call	4461c <__svfscanf_r>
   40eb8:	dfc00117 	ldw	ra,4(sp)
   40ebc:	dec00304 	addi	sp,sp,12
   40ec0:	f800283a 	ret

00040ec4 <fscanf>:
   40ec4:	defffc04 	addi	sp,sp,-16
   40ec8:	2007883a 	mov	r3,r4
   40ecc:	dfc00115 	stw	ra,4(sp)
   40ed0:	d9800215 	stw	r6,8(sp)
   40ed4:	d9c00315 	stw	r7,12(sp)
   40ed8:	01800174 	movhi	r6,5
   40edc:	3195cf04 	addi	r6,r6,22332
   40ee0:	31000017 	ldw	r4,0(r6)
   40ee4:	d8800204 	addi	r2,sp,8
   40ee8:	280d883a 	mov	r6,r5
   40eec:	100f883a 	mov	r7,r2
   40ef0:	180b883a 	mov	r5,r3
   40ef4:	d8800015 	stw	r2,0(sp)
   40ef8:	004461c0 	call	4461c <__svfscanf_r>
   40efc:	dfc00117 	ldw	ra,4(sp)
   40f00:	dec00404 	addi	sp,sp,16
   40f04:	f800283a 	ret

00040f08 <_fseek_r>:
   40f08:	deffe804 	addi	sp,sp,-96
   40f0c:	dd801515 	stw	r22,84(sp)
   40f10:	dcc01215 	stw	r19,72(sp)
   40f14:	dc801115 	stw	r18,68(sp)
   40f18:	dc000f15 	stw	r16,60(sp)
   40f1c:	dfc01715 	stw	ra,92(sp)
   40f20:	ddc01615 	stw	r23,88(sp)
   40f24:	dd401415 	stw	r21,80(sp)
   40f28:	dd001315 	stw	r20,76(sp)
   40f2c:	dc401015 	stw	r17,64(sp)
   40f30:	2025883a 	mov	r18,r4
   40f34:	2821883a 	mov	r16,r5
   40f38:	302d883a 	mov	r22,r6
   40f3c:	3827883a 	mov	r19,r7
   40f40:	20000226 	beq	r4,zero,40f4c <_fseek_r+0x44>
   40f44:	20800e17 	ldw	r2,56(r4)
   40f48:	10007826 	beq	r2,zero,4112c <_fseek_r+0x224>
   40f4c:	8080030b 	ldhu	r2,12(r16)
   40f50:	00c04204 	movi	r3,264
   40f54:	1080420c 	andi	r2,r2,264
   40f58:	10c07926 	beq	r2,r3,41140 <_fseek_r+0x238>
   40f5c:	85400a17 	ldw	r21,40(r16)
   40f60:	a800ea26 	beq	r21,zero,4130c <_fseek_r+0x404>
   40f64:	00800044 	movi	r2,1
   40f68:	98805f26 	beq	r19,r2,410e8 <_fseek_r+0x1e0>
   40f6c:	00800084 	movi	r2,2
   40f70:	98801026 	beq	r19,r2,40fb4 <_fseek_r+0xac>
   40f74:	98000f26 	beq	r19,zero,40fb4 <_fseek_r+0xac>
   40f78:	00800584 	movi	r2,22
   40f7c:	013fffc4 	movi	r4,-1
   40f80:	90800015 	stw	r2,0(r18)
   40f84:	2005883a 	mov	r2,r4
   40f88:	dfc01717 	ldw	ra,92(sp)
   40f8c:	ddc01617 	ldw	r23,88(sp)
   40f90:	dd801517 	ldw	r22,84(sp)
   40f94:	dd401417 	ldw	r21,80(sp)
   40f98:	dd001317 	ldw	r20,76(sp)
   40f9c:	dcc01217 	ldw	r19,72(sp)
   40fa0:	dc801117 	ldw	r18,68(sp)
   40fa4:	dc401017 	ldw	r17,64(sp)
   40fa8:	dc000f17 	ldw	r16,60(sp)
   40fac:	dec01804 	addi	sp,sp,96
   40fb0:	f800283a 	ret
   40fb4:	81800417 	ldw	r6,16(r16)
   40fb8:	0023883a 	mov	r17,zero
   40fbc:	002f883a 	mov	r23,zero
   40fc0:	3000a626 	beq	r6,zero,4125c <_fseek_r+0x354>
   40fc4:	8100030b 	ldhu	r4,12(r16)
   40fc8:	2082068c 	andi	r2,r4,2074
   40fcc:	1000081e 	bne	r2,zero,40ff0 <_fseek_r+0xe8>
   40fd0:	2081000c 	andi	r2,r4,1024
   40fd4:	10001b1e 	bne	r2,zero,41044 <_fseek_r+0x13c>
   40fd8:	00800134 	movhi	r2,4
   40fdc:	1088ac04 	addi	r2,r2,8880
   40fe0:	a8800926 	beq	r21,r2,41008 <_fseek_r+0x100>
   40fe4:	8080030b 	ldhu	r2,12(r16)
   40fe8:	10820014 	ori	r2,r2,2048
   40fec:	8080030d 	sth	r2,12(r16)
   40ff0:	9009883a 	mov	r4,r18
   40ff4:	800b883a 	mov	r5,r16
   40ff8:	00477c00 	call	477c0 <_fflush_r>
   40ffc:	1000a326 	beq	r2,zero,4128c <_fseek_r+0x384>
   41000:	013fffc4 	movi	r4,-1
   41004:	003fdf06 	br	40f84 <_fseek_r+0x7c>
   41008:	8140038f 	ldh	r5,14(r16)
   4100c:	283ff516 	blt	r5,zero,40fe4 <_fseek_r+0xdc>
   41010:	9009883a 	mov	r4,r18
   41014:	d80d883a 	mov	r6,sp
   41018:	00413680 	call	41368 <_fstat_r>
   4101c:	103ff11e 	bne	r2,zero,40fe4 <_fseek_r+0xdc>
   41020:	d8800117 	ldw	r2,4(sp)
   41024:	00e00014 	movui	r3,32768
   41028:	10bc000c 	andi	r2,r2,61440
   4102c:	10ffed1e 	bne	r2,r3,40fe4 <_fseek_r+0xdc>
   41030:	80c0030b 	ldhu	r3,12(r16)
   41034:	00810004 	movi	r2,1024
   41038:	80801315 	stw	r2,76(r16)
   4103c:	1886b03a 	or	r3,r3,r2
   41040:	80c0030d 	sth	r3,12(r16)
   41044:	9800701e 	bne	r19,zero,41208 <_fseek_r+0x300>
   41048:	b029883a 	mov	r20,r22
   4104c:	b804c03a 	cmpne	r2,r23,zero
   41050:	10003f1e 	bne	r2,zero,41150 <_fseek_r+0x248>
   41054:	8100030b 	ldhu	r4,12(r16)
   41058:	2084000c 	andi	r2,r4,4096
   4105c:	1000a126 	beq	r2,zero,412e4 <_fseek_r+0x3dc>
   41060:	81801417 	ldw	r6,80(r16)
   41064:	80c00117 	ldw	r3,4(r16)
   41068:	81400c17 	ldw	r5,48(r16)
   4106c:	30e3c83a 	sub	r17,r6,r3
   41070:	28008026 	beq	r5,zero,41274 <_fseek_r+0x36c>
   41074:	81c00f17 	ldw	r7,60(r16)
   41078:	89e3c83a 	sub	r17,r17,r7
   4107c:	80800e17 	ldw	r2,56(r16)
   41080:	81800417 	ldw	r6,16(r16)
   41084:	88c7883a 	add	r3,r17,r3
   41088:	1185c83a 	sub	r2,r2,r6
   4108c:	11cf883a 	add	r7,r2,r7
   41090:	1887c83a 	sub	r3,r3,r2
   41094:	2088000c 	andi	r2,r4,8192
   41098:	10003e1e 	bne	r2,zero,41194 <_fseek_r+0x28c>
   4109c:	a0c03d16 	blt	r20,r3,41194 <_fseek_r+0x28c>
   410a0:	38c5883a 	add	r2,r7,r3
   410a4:	a0803b2e 	bgeu	r20,r2,41194 <_fseek_r+0x28c>
   410a8:	a0c5c83a 	sub	r2,r20,r3
   410ac:	3887c83a 	sub	r3,r7,r2
   410b0:	3085883a 	add	r2,r6,r2
   410b4:	80800015 	stw	r2,0(r16)
   410b8:	80c00115 	stw	r3,4(r16)
   410bc:	28000526 	beq	r5,zero,410d4 <_fseek_r+0x1cc>
   410c0:	80801004 	addi	r2,r16,64
   410c4:	28800226 	beq	r5,r2,410d0 <_fseek_r+0x1c8>
   410c8:	9009883a 	mov	r4,r18
   410cc:	00480fc0 	call	480fc <_free_r>
   410d0:	80000c15 	stw	zero,48(r16)
   410d4:	8080030b 	ldhu	r2,12(r16)
   410d8:	0009883a 	mov	r4,zero
   410dc:	10bff7cc 	andi	r2,r2,65503
   410e0:	8080030d 	sth	r2,12(r16)
   410e4:	003fa706 	br	40f84 <_fseek_r+0x7c>
   410e8:	9009883a 	mov	r4,r18
   410ec:	800b883a 	mov	r5,r16
   410f0:	00477c00 	call	477c0 <_fflush_r>
   410f4:	8100030b 	ldhu	r4,12(r16)
   410f8:	2084000c 	andi	r2,r4,4096
   410fc:	10008726 	beq	r2,zero,4131c <_fseek_r+0x414>
   41100:	84401417 	ldw	r17,80(r16)
   41104:	2080010c 	andi	r2,r4,4
   41108:	1000171e 	bne	r2,zero,41168 <_fseek_r+0x260>
   4110c:	2080020c 	andi	r2,r4,8
   41110:	10003b26 	beq	r2,zero,41200 <_fseek_r+0x2f8>
   41114:	80800017 	ldw	r2,0(r16)
   41118:	10003926 	beq	r2,zero,41200 <_fseek_r+0x2f8>
   4111c:	81800417 	ldw	r6,16(r16)
   41120:	1185c83a 	sub	r2,r2,r6
   41124:	88a3883a 	add	r17,r17,r2
   41128:	00001606 	br	41184 <_fseek_r+0x27c>
   4112c:	0047a580 	call	47a58 <__sinit>
   41130:	8080030b 	ldhu	r2,12(r16)
   41134:	00c04204 	movi	r3,264
   41138:	1080420c 	andi	r2,r2,264
   4113c:	10ff871e 	bne	r2,r3,40f5c <_fseek_r+0x54>
   41140:	9009883a 	mov	r4,r18
   41144:	800b883a 	mov	r5,r16
   41148:	00477c00 	call	477c0 <_fflush_r>
   4114c:	003f8306 	br	40f5c <_fseek_r+0x54>
   41150:	81400c17 	ldw	r5,48(r16)
   41154:	28004526 	beq	r5,zero,4126c <_fseek_r+0x364>
   41158:	8100030b 	ldhu	r4,12(r16)
   4115c:	80c00117 	ldw	r3,4(r16)
   41160:	81c00f17 	ldw	r7,60(r16)
   41164:	003fc506 	br	4107c <_fseek_r+0x174>
   41168:	80c00117 	ldw	r3,4(r16)
   4116c:	80800c17 	ldw	r2,48(r16)
   41170:	88e3c83a 	sub	r17,r17,r3
   41174:	10002226 	beq	r2,zero,41200 <_fseek_r+0x2f8>
   41178:	81c00f17 	ldw	r7,60(r16)
   4117c:	81800417 	ldw	r6,16(r16)
   41180:	89e3c83a 	sub	r17,r17,r7
   41184:	b46d883a 	add	r22,r22,r17
   41188:	0027883a 	mov	r19,zero
   4118c:	05c00044 	movi	r23,1
   41190:	003f8b06 	br	40fc0 <_fseek_r+0xb8>
   41194:	80801317 	ldw	r2,76(r16)
   41198:	81400717 	ldw	r5,28(r16)
   4119c:	9009883a 	mov	r4,r18
   411a0:	0085c83a 	sub	r2,zero,r2
   411a4:	a0a2703a 	and	r17,r20,r2
   411a8:	880d883a 	mov	r6,r17
   411ac:	000f883a 	mov	r7,zero
   411b0:	a83ee83a 	callr	r21
   411b4:	00ffffc4 	movi	r3,-1
   411b8:	10ff8d26 	beq	r2,r3,40ff0 <_fseek_r+0xe8>
   411bc:	80800417 	ldw	r2,16(r16)
   411c0:	81400c17 	ldw	r5,48(r16)
   411c4:	80000115 	stw	zero,4(r16)
   411c8:	80800015 	stw	r2,0(r16)
   411cc:	28000526 	beq	r5,zero,411e4 <_fseek_r+0x2dc>
   411d0:	80801004 	addi	r2,r16,64
   411d4:	28800226 	beq	r5,r2,411e0 <_fseek_r+0x2d8>
   411d8:	9009883a 	mov	r4,r18
   411dc:	00480fc0 	call	480fc <_free_r>
   411e0:	80000c15 	stw	zero,48(r16)
   411e4:	8080030b 	ldhu	r2,12(r16)
   411e8:	a463c83a 	sub	r17,r20,r17
   411ec:	10bff7cc 	andi	r2,r2,65503
   411f0:	8080030d 	sth	r2,12(r16)
   411f4:	88000c1e 	bne	r17,zero,41228 <_fseek_r+0x320>
   411f8:	0009883a 	mov	r4,zero
   411fc:	003f6106 	br	40f84 <_fseek_r+0x7c>
   41200:	81800417 	ldw	r6,16(r16)
   41204:	003fdf06 	br	41184 <_fseek_r+0x27c>
   41208:	8140038f 	ldh	r5,14(r16)
   4120c:	9009883a 	mov	r4,r18
   41210:	d80d883a 	mov	r6,sp
   41214:	00413680 	call	41368 <_fstat_r>
   41218:	103f751e 	bne	r2,zero,40ff0 <_fseek_r+0xe8>
   4121c:	d8800417 	ldw	r2,16(sp)
   41220:	b0a9883a 	add	r20,r22,r2
   41224:	003f8906 	br	4104c <_fseek_r+0x144>
   41228:	9009883a 	mov	r4,r18
   4122c:	800b883a 	mov	r5,r16
   41230:	0041f7c0 	call	41f7c <__srefill_r>
   41234:	103f6e1e 	bne	r2,zero,40ff0 <_fseek_r+0xe8>
   41238:	80c00117 	ldw	r3,4(r16)
   4123c:	1c7f6c36 	bltu	r3,r17,40ff0 <_fseek_r+0xe8>
   41240:	80800017 	ldw	r2,0(r16)
   41244:	1c47c83a 	sub	r3,r3,r17
   41248:	0009883a 	mov	r4,zero
   4124c:	1445883a 	add	r2,r2,r17
   41250:	80c00115 	stw	r3,4(r16)
   41254:	80800015 	stw	r2,0(r16)
   41258:	003f4a06 	br	40f84 <_fseek_r+0x7c>
   4125c:	9009883a 	mov	r4,r18
   41260:	800b883a 	mov	r5,r16
   41264:	00415040 	call	41504 <__smakebuf_r>
   41268:	003f5606 	br	40fc4 <_fseek_r+0xbc>
   4126c:	8100030b 	ldhu	r4,12(r16)
   41270:	80c00117 	ldw	r3,4(r16)
   41274:	80800017 	ldw	r2,0(r16)
   41278:	81800417 	ldw	r6,16(r16)
   4127c:	1185c83a 	sub	r2,r2,r6
   41280:	10cf883a 	add	r7,r2,r3
   41284:	8887c83a 	sub	r3,r17,r2
   41288:	003f8206 	br	41094 <_fseek_r+0x18c>
   4128c:	81400717 	ldw	r5,28(r16)
   41290:	b00d883a 	mov	r6,r22
   41294:	980f883a 	mov	r7,r19
   41298:	9009883a 	mov	r4,r18
   4129c:	a83ee83a 	callr	r21
   412a0:	00ffffc4 	movi	r3,-1
   412a4:	10ff5626 	beq	r2,r3,41000 <_fseek_r+0xf8>
   412a8:	81400c17 	ldw	r5,48(r16)
   412ac:	28000526 	beq	r5,zero,412c4 <_fseek_r+0x3bc>
   412b0:	80801004 	addi	r2,r16,64
   412b4:	28800226 	beq	r5,r2,412c0 <_fseek_r+0x3b8>
   412b8:	9009883a 	mov	r4,r18
   412bc:	00480fc0 	call	480fc <_free_r>
   412c0:	80000c15 	stw	zero,48(r16)
   412c4:	8080030b 	ldhu	r2,12(r16)
   412c8:	80c00417 	ldw	r3,16(r16)
   412cc:	0009883a 	mov	r4,zero
   412d0:	10bdf7cc 	andi	r2,r2,63455
   412d4:	8080030d 	sth	r2,12(r16)
   412d8:	80c00015 	stw	r3,0(r16)
   412dc:	80000115 	stw	zero,4(r16)
   412e0:	003f2806 	br	40f84 <_fseek_r+0x7c>
   412e4:	81400717 	ldw	r5,28(r16)
   412e8:	000d883a 	mov	r6,zero
   412ec:	9009883a 	mov	r4,r18
   412f0:	01c00044 	movi	r7,1
   412f4:	a83ee83a 	callr	r21
   412f8:	100d883a 	mov	r6,r2
   412fc:	00bfffc4 	movi	r2,-1
   41300:	30bf3b26 	beq	r6,r2,40ff0 <_fseek_r+0xe8>
   41304:	8100030b 	ldhu	r4,12(r16)
   41308:	003f5606 	br	41064 <_fseek_r+0x15c>
   4130c:	00800744 	movi	r2,29
   41310:	013fffc4 	movi	r4,-1
   41314:	90800015 	stw	r2,0(r18)
   41318:	003f1a06 	br	40f84 <_fseek_r+0x7c>
   4131c:	81400717 	ldw	r5,28(r16)
   41320:	980f883a 	mov	r7,r19
   41324:	9009883a 	mov	r4,r18
   41328:	000d883a 	mov	r6,zero
   4132c:	a83ee83a 	callr	r21
   41330:	1023883a 	mov	r17,r2
   41334:	00bfffc4 	movi	r2,-1
   41338:	88bf3126 	beq	r17,r2,41000 <_fseek_r+0xf8>
   4133c:	8100030b 	ldhu	r4,12(r16)
   41340:	003f7006 	br	41104 <_fseek_r+0x1fc>

00041344 <fseek>:
   41344:	00800174 	movhi	r2,5
   41348:	1095cf04 	addi	r2,r2,22332
   4134c:	2013883a 	mov	r9,r4
   41350:	11000017 	ldw	r4,0(r2)
   41354:	2805883a 	mov	r2,r5
   41358:	300f883a 	mov	r7,r6
   4135c:	480b883a 	mov	r5,r9
   41360:	100d883a 	mov	r6,r2
   41364:	0040f081 	jmpi	40f08 <_fseek_r>

00041368 <_fstat_r>:
   41368:	defffd04 	addi	sp,sp,-12
   4136c:	dc000015 	stw	r16,0(sp)
   41370:	04000174 	movhi	r16,5
   41374:	841cb304 	addi	r16,r16,29388
   41378:	dc400115 	stw	r17,4(sp)
   4137c:	80000015 	stw	zero,0(r16)
   41380:	2023883a 	mov	r17,r4
   41384:	2809883a 	mov	r4,r5
   41388:	300b883a 	mov	r5,r6
   4138c:	dfc00215 	stw	ra,8(sp)
   41390:	00503b40 	call	503b4 <fstat>
   41394:	1007883a 	mov	r3,r2
   41398:	00bfffc4 	movi	r2,-1
   4139c:	18800626 	beq	r3,r2,413b8 <_fstat_r+0x50>
   413a0:	1805883a 	mov	r2,r3
   413a4:	dfc00217 	ldw	ra,8(sp)
   413a8:	dc400117 	ldw	r17,4(sp)
   413ac:	dc000017 	ldw	r16,0(sp)
   413b0:	dec00304 	addi	sp,sp,12
   413b4:	f800283a 	ret
   413b8:	80800017 	ldw	r2,0(r16)
   413bc:	103ff826 	beq	r2,zero,413a0 <_fstat_r+0x38>
   413c0:	88800015 	stw	r2,0(r17)
   413c4:	1805883a 	mov	r2,r3
   413c8:	dfc00217 	ldw	ra,8(sp)
   413cc:	dc400117 	ldw	r17,4(sp)
   413d0:	dc000017 	ldw	r16,0(sp)
   413d4:	dec00304 	addi	sp,sp,12
   413d8:	f800283a 	ret

000413dc <getc>:
   413dc:	defffd04 	addi	sp,sp,-12
   413e0:	dc400115 	stw	r17,4(sp)
   413e4:	04400174 	movhi	r17,5
   413e8:	8c55cf04 	addi	r17,r17,22332
   413ec:	88c00017 	ldw	r3,0(r17)
   413f0:	dc000015 	stw	r16,0(sp)
   413f4:	dfc00215 	stw	ra,8(sp)
   413f8:	2021883a 	mov	r16,r4
   413fc:	18000326 	beq	r3,zero,4140c <getc+0x30>
   41400:	18800e17 	ldw	r2,56(r3)
   41404:	1809883a 	mov	r4,r3
   41408:	10000e26 	beq	r2,zero,41444 <getc+0x68>
   4140c:	80800117 	ldw	r2,4(r16)
   41410:	800b883a 	mov	r5,r16
   41414:	10bfffc4 	addi	r2,r2,-1
   41418:	80800115 	stw	r2,4(r16)
   4141c:	10000f16 	blt	r2,zero,4145c <getc+0x80>
   41420:	80c00017 	ldw	r3,0(r16)
   41424:	18800003 	ldbu	r2,0(r3)
   41428:	18c00044 	addi	r3,r3,1
   4142c:	80c00015 	stw	r3,0(r16)
   41430:	dfc00217 	ldw	ra,8(sp)
   41434:	dc400117 	ldw	r17,4(sp)
   41438:	dc000017 	ldw	r16,0(sp)
   4143c:	dec00304 	addi	sp,sp,12
   41440:	f800283a 	ret
   41444:	0047a580 	call	47a58 <__sinit>
   41448:	80800117 	ldw	r2,4(r16)
   4144c:	800b883a 	mov	r5,r16
   41450:	10bfffc4 	addi	r2,r2,-1
   41454:	80800115 	stw	r2,4(r16)
   41458:	103ff10e 	bge	r2,zero,41420 <getc+0x44>
   4145c:	89000017 	ldw	r4,0(r17)
   41460:	dfc00217 	ldw	ra,8(sp)
   41464:	dc400117 	ldw	r17,4(sp)
   41468:	dc000017 	ldw	r16,0(sp)
   4146c:	dec00304 	addi	sp,sp,12
   41470:	004215c1 	jmpi	4215c <__srget_r>

00041474 <_getc_r>:
   41474:	defffd04 	addi	sp,sp,-12
   41478:	dc400115 	stw	r17,4(sp)
   4147c:	dc000015 	stw	r16,0(sp)
   41480:	dfc00215 	stw	ra,8(sp)
   41484:	2021883a 	mov	r16,r4
   41488:	2823883a 	mov	r17,r5
   4148c:	20000226 	beq	r4,zero,41498 <_getc_r+0x24>
   41490:	20800e17 	ldw	r2,56(r4)
   41494:	10000f26 	beq	r2,zero,414d4 <_getc_r+0x60>
   41498:	88800117 	ldw	r2,4(r17)
   4149c:	8009883a 	mov	r4,r16
   414a0:	880b883a 	mov	r5,r17
   414a4:	10bfffc4 	addi	r2,r2,-1
   414a8:	88800115 	stw	r2,4(r17)
   414ac:	10001016 	blt	r2,zero,414f0 <_getc_r+0x7c>
   414b0:	88c00017 	ldw	r3,0(r17)
   414b4:	18800003 	ldbu	r2,0(r3)
   414b8:	18c00044 	addi	r3,r3,1
   414bc:	88c00015 	stw	r3,0(r17)
   414c0:	dfc00217 	ldw	ra,8(sp)
   414c4:	dc400117 	ldw	r17,4(sp)
   414c8:	dc000017 	ldw	r16,0(sp)
   414cc:	dec00304 	addi	sp,sp,12
   414d0:	f800283a 	ret
   414d4:	0047a580 	call	47a58 <__sinit>
   414d8:	88800117 	ldw	r2,4(r17)
   414dc:	8009883a 	mov	r4,r16
   414e0:	880b883a 	mov	r5,r17
   414e4:	10bfffc4 	addi	r2,r2,-1
   414e8:	88800115 	stw	r2,4(r17)
   414ec:	103ff00e 	bge	r2,zero,414b0 <_getc_r+0x3c>
   414f0:	dfc00217 	ldw	ra,8(sp)
   414f4:	dc400117 	ldw	r17,4(sp)
   414f8:	dc000017 	ldw	r16,0(sp)
   414fc:	dec00304 	addi	sp,sp,12
   41500:	004215c1 	jmpi	4215c <__srget_r>

00041504 <__smakebuf_r>:
   41504:	2880030b 	ldhu	r2,12(r5)
   41508:	deffed04 	addi	sp,sp,-76
   4150c:	dc401015 	stw	r17,64(sp)
   41510:	1080008c 	andi	r2,r2,2
   41514:	dc000f15 	stw	r16,60(sp)
   41518:	dfc01215 	stw	ra,72(sp)
   4151c:	dc801115 	stw	r18,68(sp)
   41520:	2821883a 	mov	r16,r5
   41524:	2023883a 	mov	r17,r4
   41528:	10000b26 	beq	r2,zero,41558 <__smakebuf_r+0x54>
   4152c:	28c010c4 	addi	r3,r5,67
   41530:	00800044 	movi	r2,1
   41534:	28800515 	stw	r2,20(r5)
   41538:	28c00415 	stw	r3,16(r5)
   4153c:	28c00015 	stw	r3,0(r5)
   41540:	dfc01217 	ldw	ra,72(sp)
   41544:	dc801117 	ldw	r18,68(sp)
   41548:	dc401017 	ldw	r17,64(sp)
   4154c:	dc000f17 	ldw	r16,60(sp)
   41550:	dec01304 	addi	sp,sp,76
   41554:	f800283a 	ret
   41558:	2940038f 	ldh	r5,14(r5)
   4155c:	28002116 	blt	r5,zero,415e4 <__smakebuf_r+0xe0>
   41560:	d80d883a 	mov	r6,sp
   41564:	00413680 	call	41368 <_fstat_r>
   41568:	10001e16 	blt	r2,zero,415e4 <__smakebuf_r+0xe0>
   4156c:	d8800117 	ldw	r2,4(sp)
   41570:	00e00014 	movui	r3,32768
   41574:	113c000c 	andi	r4,r2,61440
   41578:	20c03126 	beq	r4,r3,41640 <__smakebuf_r+0x13c>
   4157c:	8080030b 	ldhu	r2,12(r16)
   41580:	00c80004 	movi	r3,8192
   41584:	10820014 	ori	r2,r2,2048
   41588:	8080030d 	sth	r2,12(r16)
   4158c:	20c01e26 	beq	r4,r3,41608 <__smakebuf_r+0x104>
   41590:	04810004 	movi	r18,1024
   41594:	8809883a 	mov	r4,r17
   41598:	900b883a 	mov	r5,r18
   4159c:	00416980 	call	41698 <_malloc_r>
   415a0:	1009883a 	mov	r4,r2
   415a4:	10003126 	beq	r2,zero,4166c <__smakebuf_r+0x168>
   415a8:	80c0030b 	ldhu	r3,12(r16)
   415ac:	00800134 	movhi	r2,4
   415b0:	109ecf04 	addi	r2,r2,31548
   415b4:	88800f15 	stw	r2,60(r17)
   415b8:	18c02014 	ori	r3,r3,128
   415bc:	84800515 	stw	r18,20(r16)
   415c0:	80c0030d 	sth	r3,12(r16)
   415c4:	81000415 	stw	r4,16(r16)
   415c8:	81000015 	stw	r4,0(r16)
   415cc:	dfc01217 	ldw	ra,72(sp)
   415d0:	dc801117 	ldw	r18,68(sp)
   415d4:	dc401017 	ldw	r17,64(sp)
   415d8:	dc000f17 	ldw	r16,60(sp)
   415dc:	dec01304 	addi	sp,sp,76
   415e0:	f800283a 	ret
   415e4:	80c0030b 	ldhu	r3,12(r16)
   415e8:	1880200c 	andi	r2,r3,128
   415ec:	10000426 	beq	r2,zero,41600 <__smakebuf_r+0xfc>
   415f0:	04801004 	movi	r18,64
   415f4:	18820014 	ori	r2,r3,2048
   415f8:	8080030d 	sth	r2,12(r16)
   415fc:	003fe506 	br	41594 <__smakebuf_r+0x90>
   41600:	04810004 	movi	r18,1024
   41604:	003ffb06 	br	415f4 <__smakebuf_r+0xf0>
   41608:	8140038f 	ldh	r5,14(r16)
   4160c:	8809883a 	mov	r4,r17
   41610:	0048a2c0 	call	48a2c <_isatty_r>
   41614:	103fde26 	beq	r2,zero,41590 <__smakebuf_r+0x8c>
   41618:	8080030b 	ldhu	r2,12(r16)
   4161c:	80c010c4 	addi	r3,r16,67
   41620:	04810004 	movi	r18,1024
   41624:	10800054 	ori	r2,r2,1
   41628:	8080030d 	sth	r2,12(r16)
   4162c:	00800044 	movi	r2,1
   41630:	80c00415 	stw	r3,16(r16)
   41634:	80800515 	stw	r2,20(r16)
   41638:	80c00015 	stw	r3,0(r16)
   4163c:	003fd506 	br	41594 <__smakebuf_r+0x90>
   41640:	80c00a17 	ldw	r3,40(r16)
   41644:	00800134 	movhi	r2,4
   41648:	1088ac04 	addi	r2,r2,8880
   4164c:	18bfcb1e 	bne	r3,r2,4157c <__smakebuf_r+0x78>
   41650:	8080030b 	ldhu	r2,12(r16)
   41654:	00c10004 	movi	r3,1024
   41658:	1825883a 	mov	r18,r3
   4165c:	10c4b03a 	or	r2,r2,r3
   41660:	8080030d 	sth	r2,12(r16)
   41664:	80c01315 	stw	r3,76(r16)
   41668:	003fca06 	br	41594 <__smakebuf_r+0x90>
   4166c:	8100030b 	ldhu	r4,12(r16)
   41670:	2080800c 	andi	r2,r4,512
   41674:	103fb21e 	bne	r2,zero,41540 <__smakebuf_r+0x3c>
   41678:	80c010c4 	addi	r3,r16,67
   4167c:	21000094 	ori	r4,r4,2
   41680:	00800044 	movi	r2,1
   41684:	80800515 	stw	r2,20(r16)
   41688:	8100030d 	sth	r4,12(r16)
   4168c:	80c00415 	stw	r3,16(r16)
   41690:	80c00015 	stw	r3,0(r16)
   41694:	003faa06 	br	41540 <__smakebuf_r+0x3c>

00041698 <_malloc_r>:
   41698:	defff604 	addi	sp,sp,-40
   4169c:	28c002c4 	addi	r3,r5,11
   416a0:	00800584 	movi	r2,22
   416a4:	dc800215 	stw	r18,8(sp)
   416a8:	dfc00915 	stw	ra,36(sp)
   416ac:	df000815 	stw	fp,32(sp)
   416b0:	ddc00715 	stw	r23,28(sp)
   416b4:	dd800615 	stw	r22,24(sp)
   416b8:	dd400515 	stw	r21,20(sp)
   416bc:	dd000415 	stw	r20,16(sp)
   416c0:	dcc00315 	stw	r19,12(sp)
   416c4:	dc400115 	stw	r17,4(sp)
   416c8:	dc000015 	stw	r16,0(sp)
   416cc:	2025883a 	mov	r18,r4
   416d0:	10c01236 	bltu	r2,r3,4171c <_malloc_r+0x84>
   416d4:	04400404 	movi	r17,16
   416d8:	8940142e 	bgeu	r17,r5,4172c <_malloc_r+0x94>
   416dc:	00800304 	movi	r2,12
   416e0:	0007883a 	mov	r3,zero
   416e4:	90800015 	stw	r2,0(r18)
   416e8:	1805883a 	mov	r2,r3
   416ec:	dfc00917 	ldw	ra,36(sp)
   416f0:	df000817 	ldw	fp,32(sp)
   416f4:	ddc00717 	ldw	r23,28(sp)
   416f8:	dd800617 	ldw	r22,24(sp)
   416fc:	dd400517 	ldw	r21,20(sp)
   41700:	dd000417 	ldw	r20,16(sp)
   41704:	dcc00317 	ldw	r19,12(sp)
   41708:	dc800217 	ldw	r18,8(sp)
   4170c:	dc400117 	ldw	r17,4(sp)
   41710:	dc000017 	ldw	r16,0(sp)
   41714:	dec00a04 	addi	sp,sp,40
   41718:	f800283a 	ret
   4171c:	00bffe04 	movi	r2,-8
   41720:	18a2703a 	and	r17,r3,r2
   41724:	883fed16 	blt	r17,zero,416dc <_malloc_r+0x44>
   41728:	897fec36 	bltu	r17,r5,416dc <_malloc_r+0x44>
   4172c:	9009883a 	mov	r4,r18
   41730:	00508bc0 	call	508bc <__malloc_lock>
   41734:	00807dc4 	movi	r2,503
   41738:	14402b2e 	bgeu	r2,r17,417e8 <_malloc_r+0x150>
   4173c:	8806d27a 	srli	r3,r17,9
   41740:	18003f1e 	bne	r3,zero,41840 <_malloc_r+0x1a8>
   41744:	880cd0fa 	srli	r6,r17,3
   41748:	300490fa 	slli	r2,r6,3
   4174c:	02c00174 	movhi	r11,5
   41750:	5ad03404 	addi	r11,r11,16592
   41754:	12cb883a 	add	r5,r2,r11
   41758:	2c000317 	ldw	r16,12(r5)
   4175c:	580f883a 	mov	r7,r11
   41760:	2c00041e 	bne	r5,r16,41774 <_malloc_r+0xdc>
   41764:	00000a06 	br	41790 <_malloc_r+0xf8>
   41768:	1800860e 	bge	r3,zero,41984 <_malloc_r+0x2ec>
   4176c:	84000317 	ldw	r16,12(r16)
   41770:	2c000726 	beq	r5,r16,41790 <_malloc_r+0xf8>
   41774:	80800117 	ldw	r2,4(r16)
   41778:	00ffff04 	movi	r3,-4
   4177c:	10c8703a 	and	r4,r2,r3
   41780:	2447c83a 	sub	r3,r4,r17
   41784:	008003c4 	movi	r2,15
   41788:	10fff70e 	bge	r2,r3,41768 <_malloc_r+0xd0>
   4178c:	31bfffc4 	addi	r6,r6,-1
   41790:	32400044 	addi	r9,r6,1
   41794:	02800174 	movhi	r10,5
   41798:	52903604 	addi	r10,r10,16600
   4179c:	54000217 	ldw	r16,8(r10)
   417a0:	8280a026 	beq	r16,r10,41a24 <_malloc_r+0x38c>
   417a4:	80800117 	ldw	r2,4(r16)
   417a8:	00ffff04 	movi	r3,-4
   417ac:	10ca703a 	and	r5,r2,r3
   417b0:	2c4dc83a 	sub	r6,r5,r17
   417b4:	008003c4 	movi	r2,15
   417b8:	11808316 	blt	r2,r6,419c8 <_malloc_r+0x330>
   417bc:	52800315 	stw	r10,12(r10)
   417c0:	52800215 	stw	r10,8(r10)
   417c4:	30002916 	blt	r6,zero,4186c <_malloc_r+0x1d4>
   417c8:	8147883a 	add	r3,r16,r5
   417cc:	18800117 	ldw	r2,4(r3)
   417d0:	9009883a 	mov	r4,r18
   417d4:	10800054 	ori	r2,r2,1
   417d8:	18800115 	stw	r2,4(r3)
   417dc:	00508dc0 	call	508dc <__malloc_unlock>
   417e0:	80c00204 	addi	r3,r16,8
   417e4:	003fc006 	br	416e8 <_malloc_r+0x50>
   417e8:	02c00174 	movhi	r11,5
   417ec:	5ad03404 	addi	r11,r11,16592
   417f0:	8ac5883a 	add	r2,r17,r11
   417f4:	14000317 	ldw	r16,12(r2)
   417f8:	580f883a 	mov	r7,r11
   417fc:	8806d0fa 	srli	r3,r17,3
   41800:	14006c26 	beq	r2,r16,419b4 <_malloc_r+0x31c>
   41804:	80c00117 	ldw	r3,4(r16)
   41808:	00bfff04 	movi	r2,-4
   4180c:	81800317 	ldw	r6,12(r16)
   41810:	1886703a 	and	r3,r3,r2
   41814:	80c7883a 	add	r3,r16,r3
   41818:	18800117 	ldw	r2,4(r3)
   4181c:	81400217 	ldw	r5,8(r16)
   41820:	9009883a 	mov	r4,r18
   41824:	10800054 	ori	r2,r2,1
   41828:	18800115 	stw	r2,4(r3)
   4182c:	31400215 	stw	r5,8(r6)
   41830:	29800315 	stw	r6,12(r5)
   41834:	00508dc0 	call	508dc <__malloc_unlock>
   41838:	80c00204 	addi	r3,r16,8
   4183c:	003faa06 	br	416e8 <_malloc_r+0x50>
   41840:	00800104 	movi	r2,4
   41844:	10c0052e 	bgeu	r2,r3,4185c <_malloc_r+0x1c4>
   41848:	00800504 	movi	r2,20
   4184c:	10c07836 	bltu	r2,r3,41a30 <_malloc_r+0x398>
   41850:	198016c4 	addi	r6,r3,91
   41854:	300490fa 	slli	r2,r6,3
   41858:	003fbc06 	br	4174c <_malloc_r+0xb4>
   4185c:	8804d1ba 	srli	r2,r17,6
   41860:	11800e04 	addi	r6,r2,56
   41864:	300490fa 	slli	r2,r6,3
   41868:	003fb806 	br	4174c <_malloc_r+0xb4>
   4186c:	00807fc4 	movi	r2,511
   41870:	1140bb36 	bltu	r2,r5,41b60 <_malloc_r+0x4c8>
   41874:	2806d0fa 	srli	r3,r5,3
   41878:	573ffe04 	addi	fp,r10,-8
   4187c:	00800044 	movi	r2,1
   41880:	180890fa 	slli	r4,r3,3
   41884:	1807d0ba 	srai	r3,r3,2
   41888:	e1c00117 	ldw	r7,4(fp)
   4188c:	5909883a 	add	r4,r11,r4
   41890:	21400217 	ldw	r5,8(r4)
   41894:	10c4983a 	sll	r2,r2,r3
   41898:	81000315 	stw	r4,12(r16)
   4189c:	81400215 	stw	r5,8(r16)
   418a0:	388eb03a 	or	r7,r7,r2
   418a4:	2c000315 	stw	r16,12(r5)
   418a8:	24000215 	stw	r16,8(r4)
   418ac:	e1c00115 	stw	r7,4(fp)
   418b0:	4807883a 	mov	r3,r9
   418b4:	4800cd16 	blt	r9,zero,41bec <_malloc_r+0x554>
   418b8:	1807d0ba 	srai	r3,r3,2
   418bc:	00800044 	movi	r2,1
   418c0:	10c8983a 	sll	r4,r2,r3
   418c4:	39004436 	bltu	r7,r4,419d8 <_malloc_r+0x340>
   418c8:	21c4703a 	and	r2,r4,r7
   418cc:	10000a1e 	bne	r2,zero,418f8 <_malloc_r+0x260>
   418d0:	2109883a 	add	r4,r4,r4
   418d4:	00bfff04 	movi	r2,-4
   418d8:	4884703a 	and	r2,r9,r2
   418dc:	3906703a 	and	r3,r7,r4
   418e0:	12400104 	addi	r9,r2,4
   418e4:	1800041e 	bne	r3,zero,418f8 <_malloc_r+0x260>
   418e8:	2109883a 	add	r4,r4,r4
   418ec:	3904703a 	and	r2,r7,r4
   418f0:	4a400104 	addi	r9,r9,4
   418f4:	103ffc26 	beq	r2,zero,418e8 <_malloc_r+0x250>
   418f8:	480490fa 	slli	r2,r9,3
   418fc:	4819883a 	mov	r12,r9
   41900:	023fff04 	movi	r8,-4
   41904:	589b883a 	add	r13,r11,r2
   41908:	6807883a 	mov	r3,r13
   4190c:	014003c4 	movi	r5,15
   41910:	1c000317 	ldw	r16,12(r3)
   41914:	1c00041e 	bne	r3,r16,41928 <_malloc_r+0x290>
   41918:	0000a706 	br	41bb8 <_malloc_r+0x520>
   4191c:	3000ab0e 	bge	r6,zero,41bcc <_malloc_r+0x534>
   41920:	84000317 	ldw	r16,12(r16)
   41924:	1c00a426 	beq	r3,r16,41bb8 <_malloc_r+0x520>
   41928:	80800117 	ldw	r2,4(r16)
   4192c:	1204703a 	and	r2,r2,r8
   41930:	144dc83a 	sub	r6,r2,r17
   41934:	29bff90e 	bge	r5,r6,4191c <_malloc_r+0x284>
   41938:	81000317 	ldw	r4,12(r16)
   4193c:	80c00217 	ldw	r3,8(r16)
   41940:	89400054 	ori	r5,r17,1
   41944:	8445883a 	add	r2,r16,r17
   41948:	20c00215 	stw	r3,8(r4)
   4194c:	19000315 	stw	r4,12(r3)
   41950:	81400115 	stw	r5,4(r16)
   41954:	1187883a 	add	r3,r2,r6
   41958:	31000054 	ori	r4,r6,1
   4195c:	50800315 	stw	r2,12(r10)
   41960:	50800215 	stw	r2,8(r10)
   41964:	19800015 	stw	r6,0(r3)
   41968:	11000115 	stw	r4,4(r2)
   4196c:	12800215 	stw	r10,8(r2)
   41970:	12800315 	stw	r10,12(r2)
   41974:	9009883a 	mov	r4,r18
   41978:	00508dc0 	call	508dc <__malloc_unlock>
   4197c:	80c00204 	addi	r3,r16,8
   41980:	003f5906 	br	416e8 <_malloc_r+0x50>
   41984:	8109883a 	add	r4,r16,r4
   41988:	20800117 	ldw	r2,4(r4)
   4198c:	80c00217 	ldw	r3,8(r16)
   41990:	81400317 	ldw	r5,12(r16)
   41994:	10800054 	ori	r2,r2,1
   41998:	20800115 	stw	r2,4(r4)
   4199c:	28c00215 	stw	r3,8(r5)
   419a0:	19400315 	stw	r5,12(r3)
   419a4:	9009883a 	mov	r4,r18
   419a8:	00508dc0 	call	508dc <__malloc_unlock>
   419ac:	80c00204 	addi	r3,r16,8
   419b0:	003f4d06 	br	416e8 <_malloc_r+0x50>
   419b4:	80800204 	addi	r2,r16,8
   419b8:	14000317 	ldw	r16,12(r2)
   419bc:	143f911e 	bne	r2,r16,41804 <_malloc_r+0x16c>
   419c0:	1a400084 	addi	r9,r3,2
   419c4:	003f7306 	br	41794 <_malloc_r+0xfc>
   419c8:	88c00054 	ori	r3,r17,1
   419cc:	8445883a 	add	r2,r16,r17
   419d0:	80c00115 	stw	r3,4(r16)
   419d4:	003fdf06 	br	41954 <_malloc_r+0x2bc>
   419d8:	e4000217 	ldw	r16,8(fp)
   419dc:	00bfff04 	movi	r2,-4
   419e0:	80c00117 	ldw	r3,4(r16)
   419e4:	802d883a 	mov	r22,r16
   419e8:	18aa703a 	and	r21,r3,r2
   419ec:	ac401636 	bltu	r21,r17,41a48 <_malloc_r+0x3b0>
   419f0:	ac49c83a 	sub	r4,r21,r17
   419f4:	008003c4 	movi	r2,15
   419f8:	1100130e 	bge	r2,r4,41a48 <_malloc_r+0x3b0>
   419fc:	88800054 	ori	r2,r17,1
   41a00:	8447883a 	add	r3,r16,r17
   41a04:	80800115 	stw	r2,4(r16)
   41a08:	20800054 	ori	r2,r4,1
   41a0c:	18800115 	stw	r2,4(r3)
   41a10:	e0c00215 	stw	r3,8(fp)
   41a14:	9009883a 	mov	r4,r18
   41a18:	00508dc0 	call	508dc <__malloc_unlock>
   41a1c:	80c00204 	addi	r3,r16,8
   41a20:	003f3106 	br	416e8 <_malloc_r+0x50>
   41a24:	39c00117 	ldw	r7,4(r7)
   41a28:	573ffe04 	addi	fp,r10,-8
   41a2c:	003fa006 	br	418b0 <_malloc_r+0x218>
   41a30:	00801504 	movi	r2,84
   41a34:	10c06736 	bltu	r2,r3,41bd4 <_malloc_r+0x53c>
   41a38:	8804d33a 	srli	r2,r17,12
   41a3c:	11801b84 	addi	r6,r2,110
   41a40:	300490fa 	slli	r2,r6,3
   41a44:	003f4106 	br	4174c <_malloc_r+0xb4>
   41a48:	d0a6e517 	ldw	r2,-25708(gp)
   41a4c:	d0e00317 	ldw	r3,-32756(gp)
   41a50:	053fffc4 	movi	r20,-1
   41a54:	10800404 	addi	r2,r2,16
   41a58:	88a7883a 	add	r19,r17,r2
   41a5c:	1d000326 	beq	r3,r20,41a6c <_malloc_r+0x3d4>
   41a60:	98c3ffc4 	addi	r3,r19,4095
   41a64:	00bc0004 	movi	r2,-4096
   41a68:	18a6703a 	and	r19,r3,r2
   41a6c:	9009883a 	mov	r4,r18
   41a70:	980b883a 	mov	r5,r19
   41a74:	00421bc0 	call	421bc <_sbrk_r>
   41a78:	1009883a 	mov	r4,r2
   41a7c:	15000426 	beq	r2,r20,41a90 <_malloc_r+0x3f8>
   41a80:	854b883a 	add	r5,r16,r21
   41a84:	1029883a 	mov	r20,r2
   41a88:	11405a2e 	bgeu	r2,r5,41bf4 <_malloc_r+0x55c>
   41a8c:	87000c26 	beq	r16,fp,41ac0 <_malloc_r+0x428>
   41a90:	e4000217 	ldw	r16,8(fp)
   41a94:	80c00117 	ldw	r3,4(r16)
   41a98:	00bfff04 	movi	r2,-4
   41a9c:	1884703a 	and	r2,r3,r2
   41aa0:	14400336 	bltu	r2,r17,41ab0 <_malloc_r+0x418>
   41aa4:	1449c83a 	sub	r4,r2,r17
   41aa8:	008003c4 	movi	r2,15
   41aac:	113fd316 	blt	r2,r4,419fc <_malloc_r+0x364>
   41ab0:	9009883a 	mov	r4,r18
   41ab4:	00508dc0 	call	508dc <__malloc_unlock>
   41ab8:	0007883a 	mov	r3,zero
   41abc:	003f0a06 	br	416e8 <_malloc_r+0x50>
   41ac0:	05c00174 	movhi	r23,5
   41ac4:	bddcc004 	addi	r23,r23,29440
   41ac8:	b8800017 	ldw	r2,0(r23)
   41acc:	988d883a 	add	r6,r19,r2
   41ad0:	b9800015 	stw	r6,0(r23)
   41ad4:	d0e00317 	ldw	r3,-32756(gp)
   41ad8:	00bfffc4 	movi	r2,-1
   41adc:	18808e26 	beq	r3,r2,41d18 <_malloc_r+0x680>
   41ae0:	2145c83a 	sub	r2,r4,r5
   41ae4:	3085883a 	add	r2,r6,r2
   41ae8:	b8800015 	stw	r2,0(r23)
   41aec:	20c001cc 	andi	r3,r4,7
   41af0:	18005f1e 	bne	r3,zero,41c70 <_malloc_r+0x5d8>
   41af4:	000b883a 	mov	r5,zero
   41af8:	a4c5883a 	add	r2,r20,r19
   41afc:	1083ffcc 	andi	r2,r2,4095
   41b00:	00c40004 	movi	r3,4096
   41b04:	1887c83a 	sub	r3,r3,r2
   41b08:	28e7883a 	add	r19,r5,r3
   41b0c:	9009883a 	mov	r4,r18
   41b10:	980b883a 	mov	r5,r19
   41b14:	00421bc0 	call	421bc <_sbrk_r>
   41b18:	1007883a 	mov	r3,r2
   41b1c:	00bfffc4 	movi	r2,-1
   41b20:	18807a26 	beq	r3,r2,41d0c <_malloc_r+0x674>
   41b24:	1d05c83a 	sub	r2,r3,r20
   41b28:	9885883a 	add	r2,r19,r2
   41b2c:	10c00054 	ori	r3,r2,1
   41b30:	b8800017 	ldw	r2,0(r23)
   41b34:	a021883a 	mov	r16,r20
   41b38:	a0c00115 	stw	r3,4(r20)
   41b3c:	9885883a 	add	r2,r19,r2
   41b40:	b8800015 	stw	r2,0(r23)
   41b44:	e5000215 	stw	r20,8(fp)
   41b48:	b7003626 	beq	r22,fp,41c24 <_malloc_r+0x58c>
   41b4c:	018003c4 	movi	r6,15
   41b50:	35404b36 	bltu	r6,r21,41c80 <_malloc_r+0x5e8>
   41b54:	00800044 	movi	r2,1
   41b58:	a0800115 	stw	r2,4(r20)
   41b5c:	003fcd06 	br	41a94 <_malloc_r+0x3fc>
   41b60:	2808d27a 	srli	r4,r5,9
   41b64:	2000371e 	bne	r4,zero,41c44 <_malloc_r+0x5ac>
   41b68:	2808d0fa 	srli	r4,r5,3
   41b6c:	200690fa 	slli	r3,r4,3
   41b70:	1ad1883a 	add	r8,r3,r11
   41b74:	41800217 	ldw	r6,8(r8)
   41b78:	41805b26 	beq	r8,r6,41ce8 <_malloc_r+0x650>
   41b7c:	30800117 	ldw	r2,4(r6)
   41b80:	00ffff04 	movi	r3,-4
   41b84:	10c4703a 	and	r2,r2,r3
   41b88:	2880022e 	bgeu	r5,r2,41b94 <_malloc_r+0x4fc>
   41b8c:	31800217 	ldw	r6,8(r6)
   41b90:	41bffa1e 	bne	r8,r6,41b7c <_malloc_r+0x4e4>
   41b94:	32000317 	ldw	r8,12(r6)
   41b98:	39c00117 	ldw	r7,4(r7)
   41b9c:	82000315 	stw	r8,12(r16)
   41ba0:	81800215 	stw	r6,8(r16)
   41ba4:	07000174 	movhi	fp,5
   41ba8:	e7103404 	addi	fp,fp,16592
   41bac:	34000315 	stw	r16,12(r6)
   41bb0:	44000215 	stw	r16,8(r8)
   41bb4:	003f3e06 	br	418b0 <_malloc_r+0x218>
   41bb8:	63000044 	addi	r12,r12,1
   41bbc:	608000cc 	andi	r2,r12,3
   41bc0:	10005d26 	beq	r2,zero,41d38 <_malloc_r+0x6a0>
   41bc4:	18c00204 	addi	r3,r3,8
   41bc8:	003f5106 	br	41910 <_malloc_r+0x278>
   41bcc:	8089883a 	add	r4,r16,r2
   41bd0:	003f6d06 	br	41988 <_malloc_r+0x2f0>
   41bd4:	00805504 	movi	r2,340
   41bd8:	10c02036 	bltu	r2,r3,41c5c <_malloc_r+0x5c4>
   41bdc:	8804d3fa 	srli	r2,r17,15
   41be0:	11801dc4 	addi	r6,r2,119
   41be4:	300490fa 	slli	r2,r6,3
   41be8:	003ed806 	br	4174c <_malloc_r+0xb4>
   41bec:	48c000c4 	addi	r3,r9,3
   41bf0:	003f3106 	br	418b8 <_malloc_r+0x220>
   41bf4:	05c00174 	movhi	r23,5
   41bf8:	bddcc004 	addi	r23,r23,29440
   41bfc:	b8800017 	ldw	r2,0(r23)
   41c00:	988d883a 	add	r6,r19,r2
   41c04:	b9800015 	stw	r6,0(r23)
   41c08:	293fb21e 	bne	r5,r4,41ad4 <_malloc_r+0x43c>
   41c0c:	2083ffcc 	andi	r2,r4,4095
   41c10:	103fb01e 	bne	r2,zero,41ad4 <_malloc_r+0x43c>
   41c14:	e4000217 	ldw	r16,8(fp)
   41c18:	9d45883a 	add	r2,r19,r21
   41c1c:	10800054 	ori	r2,r2,1
   41c20:	80800115 	stw	r2,4(r16)
   41c24:	b8c00017 	ldw	r3,0(r23)
   41c28:	d0a6e617 	ldw	r2,-25704(gp)
   41c2c:	10c0012e 	bgeu	r2,r3,41c34 <_malloc_r+0x59c>
   41c30:	d0e6e615 	stw	r3,-25704(gp)
   41c34:	d0a6e717 	ldw	r2,-25700(gp)
   41c38:	10ff962e 	bgeu	r2,r3,41a94 <_malloc_r+0x3fc>
   41c3c:	d0e6e715 	stw	r3,-25700(gp)
   41c40:	003f9406 	br	41a94 <_malloc_r+0x3fc>
   41c44:	00800104 	movi	r2,4
   41c48:	11001e36 	bltu	r2,r4,41cc4 <_malloc_r+0x62c>
   41c4c:	2804d1ba 	srli	r2,r5,6
   41c50:	11000e04 	addi	r4,r2,56
   41c54:	200690fa 	slli	r3,r4,3
   41c58:	003fc506 	br	41b70 <_malloc_r+0x4d8>
   41c5c:	00815504 	movi	r2,1364
   41c60:	10c01d2e 	bgeu	r2,r3,41cd8 <_malloc_r+0x640>
   41c64:	01801f84 	movi	r6,126
   41c68:	0080fc04 	movi	r2,1008
   41c6c:	003eb706 	br	4174c <_malloc_r+0xb4>
   41c70:	00800204 	movi	r2,8
   41c74:	10cbc83a 	sub	r5,r2,r3
   41c78:	2169883a 	add	r20,r4,r5
   41c7c:	003f9e06 	br	41af8 <_malloc_r+0x460>
   41c80:	00bffe04 	movi	r2,-8
   41c84:	a93ffd04 	addi	r4,r21,-12
   41c88:	2088703a 	and	r4,r4,r2
   41c8c:	b10b883a 	add	r5,r22,r4
   41c90:	00c00144 	movi	r3,5
   41c94:	28c00215 	stw	r3,8(r5)
   41c98:	28c00115 	stw	r3,4(r5)
   41c9c:	b0800117 	ldw	r2,4(r22)
   41ca0:	1080004c 	andi	r2,r2,1
   41ca4:	2084b03a 	or	r2,r4,r2
   41ca8:	b0800115 	stw	r2,4(r22)
   41cac:	313fdd2e 	bgeu	r6,r4,41c24 <_malloc_r+0x58c>
   41cb0:	b1400204 	addi	r5,r22,8
   41cb4:	9009883a 	mov	r4,r18
   41cb8:	00480fc0 	call	480fc <_free_r>
   41cbc:	e4000217 	ldw	r16,8(fp)
   41cc0:	003fd806 	br	41c24 <_malloc_r+0x58c>
   41cc4:	00800504 	movi	r2,20
   41cc8:	11001536 	bltu	r2,r4,41d20 <_malloc_r+0x688>
   41ccc:	210016c4 	addi	r4,r4,91
   41cd0:	200690fa 	slli	r3,r4,3
   41cd4:	003fa606 	br	41b70 <_malloc_r+0x4d8>
   41cd8:	8804d4ba 	srli	r2,r17,18
   41cdc:	11801f04 	addi	r6,r2,124
   41ce0:	300490fa 	slli	r2,r6,3
   41ce4:	003e9906 	br	4174c <_malloc_r+0xb4>
   41ce8:	2009d0ba 	srai	r4,r4,2
   41cec:	01400174 	movhi	r5,5
   41cf0:	29503404 	addi	r5,r5,16592
   41cf4:	00c00044 	movi	r3,1
   41cf8:	28800117 	ldw	r2,4(r5)
   41cfc:	1906983a 	sll	r3,r3,r4
   41d00:	10c4b03a 	or	r2,r2,r3
   41d04:	28800115 	stw	r2,4(r5)
   41d08:	003fa306 	br	41b98 <_malloc_r+0x500>
   41d0c:	0027883a 	mov	r19,zero
   41d10:	00c00044 	movi	r3,1
   41d14:	003f8606 	br	41b30 <_malloc_r+0x498>
   41d18:	d1200315 	stw	r4,-32756(gp)
   41d1c:	003f7306 	br	41aec <_malloc_r+0x454>
   41d20:	00801504 	movi	r2,84
   41d24:	11001936 	bltu	r2,r4,41d8c <_malloc_r+0x6f4>
   41d28:	2804d33a 	srli	r2,r5,12
   41d2c:	11001b84 	addi	r4,r2,110
   41d30:	200690fa 	slli	r3,r4,3
   41d34:	003f8e06 	br	41b70 <_malloc_r+0x4d8>
   41d38:	480b883a 	mov	r5,r9
   41d3c:	6807883a 	mov	r3,r13
   41d40:	288000cc 	andi	r2,r5,3
   41d44:	18fffe04 	addi	r3,r3,-8
   41d48:	297fffc4 	addi	r5,r5,-1
   41d4c:	10001526 	beq	r2,zero,41da4 <_malloc_r+0x70c>
   41d50:	18800217 	ldw	r2,8(r3)
   41d54:	10fffa26 	beq	r2,r3,41d40 <_malloc_r+0x6a8>
   41d58:	2109883a 	add	r4,r4,r4
   41d5c:	393f1e36 	bltu	r7,r4,419d8 <_malloc_r+0x340>
   41d60:	203f1d26 	beq	r4,zero,419d8 <_malloc_r+0x340>
   41d64:	21c4703a 	and	r2,r4,r7
   41d68:	10000226 	beq	r2,zero,41d74 <_malloc_r+0x6dc>
   41d6c:	6013883a 	mov	r9,r12
   41d70:	003ee106 	br	418f8 <_malloc_r+0x260>
   41d74:	2109883a 	add	r4,r4,r4
   41d78:	3904703a 	and	r2,r7,r4
   41d7c:	63000104 	addi	r12,r12,4
   41d80:	103ffc26 	beq	r2,zero,41d74 <_malloc_r+0x6dc>
   41d84:	6013883a 	mov	r9,r12
   41d88:	003edb06 	br	418f8 <_malloc_r+0x260>
   41d8c:	00805504 	movi	r2,340
   41d90:	11000836 	bltu	r2,r4,41db4 <_malloc_r+0x71c>
   41d94:	2804d3fa 	srli	r2,r5,15
   41d98:	11001dc4 	addi	r4,r2,119
   41d9c:	200690fa 	slli	r3,r4,3
   41da0:	003f7306 	br	41b70 <_malloc_r+0x4d8>
   41da4:	0104303a 	nor	r2,zero,r4
   41da8:	388e703a 	and	r7,r7,r2
   41dac:	e1c00115 	stw	r7,4(fp)
   41db0:	003fe906 	br	41d58 <_malloc_r+0x6c0>
   41db4:	00815504 	movi	r2,1364
   41db8:	1100032e 	bgeu	r2,r4,41dc8 <_malloc_r+0x730>
   41dbc:	01001f84 	movi	r4,126
   41dc0:	00c0fc04 	movi	r3,1008
   41dc4:	003f6a06 	br	41b70 <_malloc_r+0x4d8>
   41dc8:	2804d4ba 	srli	r2,r5,18
   41dcc:	11001f04 	addi	r4,r2,124
   41dd0:	200690fa 	slli	r3,r4,3
   41dd4:	003f6606 	br	41b70 <_malloc_r+0x4d8>

00041dd8 <_open_r>:
   41dd8:	defffd04 	addi	sp,sp,-12
   41ddc:	dc000015 	stw	r16,0(sp)
   41de0:	04000174 	movhi	r16,5
   41de4:	841cb304 	addi	r16,r16,29388
   41de8:	dc400115 	stw	r17,4(sp)
   41dec:	80000015 	stw	zero,0(r16)
   41df0:	2023883a 	mov	r17,r4
   41df4:	2809883a 	mov	r4,r5
   41df8:	300b883a 	mov	r5,r6
   41dfc:	380d883a 	mov	r6,r7
   41e00:	dfc00215 	stw	ra,8(sp)
   41e04:	00509f40 	call	509f4 <open>
   41e08:	1007883a 	mov	r3,r2
   41e0c:	00bfffc4 	movi	r2,-1
   41e10:	18800626 	beq	r3,r2,41e2c <_open_r+0x54>
   41e14:	1805883a 	mov	r2,r3
   41e18:	dfc00217 	ldw	ra,8(sp)
   41e1c:	dc400117 	ldw	r17,4(sp)
   41e20:	dc000017 	ldw	r16,0(sp)
   41e24:	dec00304 	addi	sp,sp,12
   41e28:	f800283a 	ret
   41e2c:	80800017 	ldw	r2,0(r16)
   41e30:	103ff826 	beq	r2,zero,41e14 <_open_r+0x3c>
   41e34:	88800015 	stw	r2,0(r17)
   41e38:	1805883a 	mov	r2,r3
   41e3c:	dfc00217 	ldw	ra,8(sp)
   41e40:	dc400117 	ldw	r17,4(sp)
   41e44:	dc000017 	ldw	r16,0(sp)
   41e48:	dec00304 	addi	sp,sp,12
   41e4c:	f800283a 	ret

00041e50 <printf>:
   41e50:	defffb04 	addi	sp,sp,-20
   41e54:	dfc00115 	stw	ra,4(sp)
   41e58:	d9400215 	stw	r5,8(sp)
   41e5c:	d9800315 	stw	r6,12(sp)
   41e60:	d9c00415 	stw	r7,16(sp)
   41e64:	00800174 	movhi	r2,5
   41e68:	1095cf04 	addi	r2,r2,22332
   41e6c:	10c00017 	ldw	r3,0(r2)
   41e70:	200b883a 	mov	r5,r4
   41e74:	d8800204 	addi	r2,sp,8
   41e78:	19000217 	ldw	r4,8(r3)
   41e7c:	100d883a 	mov	r6,r2
   41e80:	d8800015 	stw	r2,0(sp)
   41e84:	00445f80 	call	445f8 <__vfprintf_internal>
   41e88:	dfc00117 	ldw	ra,4(sp)
   41e8c:	dec00504 	addi	sp,sp,20
   41e90:	f800283a 	ret

00041e94 <_printf_r>:
   41e94:	defffc04 	addi	sp,sp,-16
   41e98:	dfc00115 	stw	ra,4(sp)
   41e9c:	d9800215 	stw	r6,8(sp)
   41ea0:	d9c00315 	stw	r7,12(sp)
   41ea4:	280d883a 	mov	r6,r5
   41ea8:	21400217 	ldw	r5,8(r4)
   41eac:	d8c00204 	addi	r3,sp,8
   41eb0:	180f883a 	mov	r7,r3
   41eb4:	d8c00015 	stw	r3,0(sp)
   41eb8:	00427340 	call	42734 <___vfprintf_internal_r>
   41ebc:	dfc00117 	ldw	ra,4(sp)
   41ec0:	dec00404 	addi	sp,sp,16
   41ec4:	f800283a 	ret

00041ec8 <_puts_r>:
   41ec8:	defff604 	addi	sp,sp,-40
   41ecc:	dc400715 	stw	r17,28(sp)
   41ed0:	2023883a 	mov	r17,r4
   41ed4:	2809883a 	mov	r4,r5
   41ed8:	dfc00915 	stw	ra,36(sp)
   41edc:	dcc00815 	stw	r19,32(sp)
   41ee0:	2827883a 	mov	r19,r5
   41ee4:	00423f40 	call	423f4 <strlen>
   41ee8:	89400217 	ldw	r5,8(r17)
   41eec:	00c00174 	movhi	r3,5
   41ef0:	18cda104 	addi	r3,r3,13956
   41ef4:	01c00044 	movi	r7,1
   41ef8:	12000044 	addi	r8,r2,1
   41efc:	d8c00515 	stw	r3,20(sp)
   41f00:	d9c00615 	stw	r7,24(sp)
   41f04:	d8c00304 	addi	r3,sp,12
   41f08:	01c00084 	movi	r7,2
   41f0c:	8809883a 	mov	r4,r17
   41f10:	d80d883a 	mov	r6,sp
   41f14:	d8c00015 	stw	r3,0(sp)
   41f18:	dcc00315 	stw	r19,12(sp)
   41f1c:	da000215 	stw	r8,8(sp)
   41f20:	d9c00115 	stw	r7,4(sp)
   41f24:	d8800415 	stw	r2,16(sp)
   41f28:	00484100 	call	48410 <__sfvwrite_r>
   41f2c:	00ffffc4 	movi	r3,-1
   41f30:	10000626 	beq	r2,zero,41f4c <_puts_r+0x84>
   41f34:	1805883a 	mov	r2,r3
   41f38:	dfc00917 	ldw	ra,36(sp)
   41f3c:	dcc00817 	ldw	r19,32(sp)
   41f40:	dc400717 	ldw	r17,28(sp)
   41f44:	dec00a04 	addi	sp,sp,40
   41f48:	f800283a 	ret
   41f4c:	00c00284 	movi	r3,10
   41f50:	1805883a 	mov	r2,r3
   41f54:	dfc00917 	ldw	ra,36(sp)
   41f58:	dcc00817 	ldw	r19,32(sp)
   41f5c:	dc400717 	ldw	r17,28(sp)
   41f60:	dec00a04 	addi	sp,sp,40
   41f64:	f800283a 	ret

00041f68 <puts>:
   41f68:	00800174 	movhi	r2,5
   41f6c:	1095cf04 	addi	r2,r2,22332
   41f70:	200b883a 	mov	r5,r4
   41f74:	11000017 	ldw	r4,0(r2)
   41f78:	0041ec81 	jmpi	41ec8 <_puts_r>

00041f7c <__srefill_r>:
   41f7c:	defffd04 	addi	sp,sp,-12
   41f80:	dc400115 	stw	r17,4(sp)
   41f84:	dc000015 	stw	r16,0(sp)
   41f88:	dfc00215 	stw	ra,8(sp)
   41f8c:	2023883a 	mov	r17,r4
   41f90:	2821883a 	mov	r16,r5
   41f94:	20000226 	beq	r4,zero,41fa0 <__srefill_r+0x24>
   41f98:	20800e17 	ldw	r2,56(r4)
   41f9c:	10004126 	beq	r2,zero,420a4 <__srefill_r+0x128>
   41fa0:	80c0030b 	ldhu	r3,12(r16)
   41fa4:	80000115 	stw	zero,4(r16)
   41fa8:	1880080c 	andi	r2,r3,32
   41fac:	1000361e 	bne	r2,zero,42088 <__srefill_r+0x10c>
   41fb0:	1880010c 	andi	r2,r3,4
   41fb4:	1000211e 	bne	r2,zero,4203c <__srefill_r+0xc0>
   41fb8:	1880040c 	andi	r2,r3,16
   41fbc:	10005026 	beq	r2,zero,42100 <__srefill_r+0x184>
   41fc0:	1880020c 	andi	r2,r3,8
   41fc4:	1000541e 	bne	r2,zero,42118 <__srefill_r+0x19c>
   41fc8:	8080030b 	ldhu	r2,12(r16)
   41fcc:	10800114 	ori	r2,r2,4
   41fd0:	8080030d 	sth	r2,12(r16)
   41fd4:	80800417 	ldw	r2,16(r16)
   41fd8:	10004526 	beq	r2,zero,420f0 <__srefill_r+0x174>
   41fdc:	8080030b 	ldhu	r2,12(r16)
   41fe0:	108000cc 	andi	r2,r2,3
   41fe4:	1000361e 	bne	r2,zero,420c0 <__srefill_r+0x144>
   41fe8:	81800417 	ldw	r6,16(r16)
   41fec:	80c00817 	ldw	r3,32(r16)
   41ff0:	81400717 	ldw	r5,28(r16)
   41ff4:	81c00517 	ldw	r7,20(r16)
   41ff8:	8809883a 	mov	r4,r17
   41ffc:	81800015 	stw	r6,0(r16)
   42000:	183ee83a 	callr	r3
   42004:	80c0030b 	ldhu	r3,12(r16)
   42008:	1009883a 	mov	r4,r2
   4200c:	80800115 	stw	r2,4(r16)
   42010:	00b7ffc4 	movi	r2,-8193
   42014:	1884703a 	and	r2,r3,r2
   42018:	8080030d 	sth	r2,12(r16)
   4201c:	0100230e 	bge	zero,r4,420ac <__srefill_r+0x130>
   42020:	0009883a 	mov	r4,zero
   42024:	2005883a 	mov	r2,r4
   42028:	dfc00217 	ldw	ra,8(sp)
   4202c:	dc400117 	ldw	r17,4(sp)
   42030:	dc000017 	ldw	r16,0(sp)
   42034:	dec00304 	addi	sp,sp,12
   42038:	f800283a 	ret
   4203c:	81400c17 	ldw	r5,48(r16)
   42040:	283fe426 	beq	r5,zero,41fd4 <__srefill_r+0x58>
   42044:	80801004 	addi	r2,r16,64
   42048:	28800226 	beq	r5,r2,42054 <__srefill_r+0xd8>
   4204c:	8809883a 	mov	r4,r17
   42050:	00480fc0 	call	480fc <_free_r>
   42054:	80800f17 	ldw	r2,60(r16)
   42058:	80000c15 	stw	zero,48(r16)
   4205c:	80800115 	stw	r2,4(r16)
   42060:	103fdc26 	beq	r2,zero,41fd4 <__srefill_r+0x58>
   42064:	80800e17 	ldw	r2,56(r16)
   42068:	0009883a 	mov	r4,zero
   4206c:	80800015 	stw	r2,0(r16)
   42070:	2005883a 	mov	r2,r4
   42074:	dfc00217 	ldw	ra,8(sp)
   42078:	dc400117 	ldw	r17,4(sp)
   4207c:	dc000017 	ldw	r16,0(sp)
   42080:	dec00304 	addi	sp,sp,12
   42084:	f800283a 	ret
   42088:	013fffc4 	movi	r4,-1
   4208c:	2005883a 	mov	r2,r4
   42090:	dfc00217 	ldw	ra,8(sp)
   42094:	dc400117 	ldw	r17,4(sp)
   42098:	dc000017 	ldw	r16,0(sp)
   4209c:	dec00304 	addi	sp,sp,12
   420a0:	f800283a 	ret
   420a4:	0047a580 	call	47a58 <__sinit>
   420a8:	003fbd06 	br	41fa0 <__srefill_r+0x24>
   420ac:	20000b1e 	bne	r4,zero,420dc <__srefill_r+0x160>
   420b0:	10800814 	ori	r2,r2,32
   420b4:	013fffc4 	movi	r4,-1
   420b8:	8080030d 	sth	r2,12(r16)
   420bc:	003fd906 	br	42024 <__srefill_r+0xa8>
   420c0:	00800174 	movhi	r2,5
   420c4:	1095d004 	addi	r2,r2,22336
   420c8:	11000017 	ldw	r4,0(r2)
   420cc:	01400134 	movhi	r5,4
   420d0:	29485004 	addi	r5,r5,8512
   420d4:	00489740 	call	48974 <_fwalk>
   420d8:	003fc306 	br	41fe8 <__srefill_r+0x6c>
   420dc:	10801014 	ori	r2,r2,64
   420e0:	013fffc4 	movi	r4,-1
   420e4:	8080030d 	sth	r2,12(r16)
   420e8:	80000115 	stw	zero,4(r16)
   420ec:	003fcd06 	br	42024 <__srefill_r+0xa8>
   420f0:	8809883a 	mov	r4,r17
   420f4:	800b883a 	mov	r5,r16
   420f8:	00415040 	call	41504 <__smakebuf_r>
   420fc:	003fb706 	br	41fdc <__srefill_r+0x60>
   42100:	18c01014 	ori	r3,r3,64
   42104:	00800244 	movi	r2,9
   42108:	013fffc4 	movi	r4,-1
   4210c:	88800015 	stw	r2,0(r17)
   42110:	80c0030d 	sth	r3,12(r16)
   42114:	003fc306 	br	42024 <__srefill_r+0xa8>
   42118:	8809883a 	mov	r4,r17
   4211c:	800b883a 	mov	r5,r16
   42120:	00477c00 	call	477c0 <_fflush_r>
   42124:	103fd81e 	bne	r2,zero,42088 <__srefill_r+0x10c>
   42128:	8080030b 	ldhu	r2,12(r16)
   4212c:	80000215 	stw	zero,8(r16)
   42130:	80000615 	stw	zero,24(r16)
   42134:	10bffdcc 	andi	r2,r2,65527
   42138:	8080030d 	sth	r2,12(r16)
   4213c:	003fa206 	br	41fc8 <__srefill_r+0x4c>

00042140 <lflush>:
   42140:	20c0030b 	ldhu	r3,12(r4)
   42144:	01400244 	movi	r5,9
   42148:	0005883a 	mov	r2,zero
   4214c:	18c0024c 	andi	r3,r3,9
   42150:	19400126 	beq	r3,r5,42158 <lflush+0x18>
   42154:	f800283a 	ret
   42158:	00479bc1 	jmpi	479bc <fflush>

0004215c <__srget_r>:
   4215c:	defffe04 	addi	sp,sp,-8
   42160:	dc000015 	stw	r16,0(sp)
   42164:	dfc00115 	stw	ra,4(sp)
   42168:	2821883a 	mov	r16,r5
   4216c:	0041f7c0 	call	41f7c <__srefill_r>
   42170:	013fffc4 	movi	r4,-1
   42174:	1000071e 	bne	r2,zero,42194 <__srget_r+0x38>
   42178:	80800117 	ldw	r2,4(r16)
   4217c:	81000017 	ldw	r4,0(r16)
   42180:	10bfffc4 	addi	r2,r2,-1
   42184:	20c00044 	addi	r3,r4,1
   42188:	80800115 	stw	r2,4(r16)
   4218c:	21000003 	ldbu	r4,0(r4)
   42190:	80c00015 	stw	r3,0(r16)
   42194:	2005883a 	mov	r2,r4
   42198:	dfc00117 	ldw	ra,4(sp)
   4219c:	dc000017 	ldw	r16,0(sp)
   421a0:	dec00204 	addi	sp,sp,8
   421a4:	f800283a 	ret

000421a8 <__srget>:
   421a8:	00800174 	movhi	r2,5
   421ac:	1095cf04 	addi	r2,r2,22332
   421b0:	200b883a 	mov	r5,r4
   421b4:	11000017 	ldw	r4,0(r2)
   421b8:	004215c1 	jmpi	4215c <__srget_r>

000421bc <_sbrk_r>:
   421bc:	defffd04 	addi	sp,sp,-12
   421c0:	dc000015 	stw	r16,0(sp)
   421c4:	04000174 	movhi	r16,5
   421c8:	841cb304 	addi	r16,r16,29388
   421cc:	dc400115 	stw	r17,4(sp)
   421d0:	80000015 	stw	zero,0(r16)
   421d4:	2023883a 	mov	r17,r4
   421d8:	2809883a 	mov	r4,r5
   421dc:	dfc00215 	stw	ra,8(sp)
   421e0:	0050ddc0 	call	50ddc <sbrk>
   421e4:	1007883a 	mov	r3,r2
   421e8:	00bfffc4 	movi	r2,-1
   421ec:	18800626 	beq	r3,r2,42208 <_sbrk_r+0x4c>
   421f0:	1805883a 	mov	r2,r3
   421f4:	dfc00217 	ldw	ra,8(sp)
   421f8:	dc400117 	ldw	r17,4(sp)
   421fc:	dc000017 	ldw	r16,0(sp)
   42200:	dec00304 	addi	sp,sp,12
   42204:	f800283a 	ret
   42208:	80800017 	ldw	r2,0(r16)
   4220c:	103ff826 	beq	r2,zero,421f0 <_sbrk_r+0x34>
   42210:	88800015 	stw	r2,0(r17)
   42214:	1805883a 	mov	r2,r3
   42218:	dfc00217 	ldw	ra,8(sp)
   4221c:	dc400117 	ldw	r17,4(sp)
   42220:	dc000017 	ldw	r16,0(sp)
   42224:	dec00304 	addi	sp,sp,12
   42228:	f800283a 	ret

0004222c <_scanf_r>:
   4222c:	defffc04 	addi	sp,sp,-16
   42230:	dfc00115 	stw	ra,4(sp)
   42234:	d9800215 	stw	r6,8(sp)
   42238:	d9c00315 	stw	r7,12(sp)
   4223c:	280d883a 	mov	r6,r5
   42240:	21400117 	ldw	r5,4(r4)
   42244:	d8c00204 	addi	r3,sp,8
   42248:	180f883a 	mov	r7,r3
   4224c:	d8c00015 	stw	r3,0(sp)
   42250:	004461c0 	call	4461c <__svfscanf_r>
   42254:	dfc00117 	ldw	ra,4(sp)
   42258:	dec00404 	addi	sp,sp,16
   4225c:	f800283a 	ret

00042260 <scanf>:
   42260:	defffb04 	addi	sp,sp,-20
   42264:	dfc00115 	stw	ra,4(sp)
   42268:	d9400215 	stw	r5,8(sp)
   4226c:	d9800315 	stw	r6,12(sp)
   42270:	d9c00415 	stw	r7,16(sp)
   42274:	00800174 	movhi	r2,5
   42278:	1095cf04 	addi	r2,r2,22332
   4227c:	11400017 	ldw	r5,0(r2)
   42280:	200d883a 	mov	r6,r4
   42284:	d8800204 	addi	r2,sp,8
   42288:	2809883a 	mov	r4,r5
   4228c:	29400117 	ldw	r5,4(r5)
   42290:	100f883a 	mov	r7,r2
   42294:	d8800015 	stw	r2,0(sp)
   42298:	004461c0 	call	4461c <__svfscanf_r>
   4229c:	dfc00117 	ldw	ra,4(sp)
   422a0:	dec00504 	addi	sp,sp,20
   422a4:	f800283a 	ret

000422a8 <__sclose>:
   422a8:	2940038f 	ldh	r5,14(r5)
   422ac:	0045f581 	jmpi	45f58 <_close_r>

000422b0 <__sseek>:
   422b0:	defffe04 	addi	sp,sp,-8
   422b4:	dc000015 	stw	r16,0(sp)
   422b8:	2821883a 	mov	r16,r5
   422bc:	2940038f 	ldh	r5,14(r5)
   422c0:	dfc00115 	stw	ra,4(sp)
   422c4:	0048b8c0 	call	48b8c <_lseek_r>
   422c8:	1007883a 	mov	r3,r2
   422cc:	00bfffc4 	movi	r2,-1
   422d0:	18800926 	beq	r3,r2,422f8 <__sseek+0x48>
   422d4:	8080030b 	ldhu	r2,12(r16)
   422d8:	80c01415 	stw	r3,80(r16)
   422dc:	10840014 	ori	r2,r2,4096
   422e0:	8080030d 	sth	r2,12(r16)
   422e4:	1805883a 	mov	r2,r3
   422e8:	dfc00117 	ldw	ra,4(sp)
   422ec:	dc000017 	ldw	r16,0(sp)
   422f0:	dec00204 	addi	sp,sp,8
   422f4:	f800283a 	ret
   422f8:	8080030b 	ldhu	r2,12(r16)
   422fc:	10bbffcc 	andi	r2,r2,61439
   42300:	8080030d 	sth	r2,12(r16)
   42304:	1805883a 	mov	r2,r3
   42308:	dfc00117 	ldw	ra,4(sp)
   4230c:	dc000017 	ldw	r16,0(sp)
   42310:	dec00204 	addi	sp,sp,8
   42314:	f800283a 	ret

00042318 <__swrite>:
   42318:	2880030b 	ldhu	r2,12(r5)
   4231c:	defffb04 	addi	sp,sp,-20
   42320:	dcc00315 	stw	r19,12(sp)
   42324:	1080400c 	andi	r2,r2,256
   42328:	dc800215 	stw	r18,8(sp)
   4232c:	dc400115 	stw	r17,4(sp)
   42330:	dc000015 	stw	r16,0(sp)
   42334:	3027883a 	mov	r19,r6
   42338:	3825883a 	mov	r18,r7
   4233c:	dfc00415 	stw	ra,16(sp)
   42340:	2821883a 	mov	r16,r5
   42344:	000d883a 	mov	r6,zero
   42348:	01c00084 	movi	r7,2
   4234c:	2023883a 	mov	r17,r4
   42350:	10000226 	beq	r2,zero,4235c <__swrite+0x44>
   42354:	2940038f 	ldh	r5,14(r5)
   42358:	0048b8c0 	call	48b8c <_lseek_r>
   4235c:	8080030b 	ldhu	r2,12(r16)
   42360:	8140038f 	ldh	r5,14(r16)
   42364:	8809883a 	mov	r4,r17
   42368:	10bbffcc 	andi	r2,r2,61439
   4236c:	980d883a 	mov	r6,r19
   42370:	900f883a 	mov	r7,r18
   42374:	8080030d 	sth	r2,12(r16)
   42378:	dfc00417 	ldw	ra,16(sp)
   4237c:	dcc00317 	ldw	r19,12(sp)
   42380:	dc800217 	ldw	r18,8(sp)
   42384:	dc400117 	ldw	r17,4(sp)
   42388:	dc000017 	ldw	r16,0(sp)
   4238c:	dec00504 	addi	sp,sp,20
   42390:	0045da41 	jmpi	45da4 <_write_r>

00042394 <__sread>:
   42394:	defffe04 	addi	sp,sp,-8
   42398:	dc000015 	stw	r16,0(sp)
   4239c:	2821883a 	mov	r16,r5
   423a0:	2940038f 	ldh	r5,14(r5)
   423a4:	dfc00115 	stw	ra,4(sp)
   423a8:	004a08c0 	call	4a08c <_read_r>
   423ac:	1007883a 	mov	r3,r2
   423b0:	10000816 	blt	r2,zero,423d4 <__sread+0x40>
   423b4:	80801417 	ldw	r2,80(r16)
   423b8:	10c5883a 	add	r2,r2,r3
   423bc:	80801415 	stw	r2,80(r16)
   423c0:	1805883a 	mov	r2,r3
   423c4:	dfc00117 	ldw	ra,4(sp)
   423c8:	dc000017 	ldw	r16,0(sp)
   423cc:	dec00204 	addi	sp,sp,8
   423d0:	f800283a 	ret
   423d4:	8080030b 	ldhu	r2,12(r16)
   423d8:	10bbffcc 	andi	r2,r2,61439
   423dc:	8080030d 	sth	r2,12(r16)
   423e0:	1805883a 	mov	r2,r3
   423e4:	dfc00117 	ldw	ra,4(sp)
   423e8:	dc000017 	ldw	r16,0(sp)
   423ec:	dec00204 	addi	sp,sp,8
   423f0:	f800283a 	ret

000423f4 <strlen>:
   423f4:	208000cc 	andi	r2,r4,3
   423f8:	2011883a 	mov	r8,r4
   423fc:	1000161e 	bne	r2,zero,42458 <strlen+0x64>
   42400:	20c00017 	ldw	r3,0(r4)
   42404:	017fbff4 	movhi	r5,65279
   42408:	297fbfc4 	addi	r5,r5,-257
   4240c:	01e02074 	movhi	r7,32897
   42410:	39e02004 	addi	r7,r7,-32640
   42414:	1945883a 	add	r2,r3,r5
   42418:	11c4703a 	and	r2,r2,r7
   4241c:	00c6303a 	nor	r3,zero,r3
   42420:	1886703a 	and	r3,r3,r2
   42424:	18000c1e 	bne	r3,zero,42458 <strlen+0x64>
   42428:	280d883a 	mov	r6,r5
   4242c:	380b883a 	mov	r5,r7
   42430:	21000104 	addi	r4,r4,4
   42434:	20800017 	ldw	r2,0(r4)
   42438:	1187883a 	add	r3,r2,r6
   4243c:	1946703a 	and	r3,r3,r5
   42440:	0084303a 	nor	r2,zero,r2
   42444:	10c4703a 	and	r2,r2,r3
   42448:	103ff926 	beq	r2,zero,42430 <strlen+0x3c>
   4244c:	20800007 	ldb	r2,0(r4)
   42450:	10000326 	beq	r2,zero,42460 <strlen+0x6c>
   42454:	21000044 	addi	r4,r4,1
   42458:	20800007 	ldb	r2,0(r4)
   4245c:	103ffd1e 	bne	r2,zero,42454 <strlen+0x60>
   42460:	2205c83a 	sub	r2,r4,r8
   42464:	f800283a 	ret

00042468 <_strtol_r>:
   42468:	defff304 	addi	sp,sp,-52
   4246c:	00800174 	movhi	r2,5
   42470:	1095d304 	addi	r2,r2,22348
   42474:	dd000715 	stw	r20,28(sp)
   42478:	15000017 	ldw	r20,0(r2)
   4247c:	ddc00a15 	stw	r23,40(sp)
   42480:	dc800515 	stw	r18,20(sp)
   42484:	dc400415 	stw	r17,16(sp)
   42488:	dfc00c15 	stw	ra,48(sp)
   4248c:	df000b15 	stw	fp,44(sp)
   42490:	dd800915 	stw	r22,36(sp)
   42494:	dd400815 	stw	r21,32(sp)
   42498:	dcc00615 	stw	r19,24(sp)
   4249c:	dc000315 	stw	r16,12(sp)
   424a0:	282f883a 	mov	r23,r5
   424a4:	d9000115 	stw	r4,4(sp)
   424a8:	d9800215 	stw	r6,8(sp)
   424ac:	3825883a 	mov	r18,r7
   424b0:	2823883a 	mov	r17,r5
   424b4:	8c000007 	ldb	r16,0(r17)
   424b8:	8c400044 	addi	r17,r17,1
   424bc:	a407883a 	add	r3,r20,r16
   424c0:	18800003 	ldbu	r2,0(r3)
   424c4:	1080020c 	andi	r2,r2,8
   424c8:	103ffa1e 	bne	r2,zero,424b4 <_strtol_r+0x4c>
   424cc:	00800b44 	movi	r2,45
   424d0:	80805c26 	beq	r16,r2,42644 <_strtol_r+0x1dc>
   424d4:	00800ac4 	movi	r2,43
   424d8:	80805726 	beq	r16,r2,42638 <_strtol_r+0x1d0>
   424dc:	d8000015 	stw	zero,0(sp)
   424e0:	9007003a 	cmpeq	r3,r18,zero
   424e4:	1800431e 	bne	r3,zero,425f4 <_strtol_r+0x18c>
   424e8:	00800404 	movi	r2,16
   424ec:	90804126 	beq	r18,r2,425f4 <_strtol_r+0x18c>
   424f0:	902b883a 	mov	r21,r18
   424f4:	d8c00017 	ldw	r3,0(sp)
   424f8:	1838c03a 	cmpne	fp,r3,zero
   424fc:	e0004a1e 	bne	fp,zero,42628 <_strtol_r+0x1c0>
   42500:	04e00034 	movhi	r19,32768
   42504:	9cffffc4 	addi	r19,r19,-1
   42508:	9809883a 	mov	r4,r19
   4250c:	a80b883a 	mov	r5,r21
   42510:	004fd340 	call	4fd34 <__umodsi3>
   42514:	9809883a 	mov	r4,r19
   42518:	a80b883a 	mov	r5,r21
   4251c:	102d883a 	mov	r22,r2
   42520:	004fd2c0 	call	4fd2c <__udivsi3>
   42524:	1027883a 	mov	r19,r2
   42528:	a405883a 	add	r2,r20,r16
   4252c:	11400003 	ldbu	r5,0(r2)
   42530:	0009883a 	mov	r4,zero
   42534:	000d883a 	mov	r6,zero
   42538:	28c0010c 	andi	r3,r5,4
   4253c:	18000f26 	beq	r3,zero,4257c <_strtol_r+0x114>
   42540:	843ff404 	addi	r16,r16,-48
   42544:	8480150e 	bge	r16,r18,4259c <_strtol_r+0x134>
   42548:	30003216 	blt	r6,zero,42614 <_strtol_r+0x1ac>
   4254c:	99003136 	bltu	r19,r4,42614 <_strtol_r+0x1ac>
   42550:	24c02f26 	beq	r4,r19,42610 <_strtol_r+0x1a8>
   42554:	a80b883a 	mov	r5,r21
   42558:	004fd3c0 	call	4fd3c <__mulsi3>
   4255c:	1409883a 	add	r4,r2,r16
   42560:	01800044 	movi	r6,1
   42564:	8c000007 	ldb	r16,0(r17)
   42568:	8c400044 	addi	r17,r17,1
   4256c:	a405883a 	add	r2,r20,r16
   42570:	11400003 	ldbu	r5,0(r2)
   42574:	28c0010c 	andi	r3,r5,4
   42578:	183ff11e 	bne	r3,zero,42540 <_strtol_r+0xd8>
   4257c:	288000cc 	andi	r2,r5,3
   42580:	10000626 	beq	r2,zero,4259c <_strtol_r+0x134>
   42584:	2880004c 	andi	r2,r5,1
   42588:	1005003a 	cmpeq	r2,r2,zero
   4258c:	1000231e 	bne	r2,zero,4261c <_strtol_r+0x1b4>
   42590:	00800dc4 	movi	r2,55
   42594:	80a1c83a 	sub	r16,r16,r2
   42598:	84bfeb16 	blt	r16,r18,42548 <_strtol_r+0xe0>
   4259c:	30002e16 	blt	r6,zero,42658 <_strtol_r+0x1f0>
   425a0:	e000231e 	bne	fp,zero,42630 <_strtol_r+0x1c8>
   425a4:	2007883a 	mov	r3,r4
   425a8:	d8800217 	ldw	r2,8(sp)
   425ac:	10000426 	beq	r2,zero,425c0 <_strtol_r+0x158>
   425b0:	30000126 	beq	r6,zero,425b8 <_strtol_r+0x150>
   425b4:	8dffffc4 	addi	r23,r17,-1
   425b8:	d9000217 	ldw	r4,8(sp)
   425bc:	25c00015 	stw	r23,0(r4)
   425c0:	1805883a 	mov	r2,r3
   425c4:	dfc00c17 	ldw	ra,48(sp)
   425c8:	df000b17 	ldw	fp,44(sp)
   425cc:	ddc00a17 	ldw	r23,40(sp)
   425d0:	dd800917 	ldw	r22,36(sp)
   425d4:	dd400817 	ldw	r21,32(sp)
   425d8:	dd000717 	ldw	r20,28(sp)
   425dc:	dcc00617 	ldw	r19,24(sp)
   425e0:	dc800517 	ldw	r18,20(sp)
   425e4:	dc400417 	ldw	r17,16(sp)
   425e8:	dc000317 	ldw	r16,12(sp)
   425ec:	dec00d04 	addi	sp,sp,52
   425f0:	f800283a 	ret
   425f4:	00800c04 	movi	r2,48
   425f8:	80801f26 	beq	r16,r2,42678 <_strtol_r+0x210>
   425fc:	183fbc26 	beq	r3,zero,424f0 <_strtol_r+0x88>
   42600:	00800c04 	movi	r2,48
   42604:	80802926 	beq	r16,r2,426ac <_strtol_r+0x244>
   42608:	04800284 	movi	r18,10
   4260c:	003fb806 	br	424f0 <_strtol_r+0x88>
   42610:	b43fd00e 	bge	r22,r16,42554 <_strtol_r+0xec>
   42614:	01bfffc4 	movi	r6,-1
   42618:	003fd206 	br	42564 <_strtol_r+0xfc>
   4261c:	008015c4 	movi	r2,87
   42620:	80a1c83a 	sub	r16,r16,r2
   42624:	003fdc06 	br	42598 <_strtol_r+0x130>
   42628:	04e00034 	movhi	r19,32768
   4262c:	003fb606 	br	42508 <_strtol_r+0xa0>
   42630:	0107c83a 	sub	r3,zero,r4
   42634:	003fdc06 	br	425a8 <_strtol_r+0x140>
   42638:	8c000007 	ldb	r16,0(r17)
   4263c:	8c400044 	addi	r17,r17,1
   42640:	003fa606 	br	424dc <_strtol_r+0x74>
   42644:	8c000007 	ldb	r16,0(r17)
   42648:	00800044 	movi	r2,1
   4264c:	8c400044 	addi	r17,r17,1
   42650:	d8800015 	stw	r2,0(sp)
   42654:	003fa206 	br	424e0 <_strtol_r+0x78>
   42658:	d9000017 	ldw	r4,0(sp)
   4265c:	2005003a 	cmpeq	r2,r4,zero
   42660:	10000f1e 	bne	r2,zero,426a0 <_strtol_r+0x238>
   42664:	00e00034 	movhi	r3,32768
   42668:	d9000117 	ldw	r4,4(sp)
   4266c:	00800884 	movi	r2,34
   42670:	20800015 	stw	r2,0(r4)
   42674:	003fcc06 	br	425a8 <_strtol_r+0x140>
   42678:	89000007 	ldb	r4,0(r17)
   4267c:	00801e04 	movi	r2,120
   42680:	20800226 	beq	r4,r2,4268c <_strtol_r+0x224>
   42684:	00801604 	movi	r2,88
   42688:	20bfdc1e 	bne	r4,r2,425fc <_strtol_r+0x194>
   4268c:	8c000047 	ldb	r16,1(r17)
   42690:	04800404 	movi	r18,16
   42694:	8c400084 	addi	r17,r17,2
   42698:	902b883a 	mov	r21,r18
   4269c:	003f9506 	br	424f4 <_strtol_r+0x8c>
   426a0:	00e00034 	movhi	r3,32768
   426a4:	18ffffc4 	addi	r3,r3,-1
   426a8:	003fef06 	br	42668 <_strtol_r+0x200>
   426ac:	04800204 	movi	r18,8
   426b0:	902b883a 	mov	r21,r18
   426b4:	003f8f06 	br	424f4 <_strtol_r+0x8c>

000426b8 <strtol>:
   426b8:	00800174 	movhi	r2,5
   426bc:	1095cf04 	addi	r2,r2,22332
   426c0:	2013883a 	mov	r9,r4
   426c4:	11000017 	ldw	r4,0(r2)
   426c8:	2805883a 	mov	r2,r5
   426cc:	300f883a 	mov	r7,r6
   426d0:	480b883a 	mov	r5,r9
   426d4:	100d883a 	mov	r6,r2
   426d8:	00424681 	jmpi	42468 <_strtol_r>

000426dc <__sprint_r>:
   426dc:	30800217 	ldw	r2,8(r6)
   426e0:	defffe04 	addi	sp,sp,-8
   426e4:	dc000015 	stw	r16,0(sp)
   426e8:	dfc00115 	stw	ra,4(sp)
   426ec:	3021883a 	mov	r16,r6
   426f0:	0007883a 	mov	r3,zero
   426f4:	1000061e 	bne	r2,zero,42710 <__sprint_r+0x34>
   426f8:	1805883a 	mov	r2,r3
   426fc:	30000115 	stw	zero,4(r6)
   42700:	dfc00117 	ldw	ra,4(sp)
   42704:	dc000017 	ldw	r16,0(sp)
   42708:	dec00204 	addi	sp,sp,8
   4270c:	f800283a 	ret
   42710:	00484100 	call	48410 <__sfvwrite_r>
   42714:	1007883a 	mov	r3,r2
   42718:	1805883a 	mov	r2,r3
   4271c:	80000115 	stw	zero,4(r16)
   42720:	80000215 	stw	zero,8(r16)
   42724:	dfc00117 	ldw	ra,4(sp)
   42728:	dc000017 	ldw	r16,0(sp)
   4272c:	dec00204 	addi	sp,sp,8
   42730:	f800283a 	ret

00042734 <___vfprintf_internal_r>:
   42734:	defea404 	addi	sp,sp,-1392
   42738:	dd815815 	stw	r22,1376(sp)
   4273c:	dc015215 	stw	r16,1352(sp)
   42740:	d9c15115 	stw	r7,1348(sp)
   42744:	dfc15b15 	stw	ra,1388(sp)
   42748:	df015a15 	stw	fp,1384(sp)
   4274c:	ddc15915 	stw	r23,1380(sp)
   42750:	dd415715 	stw	r21,1372(sp)
   42754:	dd015615 	stw	r20,1368(sp)
   42758:	dcc15515 	stw	r19,1364(sp)
   4275c:	dc815415 	stw	r18,1360(sp)
   42760:	dc415315 	stw	r17,1356(sp)
   42764:	282d883a 	mov	r22,r5
   42768:	3021883a 	mov	r16,r6
   4276c:	d9014f15 	stw	r4,1340(sp)
   42770:	0048ad00 	call	48ad0 <_localeconv_r>
   42774:	10800017 	ldw	r2,0(r2)
   42778:	d9c15117 	ldw	r7,1348(sp)
   4277c:	d8814915 	stw	r2,1316(sp)
   42780:	d8814f17 	ldw	r2,1340(sp)
   42784:	10000226 	beq	r2,zero,42790 <___vfprintf_internal_r+0x5c>
   42788:	10800e17 	ldw	r2,56(r2)
   4278c:	10020d26 	beq	r2,zero,42fc4 <___vfprintf_internal_r+0x890>
   42790:	b080030b 	ldhu	r2,12(r22)
   42794:	1080020c 	andi	r2,r2,8
   42798:	10020e26 	beq	r2,zero,42fd4 <___vfprintf_internal_r+0x8a0>
   4279c:	b0800417 	ldw	r2,16(r22)
   427a0:	10020c26 	beq	r2,zero,42fd4 <___vfprintf_internal_r+0x8a0>
   427a4:	b200030b 	ldhu	r8,12(r22)
   427a8:	00800284 	movi	r2,10
   427ac:	40c0068c 	andi	r3,r8,26
   427b0:	18802f1e 	bne	r3,r2,42870 <___vfprintf_internal_r+0x13c>
   427b4:	b080038f 	ldh	r2,14(r22)
   427b8:	10002d16 	blt	r2,zero,42870 <___vfprintf_internal_r+0x13c>
   427bc:	b240038b 	ldhu	r9,14(r22)
   427c0:	b2800717 	ldw	r10,28(r22)
   427c4:	b2c00917 	ldw	r11,36(r22)
   427c8:	d9014f17 	ldw	r4,1340(sp)
   427cc:	dc402904 	addi	r17,sp,164
   427d0:	d8804004 	addi	r2,sp,256
   427d4:	00c10004 	movi	r3,1024
   427d8:	423fff4c 	andi	r8,r8,65533
   427dc:	800d883a 	mov	r6,r16
   427e0:	880b883a 	mov	r5,r17
   427e4:	da002c0d 	sth	r8,176(sp)
   427e8:	da402c8d 	sth	r9,178(sp)
   427ec:	da803015 	stw	r10,192(sp)
   427f0:	dac03215 	stw	r11,200(sp)
   427f4:	d8802d15 	stw	r2,180(sp)
   427f8:	d8c02e15 	stw	r3,184(sp)
   427fc:	d8802915 	stw	r2,164(sp)
   42800:	d8c02b15 	stw	r3,172(sp)
   42804:	d8002f15 	stw	zero,188(sp)
   42808:	00427340 	call	42734 <___vfprintf_internal_r>
   4280c:	d8814b15 	stw	r2,1324(sp)
   42810:	10000416 	blt	r2,zero,42824 <___vfprintf_internal_r+0xf0>
   42814:	d9014f17 	ldw	r4,1340(sp)
   42818:	880b883a 	mov	r5,r17
   4281c:	00477c00 	call	477c0 <_fflush_r>
   42820:	1002321e 	bne	r2,zero,430ec <___vfprintf_internal_r+0x9b8>
   42824:	d8802c0b 	ldhu	r2,176(sp)
   42828:	1080100c 	andi	r2,r2,64
   4282c:	10000326 	beq	r2,zero,4283c <___vfprintf_internal_r+0x108>
   42830:	b080030b 	ldhu	r2,12(r22)
   42834:	10801014 	ori	r2,r2,64
   42838:	b080030d 	sth	r2,12(r22)
   4283c:	d8814b17 	ldw	r2,1324(sp)
   42840:	dfc15b17 	ldw	ra,1388(sp)
   42844:	df015a17 	ldw	fp,1384(sp)
   42848:	ddc15917 	ldw	r23,1380(sp)
   4284c:	dd815817 	ldw	r22,1376(sp)
   42850:	dd415717 	ldw	r21,1372(sp)
   42854:	dd015617 	ldw	r20,1368(sp)
   42858:	dcc15517 	ldw	r19,1364(sp)
   4285c:	dc815417 	ldw	r18,1360(sp)
   42860:	dc415317 	ldw	r17,1356(sp)
   42864:	dc015217 	ldw	r16,1352(sp)
   42868:	dec15c04 	addi	sp,sp,1392
   4286c:	f800283a 	ret
   42870:	0005883a 	mov	r2,zero
   42874:	0007883a 	mov	r3,zero
   42878:	dd401904 	addi	r21,sp,100
   4287c:	d8814215 	stw	r2,1288(sp)
   42880:	802f883a 	mov	r23,r16
   42884:	d8c14315 	stw	r3,1292(sp)
   42888:	d8014b15 	stw	zero,1324(sp)
   4288c:	d8014815 	stw	zero,1312(sp)
   42890:	d8014415 	stw	zero,1296(sp)
   42894:	d8014715 	stw	zero,1308(sp)
   42898:	dd400c15 	stw	r21,48(sp)
   4289c:	d8000e15 	stw	zero,56(sp)
   428a0:	d8000d15 	stw	zero,52(sp)
   428a4:	b8800007 	ldb	r2,0(r23)
   428a8:	10001926 	beq	r2,zero,42910 <___vfprintf_internal_r+0x1dc>
   428ac:	00c00944 	movi	r3,37
   428b0:	10c01726 	beq	r2,r3,42910 <___vfprintf_internal_r+0x1dc>
   428b4:	b821883a 	mov	r16,r23
   428b8:	00000106 	br	428c0 <___vfprintf_internal_r+0x18c>
   428bc:	10c00326 	beq	r2,r3,428cc <___vfprintf_internal_r+0x198>
   428c0:	84000044 	addi	r16,r16,1
   428c4:	80800007 	ldb	r2,0(r16)
   428c8:	103ffc1e 	bne	r2,zero,428bc <___vfprintf_internal_r+0x188>
   428cc:	85e7c83a 	sub	r19,r16,r23
   428d0:	98000e26 	beq	r19,zero,4290c <___vfprintf_internal_r+0x1d8>
   428d4:	dc800e17 	ldw	r18,56(sp)
   428d8:	dc400d17 	ldw	r17,52(sp)
   428dc:	008001c4 	movi	r2,7
   428e0:	94e5883a 	add	r18,r18,r19
   428e4:	8c400044 	addi	r17,r17,1
   428e8:	adc00015 	stw	r23,0(r21)
   428ec:	dc800e15 	stw	r18,56(sp)
   428f0:	acc00115 	stw	r19,4(r21)
   428f4:	dc400d15 	stw	r17,52(sp)
   428f8:	14428b16 	blt	r2,r17,43328 <___vfprintf_internal_r+0xbf4>
   428fc:	ad400204 	addi	r21,r21,8
   42900:	d9014b17 	ldw	r4,1324(sp)
   42904:	24c9883a 	add	r4,r4,r19
   42908:	d9014b15 	stw	r4,1324(sp)
   4290c:	802f883a 	mov	r23,r16
   42910:	b8800007 	ldb	r2,0(r23)
   42914:	10013c26 	beq	r2,zero,42e08 <___vfprintf_internal_r+0x6d4>
   42918:	bdc00044 	addi	r23,r23,1
   4291c:	d8000405 	stb	zero,16(sp)
   42920:	b8c00007 	ldb	r3,0(r23)
   42924:	04ffffc4 	movi	r19,-1
   42928:	d8014c15 	stw	zero,1328(sp)
   4292c:	d8014a15 	stw	zero,1320(sp)
   42930:	d8c14d15 	stw	r3,1332(sp)
   42934:	bdc00044 	addi	r23,r23,1
   42938:	d9414d17 	ldw	r5,1332(sp)
   4293c:	00801604 	movi	r2,88
   42940:	28fff804 	addi	r3,r5,-32
   42944:	10c06036 	bltu	r2,r3,42ac8 <___vfprintf_internal_r+0x394>
   42948:	18c5883a 	add	r2,r3,r3
   4294c:	1085883a 	add	r2,r2,r2
   42950:	00c00134 	movhi	r3,4
   42954:	18ca5904 	addi	r3,r3,10596
   42958:	10c5883a 	add	r2,r2,r3
   4295c:	11000017 	ldw	r4,0(r2)
   42960:	2000683a 	jmp	r4
   42964:	000438d8 	cmpnei	zero,zero,4323
   42968:	00042ac8 	cmpgei	zero,zero,4267
   4296c:	00042ac8 	cmpgei	zero,zero,4267
   42970:	000438c4 	movi	zero,4323
   42974:	00042ac8 	cmpgei	zero,zero,4267
   42978:	00042ac8 	cmpgei	zero,zero,4267
   4297c:	00042ac8 	cmpgei	zero,zero,4267
   42980:	00042ac8 	cmpgei	zero,zero,4267
   42984:	00042ac8 	cmpgei	zero,zero,4267
   42988:	00042ac8 	cmpgei	zero,zero,4267
   4298c:	000436a4 	muli	zero,zero,4314
   42990:	000438b4 	movhi	zero,4322
   42994:	00042ac8 	cmpgei	zero,zero,4267
   42998:	000436bc 	xorhi	zero,zero,4314
   4299c:	0004395c 	xori	zero,zero,4325
   429a0:	00042ac8 	cmpgei	zero,zero,4267
   429a4:	00043948 	cmpgei	zero,zero,4325
   429a8:	00043904 	movi	zero,4324
   429ac:	00043904 	movi	zero,4324
   429b0:	00043904 	movi	zero,4324
   429b4:	00043904 	movi	zero,4324
   429b8:	00043904 	movi	zero,4324
   429bc:	00043904 	movi	zero,4324
   429c0:	00043904 	movi	zero,4324
   429c4:	00043904 	movi	zero,4324
   429c8:	00043904 	movi	zero,4324
   429cc:	00042ac8 	cmpgei	zero,zero,4267
   429d0:	00042ac8 	cmpgei	zero,zero,4267
   429d4:	00042ac8 	cmpgei	zero,zero,4267
   429d8:	00042ac8 	cmpgei	zero,zero,4267
   429dc:	00042ac8 	cmpgei	zero,zero,4267
   429e0:	00042ac8 	cmpgei	zero,zero,4267
   429e4:	00042ac8 	cmpgei	zero,zero,4267
   429e8:	00042ac8 	cmpgei	zero,zero,4267
   429ec:	00042ac8 	cmpgei	zero,zero,4267
   429f0:	00042ac8 	cmpgei	zero,zero,4267
   429f4:	00043120 	cmpeqi	zero,zero,4292
   429f8:	0004378c 	andi	zero,zero,4318
   429fc:	00042ac8 	cmpgei	zero,zero,4267
   42a00:	0004378c 	andi	zero,zero,4318
   42a04:	00042ac8 	cmpgei	zero,zero,4267
   42a08:	00042ac8 	cmpgei	zero,zero,4267
   42a0c:	00042ac8 	cmpgei	zero,zero,4267
   42a10:	00042ac8 	cmpgei	zero,zero,4267
   42a14:	000438f0 	cmpltui	zero,zero,4323
   42a18:	00042ac8 	cmpgei	zero,zero,4267
   42a1c:	00042ac8 	cmpgei	zero,zero,4267
   42a20:	000431d4 	movui	zero,4295
   42a24:	00042ac8 	cmpgei	zero,zero,4267
   42a28:	00042ac8 	cmpgei	zero,zero,4267
   42a2c:	00042ac8 	cmpgei	zero,zero,4267
   42a30:	00042ac8 	cmpgei	zero,zero,4267
   42a34:	00042ac8 	cmpgei	zero,zero,4267
   42a38:	00043220 	cmpeqi	zero,zero,4296
   42a3c:	00042ac8 	cmpgei	zero,zero,4267
   42a40:	00042ac8 	cmpgei	zero,zero,4267
   42a44:	00043840 	call	4384 <__alt_mem_onchip_mem-0x3bc7c>
   42a48:	00042ac8 	cmpgei	zero,zero,4267
   42a4c:	00042ac8 	cmpgei	zero,zero,4267
   42a50:	00042ac8 	cmpgei	zero,zero,4267
   42a54:	00042ac8 	cmpgei	zero,zero,4267
   42a58:	00042ac8 	cmpgei	zero,zero,4267
   42a5c:	00042ac8 	cmpgei	zero,zero,4267
   42a60:	00042ac8 	cmpgei	zero,zero,4267
   42a64:	00042ac8 	cmpgei	zero,zero,4267
   42a68:	00042ac8 	cmpgei	zero,zero,4267
   42a6c:	00042ac8 	cmpgei	zero,zero,4267
   42a70:	00043814 	movui	zero,4320
   42a74:	0004312c 	andhi	zero,zero,4292
   42a78:	0004378c 	andi	zero,zero,4318
   42a7c:	0004378c 	andi	zero,zero,4318
   42a80:	0004378c 	andi	zero,zero,4318
   42a84:	00043778 	rdprs	zero,zero,4317
   42a88:	0004312c 	andhi	zero,zero,4292
   42a8c:	00042ac8 	cmpgei	zero,zero,4267
   42a90:	00042ac8 	cmpgei	zero,zero,4267
   42a94:	00043700 	call	4370 <__alt_mem_onchip_mem-0x3bc90>
   42a98:	00042ac8 	cmpgei	zero,zero,4267
   42a9c:	000436d0 	cmplti	zero,zero,4315
   42aa0:	000431e0 	cmpeqi	zero,zero,4295
   42aa4:	00043730 	cmpltui	zero,zero,4316
   42aa8:	0004371c 	xori	zero,zero,4316
   42aac:	00042ac8 	cmpgei	zero,zero,4267
   42ab0:	000439c4 	movi	zero,4327
   42ab4:	00042ac8 	cmpgei	zero,zero,4267
   42ab8:	0004322c 	andhi	zero,zero,4296
   42abc:	00042ac8 	cmpgei	zero,zero,4267
   42ac0:	00042ac8 	cmpgei	zero,zero,4267
   42ac4:	000438a4 	muli	zero,zero,4322
   42ac8:	d9014d17 	ldw	r4,1332(sp)
   42acc:	2000ce26 	beq	r4,zero,42e08 <___vfprintf_internal_r+0x6d4>
   42ad0:	01400044 	movi	r5,1
   42ad4:	d9800f04 	addi	r6,sp,60
   42ad8:	d9c14015 	stw	r7,1280(sp)
   42adc:	d9414515 	stw	r5,1300(sp)
   42ae0:	d9814115 	stw	r6,1284(sp)
   42ae4:	280f883a 	mov	r7,r5
   42ae8:	d9000f05 	stb	r4,60(sp)
   42aec:	d8000405 	stb	zero,16(sp)
   42af0:	d8014615 	stw	zero,1304(sp)
   42af4:	d8c14c17 	ldw	r3,1328(sp)
   42af8:	1880008c 	andi	r2,r3,2
   42afc:	1005003a 	cmpeq	r2,r2,zero
   42b00:	d8815015 	stw	r2,1344(sp)
   42b04:	1000031e 	bne	r2,zero,42b14 <___vfprintf_internal_r+0x3e0>
   42b08:	d9014517 	ldw	r4,1300(sp)
   42b0c:	21000084 	addi	r4,r4,2
   42b10:	d9014515 	stw	r4,1300(sp)
   42b14:	d9414c17 	ldw	r5,1328(sp)
   42b18:	2940210c 	andi	r5,r5,132
   42b1c:	d9414e15 	stw	r5,1336(sp)
   42b20:	28002d1e 	bne	r5,zero,42bd8 <___vfprintf_internal_r+0x4a4>
   42b24:	d9814a17 	ldw	r6,1320(sp)
   42b28:	d8814517 	ldw	r2,1300(sp)
   42b2c:	30a1c83a 	sub	r16,r6,r2
   42b30:	0400290e 	bge	zero,r16,42bd8 <___vfprintf_internal_r+0x4a4>
   42b34:	00800404 	movi	r2,16
   42b38:	14045e0e 	bge	r2,r16,43cb4 <___vfprintf_internal_r+0x1580>
   42b3c:	dc800e17 	ldw	r18,56(sp)
   42b40:	dc400d17 	ldw	r17,52(sp)
   42b44:	1027883a 	mov	r19,r2
   42b48:	07000174 	movhi	fp,5
   42b4c:	e70dbd84 	addi	fp,fp,14070
   42b50:	050001c4 	movi	r20,7
   42b54:	00000306 	br	42b64 <___vfprintf_internal_r+0x430>
   42b58:	843ffc04 	addi	r16,r16,-16
   42b5c:	ad400204 	addi	r21,r21,8
   42b60:	9c00130e 	bge	r19,r16,42bb0 <___vfprintf_internal_r+0x47c>
   42b64:	94800404 	addi	r18,r18,16
   42b68:	8c400044 	addi	r17,r17,1
   42b6c:	af000015 	stw	fp,0(r21)
   42b70:	acc00115 	stw	r19,4(r21)
   42b74:	dc800e15 	stw	r18,56(sp)
   42b78:	dc400d15 	stw	r17,52(sp)
   42b7c:	a47ff60e 	bge	r20,r17,42b58 <___vfprintf_internal_r+0x424>
   42b80:	d9014f17 	ldw	r4,1340(sp)
   42b84:	b00b883a 	mov	r5,r22
   42b88:	d9800c04 	addi	r6,sp,48
   42b8c:	d9c15115 	stw	r7,1348(sp)
   42b90:	00426dc0 	call	426dc <__sprint_r>
   42b94:	d9c15117 	ldw	r7,1348(sp)
   42b98:	10009e1e 	bne	r2,zero,42e14 <___vfprintf_internal_r+0x6e0>
   42b9c:	843ffc04 	addi	r16,r16,-16
   42ba0:	dc800e17 	ldw	r18,56(sp)
   42ba4:	dc400d17 	ldw	r17,52(sp)
   42ba8:	dd401904 	addi	r21,sp,100
   42bac:	9c3fed16 	blt	r19,r16,42b64 <___vfprintf_internal_r+0x430>
   42bb0:	9425883a 	add	r18,r18,r16
   42bb4:	8c400044 	addi	r17,r17,1
   42bb8:	008001c4 	movi	r2,7
   42bbc:	af000015 	stw	fp,0(r21)
   42bc0:	ac000115 	stw	r16,4(r21)
   42bc4:	dc800e15 	stw	r18,56(sp)
   42bc8:	dc400d15 	stw	r17,52(sp)
   42bcc:	1441f516 	blt	r2,r17,433a4 <___vfprintf_internal_r+0xc70>
   42bd0:	ad400204 	addi	r21,r21,8
   42bd4:	00000206 	br	42be0 <___vfprintf_internal_r+0x4ac>
   42bd8:	dc800e17 	ldw	r18,56(sp)
   42bdc:	dc400d17 	ldw	r17,52(sp)
   42be0:	d8800407 	ldb	r2,16(sp)
   42be4:	10000b26 	beq	r2,zero,42c14 <___vfprintf_internal_r+0x4e0>
   42be8:	00800044 	movi	r2,1
   42bec:	94800044 	addi	r18,r18,1
   42bf0:	8c400044 	addi	r17,r17,1
   42bf4:	a8800115 	stw	r2,4(r21)
   42bf8:	d8c00404 	addi	r3,sp,16
   42bfc:	008001c4 	movi	r2,7
   42c00:	a8c00015 	stw	r3,0(r21)
   42c04:	dc800e15 	stw	r18,56(sp)
   42c08:	dc400d15 	stw	r17,52(sp)
   42c0c:	1441da16 	blt	r2,r17,43378 <___vfprintf_internal_r+0xc44>
   42c10:	ad400204 	addi	r21,r21,8
   42c14:	d9015017 	ldw	r4,1344(sp)
   42c18:	20000b1e 	bne	r4,zero,42c48 <___vfprintf_internal_r+0x514>
   42c1c:	d8800444 	addi	r2,sp,17
   42c20:	94800084 	addi	r18,r18,2
   42c24:	8c400044 	addi	r17,r17,1
   42c28:	a8800015 	stw	r2,0(r21)
   42c2c:	00c00084 	movi	r3,2
   42c30:	008001c4 	movi	r2,7
   42c34:	a8c00115 	stw	r3,4(r21)
   42c38:	dc800e15 	stw	r18,56(sp)
   42c3c:	dc400d15 	stw	r17,52(sp)
   42c40:	1441c216 	blt	r2,r17,4334c <___vfprintf_internal_r+0xc18>
   42c44:	ad400204 	addi	r21,r21,8
   42c48:	d9414e17 	ldw	r5,1336(sp)
   42c4c:	00802004 	movi	r2,128
   42c50:	2880b126 	beq	r5,r2,42f18 <___vfprintf_internal_r+0x7e4>
   42c54:	d8c14617 	ldw	r3,1304(sp)
   42c58:	19e1c83a 	sub	r16,r3,r7
   42c5c:	0400260e 	bge	zero,r16,42cf8 <___vfprintf_internal_r+0x5c4>
   42c60:	00800404 	movi	r2,16
   42c64:	1403cf0e 	bge	r2,r16,43ba4 <___vfprintf_internal_r+0x1470>
   42c68:	1027883a 	mov	r19,r2
   42c6c:	07000174 	movhi	fp,5
   42c70:	e70db984 	addi	fp,fp,14054
   42c74:	050001c4 	movi	r20,7
   42c78:	00000306 	br	42c88 <___vfprintf_internal_r+0x554>
   42c7c:	843ffc04 	addi	r16,r16,-16
   42c80:	ad400204 	addi	r21,r21,8
   42c84:	9c00130e 	bge	r19,r16,42cd4 <___vfprintf_internal_r+0x5a0>
   42c88:	94800404 	addi	r18,r18,16
   42c8c:	8c400044 	addi	r17,r17,1
   42c90:	af000015 	stw	fp,0(r21)
   42c94:	acc00115 	stw	r19,4(r21)
   42c98:	dc800e15 	stw	r18,56(sp)
   42c9c:	dc400d15 	stw	r17,52(sp)
   42ca0:	a47ff60e 	bge	r20,r17,42c7c <___vfprintf_internal_r+0x548>
   42ca4:	d9014f17 	ldw	r4,1340(sp)
   42ca8:	b00b883a 	mov	r5,r22
   42cac:	d9800c04 	addi	r6,sp,48
   42cb0:	d9c15115 	stw	r7,1348(sp)
   42cb4:	00426dc0 	call	426dc <__sprint_r>
   42cb8:	d9c15117 	ldw	r7,1348(sp)
   42cbc:	1000551e 	bne	r2,zero,42e14 <___vfprintf_internal_r+0x6e0>
   42cc0:	843ffc04 	addi	r16,r16,-16
   42cc4:	dc800e17 	ldw	r18,56(sp)
   42cc8:	dc400d17 	ldw	r17,52(sp)
   42ccc:	dd401904 	addi	r21,sp,100
   42cd0:	9c3fed16 	blt	r19,r16,42c88 <___vfprintf_internal_r+0x554>
   42cd4:	9425883a 	add	r18,r18,r16
   42cd8:	8c400044 	addi	r17,r17,1
   42cdc:	008001c4 	movi	r2,7
   42ce0:	af000015 	stw	fp,0(r21)
   42ce4:	ac000115 	stw	r16,4(r21)
   42ce8:	dc800e15 	stw	r18,56(sp)
   42cec:	dc400d15 	stw	r17,52(sp)
   42cf0:	14418216 	blt	r2,r17,432fc <___vfprintf_internal_r+0xbc8>
   42cf4:	ad400204 	addi	r21,r21,8
   42cf8:	d9014c17 	ldw	r4,1328(sp)
   42cfc:	2080400c 	andi	r2,r4,256
   42d00:	10004a1e 	bne	r2,zero,42e2c <___vfprintf_internal_r+0x6f8>
   42d04:	d9414117 	ldw	r5,1284(sp)
   42d08:	91e5883a 	add	r18,r18,r7
   42d0c:	8c400044 	addi	r17,r17,1
   42d10:	008001c4 	movi	r2,7
   42d14:	a9400015 	stw	r5,0(r21)
   42d18:	a9c00115 	stw	r7,4(r21)
   42d1c:	dc800e15 	stw	r18,56(sp)
   42d20:	dc400d15 	stw	r17,52(sp)
   42d24:	14416716 	blt	r2,r17,432c4 <___vfprintf_internal_r+0xb90>
   42d28:	a8c00204 	addi	r3,r21,8
   42d2c:	d9814c17 	ldw	r6,1328(sp)
   42d30:	3080010c 	andi	r2,r6,4
   42d34:	10002826 	beq	r2,zero,42dd8 <___vfprintf_internal_r+0x6a4>
   42d38:	d8814a17 	ldw	r2,1320(sp)
   42d3c:	d9014517 	ldw	r4,1300(sp)
   42d40:	1121c83a 	sub	r16,r2,r4
   42d44:	0400240e 	bge	zero,r16,42dd8 <___vfprintf_internal_r+0x6a4>
   42d48:	00800404 	movi	r2,16
   42d4c:	1404550e 	bge	r2,r16,43ea4 <___vfprintf_internal_r+0x1770>
   42d50:	dc400d17 	ldw	r17,52(sp)
   42d54:	1027883a 	mov	r19,r2
   42d58:	07000174 	movhi	fp,5
   42d5c:	e70dbd84 	addi	fp,fp,14070
   42d60:	050001c4 	movi	r20,7
   42d64:	00000306 	br	42d74 <___vfprintf_internal_r+0x640>
   42d68:	843ffc04 	addi	r16,r16,-16
   42d6c:	18c00204 	addi	r3,r3,8
   42d70:	9c00110e 	bge	r19,r16,42db8 <___vfprintf_internal_r+0x684>
   42d74:	94800404 	addi	r18,r18,16
   42d78:	8c400044 	addi	r17,r17,1
   42d7c:	1f000015 	stw	fp,0(r3)
   42d80:	1cc00115 	stw	r19,4(r3)
   42d84:	dc800e15 	stw	r18,56(sp)
   42d88:	dc400d15 	stw	r17,52(sp)
   42d8c:	a47ff60e 	bge	r20,r17,42d68 <___vfprintf_internal_r+0x634>
   42d90:	d9014f17 	ldw	r4,1340(sp)
   42d94:	b00b883a 	mov	r5,r22
   42d98:	d9800c04 	addi	r6,sp,48
   42d9c:	00426dc0 	call	426dc <__sprint_r>
   42da0:	10001c1e 	bne	r2,zero,42e14 <___vfprintf_internal_r+0x6e0>
   42da4:	843ffc04 	addi	r16,r16,-16
   42da8:	dc800e17 	ldw	r18,56(sp)
   42dac:	dc400d17 	ldw	r17,52(sp)
   42db0:	d8c01904 	addi	r3,sp,100
   42db4:	9c3fef16 	blt	r19,r16,42d74 <___vfprintf_internal_r+0x640>
   42db8:	9425883a 	add	r18,r18,r16
   42dbc:	8c400044 	addi	r17,r17,1
   42dc0:	008001c4 	movi	r2,7
   42dc4:	1f000015 	stw	fp,0(r3)
   42dc8:	1c000115 	stw	r16,4(r3)
   42dcc:	dc800e15 	stw	r18,56(sp)
   42dd0:	dc400d15 	stw	r17,52(sp)
   42dd4:	1440cb16 	blt	r2,r17,43104 <___vfprintf_internal_r+0x9d0>
   42dd8:	d8814a17 	ldw	r2,1320(sp)
   42ddc:	d9414517 	ldw	r5,1300(sp)
   42de0:	1140010e 	bge	r2,r5,42de8 <___vfprintf_internal_r+0x6b4>
   42de4:	2805883a 	mov	r2,r5
   42de8:	d9814b17 	ldw	r6,1324(sp)
   42dec:	308d883a 	add	r6,r6,r2
   42df0:	d9814b15 	stw	r6,1324(sp)
   42df4:	90013b1e 	bne	r18,zero,432e4 <___vfprintf_internal_r+0xbb0>
   42df8:	d9c14017 	ldw	r7,1280(sp)
   42dfc:	dd401904 	addi	r21,sp,100
   42e00:	d8000d15 	stw	zero,52(sp)
   42e04:	003ea706 	br	428a4 <___vfprintf_internal_r+0x170>
   42e08:	d8800e17 	ldw	r2,56(sp)
   42e0c:	1005451e 	bne	r2,zero,44324 <___vfprintf_internal_r+0x1bf0>
   42e10:	d8000d15 	stw	zero,52(sp)
   42e14:	b080030b 	ldhu	r2,12(r22)
   42e18:	1080100c 	andi	r2,r2,64
   42e1c:	103e8726 	beq	r2,zero,4283c <___vfprintf_internal_r+0x108>
   42e20:	00bfffc4 	movi	r2,-1
   42e24:	d8814b15 	stw	r2,1324(sp)
   42e28:	003e8406 	br	4283c <___vfprintf_internal_r+0x108>
   42e2c:	d9814d17 	ldw	r6,1332(sp)
   42e30:	00801944 	movi	r2,101
   42e34:	11806e16 	blt	r2,r6,42ff0 <___vfprintf_internal_r+0x8bc>
   42e38:	d9414717 	ldw	r5,1308(sp)
   42e3c:	00c00044 	movi	r3,1
   42e40:	1943490e 	bge	r3,r5,43b68 <___vfprintf_internal_r+0x1434>
   42e44:	d8814117 	ldw	r2,1284(sp)
   42e48:	94800044 	addi	r18,r18,1
   42e4c:	8c400044 	addi	r17,r17,1
   42e50:	a8800015 	stw	r2,0(r21)
   42e54:	008001c4 	movi	r2,7
   42e58:	a8c00115 	stw	r3,4(r21)
   42e5c:	dc800e15 	stw	r18,56(sp)
   42e60:	dc400d15 	stw	r17,52(sp)
   42e64:	1441ca16 	blt	r2,r17,43590 <___vfprintf_internal_r+0xe5c>
   42e68:	a8c00204 	addi	r3,r21,8
   42e6c:	d9014917 	ldw	r4,1316(sp)
   42e70:	00800044 	movi	r2,1
   42e74:	94800044 	addi	r18,r18,1
   42e78:	8c400044 	addi	r17,r17,1
   42e7c:	18800115 	stw	r2,4(r3)
   42e80:	008001c4 	movi	r2,7
   42e84:	19000015 	stw	r4,0(r3)
   42e88:	dc800e15 	stw	r18,56(sp)
   42e8c:	dc400d15 	stw	r17,52(sp)
   42e90:	1441b616 	blt	r2,r17,4356c <___vfprintf_internal_r+0xe38>
   42e94:	1cc00204 	addi	r19,r3,8
   42e98:	d9014217 	ldw	r4,1288(sp)
   42e9c:	d9414317 	ldw	r5,1292(sp)
   42ea0:	000d883a 	mov	r6,zero
   42ea4:	000f883a 	mov	r7,zero
   42ea8:	004f5700 	call	4f570 <__nedf2>
   42eac:	10017426 	beq	r2,zero,43480 <___vfprintf_internal_r+0xd4c>
   42eb0:	d9414717 	ldw	r5,1308(sp)
   42eb4:	d9814117 	ldw	r6,1284(sp)
   42eb8:	8c400044 	addi	r17,r17,1
   42ebc:	2c85883a 	add	r2,r5,r18
   42ec0:	14bfffc4 	addi	r18,r2,-1
   42ec4:	28bfffc4 	addi	r2,r5,-1
   42ec8:	30c00044 	addi	r3,r6,1
   42ecc:	98800115 	stw	r2,4(r19)
   42ed0:	008001c4 	movi	r2,7
   42ed4:	98c00015 	stw	r3,0(r19)
   42ed8:	dc800e15 	stw	r18,56(sp)
   42edc:	dc400d15 	stw	r17,52(sp)
   42ee0:	14418e16 	blt	r2,r17,4351c <___vfprintf_internal_r+0xde8>
   42ee4:	9cc00204 	addi	r19,r19,8
   42ee8:	d9414817 	ldw	r5,1312(sp)
   42eec:	d8800804 	addi	r2,sp,32
   42ef0:	8c400044 	addi	r17,r17,1
   42ef4:	9165883a 	add	r18,r18,r5
   42ef8:	98800015 	stw	r2,0(r19)
   42efc:	008001c4 	movi	r2,7
   42f00:	99400115 	stw	r5,4(r19)
   42f04:	dc800e15 	stw	r18,56(sp)
   42f08:	dc400d15 	stw	r17,52(sp)
   42f0c:	1440ed16 	blt	r2,r17,432c4 <___vfprintf_internal_r+0xb90>
   42f10:	98c00204 	addi	r3,r19,8
   42f14:	003f8506 	br	42d2c <___vfprintf_internal_r+0x5f8>
   42f18:	d9814a17 	ldw	r6,1320(sp)
   42f1c:	d8814517 	ldw	r2,1300(sp)
   42f20:	30a1c83a 	sub	r16,r6,r2
   42f24:	043f4b0e 	bge	zero,r16,42c54 <___vfprintf_internal_r+0x520>
   42f28:	00800404 	movi	r2,16
   42f2c:	14043a0e 	bge	r2,r16,44018 <___vfprintf_internal_r+0x18e4>
   42f30:	1027883a 	mov	r19,r2
   42f34:	07000174 	movhi	fp,5
   42f38:	e70db984 	addi	fp,fp,14054
   42f3c:	050001c4 	movi	r20,7
   42f40:	00000306 	br	42f50 <___vfprintf_internal_r+0x81c>
   42f44:	843ffc04 	addi	r16,r16,-16
   42f48:	ad400204 	addi	r21,r21,8
   42f4c:	9c00130e 	bge	r19,r16,42f9c <___vfprintf_internal_r+0x868>
   42f50:	94800404 	addi	r18,r18,16
   42f54:	8c400044 	addi	r17,r17,1
   42f58:	af000015 	stw	fp,0(r21)
   42f5c:	acc00115 	stw	r19,4(r21)
   42f60:	dc800e15 	stw	r18,56(sp)
   42f64:	dc400d15 	stw	r17,52(sp)
   42f68:	a47ff60e 	bge	r20,r17,42f44 <___vfprintf_internal_r+0x810>
   42f6c:	d9014f17 	ldw	r4,1340(sp)
   42f70:	b00b883a 	mov	r5,r22
   42f74:	d9800c04 	addi	r6,sp,48
   42f78:	d9c15115 	stw	r7,1348(sp)
   42f7c:	00426dc0 	call	426dc <__sprint_r>
   42f80:	d9c15117 	ldw	r7,1348(sp)
   42f84:	103fa31e 	bne	r2,zero,42e14 <___vfprintf_internal_r+0x6e0>
   42f88:	843ffc04 	addi	r16,r16,-16
   42f8c:	dc800e17 	ldw	r18,56(sp)
   42f90:	dc400d17 	ldw	r17,52(sp)
   42f94:	dd401904 	addi	r21,sp,100
   42f98:	9c3fed16 	blt	r19,r16,42f50 <___vfprintf_internal_r+0x81c>
   42f9c:	9425883a 	add	r18,r18,r16
   42fa0:	8c400044 	addi	r17,r17,1
   42fa4:	008001c4 	movi	r2,7
   42fa8:	af000015 	stw	fp,0(r21)
   42fac:	ac000115 	stw	r16,4(r21)
   42fb0:	dc800e15 	stw	r18,56(sp)
   42fb4:	dc400d15 	stw	r17,52(sp)
   42fb8:	14416116 	blt	r2,r17,43540 <___vfprintf_internal_r+0xe0c>
   42fbc:	ad400204 	addi	r21,r21,8
   42fc0:	003f2406 	br	42c54 <___vfprintf_internal_r+0x520>
   42fc4:	d9014f17 	ldw	r4,1340(sp)
   42fc8:	0047a580 	call	47a58 <__sinit>
   42fcc:	d9c15117 	ldw	r7,1348(sp)
   42fd0:	003def06 	br	42790 <___vfprintf_internal_r+0x5c>
   42fd4:	d9014f17 	ldw	r4,1340(sp)
   42fd8:	b00b883a 	mov	r5,r22
   42fdc:	d9c15115 	stw	r7,1348(sp)
   42fe0:	0045e1c0 	call	45e1c <__swsetup_r>
   42fe4:	d9c15117 	ldw	r7,1348(sp)
   42fe8:	103dee26 	beq	r2,zero,427a4 <___vfprintf_internal_r+0x70>
   42fec:	003f8c06 	br	42e20 <___vfprintf_internal_r+0x6ec>
   42ff0:	d9014217 	ldw	r4,1288(sp)
   42ff4:	d9414317 	ldw	r5,1292(sp)
   42ff8:	000d883a 	mov	r6,zero
   42ffc:	000f883a 	mov	r7,zero
   43000:	004f4e80 	call	4f4e8 <__eqdf2>
   43004:	1000f21e 	bne	r2,zero,433d0 <___vfprintf_internal_r+0xc9c>
   43008:	00800174 	movhi	r2,5
   4300c:	108db904 	addi	r2,r2,14052
   43010:	94800044 	addi	r18,r18,1
   43014:	8c400044 	addi	r17,r17,1
   43018:	a8800015 	stw	r2,0(r21)
   4301c:	00c00044 	movi	r3,1
   43020:	008001c4 	movi	r2,7
   43024:	a8c00115 	stw	r3,4(r21)
   43028:	dc800e15 	stw	r18,56(sp)
   4302c:	dc400d15 	stw	r17,52(sp)
   43030:	14430016 	blt	r2,r17,43c34 <___vfprintf_internal_r+0x1500>
   43034:	a8c00204 	addi	r3,r21,8
   43038:	d8800517 	ldw	r2,20(sp)
   4303c:	d9014717 	ldw	r4,1308(sp)
   43040:	11015c0e 	bge	r2,r4,435b4 <___vfprintf_internal_r+0xe80>
   43044:	dc400d17 	ldw	r17,52(sp)
   43048:	d9814917 	ldw	r6,1316(sp)
   4304c:	00800044 	movi	r2,1
   43050:	94800044 	addi	r18,r18,1
   43054:	8c400044 	addi	r17,r17,1
   43058:	18800115 	stw	r2,4(r3)
   4305c:	008001c4 	movi	r2,7
   43060:	19800015 	stw	r6,0(r3)
   43064:	dc800e15 	stw	r18,56(sp)
   43068:	dc400d15 	stw	r17,52(sp)
   4306c:	14431616 	blt	r2,r17,43cc8 <___vfprintf_internal_r+0x1594>
   43070:	18c00204 	addi	r3,r3,8
   43074:	d8814717 	ldw	r2,1308(sp)
   43078:	143fffc4 	addi	r16,r2,-1
   4307c:	043f2b0e 	bge	zero,r16,42d2c <___vfprintf_internal_r+0x5f8>
   43080:	00800404 	movi	r2,16
   43084:	1402a80e 	bge	r2,r16,43b28 <___vfprintf_internal_r+0x13f4>
   43088:	dc400d17 	ldw	r17,52(sp)
   4308c:	1027883a 	mov	r19,r2
   43090:	07000174 	movhi	fp,5
   43094:	e70db984 	addi	fp,fp,14054
   43098:	050001c4 	movi	r20,7
   4309c:	00000306 	br	430ac <___vfprintf_internal_r+0x978>
   430a0:	18c00204 	addi	r3,r3,8
   430a4:	843ffc04 	addi	r16,r16,-16
   430a8:	9c02a20e 	bge	r19,r16,43b34 <___vfprintf_internal_r+0x1400>
   430ac:	94800404 	addi	r18,r18,16
   430b0:	8c400044 	addi	r17,r17,1
   430b4:	1f000015 	stw	fp,0(r3)
   430b8:	1cc00115 	stw	r19,4(r3)
   430bc:	dc800e15 	stw	r18,56(sp)
   430c0:	dc400d15 	stw	r17,52(sp)
   430c4:	a47ff60e 	bge	r20,r17,430a0 <___vfprintf_internal_r+0x96c>
   430c8:	d9014f17 	ldw	r4,1340(sp)
   430cc:	b00b883a 	mov	r5,r22
   430d0:	d9800c04 	addi	r6,sp,48
   430d4:	00426dc0 	call	426dc <__sprint_r>
   430d8:	103f4e1e 	bne	r2,zero,42e14 <___vfprintf_internal_r+0x6e0>
   430dc:	dc800e17 	ldw	r18,56(sp)
   430e0:	dc400d17 	ldw	r17,52(sp)
   430e4:	d8c01904 	addi	r3,sp,100
   430e8:	003fee06 	br	430a4 <___vfprintf_internal_r+0x970>
   430ec:	d8802c0b 	ldhu	r2,176(sp)
   430f0:	00ffffc4 	movi	r3,-1
   430f4:	d8c14b15 	stw	r3,1324(sp)
   430f8:	1080100c 	andi	r2,r2,64
   430fc:	103dcc1e 	bne	r2,zero,42830 <___vfprintf_internal_r+0xfc>
   43100:	003dce06 	br	4283c <___vfprintf_internal_r+0x108>
   43104:	d9014f17 	ldw	r4,1340(sp)
   43108:	b00b883a 	mov	r5,r22
   4310c:	d9800c04 	addi	r6,sp,48
   43110:	00426dc0 	call	426dc <__sprint_r>
   43114:	103f3f1e 	bne	r2,zero,42e14 <___vfprintf_internal_r+0x6e0>
   43118:	dc800e17 	ldw	r18,56(sp)
   4311c:	003f2e06 	br	42dd8 <___vfprintf_internal_r+0x6a4>
   43120:	d9414c17 	ldw	r5,1328(sp)
   43124:	29400414 	ori	r5,r5,16
   43128:	d9414c15 	stw	r5,1328(sp)
   4312c:	d9814c17 	ldw	r6,1328(sp)
   43130:	3080080c 	andi	r2,r6,32
   43134:	10014f1e 	bne	r2,zero,43674 <___vfprintf_internal_r+0xf40>
   43138:	d8c14c17 	ldw	r3,1328(sp)
   4313c:	1880040c 	andi	r2,r3,16
   43140:	1002f01e 	bne	r2,zero,43d04 <___vfprintf_internal_r+0x15d0>
   43144:	d9014c17 	ldw	r4,1328(sp)
   43148:	2080100c 	andi	r2,r4,64
   4314c:	1002ed26 	beq	r2,zero,43d04 <___vfprintf_internal_r+0x15d0>
   43150:	3880000f 	ldh	r2,0(r7)
   43154:	39c00104 	addi	r7,r7,4
   43158:	d9c14015 	stw	r7,1280(sp)
   4315c:	1023d7fa 	srai	r17,r2,31
   43160:	1021883a 	mov	r16,r2
   43164:	88037816 	blt	r17,zero,43f48 <___vfprintf_internal_r+0x1814>
   43168:	01000044 	movi	r4,1
   4316c:	98000416 	blt	r19,zero,43180 <___vfprintf_internal_r+0xa4c>
   43170:	d8c14c17 	ldw	r3,1328(sp)
   43174:	00bfdfc4 	movi	r2,-129
   43178:	1886703a 	and	r3,r3,r2
   4317c:	d8c14c15 	stw	r3,1328(sp)
   43180:	8444b03a 	or	r2,r16,r17
   43184:	10022c1e 	bne	r2,zero,43a38 <___vfprintf_internal_r+0x1304>
   43188:	98022b1e 	bne	r19,zero,43a38 <___vfprintf_internal_r+0x1304>
   4318c:	20803fcc 	andi	r2,r4,255
   43190:	1002a126 	beq	r2,zero,43c18 <___vfprintf_internal_r+0x14e4>
   43194:	d8c01904 	addi	r3,sp,100
   43198:	dd000f04 	addi	r20,sp,60
   4319c:	d8c14115 	stw	r3,1284(sp)
   431a0:	d8c14117 	ldw	r3,1284(sp)
   431a4:	dcc14515 	stw	r19,1300(sp)
   431a8:	a0c5c83a 	sub	r2,r20,r3
   431ac:	11c00a04 	addi	r7,r2,40
   431b0:	99c0010e 	bge	r19,r7,431b8 <___vfprintf_internal_r+0xa84>
   431b4:	d9c14515 	stw	r7,1300(sp)
   431b8:	dcc14615 	stw	r19,1304(sp)
   431bc:	d8800407 	ldb	r2,16(sp)
   431c0:	103e4c26 	beq	r2,zero,42af4 <___vfprintf_internal_r+0x3c0>
   431c4:	d8814517 	ldw	r2,1300(sp)
   431c8:	10800044 	addi	r2,r2,1
   431cc:	d8814515 	stw	r2,1300(sp)
   431d0:	003e4806 	br	42af4 <___vfprintf_internal_r+0x3c0>
   431d4:	d9814c17 	ldw	r6,1328(sp)
   431d8:	31800414 	ori	r6,r6,16
   431dc:	d9814c15 	stw	r6,1328(sp)
   431e0:	d8c14c17 	ldw	r3,1328(sp)
   431e4:	1880080c 	andi	r2,r3,32
   431e8:	1001271e 	bne	r2,zero,43688 <___vfprintf_internal_r+0xf54>
   431ec:	d9414c17 	ldw	r5,1328(sp)
   431f0:	2880040c 	andi	r2,r5,16
   431f4:	1002bc1e 	bne	r2,zero,43ce8 <___vfprintf_internal_r+0x15b4>
   431f8:	d9814c17 	ldw	r6,1328(sp)
   431fc:	3080100c 	andi	r2,r6,64
   43200:	1002b926 	beq	r2,zero,43ce8 <___vfprintf_internal_r+0x15b4>
   43204:	3c00000b 	ldhu	r16,0(r7)
   43208:	0009883a 	mov	r4,zero
   4320c:	39c00104 	addi	r7,r7,4
   43210:	0023883a 	mov	r17,zero
   43214:	d9c14015 	stw	r7,1280(sp)
   43218:	d8000405 	stb	zero,16(sp)
   4321c:	003fd306 	br	4316c <___vfprintf_internal_r+0xa38>
   43220:	d9014c17 	ldw	r4,1328(sp)
   43224:	21000414 	ori	r4,r4,16
   43228:	d9014c15 	stw	r4,1328(sp)
   4322c:	d9414c17 	ldw	r5,1328(sp)
   43230:	2880080c 	andi	r2,r5,32
   43234:	1001081e 	bne	r2,zero,43658 <___vfprintf_internal_r+0xf24>
   43238:	d8c14c17 	ldw	r3,1328(sp)
   4323c:	1880040c 	andi	r2,r3,16
   43240:	1002b61e 	bne	r2,zero,43d1c <___vfprintf_internal_r+0x15e8>
   43244:	d9014c17 	ldw	r4,1328(sp)
   43248:	2080100c 	andi	r2,r4,64
   4324c:	1002b326 	beq	r2,zero,43d1c <___vfprintf_internal_r+0x15e8>
   43250:	3c00000b 	ldhu	r16,0(r7)
   43254:	01000044 	movi	r4,1
   43258:	39c00104 	addi	r7,r7,4
   4325c:	0023883a 	mov	r17,zero
   43260:	d9c14015 	stw	r7,1280(sp)
   43264:	d8000405 	stb	zero,16(sp)
   43268:	003fc006 	br	4316c <___vfprintf_internal_r+0xa38>
   4326c:	d9014f17 	ldw	r4,1340(sp)
   43270:	b00b883a 	mov	r5,r22
   43274:	d9800c04 	addi	r6,sp,48
   43278:	00426dc0 	call	426dc <__sprint_r>
   4327c:	103ee51e 	bne	r2,zero,42e14 <___vfprintf_internal_r+0x6e0>
   43280:	dc800e17 	ldw	r18,56(sp)
   43284:	d8c01904 	addi	r3,sp,100
   43288:	d9814c17 	ldw	r6,1328(sp)
   4328c:	3080004c 	andi	r2,r6,1
   43290:	1005003a 	cmpeq	r2,r2,zero
   43294:	103ea51e 	bne	r2,zero,42d2c <___vfprintf_internal_r+0x5f8>
   43298:	00800044 	movi	r2,1
   4329c:	dc400d17 	ldw	r17,52(sp)
   432a0:	18800115 	stw	r2,4(r3)
   432a4:	d8814917 	ldw	r2,1316(sp)
   432a8:	94800044 	addi	r18,r18,1
   432ac:	8c400044 	addi	r17,r17,1
   432b0:	18800015 	stw	r2,0(r3)
   432b4:	008001c4 	movi	r2,7
   432b8:	dc800e15 	stw	r18,56(sp)
   432bc:	dc400d15 	stw	r17,52(sp)
   432c0:	1442240e 	bge	r2,r17,43b54 <___vfprintf_internal_r+0x1420>
   432c4:	d9014f17 	ldw	r4,1340(sp)
   432c8:	b00b883a 	mov	r5,r22
   432cc:	d9800c04 	addi	r6,sp,48
   432d0:	00426dc0 	call	426dc <__sprint_r>
   432d4:	103ecf1e 	bne	r2,zero,42e14 <___vfprintf_internal_r+0x6e0>
   432d8:	dc800e17 	ldw	r18,56(sp)
   432dc:	d8c01904 	addi	r3,sp,100
   432e0:	003e9206 	br	42d2c <___vfprintf_internal_r+0x5f8>
   432e4:	d9014f17 	ldw	r4,1340(sp)
   432e8:	b00b883a 	mov	r5,r22
   432ec:	d9800c04 	addi	r6,sp,48
   432f0:	00426dc0 	call	426dc <__sprint_r>
   432f4:	103ec026 	beq	r2,zero,42df8 <___vfprintf_internal_r+0x6c4>
   432f8:	003ec606 	br	42e14 <___vfprintf_internal_r+0x6e0>
   432fc:	d9014f17 	ldw	r4,1340(sp)
   43300:	b00b883a 	mov	r5,r22
   43304:	d9800c04 	addi	r6,sp,48
   43308:	d9c15115 	stw	r7,1348(sp)
   4330c:	00426dc0 	call	426dc <__sprint_r>
   43310:	d9c15117 	ldw	r7,1348(sp)
   43314:	103ebf1e 	bne	r2,zero,42e14 <___vfprintf_internal_r+0x6e0>
   43318:	dc800e17 	ldw	r18,56(sp)
   4331c:	dc400d17 	ldw	r17,52(sp)
   43320:	dd401904 	addi	r21,sp,100
   43324:	003e7406 	br	42cf8 <___vfprintf_internal_r+0x5c4>
   43328:	d9014f17 	ldw	r4,1340(sp)
   4332c:	b00b883a 	mov	r5,r22
   43330:	d9800c04 	addi	r6,sp,48
   43334:	d9c15115 	stw	r7,1348(sp)
   43338:	00426dc0 	call	426dc <__sprint_r>
   4333c:	d9c15117 	ldw	r7,1348(sp)
   43340:	103eb41e 	bne	r2,zero,42e14 <___vfprintf_internal_r+0x6e0>
   43344:	dd401904 	addi	r21,sp,100
   43348:	003d6d06 	br	42900 <___vfprintf_internal_r+0x1cc>
   4334c:	d9014f17 	ldw	r4,1340(sp)
   43350:	b00b883a 	mov	r5,r22
   43354:	d9800c04 	addi	r6,sp,48
   43358:	d9c15115 	stw	r7,1348(sp)
   4335c:	00426dc0 	call	426dc <__sprint_r>
   43360:	d9c15117 	ldw	r7,1348(sp)
   43364:	103eab1e 	bne	r2,zero,42e14 <___vfprintf_internal_r+0x6e0>
   43368:	dc800e17 	ldw	r18,56(sp)
   4336c:	dc400d17 	ldw	r17,52(sp)
   43370:	dd401904 	addi	r21,sp,100
   43374:	003e3406 	br	42c48 <___vfprintf_internal_r+0x514>
   43378:	d9014f17 	ldw	r4,1340(sp)
   4337c:	b00b883a 	mov	r5,r22
   43380:	d9800c04 	addi	r6,sp,48
   43384:	d9c15115 	stw	r7,1348(sp)
   43388:	00426dc0 	call	426dc <__sprint_r>
   4338c:	d9c15117 	ldw	r7,1348(sp)
   43390:	103ea01e 	bne	r2,zero,42e14 <___vfprintf_internal_r+0x6e0>
   43394:	dc800e17 	ldw	r18,56(sp)
   43398:	dc400d17 	ldw	r17,52(sp)
   4339c:	dd401904 	addi	r21,sp,100
   433a0:	003e1c06 	br	42c14 <___vfprintf_internal_r+0x4e0>
   433a4:	d9014f17 	ldw	r4,1340(sp)
   433a8:	b00b883a 	mov	r5,r22
   433ac:	d9800c04 	addi	r6,sp,48
   433b0:	d9c15115 	stw	r7,1348(sp)
   433b4:	00426dc0 	call	426dc <__sprint_r>
   433b8:	d9c15117 	ldw	r7,1348(sp)
   433bc:	103e951e 	bne	r2,zero,42e14 <___vfprintf_internal_r+0x6e0>
   433c0:	dc800e17 	ldw	r18,56(sp)
   433c4:	dc400d17 	ldw	r17,52(sp)
   433c8:	dd401904 	addi	r21,sp,100
   433cc:	003e0406 	br	42be0 <___vfprintf_internal_r+0x4ac>
   433d0:	d9000517 	ldw	r4,20(sp)
   433d4:	0102580e 	bge	zero,r4,43d38 <___vfprintf_internal_r+0x1604>
   433d8:	d9814717 	ldw	r6,1308(sp)
   433dc:	21807a16 	blt	r4,r6,435c8 <___vfprintf_internal_r+0xe94>
   433e0:	d8814117 	ldw	r2,1284(sp)
   433e4:	91a5883a 	add	r18,r18,r6
   433e8:	8c400044 	addi	r17,r17,1
   433ec:	a8800015 	stw	r2,0(r21)
   433f0:	008001c4 	movi	r2,7
   433f4:	a9800115 	stw	r6,4(r21)
   433f8:	dc800e15 	stw	r18,56(sp)
   433fc:	dc400d15 	stw	r17,52(sp)
   43400:	1442fc16 	blt	r2,r17,43ff4 <___vfprintf_internal_r+0x18c0>
   43404:	a8c00204 	addi	r3,r21,8
   43408:	d9414717 	ldw	r5,1308(sp)
   4340c:	2161c83a 	sub	r16,r4,r5
   43410:	043f9d0e 	bge	zero,r16,43288 <___vfprintf_internal_r+0xb54>
   43414:	00800404 	movi	r2,16
   43418:	1402190e 	bge	r2,r16,43c80 <___vfprintf_internal_r+0x154c>
   4341c:	dc400d17 	ldw	r17,52(sp)
   43420:	1027883a 	mov	r19,r2
   43424:	07000174 	movhi	fp,5
   43428:	e70db984 	addi	fp,fp,14054
   4342c:	050001c4 	movi	r20,7
   43430:	00000306 	br	43440 <___vfprintf_internal_r+0xd0c>
   43434:	18c00204 	addi	r3,r3,8
   43438:	843ffc04 	addi	r16,r16,-16
   4343c:	9c02130e 	bge	r19,r16,43c8c <___vfprintf_internal_r+0x1558>
   43440:	94800404 	addi	r18,r18,16
   43444:	8c400044 	addi	r17,r17,1
   43448:	1f000015 	stw	fp,0(r3)
   4344c:	1cc00115 	stw	r19,4(r3)
   43450:	dc800e15 	stw	r18,56(sp)
   43454:	dc400d15 	stw	r17,52(sp)
   43458:	a47ff60e 	bge	r20,r17,43434 <___vfprintf_internal_r+0xd00>
   4345c:	d9014f17 	ldw	r4,1340(sp)
   43460:	b00b883a 	mov	r5,r22
   43464:	d9800c04 	addi	r6,sp,48
   43468:	00426dc0 	call	426dc <__sprint_r>
   4346c:	103e691e 	bne	r2,zero,42e14 <___vfprintf_internal_r+0x6e0>
   43470:	dc800e17 	ldw	r18,56(sp)
   43474:	dc400d17 	ldw	r17,52(sp)
   43478:	d8c01904 	addi	r3,sp,100
   4347c:	003fee06 	br	43438 <___vfprintf_internal_r+0xd04>
   43480:	d8814717 	ldw	r2,1308(sp)
   43484:	143fffc4 	addi	r16,r2,-1
   43488:	043e970e 	bge	zero,r16,42ee8 <___vfprintf_internal_r+0x7b4>
   4348c:	00800404 	movi	r2,16
   43490:	1400180e 	bge	r2,r16,434f4 <___vfprintf_internal_r+0xdc0>
   43494:	1029883a 	mov	r20,r2
   43498:	07000174 	movhi	fp,5
   4349c:	e70db984 	addi	fp,fp,14054
   434a0:	054001c4 	movi	r21,7
   434a4:	00000306 	br	434b4 <___vfprintf_internal_r+0xd80>
   434a8:	9cc00204 	addi	r19,r19,8
   434ac:	843ffc04 	addi	r16,r16,-16
   434b0:	a400120e 	bge	r20,r16,434fc <___vfprintf_internal_r+0xdc8>
   434b4:	94800404 	addi	r18,r18,16
   434b8:	8c400044 	addi	r17,r17,1
   434bc:	9f000015 	stw	fp,0(r19)
   434c0:	9d000115 	stw	r20,4(r19)
   434c4:	dc800e15 	stw	r18,56(sp)
   434c8:	dc400d15 	stw	r17,52(sp)
   434cc:	ac7ff60e 	bge	r21,r17,434a8 <___vfprintf_internal_r+0xd74>
   434d0:	d9014f17 	ldw	r4,1340(sp)
   434d4:	b00b883a 	mov	r5,r22
   434d8:	d9800c04 	addi	r6,sp,48
   434dc:	00426dc0 	call	426dc <__sprint_r>
   434e0:	103e4c1e 	bne	r2,zero,42e14 <___vfprintf_internal_r+0x6e0>
   434e4:	dc800e17 	ldw	r18,56(sp)
   434e8:	dc400d17 	ldw	r17,52(sp)
   434ec:	dcc01904 	addi	r19,sp,100
   434f0:	003fee06 	br	434ac <___vfprintf_internal_r+0xd78>
   434f4:	07000174 	movhi	fp,5
   434f8:	e70db984 	addi	fp,fp,14054
   434fc:	9425883a 	add	r18,r18,r16
   43500:	8c400044 	addi	r17,r17,1
   43504:	008001c4 	movi	r2,7
   43508:	9f000015 	stw	fp,0(r19)
   4350c:	9c000115 	stw	r16,4(r19)
   43510:	dc800e15 	stw	r18,56(sp)
   43514:	dc400d15 	stw	r17,52(sp)
   43518:	147e720e 	bge	r2,r17,42ee4 <___vfprintf_internal_r+0x7b0>
   4351c:	d9014f17 	ldw	r4,1340(sp)
   43520:	b00b883a 	mov	r5,r22
   43524:	d9800c04 	addi	r6,sp,48
   43528:	00426dc0 	call	426dc <__sprint_r>
   4352c:	103e391e 	bne	r2,zero,42e14 <___vfprintf_internal_r+0x6e0>
   43530:	dc800e17 	ldw	r18,56(sp)
   43534:	dc400d17 	ldw	r17,52(sp)
   43538:	dcc01904 	addi	r19,sp,100
   4353c:	003e6a06 	br	42ee8 <___vfprintf_internal_r+0x7b4>
   43540:	d9014f17 	ldw	r4,1340(sp)
   43544:	b00b883a 	mov	r5,r22
   43548:	d9800c04 	addi	r6,sp,48
   4354c:	d9c15115 	stw	r7,1348(sp)
   43550:	00426dc0 	call	426dc <__sprint_r>
   43554:	d9c15117 	ldw	r7,1348(sp)
   43558:	103e2e1e 	bne	r2,zero,42e14 <___vfprintf_internal_r+0x6e0>
   4355c:	dc800e17 	ldw	r18,56(sp)
   43560:	dc400d17 	ldw	r17,52(sp)
   43564:	dd401904 	addi	r21,sp,100
   43568:	003dba06 	br	42c54 <___vfprintf_internal_r+0x520>
   4356c:	d9014f17 	ldw	r4,1340(sp)
   43570:	b00b883a 	mov	r5,r22
   43574:	d9800c04 	addi	r6,sp,48
   43578:	00426dc0 	call	426dc <__sprint_r>
   4357c:	103e251e 	bne	r2,zero,42e14 <___vfprintf_internal_r+0x6e0>
   43580:	dc800e17 	ldw	r18,56(sp)
   43584:	dc400d17 	ldw	r17,52(sp)
   43588:	dcc01904 	addi	r19,sp,100
   4358c:	003e4206 	br	42e98 <___vfprintf_internal_r+0x764>
   43590:	d9014f17 	ldw	r4,1340(sp)
   43594:	b00b883a 	mov	r5,r22
   43598:	d9800c04 	addi	r6,sp,48
   4359c:	00426dc0 	call	426dc <__sprint_r>
   435a0:	103e1c1e 	bne	r2,zero,42e14 <___vfprintf_internal_r+0x6e0>
   435a4:	dc800e17 	ldw	r18,56(sp)
   435a8:	dc400d17 	ldw	r17,52(sp)
   435ac:	d8c01904 	addi	r3,sp,100
   435b0:	003e2e06 	br	42e6c <___vfprintf_internal_r+0x738>
   435b4:	d9414c17 	ldw	r5,1328(sp)
   435b8:	2880004c 	andi	r2,r5,1
   435bc:	1005003a 	cmpeq	r2,r2,zero
   435c0:	103dda1e 	bne	r2,zero,42d2c <___vfprintf_internal_r+0x5f8>
   435c4:	003e9f06 	br	43044 <___vfprintf_internal_r+0x910>
   435c8:	d8c14117 	ldw	r3,1284(sp)
   435cc:	9125883a 	add	r18,r18,r4
   435d0:	8c400044 	addi	r17,r17,1
   435d4:	008001c4 	movi	r2,7
   435d8:	a8c00015 	stw	r3,0(r21)
   435dc:	a9000115 	stw	r4,4(r21)
   435e0:	dc800e15 	stw	r18,56(sp)
   435e4:	dc400d15 	stw	r17,52(sp)
   435e8:	14426c16 	blt	r2,r17,43f9c <___vfprintf_internal_r+0x1868>
   435ec:	a8c00204 	addi	r3,r21,8
   435f0:	d9414917 	ldw	r5,1316(sp)
   435f4:	00800044 	movi	r2,1
   435f8:	94800044 	addi	r18,r18,1
   435fc:	8c400044 	addi	r17,r17,1
   43600:	18800115 	stw	r2,4(r3)
   43604:	008001c4 	movi	r2,7
   43608:	19400015 	stw	r5,0(r3)
   4360c:	dc800e15 	stw	r18,56(sp)
   43610:	dc400d15 	stw	r17,52(sp)
   43614:	2021883a 	mov	r16,r4
   43618:	14425616 	blt	r2,r17,43f74 <___vfprintf_internal_r+0x1840>
   4361c:	19400204 	addi	r5,r3,8
   43620:	d9814717 	ldw	r6,1308(sp)
   43624:	8c400044 	addi	r17,r17,1
   43628:	dc400d15 	stw	r17,52(sp)
   4362c:	3107c83a 	sub	r3,r6,r4
   43630:	d9014117 	ldw	r4,1284(sp)
   43634:	90e5883a 	add	r18,r18,r3
   43638:	28c00115 	stw	r3,4(r5)
   4363c:	8105883a 	add	r2,r16,r4
   43640:	28800015 	stw	r2,0(r5)
   43644:	008001c4 	movi	r2,7
   43648:	dc800e15 	stw	r18,56(sp)
   4364c:	147f1d16 	blt	r2,r17,432c4 <___vfprintf_internal_r+0xb90>
   43650:	28c00204 	addi	r3,r5,8
   43654:	003db506 	br	42d2c <___vfprintf_internal_r+0x5f8>
   43658:	3c000017 	ldw	r16,0(r7)
   4365c:	3c400117 	ldw	r17,4(r7)
   43660:	39800204 	addi	r6,r7,8
   43664:	01000044 	movi	r4,1
   43668:	d9814015 	stw	r6,1280(sp)
   4366c:	d8000405 	stb	zero,16(sp)
   43670:	003ebe06 	br	4316c <___vfprintf_internal_r+0xa38>
   43674:	3c000017 	ldw	r16,0(r7)
   43678:	3c400117 	ldw	r17,4(r7)
   4367c:	38800204 	addi	r2,r7,8
   43680:	d8814015 	stw	r2,1280(sp)
   43684:	003eb706 	br	43164 <___vfprintf_internal_r+0xa30>
   43688:	3c000017 	ldw	r16,0(r7)
   4368c:	3c400117 	ldw	r17,4(r7)
   43690:	39000204 	addi	r4,r7,8
   43694:	d9014015 	stw	r4,1280(sp)
   43698:	0009883a 	mov	r4,zero
   4369c:	d8000405 	stb	zero,16(sp)
   436a0:	003eb206 	br	4316c <___vfprintf_internal_r+0xa38>
   436a4:	38c00017 	ldw	r3,0(r7)
   436a8:	39c00104 	addi	r7,r7,4
   436ac:	d8c14a15 	stw	r3,1320(sp)
   436b0:	1800d70e 	bge	r3,zero,43a10 <___vfprintf_internal_r+0x12dc>
   436b4:	00c7c83a 	sub	r3,zero,r3
   436b8:	d8c14a15 	stw	r3,1320(sp)
   436bc:	d9014c17 	ldw	r4,1328(sp)
   436c0:	b8c00007 	ldb	r3,0(r23)
   436c4:	21000114 	ori	r4,r4,4
   436c8:	d9014c15 	stw	r4,1328(sp)
   436cc:	003c9806 	br	42930 <___vfprintf_internal_r+0x1fc>
   436d0:	d9814c17 	ldw	r6,1328(sp)
   436d4:	3080080c 	andi	r2,r6,32
   436d8:	1001f626 	beq	r2,zero,43eb4 <___vfprintf_internal_r+0x1780>
   436dc:	d9014b17 	ldw	r4,1324(sp)
   436e0:	38800017 	ldw	r2,0(r7)
   436e4:	39c00104 	addi	r7,r7,4
   436e8:	d9c14015 	stw	r7,1280(sp)
   436ec:	2007d7fa 	srai	r3,r4,31
   436f0:	d9c14017 	ldw	r7,1280(sp)
   436f4:	11000015 	stw	r4,0(r2)
   436f8:	10c00115 	stw	r3,4(r2)
   436fc:	003c6906 	br	428a4 <___vfprintf_internal_r+0x170>
   43700:	b8c00007 	ldb	r3,0(r23)
   43704:	00801b04 	movi	r2,108
   43708:	18825526 	beq	r3,r2,44060 <___vfprintf_internal_r+0x192c>
   4370c:	d9414c17 	ldw	r5,1328(sp)
   43710:	29400414 	ori	r5,r5,16
   43714:	d9414c15 	stw	r5,1328(sp)
   43718:	003c8506 	br	42930 <___vfprintf_internal_r+0x1fc>
   4371c:	d9814c17 	ldw	r6,1328(sp)
   43720:	b8c00007 	ldb	r3,0(r23)
   43724:	31800814 	ori	r6,r6,32
   43728:	d9814c15 	stw	r6,1328(sp)
   4372c:	003c8006 	br	42930 <___vfprintf_internal_r+0x1fc>
   43730:	d8814c17 	ldw	r2,1328(sp)
   43734:	3c000017 	ldw	r16,0(r7)
   43738:	00c01e04 	movi	r3,120
   4373c:	10800094 	ori	r2,r2,2
   43740:	d8814c15 	stw	r2,1328(sp)
   43744:	39c00104 	addi	r7,r7,4
   43748:	01400174 	movhi	r5,5
   4374c:	294da204 	addi	r5,r5,13960
   43750:	00800c04 	movi	r2,48
   43754:	0023883a 	mov	r17,zero
   43758:	01000084 	movi	r4,2
   4375c:	d9c14015 	stw	r7,1280(sp)
   43760:	d8c14d15 	stw	r3,1332(sp)
   43764:	d9414415 	stw	r5,1296(sp)
   43768:	d8800445 	stb	r2,17(sp)
   4376c:	d8c00485 	stb	r3,18(sp)
   43770:	d8000405 	stb	zero,16(sp)
   43774:	003e7d06 	br	4316c <___vfprintf_internal_r+0xa38>
   43778:	d8814c17 	ldw	r2,1328(sp)
   4377c:	b8c00007 	ldb	r3,0(r23)
   43780:	10801014 	ori	r2,r2,64
   43784:	d8814c15 	stw	r2,1328(sp)
   43788:	003c6906 	br	42930 <___vfprintf_internal_r+0x1fc>
   4378c:	d9414c17 	ldw	r5,1328(sp)
   43790:	2880020c 	andi	r2,r5,8
   43794:	1001e526 	beq	r2,zero,43f2c <___vfprintf_internal_r+0x17f8>
   43798:	39800017 	ldw	r6,0(r7)
   4379c:	38800204 	addi	r2,r7,8
   437a0:	d8814015 	stw	r2,1280(sp)
   437a4:	d9814215 	stw	r6,1288(sp)
   437a8:	39c00117 	ldw	r7,4(r7)
   437ac:	d9c14315 	stw	r7,1292(sp)
   437b0:	d9014217 	ldw	r4,1288(sp)
   437b4:	d9414317 	ldw	r5,1292(sp)
   437b8:	004a6f80 	call	4a6f8 <__isinfd>
   437bc:	10021d26 	beq	r2,zero,44034 <___vfprintf_internal_r+0x1900>
   437c0:	d9014217 	ldw	r4,1288(sp)
   437c4:	d9414317 	ldw	r5,1292(sp)
   437c8:	000d883a 	mov	r6,zero
   437cc:	000f883a 	mov	r7,zero
   437d0:	004f7080 	call	4f708 <__ltdf2>
   437d4:	1002d016 	blt	r2,zero,44318 <___vfprintf_internal_r+0x1be4>
   437d8:	d9414d17 	ldw	r5,1332(sp)
   437dc:	008011c4 	movi	r2,71
   437e0:	11421016 	blt	r2,r5,44024 <___vfprintf_internal_r+0x18f0>
   437e4:	01800174 	movhi	r6,5
   437e8:	318da704 	addi	r6,r6,13980
   437ec:	d9814115 	stw	r6,1284(sp)
   437f0:	d9014c17 	ldw	r4,1328(sp)
   437f4:	00c000c4 	movi	r3,3
   437f8:	00bfdfc4 	movi	r2,-129
   437fc:	2088703a 	and	r4,r4,r2
   43800:	180f883a 	mov	r7,r3
   43804:	d8c14515 	stw	r3,1300(sp)
   43808:	d9014c15 	stw	r4,1328(sp)
   4380c:	d8014615 	stw	zero,1304(sp)
   43810:	003e6a06 	br	431bc <___vfprintf_internal_r+0xa88>
   43814:	38800017 	ldw	r2,0(r7)
   43818:	00c00044 	movi	r3,1
   4381c:	39c00104 	addi	r7,r7,4
   43820:	d9c14015 	stw	r7,1280(sp)
   43824:	d9000f04 	addi	r4,sp,60
   43828:	180f883a 	mov	r7,r3
   4382c:	d8c14515 	stw	r3,1300(sp)
   43830:	d9014115 	stw	r4,1284(sp)
   43834:	d8800f05 	stb	r2,60(sp)
   43838:	d8000405 	stb	zero,16(sp)
   4383c:	003cac06 	br	42af0 <___vfprintf_internal_r+0x3bc>
   43840:	01400174 	movhi	r5,5
   43844:	294dad04 	addi	r5,r5,14004
   43848:	d9414415 	stw	r5,1296(sp)
   4384c:	d9814c17 	ldw	r6,1328(sp)
   43850:	3080080c 	andi	r2,r6,32
   43854:	1000ff26 	beq	r2,zero,43c54 <___vfprintf_internal_r+0x1520>
   43858:	3c000017 	ldw	r16,0(r7)
   4385c:	3c400117 	ldw	r17,4(r7)
   43860:	38800204 	addi	r2,r7,8
   43864:	d8814015 	stw	r2,1280(sp)
   43868:	d9414c17 	ldw	r5,1328(sp)
   4386c:	2880004c 	andi	r2,r5,1
   43870:	1005003a 	cmpeq	r2,r2,zero
   43874:	1000b91e 	bne	r2,zero,43b5c <___vfprintf_internal_r+0x1428>
   43878:	8444b03a 	or	r2,r16,r17
   4387c:	1000b726 	beq	r2,zero,43b5c <___vfprintf_internal_r+0x1428>
   43880:	d9814d17 	ldw	r6,1332(sp)
   43884:	29400094 	ori	r5,r5,2
   43888:	00800c04 	movi	r2,48
   4388c:	01000084 	movi	r4,2
   43890:	d9414c15 	stw	r5,1328(sp)
   43894:	d8800445 	stb	r2,17(sp)
   43898:	d9800485 	stb	r6,18(sp)
   4389c:	d8000405 	stb	zero,16(sp)
   438a0:	003e3206 	br	4316c <___vfprintf_internal_r+0xa38>
   438a4:	01800174 	movhi	r6,5
   438a8:	318da204 	addi	r6,r6,13960
   438ac:	d9814415 	stw	r6,1296(sp)
   438b0:	003fe606 	br	4384c <___vfprintf_internal_r+0x1118>
   438b4:	00800ac4 	movi	r2,43
   438b8:	d8800405 	stb	r2,16(sp)
   438bc:	b8c00007 	ldb	r3,0(r23)
   438c0:	003c1b06 	br	42930 <___vfprintf_internal_r+0x1fc>
   438c4:	d8814c17 	ldw	r2,1328(sp)
   438c8:	b8c00007 	ldb	r3,0(r23)
   438cc:	10800054 	ori	r2,r2,1
   438d0:	d8814c15 	stw	r2,1328(sp)
   438d4:	003c1606 	br	42930 <___vfprintf_internal_r+0x1fc>
   438d8:	d8800407 	ldb	r2,16(sp)
   438dc:	10004c1e 	bne	r2,zero,43a10 <___vfprintf_internal_r+0x12dc>
   438e0:	00800804 	movi	r2,32
   438e4:	d8800405 	stb	r2,16(sp)
   438e8:	b8c00007 	ldb	r3,0(r23)
   438ec:	003c1006 	br	42930 <___vfprintf_internal_r+0x1fc>
   438f0:	d9814c17 	ldw	r6,1328(sp)
   438f4:	b8c00007 	ldb	r3,0(r23)
   438f8:	31800214 	ori	r6,r6,8
   438fc:	d9814c15 	stw	r6,1328(sp)
   43900:	003c0b06 	br	42930 <___vfprintf_internal_r+0x1fc>
   43904:	0009883a 	mov	r4,zero
   43908:	04000244 	movi	r16,9
   4390c:	01400284 	movi	r5,10
   43910:	d9c15115 	stw	r7,1348(sp)
   43914:	004fd3c0 	call	4fd3c <__mulsi3>
   43918:	b9000007 	ldb	r4,0(r23)
   4391c:	d8c14d17 	ldw	r3,1332(sp)
   43920:	bdc00044 	addi	r23,r23,1
   43924:	d9014d15 	stw	r4,1332(sp)
   43928:	d9414d17 	ldw	r5,1332(sp)
   4392c:	1885883a 	add	r2,r3,r2
   43930:	113ff404 	addi	r4,r2,-48
   43934:	28bff404 	addi	r2,r5,-48
   43938:	d9c15117 	ldw	r7,1348(sp)
   4393c:	80bff32e 	bgeu	r16,r2,4390c <___vfprintf_internal_r+0x11d8>
   43940:	d9014a15 	stw	r4,1320(sp)
   43944:	003bfc06 	br	42938 <___vfprintf_internal_r+0x204>
   43948:	d8814c17 	ldw	r2,1328(sp)
   4394c:	b8c00007 	ldb	r3,0(r23)
   43950:	10802014 	ori	r2,r2,128
   43954:	d8814c15 	stw	r2,1328(sp)
   43958:	003bf506 	br	42930 <___vfprintf_internal_r+0x1fc>
   4395c:	b8c00007 	ldb	r3,0(r23)
   43960:	00800a84 	movi	r2,42
   43964:	bdc00044 	addi	r23,r23,1
   43968:	18831826 	beq	r3,r2,445cc <___vfprintf_internal_r+0x1e98>
   4396c:	d8c14d15 	stw	r3,1332(sp)
   43970:	18bff404 	addi	r2,r3,-48
   43974:	00c00244 	movi	r3,9
   43978:	18827b36 	bltu	r3,r2,44368 <___vfprintf_internal_r+0x1c34>
   4397c:	1821883a 	mov	r16,r3
   43980:	0009883a 	mov	r4,zero
   43984:	01400284 	movi	r5,10
   43988:	d9c15115 	stw	r7,1348(sp)
   4398c:	004fd3c0 	call	4fd3c <__mulsi3>
   43990:	d9414d17 	ldw	r5,1332(sp)
   43994:	b9800007 	ldb	r6,0(r23)
   43998:	d9c15117 	ldw	r7,1348(sp)
   4399c:	1145883a 	add	r2,r2,r5
   439a0:	113ff404 	addi	r4,r2,-48
   439a4:	30bff404 	addi	r2,r6,-48
   439a8:	d9814d15 	stw	r6,1332(sp)
   439ac:	bdc00044 	addi	r23,r23,1
   439b0:	80bff42e 	bgeu	r16,r2,43984 <___vfprintf_internal_r+0x1250>
   439b4:	2027883a 	mov	r19,r4
   439b8:	203bdf0e 	bge	r4,zero,42938 <___vfprintf_internal_r+0x204>
   439bc:	04ffffc4 	movi	r19,-1
   439c0:	003bdd06 	br	42938 <___vfprintf_internal_r+0x204>
   439c4:	d8000405 	stb	zero,16(sp)
   439c8:	39800017 	ldw	r6,0(r7)
   439cc:	39c00104 	addi	r7,r7,4
   439d0:	d9c14015 	stw	r7,1280(sp)
   439d4:	d9814115 	stw	r6,1284(sp)
   439d8:	3001c926 	beq	r6,zero,44100 <___vfprintf_internal_r+0x19cc>
   439dc:	98000e16 	blt	r19,zero,43a18 <___vfprintf_internal_r+0x12e4>
   439e0:	d9014117 	ldw	r4,1284(sp)
   439e4:	000b883a 	mov	r5,zero
   439e8:	980d883a 	mov	r6,r19
   439ec:	0048d040 	call	48d04 <memchr>
   439f0:	10025926 	beq	r2,zero,44358 <___vfprintf_internal_r+0x1c24>
   439f4:	d8c14117 	ldw	r3,1284(sp)
   439f8:	10cfc83a 	sub	r7,r2,r3
   439fc:	99c19e16 	blt	r19,r7,44078 <___vfprintf_internal_r+0x1944>
   43a00:	d9c14515 	stw	r7,1300(sp)
   43a04:	38000916 	blt	r7,zero,43a2c <___vfprintf_internal_r+0x12f8>
   43a08:	d8014615 	stw	zero,1304(sp)
   43a0c:	003deb06 	br	431bc <___vfprintf_internal_r+0xa88>
   43a10:	b8c00007 	ldb	r3,0(r23)
   43a14:	003bc606 	br	42930 <___vfprintf_internal_r+0x1fc>
   43a18:	d9014117 	ldw	r4,1284(sp)
   43a1c:	00423f40 	call	423f4 <strlen>
   43a20:	d8814515 	stw	r2,1300(sp)
   43a24:	100f883a 	mov	r7,r2
   43a28:	103ff70e 	bge	r2,zero,43a08 <___vfprintf_internal_r+0x12d4>
   43a2c:	d8014515 	stw	zero,1300(sp)
   43a30:	d8014615 	stw	zero,1304(sp)
   43a34:	003de106 	br	431bc <___vfprintf_internal_r+0xa88>
   43a38:	20c03fcc 	andi	r3,r4,255
   43a3c:	00800044 	movi	r2,1
   43a40:	18802d26 	beq	r3,r2,43af8 <___vfprintf_internal_r+0x13c4>
   43a44:	18800e36 	bltu	r3,r2,43a80 <___vfprintf_internal_r+0x134c>
   43a48:	00800084 	movi	r2,2
   43a4c:	1880fa26 	beq	r3,r2,43e38 <___vfprintf_internal_r+0x1704>
   43a50:	01000174 	movhi	r4,5
   43a54:	210db204 	addi	r4,r4,14024
   43a58:	00423f40 	call	423f4 <strlen>
   43a5c:	100f883a 	mov	r7,r2
   43a60:	dcc14515 	stw	r19,1300(sp)
   43a64:	9880010e 	bge	r19,r2,43a6c <___vfprintf_internal_r+0x1338>
   43a68:	d8814515 	stw	r2,1300(sp)
   43a6c:	00800174 	movhi	r2,5
   43a70:	108db204 	addi	r2,r2,14024
   43a74:	dcc14615 	stw	r19,1304(sp)
   43a78:	d8814115 	stw	r2,1284(sp)
   43a7c:	003dcf06 	br	431bc <___vfprintf_internal_r+0xa88>
   43a80:	d9401904 	addi	r5,sp,100
   43a84:	dd000f04 	addi	r20,sp,60
   43a88:	d9414115 	stw	r5,1284(sp)
   43a8c:	880a977a 	slli	r5,r17,29
   43a90:	d9814117 	ldw	r6,1284(sp)
   43a94:	8004d0fa 	srli	r2,r16,3
   43a98:	8806d0fa 	srli	r3,r17,3
   43a9c:	810001cc 	andi	r4,r16,7
   43aa0:	2884b03a 	or	r2,r5,r2
   43aa4:	31bfffc4 	addi	r6,r6,-1
   43aa8:	21000c04 	addi	r4,r4,48
   43aac:	d9814115 	stw	r6,1284(sp)
   43ab0:	10cab03a 	or	r5,r2,r3
   43ab4:	31000005 	stb	r4,0(r6)
   43ab8:	1021883a 	mov	r16,r2
   43abc:	1823883a 	mov	r17,r3
   43ac0:	283ff21e 	bne	r5,zero,43a8c <___vfprintf_internal_r+0x1358>
   43ac4:	d8c14c17 	ldw	r3,1328(sp)
   43ac8:	1880004c 	andi	r2,r3,1
   43acc:	1005003a 	cmpeq	r2,r2,zero
   43ad0:	103db31e 	bne	r2,zero,431a0 <___vfprintf_internal_r+0xa6c>
   43ad4:	20803fcc 	andi	r2,r4,255
   43ad8:	1080201c 	xori	r2,r2,128
   43adc:	10bfe004 	addi	r2,r2,-128
   43ae0:	00c00c04 	movi	r3,48
   43ae4:	10fdae26 	beq	r2,r3,431a0 <___vfprintf_internal_r+0xa6c>
   43ae8:	31bfffc4 	addi	r6,r6,-1
   43aec:	d9814115 	stw	r6,1284(sp)
   43af0:	30c00005 	stb	r3,0(r6)
   43af4:	003daa06 	br	431a0 <___vfprintf_internal_r+0xa6c>
   43af8:	88800068 	cmpgeui	r2,r17,1
   43afc:	10002c1e 	bne	r2,zero,43bb0 <___vfprintf_internal_r+0x147c>
   43b00:	8800021e 	bne	r17,zero,43b0c <___vfprintf_internal_r+0x13d8>
   43b04:	00800244 	movi	r2,9
   43b08:	14002936 	bltu	r2,r16,43bb0 <___vfprintf_internal_r+0x147c>
   43b0c:	d90018c4 	addi	r4,sp,99
   43b10:	dd000f04 	addi	r20,sp,60
   43b14:	d9014115 	stw	r4,1284(sp)
   43b18:	d9014117 	ldw	r4,1284(sp)
   43b1c:	80800c04 	addi	r2,r16,48
   43b20:	20800005 	stb	r2,0(r4)
   43b24:	003d9e06 	br	431a0 <___vfprintf_internal_r+0xa6c>
   43b28:	dc400d17 	ldw	r17,52(sp)
   43b2c:	07000174 	movhi	fp,5
   43b30:	e70db984 	addi	fp,fp,14054
   43b34:	9425883a 	add	r18,r18,r16
   43b38:	8c400044 	addi	r17,r17,1
   43b3c:	008001c4 	movi	r2,7
   43b40:	1f000015 	stw	fp,0(r3)
   43b44:	1c000115 	stw	r16,4(r3)
   43b48:	dc800e15 	stw	r18,56(sp)
   43b4c:	dc400d15 	stw	r17,52(sp)
   43b50:	147ddc16 	blt	r2,r17,432c4 <___vfprintf_internal_r+0xb90>
   43b54:	18c00204 	addi	r3,r3,8
   43b58:	003c7406 	br	42d2c <___vfprintf_internal_r+0x5f8>
   43b5c:	01000084 	movi	r4,2
   43b60:	d8000405 	stb	zero,16(sp)
   43b64:	003d8106 	br	4316c <___vfprintf_internal_r+0xa38>
   43b68:	d9814c17 	ldw	r6,1328(sp)
   43b6c:	30c4703a 	and	r2,r6,r3
   43b70:	1005003a 	cmpeq	r2,r2,zero
   43b74:	103cb326 	beq	r2,zero,42e44 <___vfprintf_internal_r+0x710>
   43b78:	d9014117 	ldw	r4,1284(sp)
   43b7c:	94800044 	addi	r18,r18,1
   43b80:	8c400044 	addi	r17,r17,1
   43b84:	008001c4 	movi	r2,7
   43b88:	a9000015 	stw	r4,0(r21)
   43b8c:	a8c00115 	stw	r3,4(r21)
   43b90:	dc800e15 	stw	r18,56(sp)
   43b94:	dc400d15 	stw	r17,52(sp)
   43b98:	147e6016 	blt	r2,r17,4351c <___vfprintf_internal_r+0xde8>
   43b9c:	acc00204 	addi	r19,r21,8
   43ba0:	003cd106 	br	42ee8 <___vfprintf_internal_r+0x7b4>
   43ba4:	07000174 	movhi	fp,5
   43ba8:	e70db984 	addi	fp,fp,14054
   43bac:	003c4906 	br	42cd4 <___vfprintf_internal_r+0x5a0>
   43bb0:	dd000f04 	addi	r20,sp,60
   43bb4:	dc801904 	addi	r18,sp,100
   43bb8:	8009883a 	mov	r4,r16
   43bbc:	880b883a 	mov	r5,r17
   43bc0:	01800284 	movi	r6,10
   43bc4:	000f883a 	mov	r7,zero
   43bc8:	004e2000 	call	4e200 <__umoddi3>
   43bcc:	12000c04 	addi	r8,r2,48
   43bd0:	94bfffc4 	addi	r18,r18,-1
   43bd4:	8009883a 	mov	r4,r16
   43bd8:	880b883a 	mov	r5,r17
   43bdc:	01800284 	movi	r6,10
   43be0:	000f883a 	mov	r7,zero
   43be4:	92000005 	stb	r8,0(r18)
   43be8:	004db940 	call	4db94 <__udivdi3>
   43bec:	1009883a 	mov	r4,r2
   43bf0:	1021883a 	mov	r16,r2
   43bf4:	18800068 	cmpgeui	r2,r3,1
   43bf8:	1823883a 	mov	r17,r3
   43bfc:	103fee1e 	bne	r2,zero,43bb8 <___vfprintf_internal_r+0x1484>
   43c00:	1800021e 	bne	r3,zero,43c0c <___vfprintf_internal_r+0x14d8>
   43c04:	00800244 	movi	r2,9
   43c08:	113feb36 	bltu	r2,r4,43bb8 <___vfprintf_internal_r+0x1484>
   43c0c:	94bfffc4 	addi	r18,r18,-1
   43c10:	dc814115 	stw	r18,1284(sp)
   43c14:	003fc006 	br	43b18 <___vfprintf_internal_r+0x13e4>
   43c18:	d9014c17 	ldw	r4,1328(sp)
   43c1c:	2080004c 	andi	r2,r4,1
   43c20:	10009a1e 	bne	r2,zero,43e8c <___vfprintf_internal_r+0x1758>
   43c24:	d9401904 	addi	r5,sp,100
   43c28:	dd000f04 	addi	r20,sp,60
   43c2c:	d9414115 	stw	r5,1284(sp)
   43c30:	003d5b06 	br	431a0 <___vfprintf_internal_r+0xa6c>
   43c34:	d9014f17 	ldw	r4,1340(sp)
   43c38:	b00b883a 	mov	r5,r22
   43c3c:	d9800c04 	addi	r6,sp,48
   43c40:	00426dc0 	call	426dc <__sprint_r>
   43c44:	103c731e 	bne	r2,zero,42e14 <___vfprintf_internal_r+0x6e0>
   43c48:	dc800e17 	ldw	r18,56(sp)
   43c4c:	d8c01904 	addi	r3,sp,100
   43c50:	003cf906 	br	43038 <___vfprintf_internal_r+0x904>
   43c54:	d8c14c17 	ldw	r3,1328(sp)
   43c58:	1880040c 	andi	r2,r3,16
   43c5c:	1000711e 	bne	r2,zero,43e24 <___vfprintf_internal_r+0x16f0>
   43c60:	d9014c17 	ldw	r4,1328(sp)
   43c64:	2080100c 	andi	r2,r4,64
   43c68:	10006e26 	beq	r2,zero,43e24 <___vfprintf_internal_r+0x16f0>
   43c6c:	3c00000b 	ldhu	r16,0(r7)
   43c70:	0023883a 	mov	r17,zero
   43c74:	39c00104 	addi	r7,r7,4
   43c78:	d9c14015 	stw	r7,1280(sp)
   43c7c:	003efa06 	br	43868 <___vfprintf_internal_r+0x1134>
   43c80:	dc400d17 	ldw	r17,52(sp)
   43c84:	07000174 	movhi	fp,5
   43c88:	e70db984 	addi	fp,fp,14054
   43c8c:	9425883a 	add	r18,r18,r16
   43c90:	8c400044 	addi	r17,r17,1
   43c94:	008001c4 	movi	r2,7
   43c98:	1f000015 	stw	fp,0(r3)
   43c9c:	1c000115 	stw	r16,4(r3)
   43ca0:	dc800e15 	stw	r18,56(sp)
   43ca4:	dc400d15 	stw	r17,52(sp)
   43ca8:	147d7016 	blt	r2,r17,4326c <___vfprintf_internal_r+0xb38>
   43cac:	18c00204 	addi	r3,r3,8
   43cb0:	003d7506 	br	43288 <___vfprintf_internal_r+0xb54>
   43cb4:	dc800e17 	ldw	r18,56(sp)
   43cb8:	dc400d17 	ldw	r17,52(sp)
   43cbc:	07000174 	movhi	fp,5
   43cc0:	e70dbd84 	addi	fp,fp,14070
   43cc4:	003bba06 	br	42bb0 <___vfprintf_internal_r+0x47c>
   43cc8:	d9014f17 	ldw	r4,1340(sp)
   43ccc:	b00b883a 	mov	r5,r22
   43cd0:	d9800c04 	addi	r6,sp,48
   43cd4:	00426dc0 	call	426dc <__sprint_r>
   43cd8:	103c4e1e 	bne	r2,zero,42e14 <___vfprintf_internal_r+0x6e0>
   43cdc:	dc800e17 	ldw	r18,56(sp)
   43ce0:	d8c01904 	addi	r3,sp,100
   43ce4:	003ce306 	br	43074 <___vfprintf_internal_r+0x940>
   43ce8:	3c000017 	ldw	r16,0(r7)
   43cec:	0009883a 	mov	r4,zero
   43cf0:	39c00104 	addi	r7,r7,4
   43cf4:	0023883a 	mov	r17,zero
   43cf8:	d9c14015 	stw	r7,1280(sp)
   43cfc:	d8000405 	stb	zero,16(sp)
   43d00:	003d1a06 	br	4316c <___vfprintf_internal_r+0xa38>
   43d04:	38800017 	ldw	r2,0(r7)
   43d08:	39c00104 	addi	r7,r7,4
   43d0c:	d9c14015 	stw	r7,1280(sp)
   43d10:	1023d7fa 	srai	r17,r2,31
   43d14:	1021883a 	mov	r16,r2
   43d18:	003d1206 	br	43164 <___vfprintf_internal_r+0xa30>
   43d1c:	3c000017 	ldw	r16,0(r7)
   43d20:	01000044 	movi	r4,1
   43d24:	39c00104 	addi	r7,r7,4
   43d28:	0023883a 	mov	r17,zero
   43d2c:	d9c14015 	stw	r7,1280(sp)
   43d30:	d8000405 	stb	zero,16(sp)
   43d34:	003d0d06 	br	4316c <___vfprintf_internal_r+0xa38>
   43d38:	00800174 	movhi	r2,5
   43d3c:	108db904 	addi	r2,r2,14052
   43d40:	94800044 	addi	r18,r18,1
   43d44:	8c400044 	addi	r17,r17,1
   43d48:	a8800015 	stw	r2,0(r21)
   43d4c:	00c00044 	movi	r3,1
   43d50:	008001c4 	movi	r2,7
   43d54:	a8c00115 	stw	r3,4(r21)
   43d58:	dc800e15 	stw	r18,56(sp)
   43d5c:	dc400d15 	stw	r17,52(sp)
   43d60:	1440ca16 	blt	r2,r17,4408c <___vfprintf_internal_r+0x1958>
   43d64:	a8c00204 	addi	r3,r21,8
   43d68:	2000061e 	bne	r4,zero,43d84 <___vfprintf_internal_r+0x1650>
   43d6c:	d9414717 	ldw	r5,1308(sp)
   43d70:	2800041e 	bne	r5,zero,43d84 <___vfprintf_internal_r+0x1650>
   43d74:	d9814c17 	ldw	r6,1328(sp)
   43d78:	3080004c 	andi	r2,r6,1
   43d7c:	1005003a 	cmpeq	r2,r2,zero
   43d80:	103bea1e 	bne	r2,zero,42d2c <___vfprintf_internal_r+0x5f8>
   43d84:	00800044 	movi	r2,1
   43d88:	dc400d17 	ldw	r17,52(sp)
   43d8c:	18800115 	stw	r2,4(r3)
   43d90:	d8814917 	ldw	r2,1316(sp)
   43d94:	94800044 	addi	r18,r18,1
   43d98:	8c400044 	addi	r17,r17,1
   43d9c:	18800015 	stw	r2,0(r3)
   43da0:	008001c4 	movi	r2,7
   43da4:	dc800e15 	stw	r18,56(sp)
   43da8:	dc400d15 	stw	r17,52(sp)
   43dac:	1440ca16 	blt	r2,r17,440d8 <___vfprintf_internal_r+0x19a4>
   43db0:	18c00204 	addi	r3,r3,8
   43db4:	0121c83a 	sub	r16,zero,r4
   43db8:	0400500e 	bge	zero,r16,43efc <___vfprintf_internal_r+0x17c8>
   43dbc:	00800404 	movi	r2,16
   43dc0:	1400800e 	bge	r2,r16,43fc4 <___vfprintf_internal_r+0x1890>
   43dc4:	1027883a 	mov	r19,r2
   43dc8:	07000174 	movhi	fp,5
   43dcc:	e70db984 	addi	fp,fp,14054
   43dd0:	050001c4 	movi	r20,7
   43dd4:	00000306 	br	43de4 <___vfprintf_internal_r+0x16b0>
   43dd8:	18c00204 	addi	r3,r3,8
   43ddc:	843ffc04 	addi	r16,r16,-16
   43de0:	9c007a0e 	bge	r19,r16,43fcc <___vfprintf_internal_r+0x1898>
   43de4:	94800404 	addi	r18,r18,16
   43de8:	8c400044 	addi	r17,r17,1
   43dec:	1f000015 	stw	fp,0(r3)
   43df0:	1cc00115 	stw	r19,4(r3)
   43df4:	dc800e15 	stw	r18,56(sp)
   43df8:	dc400d15 	stw	r17,52(sp)
   43dfc:	a47ff60e 	bge	r20,r17,43dd8 <___vfprintf_internal_r+0x16a4>
   43e00:	d9014f17 	ldw	r4,1340(sp)
   43e04:	b00b883a 	mov	r5,r22
   43e08:	d9800c04 	addi	r6,sp,48
   43e0c:	00426dc0 	call	426dc <__sprint_r>
   43e10:	103c001e 	bne	r2,zero,42e14 <___vfprintf_internal_r+0x6e0>
   43e14:	dc800e17 	ldw	r18,56(sp)
   43e18:	dc400d17 	ldw	r17,52(sp)
   43e1c:	d8c01904 	addi	r3,sp,100
   43e20:	003fee06 	br	43ddc <___vfprintf_internal_r+0x16a8>
   43e24:	3c000017 	ldw	r16,0(r7)
   43e28:	0023883a 	mov	r17,zero
   43e2c:	39c00104 	addi	r7,r7,4
   43e30:	d9c14015 	stw	r7,1280(sp)
   43e34:	003e8c06 	br	43868 <___vfprintf_internal_r+0x1134>
   43e38:	d9401904 	addi	r5,sp,100
   43e3c:	dd000f04 	addi	r20,sp,60
   43e40:	d9414115 	stw	r5,1284(sp)
   43e44:	d9814417 	ldw	r6,1296(sp)
   43e48:	880a973a 	slli	r5,r17,28
   43e4c:	8004d13a 	srli	r2,r16,4
   43e50:	810003cc 	andi	r4,r16,15
   43e54:	3109883a 	add	r4,r6,r4
   43e58:	2884b03a 	or	r2,r5,r2
   43e5c:	21400003 	ldbu	r5,0(r4)
   43e60:	d9014117 	ldw	r4,1284(sp)
   43e64:	8806d13a 	srli	r3,r17,4
   43e68:	1021883a 	mov	r16,r2
   43e6c:	213fffc4 	addi	r4,r4,-1
   43e70:	d9014115 	stw	r4,1284(sp)
   43e74:	d9814117 	ldw	r6,1284(sp)
   43e78:	10c8b03a 	or	r4,r2,r3
   43e7c:	1823883a 	mov	r17,r3
   43e80:	31400005 	stb	r5,0(r6)
   43e84:	203fef1e 	bne	r4,zero,43e44 <___vfprintf_internal_r+0x1710>
   43e88:	003cc506 	br	431a0 <___vfprintf_internal_r+0xa6c>
   43e8c:	00800c04 	movi	r2,48
   43e90:	d98018c4 	addi	r6,sp,99
   43e94:	dd000f04 	addi	r20,sp,60
   43e98:	d88018c5 	stb	r2,99(sp)
   43e9c:	d9814115 	stw	r6,1284(sp)
   43ea0:	003cbf06 	br	431a0 <___vfprintf_internal_r+0xa6c>
   43ea4:	dc400d17 	ldw	r17,52(sp)
   43ea8:	07000174 	movhi	fp,5
   43eac:	e70dbd84 	addi	fp,fp,14070
   43eb0:	003bc106 	br	42db8 <___vfprintf_internal_r+0x684>
   43eb4:	d9414c17 	ldw	r5,1328(sp)
   43eb8:	2880040c 	andi	r2,r5,16
   43ebc:	10007c26 	beq	r2,zero,440b0 <___vfprintf_internal_r+0x197c>
   43ec0:	38800017 	ldw	r2,0(r7)
   43ec4:	39c00104 	addi	r7,r7,4
   43ec8:	d9c14015 	stw	r7,1280(sp)
   43ecc:	d9814b17 	ldw	r6,1324(sp)
   43ed0:	d9c14017 	ldw	r7,1280(sp)
   43ed4:	11800015 	stw	r6,0(r2)
   43ed8:	003a7206 	br	428a4 <___vfprintf_internal_r+0x170>
   43edc:	d9014f17 	ldw	r4,1340(sp)
   43ee0:	b00b883a 	mov	r5,r22
   43ee4:	d9800c04 	addi	r6,sp,48
   43ee8:	00426dc0 	call	426dc <__sprint_r>
   43eec:	103bc91e 	bne	r2,zero,42e14 <___vfprintf_internal_r+0x6e0>
   43ef0:	dc800e17 	ldw	r18,56(sp)
   43ef4:	dc400d17 	ldw	r17,52(sp)
   43ef8:	d8c01904 	addi	r3,sp,100
   43efc:	d9014717 	ldw	r4,1308(sp)
   43f00:	d9414117 	ldw	r5,1284(sp)
   43f04:	8c400044 	addi	r17,r17,1
   43f08:	9125883a 	add	r18,r18,r4
   43f0c:	008001c4 	movi	r2,7
   43f10:	19400015 	stw	r5,0(r3)
   43f14:	19000115 	stw	r4,4(r3)
   43f18:	dc800e15 	stw	r18,56(sp)
   43f1c:	dc400d15 	stw	r17,52(sp)
   43f20:	147ce816 	blt	r2,r17,432c4 <___vfprintf_internal_r+0xb90>
   43f24:	18c00204 	addi	r3,r3,8
   43f28:	003b8006 	br	42d2c <___vfprintf_internal_r+0x5f8>
   43f2c:	38c00017 	ldw	r3,0(r7)
   43f30:	39000204 	addi	r4,r7,8
   43f34:	d9014015 	stw	r4,1280(sp)
   43f38:	d8c14215 	stw	r3,1288(sp)
   43f3c:	39c00117 	ldw	r7,4(r7)
   43f40:	d9c14315 	stw	r7,1292(sp)
   43f44:	003e1a06 	br	437b0 <___vfprintf_internal_r+0x107c>
   43f48:	0005883a 	mov	r2,zero
   43f4c:	1409c83a 	sub	r4,r2,r16
   43f50:	1105803a 	cmpltu	r2,r2,r4
   43f54:	044bc83a 	sub	r5,zero,r17
   43f58:	2885c83a 	sub	r2,r5,r2
   43f5c:	2021883a 	mov	r16,r4
   43f60:	1023883a 	mov	r17,r2
   43f64:	01000044 	movi	r4,1
   43f68:	00800b44 	movi	r2,45
   43f6c:	d8800405 	stb	r2,16(sp)
   43f70:	003c7e06 	br	4316c <___vfprintf_internal_r+0xa38>
   43f74:	d9014f17 	ldw	r4,1340(sp)
   43f78:	b00b883a 	mov	r5,r22
   43f7c:	d9800c04 	addi	r6,sp,48
   43f80:	00426dc0 	call	426dc <__sprint_r>
   43f84:	103ba31e 	bne	r2,zero,42e14 <___vfprintf_internal_r+0x6e0>
   43f88:	dc800e17 	ldw	r18,56(sp)
   43f8c:	dc400d17 	ldw	r17,52(sp)
   43f90:	d9000517 	ldw	r4,20(sp)
   43f94:	d9401904 	addi	r5,sp,100
   43f98:	003da106 	br	43620 <___vfprintf_internal_r+0xeec>
   43f9c:	d9014f17 	ldw	r4,1340(sp)
   43fa0:	b00b883a 	mov	r5,r22
   43fa4:	d9800c04 	addi	r6,sp,48
   43fa8:	00426dc0 	call	426dc <__sprint_r>
   43fac:	103b991e 	bne	r2,zero,42e14 <___vfprintf_internal_r+0x6e0>
   43fb0:	dc800e17 	ldw	r18,56(sp)
   43fb4:	dc400d17 	ldw	r17,52(sp)
   43fb8:	d9000517 	ldw	r4,20(sp)
   43fbc:	d8c01904 	addi	r3,sp,100
   43fc0:	003d8b06 	br	435f0 <___vfprintf_internal_r+0xebc>
   43fc4:	07000174 	movhi	fp,5
   43fc8:	e70db984 	addi	fp,fp,14054
   43fcc:	9425883a 	add	r18,r18,r16
   43fd0:	8c400044 	addi	r17,r17,1
   43fd4:	008001c4 	movi	r2,7
   43fd8:	1f000015 	stw	fp,0(r3)
   43fdc:	1c000115 	stw	r16,4(r3)
   43fe0:	dc800e15 	stw	r18,56(sp)
   43fe4:	dc400d15 	stw	r17,52(sp)
   43fe8:	147fbc16 	blt	r2,r17,43edc <___vfprintf_internal_r+0x17a8>
   43fec:	18c00204 	addi	r3,r3,8
   43ff0:	003fc206 	br	43efc <___vfprintf_internal_r+0x17c8>
   43ff4:	d9014f17 	ldw	r4,1340(sp)
   43ff8:	b00b883a 	mov	r5,r22
   43ffc:	d9800c04 	addi	r6,sp,48
   44000:	00426dc0 	call	426dc <__sprint_r>
   44004:	103b831e 	bne	r2,zero,42e14 <___vfprintf_internal_r+0x6e0>
   44008:	dc800e17 	ldw	r18,56(sp)
   4400c:	d9000517 	ldw	r4,20(sp)
   44010:	d8c01904 	addi	r3,sp,100
   44014:	003cfc06 	br	43408 <___vfprintf_internal_r+0xcd4>
   44018:	07000174 	movhi	fp,5
   4401c:	e70db984 	addi	fp,fp,14054
   44020:	003bde06 	br	42f9c <___vfprintf_internal_r+0x868>
   44024:	00800174 	movhi	r2,5
   44028:	108da804 	addi	r2,r2,13984
   4402c:	d8814115 	stw	r2,1284(sp)
   44030:	003def06 	br	437f0 <___vfprintf_internal_r+0x10bc>
   44034:	d9014217 	ldw	r4,1288(sp)
   44038:	d9414317 	ldw	r5,1292(sp)
   4403c:	004a7380 	call	4a738 <__isnand>
   44040:	10003926 	beq	r2,zero,44128 <___vfprintf_internal_r+0x19f4>
   44044:	d9414d17 	ldw	r5,1332(sp)
   44048:	008011c4 	movi	r2,71
   4404c:	1140ce16 	blt	r2,r5,44388 <___vfprintf_internal_r+0x1c54>
   44050:	01800174 	movhi	r6,5
   44054:	318da904 	addi	r6,r6,13988
   44058:	d9814115 	stw	r6,1284(sp)
   4405c:	003de406 	br	437f0 <___vfprintf_internal_r+0x10bc>
   44060:	d9014c17 	ldw	r4,1328(sp)
   44064:	bdc00044 	addi	r23,r23,1
   44068:	b8c00007 	ldb	r3,0(r23)
   4406c:	21000814 	ori	r4,r4,32
   44070:	d9014c15 	stw	r4,1328(sp)
   44074:	003a2e06 	br	42930 <___vfprintf_internal_r+0x1fc>
   44078:	dcc14515 	stw	r19,1300(sp)
   4407c:	98011016 	blt	r19,zero,444c0 <___vfprintf_internal_r+0x1d8c>
   44080:	980f883a 	mov	r7,r19
   44084:	d8014615 	stw	zero,1304(sp)
   44088:	003c4c06 	br	431bc <___vfprintf_internal_r+0xa88>
   4408c:	d9014f17 	ldw	r4,1340(sp)
   44090:	b00b883a 	mov	r5,r22
   44094:	d9800c04 	addi	r6,sp,48
   44098:	00426dc0 	call	426dc <__sprint_r>
   4409c:	103b5d1e 	bne	r2,zero,42e14 <___vfprintf_internal_r+0x6e0>
   440a0:	dc800e17 	ldw	r18,56(sp)
   440a4:	d9000517 	ldw	r4,20(sp)
   440a8:	d8c01904 	addi	r3,sp,100
   440ac:	003f2e06 	br	43d68 <___vfprintf_internal_r+0x1634>
   440b0:	d8c14c17 	ldw	r3,1328(sp)
   440b4:	1880100c 	andi	r2,r3,64
   440b8:	1000a026 	beq	r2,zero,4433c <___vfprintf_internal_r+0x1c08>
   440bc:	38800017 	ldw	r2,0(r7)
   440c0:	39c00104 	addi	r7,r7,4
   440c4:	d9c14015 	stw	r7,1280(sp)
   440c8:	d9014b17 	ldw	r4,1324(sp)
   440cc:	d9c14017 	ldw	r7,1280(sp)
   440d0:	1100000d 	sth	r4,0(r2)
   440d4:	0039f306 	br	428a4 <___vfprintf_internal_r+0x170>
   440d8:	d9014f17 	ldw	r4,1340(sp)
   440dc:	b00b883a 	mov	r5,r22
   440e0:	d9800c04 	addi	r6,sp,48
   440e4:	00426dc0 	call	426dc <__sprint_r>
   440e8:	103b4a1e 	bne	r2,zero,42e14 <___vfprintf_internal_r+0x6e0>
   440ec:	dc800e17 	ldw	r18,56(sp)
   440f0:	dc400d17 	ldw	r17,52(sp)
   440f4:	d9000517 	ldw	r4,20(sp)
   440f8:	d8c01904 	addi	r3,sp,100
   440fc:	003f2d06 	br	43db4 <___vfprintf_internal_r+0x1680>
   44100:	00800184 	movi	r2,6
   44104:	14c09a36 	bltu	r2,r19,44370 <___vfprintf_internal_r+0x1c3c>
   44108:	dcc14515 	stw	r19,1300(sp)
   4410c:	9800010e 	bge	r19,zero,44114 <___vfprintf_internal_r+0x19e0>
   44110:	d8014515 	stw	zero,1300(sp)
   44114:	00800174 	movhi	r2,5
   44118:	108dab04 	addi	r2,r2,13996
   4411c:	980f883a 	mov	r7,r19
   44120:	d8814115 	stw	r2,1284(sp)
   44124:	003a7206 	br	42af0 <___vfprintf_internal_r+0x3bc>
   44128:	00bfffc4 	movi	r2,-1
   4412c:	9880e226 	beq	r19,r2,444b8 <___vfprintf_internal_r+0x1d84>
   44130:	d9414d17 	ldw	r5,1332(sp)
   44134:	008019c4 	movi	r2,103
   44138:	2880dc26 	beq	r5,r2,444ac <___vfprintf_internal_r+0x1d78>
   4413c:	008011c4 	movi	r2,71
   44140:	2880da26 	beq	r5,r2,444ac <___vfprintf_internal_r+0x1d78>
   44144:	d9414c17 	ldw	r5,1328(sp)
   44148:	d9014317 	ldw	r4,1292(sp)
   4414c:	d9814217 	ldw	r6,1288(sp)
   44150:	29404014 	ori	r5,r5,256
   44154:	d9414c15 	stw	r5,1328(sp)
   44158:	2000cc16 	blt	r4,zero,4448c <___vfprintf_internal_r+0x1d58>
   4415c:	3021883a 	mov	r16,r6
   44160:	2023883a 	mov	r17,r4
   44164:	0039883a 	mov	fp,zero
   44168:	d9414d17 	ldw	r5,1332(sp)
   4416c:	00801984 	movi	r2,102
   44170:	2880b726 	beq	r5,r2,44450 <___vfprintf_internal_r+0x1d1c>
   44174:	00801184 	movi	r2,70
   44178:	2880b526 	beq	r5,r2,44450 <___vfprintf_internal_r+0x1d1c>
   4417c:	00801944 	movi	r2,101
   44180:	2880c826 	beq	r5,r2,444a4 <___vfprintf_internal_r+0x1d70>
   44184:	00801144 	movi	r2,69
   44188:	2880c626 	beq	r5,r2,444a4 <___vfprintf_internal_r+0x1d70>
   4418c:	9829883a 	mov	r20,r19
   44190:	d9014f17 	ldw	r4,1340(sp)
   44194:	d8800504 	addi	r2,sp,20
   44198:	880d883a 	mov	r6,r17
   4419c:	d8800115 	stw	r2,4(sp)
   441a0:	d8c00604 	addi	r3,sp,24
   441a4:	d8800704 	addi	r2,sp,28
   441a8:	800b883a 	mov	r5,r16
   441ac:	01c00084 	movi	r7,2
   441b0:	d8c00215 	stw	r3,8(sp)
   441b4:	d8800315 	stw	r2,12(sp)
   441b8:	dd000015 	stw	r20,0(sp)
   441bc:	004620c0 	call	4620c <_dtoa_r>
   441c0:	d9814d17 	ldw	r6,1332(sp)
   441c4:	d8814115 	stw	r2,1284(sp)
   441c8:	008019c4 	movi	r2,103
   441cc:	30809526 	beq	r6,r2,44424 <___vfprintf_internal_r+0x1cf0>
   441d0:	d8c14d17 	ldw	r3,1332(sp)
   441d4:	008011c4 	movi	r2,71
   441d8:	18809226 	beq	r3,r2,44424 <___vfprintf_internal_r+0x1cf0>
   441dc:	d9414117 	ldw	r5,1284(sp)
   441e0:	d9814d17 	ldw	r6,1332(sp)
   441e4:	00801984 	movi	r2,102
   441e8:	2d25883a 	add	r18,r5,r20
   441ec:	30808626 	beq	r6,r2,44408 <___vfprintf_internal_r+0x1cd4>
   441f0:	00801184 	movi	r2,70
   441f4:	30808426 	beq	r6,r2,44408 <___vfprintf_internal_r+0x1cd4>
   441f8:	000d883a 	mov	r6,zero
   441fc:	000f883a 	mov	r7,zero
   44200:	880b883a 	mov	r5,r17
   44204:	8009883a 	mov	r4,r16
   44208:	004f4e80 	call	4f4e8 <__eqdf2>
   4420c:	1000751e 	bne	r2,zero,443e4 <___vfprintf_internal_r+0x1cb0>
   44210:	9005883a 	mov	r2,r18
   44214:	dc800715 	stw	r18,28(sp)
   44218:	d9014117 	ldw	r4,1284(sp)
   4421c:	d9414d17 	ldw	r5,1332(sp)
   44220:	00c019c4 	movi	r3,103
   44224:	1125c83a 	sub	r18,r2,r4
   44228:	28c06826 	beq	r5,r3,443cc <___vfprintf_internal_r+0x1c98>
   4422c:	008011c4 	movi	r2,71
   44230:	28806626 	beq	r5,r2,443cc <___vfprintf_internal_r+0x1c98>
   44234:	d9000517 	ldw	r4,20(sp)
   44238:	d8c14d17 	ldw	r3,1332(sp)
   4423c:	00801944 	movi	r2,101
   44240:	10c05516 	blt	r2,r3,44398 <___vfprintf_internal_r+0x1c64>
   44244:	213fffc4 	addi	r4,r4,-1
   44248:	d9000515 	stw	r4,20(sp)
   4424c:	d8c00805 	stb	r3,32(sp)
   44250:	2021883a 	mov	r16,r4
   44254:	2000c116 	blt	r4,zero,4455c <___vfprintf_internal_r+0x1e28>
   44258:	00800ac4 	movi	r2,43
   4425c:	d8800845 	stb	r2,33(sp)
   44260:	00800244 	movi	r2,9
   44264:	1400af0e 	bge	r2,r16,44524 <___vfprintf_internal_r+0x1df0>
   44268:	1027883a 	mov	r19,r2
   4426c:	dc400b84 	addi	r17,sp,46
   44270:	8009883a 	mov	r4,r16
   44274:	01400284 	movi	r5,10
   44278:	004fccc0 	call	4fccc <__modsi3>
   4427c:	10800c04 	addi	r2,r2,48
   44280:	8c7fffc4 	addi	r17,r17,-1
   44284:	8009883a 	mov	r4,r16
   44288:	01400284 	movi	r5,10
   4428c:	88800005 	stb	r2,0(r17)
   44290:	004fc6c0 	call	4fc6c <__divsi3>
   44294:	1021883a 	mov	r16,r2
   44298:	98bff516 	blt	r19,r2,44270 <___vfprintf_internal_r+0x1b3c>
   4429c:	10c00c04 	addi	r3,r2,48
   442a0:	d88009c4 	addi	r2,sp,39
   442a4:	108001c4 	addi	r2,r2,7
   442a8:	897fffc4 	addi	r5,r17,-1
   442ac:	88ffffc5 	stb	r3,-1(r17)
   442b0:	2880a72e 	bgeu	r5,r2,44550 <___vfprintf_internal_r+0x1e1c>
   442b4:	1009883a 	mov	r4,r2
   442b8:	d9800804 	addi	r6,sp,32
   442bc:	d8c00884 	addi	r3,sp,34
   442c0:	28800003 	ldbu	r2,0(r5)
   442c4:	29400044 	addi	r5,r5,1
   442c8:	18800005 	stb	r2,0(r3)
   442cc:	18c00044 	addi	r3,r3,1
   442d0:	293ffb36 	bltu	r5,r4,442c0 <___vfprintf_internal_r+0x1b8c>
   442d4:	1987c83a 	sub	r3,r3,r6
   442d8:	00800044 	movi	r2,1
   442dc:	d8c14815 	stw	r3,1312(sp)
   442e0:	90cf883a 	add	r7,r18,r3
   442e4:	1480960e 	bge	r2,r18,44540 <___vfprintf_internal_r+0x1e0c>
   442e8:	39c00044 	addi	r7,r7,1
   442ec:	d9c14515 	stw	r7,1300(sp)
   442f0:	38003416 	blt	r7,zero,443c4 <___vfprintf_internal_r+0x1c90>
   442f4:	e0803fcc 	andi	r2,fp,255
   442f8:	1080201c 	xori	r2,r2,128
   442fc:	10bfe004 	addi	r2,r2,-128
   44300:	10004e26 	beq	r2,zero,4443c <___vfprintf_internal_r+0x1d08>
   44304:	00800b44 	movi	r2,45
   44308:	dc814715 	stw	r18,1308(sp)
   4430c:	d8014615 	stw	zero,1304(sp)
   44310:	d8800405 	stb	r2,16(sp)
   44314:	003bab06 	br	431c4 <___vfprintf_internal_r+0xa90>
   44318:	00800b44 	movi	r2,45
   4431c:	d8800405 	stb	r2,16(sp)
   44320:	003d2d06 	br	437d8 <___vfprintf_internal_r+0x10a4>
   44324:	d9014f17 	ldw	r4,1340(sp)
   44328:	b00b883a 	mov	r5,r22
   4432c:	d9800c04 	addi	r6,sp,48
   44330:	00426dc0 	call	426dc <__sprint_r>
   44334:	103ab71e 	bne	r2,zero,42e14 <___vfprintf_internal_r+0x6e0>
   44338:	003ab506 	br	42e10 <___vfprintf_internal_r+0x6dc>
   4433c:	38800017 	ldw	r2,0(r7)
   44340:	39c00104 	addi	r7,r7,4
   44344:	d9c14015 	stw	r7,1280(sp)
   44348:	d9414b17 	ldw	r5,1324(sp)
   4434c:	d9c14017 	ldw	r7,1280(sp)
   44350:	11400015 	stw	r5,0(r2)
   44354:	00395306 	br	428a4 <___vfprintf_internal_r+0x170>
   44358:	980f883a 	mov	r7,r19
   4435c:	dcc14515 	stw	r19,1300(sp)
   44360:	d8014615 	stw	zero,1304(sp)
   44364:	003b9506 	br	431bc <___vfprintf_internal_r+0xa88>
   44368:	0027883a 	mov	r19,zero
   4436c:	00397206 	br	42938 <___vfprintf_internal_r+0x204>
   44370:	00c00174 	movhi	r3,5
   44374:	18cdab04 	addi	r3,r3,13996
   44378:	100f883a 	mov	r7,r2
   4437c:	d8814515 	stw	r2,1300(sp)
   44380:	d8c14115 	stw	r3,1284(sp)
   44384:	0039da06 	br	42af0 <___vfprintf_internal_r+0x3bc>
   44388:	00800174 	movhi	r2,5
   4438c:	108daa04 	addi	r2,r2,13992
   44390:	d8814115 	stw	r2,1284(sp)
   44394:	003d1606 	br	437f0 <___vfprintf_internal_r+0x10bc>
   44398:	d9414d17 	ldw	r5,1332(sp)
   4439c:	00801984 	movi	r2,102
   443a0:	28804926 	beq	r5,r2,444c8 <___vfprintf_internal_r+0x1d94>
   443a4:	200f883a 	mov	r7,r4
   443a8:	24805716 	blt	r4,r18,44508 <___vfprintf_internal_r+0x1dd4>
   443ac:	d9414c17 	ldw	r5,1328(sp)
   443b0:	2880004c 	andi	r2,r5,1
   443b4:	10000126 	beq	r2,zero,443bc <___vfprintf_internal_r+0x1c88>
   443b8:	21c00044 	addi	r7,r4,1
   443bc:	d9c14515 	stw	r7,1300(sp)
   443c0:	383fcc0e 	bge	r7,zero,442f4 <___vfprintf_internal_r+0x1bc0>
   443c4:	d8014515 	stw	zero,1300(sp)
   443c8:	003fca06 	br	442f4 <___vfprintf_internal_r+0x1bc0>
   443cc:	d9000517 	ldw	r4,20(sp)
   443d0:	00bfff04 	movi	r2,-4
   443d4:	1100480e 	bge	r2,r4,444f8 <___vfprintf_internal_r+0x1dc4>
   443d8:	99004716 	blt	r19,r4,444f8 <___vfprintf_internal_r+0x1dc4>
   443dc:	d8c14d15 	stw	r3,1332(sp)
   443e0:	003ff006 	br	443a4 <___vfprintf_internal_r+0x1c70>
   443e4:	d8800717 	ldw	r2,28(sp)
   443e8:	14bf8b2e 	bgeu	r2,r18,44218 <___vfprintf_internal_r+0x1ae4>
   443ec:	9007883a 	mov	r3,r18
   443f0:	01000c04 	movi	r4,48
   443f4:	11000005 	stb	r4,0(r2)
   443f8:	10800044 	addi	r2,r2,1
   443fc:	d8800715 	stw	r2,28(sp)
   44400:	18bffc1e 	bne	r3,r2,443f4 <___vfprintf_internal_r+0x1cc0>
   44404:	003f8406 	br	44218 <___vfprintf_internal_r+0x1ae4>
   44408:	d8814117 	ldw	r2,1284(sp)
   4440c:	10c00007 	ldb	r3,0(r2)
   44410:	00800c04 	movi	r2,48
   44414:	18805b26 	beq	r3,r2,44584 <___vfprintf_internal_r+0x1e50>
   44418:	d9000517 	ldw	r4,20(sp)
   4441c:	9125883a 	add	r18,r18,r4
   44420:	003f7506 	br	441f8 <___vfprintf_internal_r+0x1ac4>
   44424:	d9014c17 	ldw	r4,1328(sp)
   44428:	2080004c 	andi	r2,r4,1
   4442c:	1005003a 	cmpeq	r2,r2,zero
   44430:	103f6a26 	beq	r2,zero,441dc <___vfprintf_internal_r+0x1aa8>
   44434:	d8800717 	ldw	r2,28(sp)
   44438:	003f7706 	br	44218 <___vfprintf_internal_r+0x1ae4>
   4443c:	d9c14515 	stw	r7,1300(sp)
   44440:	38004d16 	blt	r7,zero,44578 <___vfprintf_internal_r+0x1e44>
   44444:	dc814715 	stw	r18,1308(sp)
   44448:	d8014615 	stw	zero,1304(sp)
   4444c:	003b5b06 	br	431bc <___vfprintf_internal_r+0xa88>
   44450:	d9014f17 	ldw	r4,1340(sp)
   44454:	d8800504 	addi	r2,sp,20
   44458:	d8800115 	stw	r2,4(sp)
   4445c:	d8c00604 	addi	r3,sp,24
   44460:	d8800704 	addi	r2,sp,28
   44464:	800b883a 	mov	r5,r16
   44468:	880d883a 	mov	r6,r17
   4446c:	01c000c4 	movi	r7,3
   44470:	d8c00215 	stw	r3,8(sp)
   44474:	d8800315 	stw	r2,12(sp)
   44478:	dcc00015 	stw	r19,0(sp)
   4447c:	9829883a 	mov	r20,r19
   44480:	004620c0 	call	4620c <_dtoa_r>
   44484:	d8814115 	stw	r2,1284(sp)
   44488:	003f5106 	br	441d0 <___vfprintf_internal_r+0x1a9c>
   4448c:	d8c14217 	ldw	r3,1288(sp)
   44490:	d9014317 	ldw	r4,1292(sp)
   44494:	07000b44 	movi	fp,45
   44498:	1821883a 	mov	r16,r3
   4449c:	2460003c 	xorhi	r17,r4,32768
   444a0:	003f3106 	br	44168 <___vfprintf_internal_r+0x1a34>
   444a4:	9d000044 	addi	r20,r19,1
   444a8:	003f3906 	br	44190 <___vfprintf_internal_r+0x1a5c>
   444ac:	983f251e 	bne	r19,zero,44144 <___vfprintf_internal_r+0x1a10>
   444b0:	04c00044 	movi	r19,1
   444b4:	003f2306 	br	44144 <___vfprintf_internal_r+0x1a10>
   444b8:	04c00184 	movi	r19,6
   444bc:	003f2106 	br	44144 <___vfprintf_internal_r+0x1a10>
   444c0:	d8014515 	stw	zero,1300(sp)
   444c4:	003eee06 	br	44080 <___vfprintf_internal_r+0x194c>
   444c8:	200f883a 	mov	r7,r4
   444cc:	0100370e 	bge	zero,r4,445ac <___vfprintf_internal_r+0x1e78>
   444d0:	9800031e 	bne	r19,zero,444e0 <___vfprintf_internal_r+0x1dac>
   444d4:	d9814c17 	ldw	r6,1328(sp)
   444d8:	3080004c 	andi	r2,r6,1
   444dc:	103fb726 	beq	r2,zero,443bc <___vfprintf_internal_r+0x1c88>
   444e0:	20800044 	addi	r2,r4,1
   444e4:	98a7883a 	add	r19,r19,r2
   444e8:	dcc14515 	stw	r19,1300(sp)
   444ec:	980f883a 	mov	r7,r19
   444f0:	983f800e 	bge	r19,zero,442f4 <___vfprintf_internal_r+0x1bc0>
   444f4:	003fb306 	br	443c4 <___vfprintf_internal_r+0x1c90>
   444f8:	d9814d17 	ldw	r6,1332(sp)
   444fc:	31bfff84 	addi	r6,r6,-2
   44500:	d9814d15 	stw	r6,1332(sp)
   44504:	003f4c06 	br	44238 <___vfprintf_internal_r+0x1b04>
   44508:	0100180e 	bge	zero,r4,4456c <___vfprintf_internal_r+0x1e38>
   4450c:	00800044 	movi	r2,1
   44510:	1485883a 	add	r2,r2,r18
   44514:	d8814515 	stw	r2,1300(sp)
   44518:	100f883a 	mov	r7,r2
   4451c:	103f750e 	bge	r2,zero,442f4 <___vfprintf_internal_r+0x1bc0>
   44520:	003fa806 	br	443c4 <___vfprintf_internal_r+0x1c90>
   44524:	80c00c04 	addi	r3,r16,48
   44528:	00800c04 	movi	r2,48
   4452c:	d8c008c5 	stb	r3,35(sp)
   44530:	d9800804 	addi	r6,sp,32
   44534:	d8c00904 	addi	r3,sp,36
   44538:	d8800885 	stb	r2,34(sp)
   4453c:	003f6506 	br	442d4 <___vfprintf_internal_r+0x1ba0>
   44540:	d9014c17 	ldw	r4,1328(sp)
   44544:	2084703a 	and	r2,r4,r2
   44548:	103f9c26 	beq	r2,zero,443bc <___vfprintf_internal_r+0x1c88>
   4454c:	003f6606 	br	442e8 <___vfprintf_internal_r+0x1bb4>
   44550:	d9800804 	addi	r6,sp,32
   44554:	d8c00884 	addi	r3,sp,34
   44558:	003f5e06 	br	442d4 <___vfprintf_internal_r+0x1ba0>
   4455c:	00800b44 	movi	r2,45
   44560:	0121c83a 	sub	r16,zero,r4
   44564:	d8800845 	stb	r2,33(sp)
   44568:	003f3d06 	br	44260 <___vfprintf_internal_r+0x1b2c>
   4456c:	00800084 	movi	r2,2
   44570:	1105c83a 	sub	r2,r2,r4
   44574:	003fe606 	br	44510 <___vfprintf_internal_r+0x1ddc>
   44578:	d8014515 	stw	zero,1300(sp)
   4457c:	dc814715 	stw	r18,1308(sp)
   44580:	003fb106 	br	44448 <___vfprintf_internal_r+0x1d14>
   44584:	000d883a 	mov	r6,zero
   44588:	000f883a 	mov	r7,zero
   4458c:	8009883a 	mov	r4,r16
   44590:	880b883a 	mov	r5,r17
   44594:	004f5700 	call	4f570 <__nedf2>
   44598:	103f9f26 	beq	r2,zero,44418 <___vfprintf_internal_r+0x1ce4>
   4459c:	00800044 	movi	r2,1
   445a0:	1509c83a 	sub	r4,r2,r20
   445a4:	d9000515 	stw	r4,20(sp)
   445a8:	003f9b06 	br	44418 <___vfprintf_internal_r+0x1ce4>
   445ac:	98000d1e 	bne	r19,zero,445e4 <___vfprintf_internal_r+0x1eb0>
   445b0:	d8c14c17 	ldw	r3,1328(sp)
   445b4:	1880004c 	andi	r2,r3,1
   445b8:	10000a1e 	bne	r2,zero,445e4 <___vfprintf_internal_r+0x1eb0>
   445bc:	01000044 	movi	r4,1
   445c0:	200f883a 	mov	r7,r4
   445c4:	d9014515 	stw	r4,1300(sp)
   445c8:	003f4a06 	br	442f4 <___vfprintf_internal_r+0x1bc0>
   445cc:	3cc00017 	ldw	r19,0(r7)
   445d0:	39c00104 	addi	r7,r7,4
   445d4:	983d0e0e 	bge	r19,zero,43a10 <___vfprintf_internal_r+0x12dc>
   445d8:	b8c00007 	ldb	r3,0(r23)
   445dc:	04ffffc4 	movi	r19,-1
   445e0:	0038d306 	br	42930 <___vfprintf_internal_r+0x1fc>
   445e4:	9cc00084 	addi	r19,r19,2
   445e8:	dcc14515 	stw	r19,1300(sp)
   445ec:	980f883a 	mov	r7,r19
   445f0:	983f400e 	bge	r19,zero,442f4 <___vfprintf_internal_r+0x1bc0>
   445f4:	003f7306 	br	443c4 <___vfprintf_internal_r+0x1c90>

000445f8 <__vfprintf_internal>:
   445f8:	00800174 	movhi	r2,5
   445fc:	1095cf04 	addi	r2,r2,22332
   44600:	2013883a 	mov	r9,r4
   44604:	11000017 	ldw	r4,0(r2)
   44608:	2805883a 	mov	r2,r5
   4460c:	300f883a 	mov	r7,r6
   44610:	480b883a 	mov	r5,r9
   44614:	100d883a 	mov	r6,r2
   44618:	00427341 	jmpi	42734 <___vfprintf_internal_r>

0004461c <__svfscanf_r>:
   4461c:	deff4e04 	addi	sp,sp,-712
   44620:	dd80ae15 	stw	r22,696(sp)
   44624:	dd00ac15 	stw	r20,688(sp)
   44628:	dc40a915 	stw	r17,676(sp)
   4462c:	dc00a815 	stw	r16,672(sp)
   44630:	dfc0b115 	stw	ra,708(sp)
   44634:	df00b015 	stw	fp,704(sp)
   44638:	ddc0af15 	stw	r23,700(sp)
   4463c:	dd40ad15 	stw	r21,692(sp)
   44640:	dcc0ab15 	stw	r19,684(sp)
   44644:	dc80aa15 	stw	r18,680(sp)
   44648:	202d883a 	mov	r22,r4
   4464c:	2821883a 	mov	r16,r5
   44650:	d9c0a415 	stw	r7,656(sp)
   44654:	3029883a 	mov	r20,r6
   44658:	d800a215 	stw	zero,648(sp)
   4465c:	0023883a 	mov	r17,zero
   44660:	d800a115 	stw	zero,644(sp)
   44664:	d800a015 	stw	zero,640(sp)
   44668:	a1000007 	ldb	r4,0(r20)
   4466c:	d9000115 	stw	r4,4(sp)
   44670:	20001f26 	beq	r4,zero,446f0 <__svfscanf_r+0xd4>
   44674:	04c00174 	movhi	r19,5
   44678:	9cd5d304 	addi	r19,r19,22348
   4467c:	9c800017 	ldw	r18,0(r19)
   44680:	a5000044 	addi	r20,r20,1
   44684:	9107883a 	add	r3,r18,r4
   44688:	18800003 	ldbu	r2,0(r3)
   4468c:	1080020c 	andi	r2,r2,8
   44690:	10002426 	beq	r2,zero,44724 <__svfscanf_r+0x108>
   44694:	80c00117 	ldw	r3,4(r16)
   44698:	00c00e0e 	bge	zero,r3,446d4 <__svfscanf_r+0xb8>
   4469c:	81400017 	ldw	r5,0(r16)
   446a0:	98800017 	ldw	r2,0(r19)
   446a4:	28c00003 	ldbu	r3,0(r5)
   446a8:	1887883a 	add	r3,r3,r2
   446ac:	19000003 	ldbu	r4,0(r3)
   446b0:	2100020c 	andi	r4,r4,8
   446b4:	203fec26 	beq	r4,zero,44668 <__svfscanf_r+0x4c>
   446b8:	80c00117 	ldw	r3,4(r16)
   446bc:	29800044 	addi	r6,r5,1
   446c0:	8c400044 	addi	r17,r17,1
   446c4:	18ffffc4 	addi	r3,r3,-1
   446c8:	81800015 	stw	r6,0(r16)
   446cc:	80c00115 	stw	r3,4(r16)
   446d0:	00fff216 	blt	zero,r3,4469c <__svfscanf_r+0x80>
   446d4:	b009883a 	mov	r4,r22
   446d8:	800b883a 	mov	r5,r16
   446dc:	0041f7c0 	call	41f7c <__srefill_r>
   446e0:	103fee26 	beq	r2,zero,4469c <__svfscanf_r+0x80>
   446e4:	a1000007 	ldb	r4,0(r20)
   446e8:	d9000115 	stw	r4,4(sp)
   446ec:	203fe11e 	bne	r4,zero,44674 <__svfscanf_r+0x58>
   446f0:	d880a217 	ldw	r2,648(sp)
   446f4:	dfc0b117 	ldw	ra,708(sp)
   446f8:	df00b017 	ldw	fp,704(sp)
   446fc:	ddc0af17 	ldw	r23,700(sp)
   44700:	dd80ae17 	ldw	r22,696(sp)
   44704:	dd40ad17 	ldw	r21,692(sp)
   44708:	dd00ac17 	ldw	r20,688(sp)
   4470c:	dcc0ab17 	ldw	r19,684(sp)
   44710:	dc80aa17 	ldw	r18,680(sp)
   44714:	dc40a917 	ldw	r17,676(sp)
   44718:	dc00a817 	ldw	r16,672(sp)
   4471c:	dec0b204 	addi	sp,sp,712
   44720:	f800283a 	ret
   44724:	00800944 	movi	r2,37
   44728:	20801626 	beq	r4,r2,44784 <__svfscanf_r+0x168>
   4472c:	80800117 	ldw	r2,4(r16)
   44730:	00800b0e 	bge	zero,r2,44760 <__svfscanf_r+0x144>
   44734:	81000017 	ldw	r4,0(r16)
   44738:	a0ffffc7 	ldb	r3,-1(r20)
   4473c:	20800003 	ldbu	r2,0(r4)
   44740:	10ffeb1e 	bne	r2,r3,446f0 <__svfscanf_r+0xd4>
   44744:	80c00117 	ldw	r3,4(r16)
   44748:	21800044 	addi	r6,r4,1
   4474c:	8c400044 	addi	r17,r17,1
   44750:	18ffffc4 	addi	r3,r3,-1
   44754:	80c00115 	stw	r3,4(r16)
   44758:	81800015 	stw	r6,0(r16)
   4475c:	003fc206 	br	44668 <__svfscanf_r+0x4c>
   44760:	b009883a 	mov	r4,r22
   44764:	800b883a 	mov	r5,r16
   44768:	0041f7c0 	call	41f7c <__srefill_r>
   4476c:	103ff126 	beq	r2,zero,44734 <__svfscanf_r+0x118>
   44770:	d900a217 	ldw	r4,648(sp)
   44774:	2004981e 	bne	r4,zero,459d8 <__svfscanf_r+0x13bc>
   44778:	00bfffc4 	movi	r2,-1
   4477c:	d880a215 	stw	r2,648(sp)
   44780:	003fdb06 	br	446f0 <__svfscanf_r+0xd4>
   44784:	d800a315 	stw	zero,652(sp)
   44788:	002b883a 	mov	r21,zero
   4478c:	a0c00003 	ldbu	r3,0(r20)
   44790:	00801e04 	movi	r2,120
   44794:	a5000044 	addi	r20,r20,1
   44798:	1dc03fcc 	andi	r23,r3,255
   4479c:	bdc0201c 	xori	r23,r23,128
   447a0:	bdffe004 	addi	r23,r23,-128
   447a4:	10c08036 	bltu	r2,r3,449a8 <__svfscanf_r+0x38c>
   447a8:	18c5883a 	add	r2,r3,r3
   447ac:	1085883a 	add	r2,r2,r2
   447b0:	00c00134 	movhi	r3,4
   447b4:	18d1f104 	addi	r3,r3,18372
   447b8:	10c5883a 	add	r2,r2,r3
   447bc:	11000017 	ldw	r4,0(r2)
   447c0:	2000683a 	jmp	r4
   447c4:	00044778 	rdprs	zero,zero,4381
   447c8:	000449a8 	cmpgeui	zero,zero,4390
   447cc:	000449a8 	cmpgeui	zero,zero,4390
   447d0:	000449a8 	cmpgeui	zero,zero,4390
   447d4:	000449a8 	cmpgeui	zero,zero,4390
   447d8:	000449a8 	cmpgeui	zero,zero,4390
   447dc:	000449a8 	cmpgeui	zero,zero,4390
   447e0:	000449a8 	cmpgeui	zero,zero,4390
   447e4:	000449a8 	cmpgeui	zero,zero,4390
   447e8:	000449a8 	cmpgeui	zero,zero,4390
   447ec:	000449a8 	cmpgeui	zero,zero,4390
   447f0:	000449a8 	cmpgeui	zero,zero,4390
   447f4:	000449a8 	cmpgeui	zero,zero,4390
   447f8:	000449a8 	cmpgeui	zero,zero,4390
   447fc:	000449a8 	cmpgeui	zero,zero,4390
   44800:	000449a8 	cmpgeui	zero,zero,4390
   44804:	000449a8 	cmpgeui	zero,zero,4390
   44808:	000449a8 	cmpgeui	zero,zero,4390
   4480c:	000449a8 	cmpgeui	zero,zero,4390
   44810:	000449a8 	cmpgeui	zero,zero,4390
   44814:	000449a8 	cmpgeui	zero,zero,4390
   44818:	000449a8 	cmpgeui	zero,zero,4390
   4481c:	000449a8 	cmpgeui	zero,zero,4390
   44820:	000449a8 	cmpgeui	zero,zero,4390
   44824:	000449a8 	cmpgeui	zero,zero,4390
   44828:	000449a8 	cmpgeui	zero,zero,4390
   4482c:	000449a8 	cmpgeui	zero,zero,4390
   44830:	000449a8 	cmpgeui	zero,zero,4390
   44834:	000449a8 	cmpgeui	zero,zero,4390
   44838:	000449a8 	cmpgeui	zero,zero,4390
   4483c:	000449a8 	cmpgeui	zero,zero,4390
   44840:	000449a8 	cmpgeui	zero,zero,4390
   44844:	000449a8 	cmpgeui	zero,zero,4390
   44848:	000449a8 	cmpgeui	zero,zero,4390
   4484c:	000449a8 	cmpgeui	zero,zero,4390
   44850:	000449a8 	cmpgeui	zero,zero,4390
   44854:	000449a8 	cmpgeui	zero,zero,4390
   44858:	0004472c 	andhi	zero,zero,4380
   4485c:	000449a8 	cmpgeui	zero,zero,4390
   44860:	000449a8 	cmpgeui	zero,zero,4390
   44864:	000449a8 	cmpgeui	zero,zero,4390
   44868:	000449a8 	cmpgeui	zero,zero,4390
   4486c:	00045848 	cmpgei	zero,zero,4449
   44870:	000449a8 	cmpgeui	zero,zero,4390
   44874:	000449a8 	cmpgeui	zero,zero,4390
   44878:	000449a8 	cmpgeui	zero,zero,4390
   4487c:	000449a8 	cmpgeui	zero,zero,4390
   44880:	000449a8 	cmpgeui	zero,zero,4390
   44884:	0004582c 	andhi	zero,zero,4448
   44888:	0004582c 	andhi	zero,zero,4448
   4488c:	0004582c 	andhi	zero,zero,4448
   44890:	0004582c 	andhi	zero,zero,4448
   44894:	0004582c 	andhi	zero,zero,4448
   44898:	0004582c 	andhi	zero,zero,4448
   4489c:	0004582c 	andhi	zero,zero,4448
   448a0:	0004582c 	andhi	zero,zero,4448
   448a4:	0004582c 	andhi	zero,zero,4448
   448a8:	0004582c 	andhi	zero,zero,4448
   448ac:	000449a8 	cmpgeui	zero,zero,4390
   448b0:	000449a8 	cmpgeui	zero,zero,4390
   448b4:	000449a8 	cmpgeui	zero,zero,4390
   448b8:	000449a8 	cmpgeui	zero,zero,4390
   448bc:	000449a8 	cmpgeui	zero,zero,4390
   448c0:	000449a8 	cmpgeui	zero,zero,4390
   448c4:	000449a8 	cmpgeui	zero,zero,4390
   448c8:	000449a8 	cmpgeui	zero,zero,4390
   448cc:	000449a8 	cmpgeui	zero,zero,4390
   448d0:	000449a8 	cmpgeui	zero,zero,4390
   448d4:	000449bc 	xorhi	zero,zero,4390
   448d8:	00045930 	cmpltui	zero,zero,4452
   448dc:	000449a8 	cmpgeui	zero,zero,4390
   448e0:	00045930 	cmpltui	zero,zero,4452
   448e4:	000449a8 	cmpgeui	zero,zero,4390
   448e8:	000449a8 	cmpgeui	zero,zero,4390
   448ec:	000449a8 	cmpgeui	zero,zero,4390
   448f0:	000449a8 	cmpgeui	zero,zero,4390
   448f4:	00045824 	muli	zero,zero,4448
   448f8:	000449a8 	cmpgeui	zero,zero,4390
   448fc:	000449a8 	cmpgeui	zero,zero,4390
   44900:	00045804 	movi	zero,4448
   44904:	000449a8 	cmpgeui	zero,zero,4390
   44908:	000449a8 	cmpgeui	zero,zero,4390
   4490c:	000449a8 	cmpgeui	zero,zero,4390
   44910:	000449a8 	cmpgeui	zero,zero,4390
   44914:	000449a8 	cmpgeui	zero,zero,4390
   44918:	000449a8 	cmpgeui	zero,zero,4390
   4491c:	000449a8 	cmpgeui	zero,zero,4390
   44920:	000449a8 	cmpgeui	zero,zero,4390
   44924:	00045850 	cmplti	zero,zero,4449
   44928:	000449a8 	cmpgeui	zero,zero,4390
   4492c:	000449a8 	cmpgeui	zero,zero,4390
   44930:	000457e8 	cmpgeui	zero,zero,4447
   44934:	000449a8 	cmpgeui	zero,zero,4390
   44938:	000449a8 	cmpgeui	zero,zero,4390
   4493c:	000449a8 	cmpgeui	zero,zero,4390
   44940:	000449a8 	cmpgeui	zero,zero,4390
   44944:	000449a8 	cmpgeui	zero,zero,4390
   44948:	000449a8 	cmpgeui	zero,zero,4390
   4494c:	000449a8 	cmpgeui	zero,zero,4390
   44950:	00045938 	rdprs	zero,zero,4452
   44954:	000449c0 	call	449c <__alt_mem_onchip_mem-0x3bb64>
   44958:	00045930 	cmpltui	zero,zero,4452
   4495c:	00045930 	cmpltui	zero,zero,4452
   44960:	00045930 	cmpltui	zero,zero,4452
   44964:	00045944 	movi	zero,4453
   44968:	0004588c 	andi	zero,zero,4450
   4496c:	000449a8 	cmpgeui	zero,zero,4390
   44970:	000449a8 	cmpgeui	zero,zero,4390
   44974:	00044f54 	movui	zero,4413
   44978:	000449a8 	cmpgeui	zero,zero,4390
   4497c:	00045a40 	call	45a4 <__alt_mem_onchip_mem-0x3ba5c>
   44980:	000459fc 	xorhi	zero,zero,4455
   44984:	00045a20 	cmpeqi	zero,zero,4456
   44988:	000449a8 	cmpgeui	zero,zero,4390
   4498c:	000449a8 	cmpgeui	zero,zero,4390
   44990:	00045a18 	cmpnei	zero,zero,4456
   44994:	000449a8 	cmpgeui	zero,zero,4390
   44998:	00045870 	cmpltui	zero,zero,4449
   4499c:	000449a8 	cmpgeui	zero,zero,4390
   449a0:	000449a8 	cmpgeui	zero,zero,4390
   449a4:	00045850 	cmplti	zero,zero,4449
   449a8:	bc87883a 	add	r3,r23,r18
   449ac:	18800003 	ldbu	r2,0(r3)
   449b0:	1080004c 	andi	r2,r2,1
   449b4:	1005003a 	cmpeq	r2,r2,zero
   449b8:	1000011e 	bne	r2,zero,449c0 <__svfscanf_r+0x3a4>
   449bc:	ad400054 	ori	r21,r21,1
   449c0:	01000134 	movhi	r4,4
   449c4:	21091a04 	addi	r4,r4,9320
   449c8:	00800284 	movi	r2,10
   449cc:	d900a015 	stw	r4,640(sp)
   449d0:	048000c4 	movi	r18,3
   449d4:	d880a115 	stw	r2,644(sp)
   449d8:	80c00117 	ldw	r3,4(r16)
   449dc:	00c13f0e 	bge	zero,r3,44edc <__svfscanf_r+0x8c0>
   449e0:	a880100c 	andi	r2,r21,64
   449e4:	10001326 	beq	r2,zero,44a34 <__svfscanf_r+0x418>
   449e8:	00800104 	movi	r2,4
   449ec:	14bf1e36 	bltu	r2,r18,44668 <__svfscanf_r+0x4c>
   449f0:	9485883a 	add	r2,r18,r18
   449f4:	1085883a 	add	r2,r2,r2
   449f8:	00c00134 	movhi	r3,4
   449fc:	18d28304 	addi	r3,r3,18956
   44a00:	10c5883a 	add	r2,r2,r3
   44a04:	11000017 	ldw	r4,0(r2)
   44a08:	2000683a 	jmp	r4
   44a0c:	00044a70 	cmpltui	zero,zero,4393
   44a10:	00044b70 	cmpltui	zero,zero,4397
   44a14:	00044d80 	call	44d8 <__alt_mem_onchip_mem-0x3bb28>
   44a18:	00044be4 	muli	zero,zero,4399
   44a1c:	00044eb8 	rdprs	zero,zero,4410
   44a20:	b009883a 	mov	r4,r22
   44a24:	800b883a 	mov	r5,r16
   44a28:	0041f7c0 	call	41f7c <__srefill_r>
   44a2c:	103f501e 	bne	r2,zero,44770 <__svfscanf_r+0x154>
   44a30:	8c400044 	addi	r17,r17,1
   44a34:	81400017 	ldw	r5,0(r16)
   44a38:	98800017 	ldw	r2,0(r19)
   44a3c:	28c00003 	ldbu	r3,0(r5)
   44a40:	1887883a 	add	r3,r3,r2
   44a44:	19000003 	ldbu	r4,0(r3)
   44a48:	2100020c 	andi	r4,r4,8
   44a4c:	203fe626 	beq	r4,zero,449e8 <__svfscanf_r+0x3cc>
   44a50:	80c00117 	ldw	r3,4(r16)
   44a54:	18ffffc4 	addi	r3,r3,-1
   44a58:	80c00115 	stw	r3,4(r16)
   44a5c:	00fff00e 	bge	zero,r3,44a20 <__svfscanf_r+0x404>
   44a60:	29800044 	addi	r6,r5,1
   44a64:	8c400044 	addi	r17,r17,1
   44a68:	81800015 	stw	r6,0(r16)
   44a6c:	003ff106 	br	44a34 <__svfscanf_r+0x418>
   44a70:	d8c0a317 	ldw	r3,652(sp)
   44a74:	1800021e 	bne	r3,zero,44a80 <__svfscanf_r+0x464>
   44a78:	01000044 	movi	r4,1
   44a7c:	d900a315 	stw	r4,652(sp)
   44a80:	a880004c 	andi	r2,r21,1
   44a84:	1005003a 	cmpeq	r2,r2,zero
   44a88:	1002811e 	bne	r2,zero,45490 <__svfscanf_r+0xe74>
   44a8c:	ad40040c 	andi	r21,r21,16
   44a90:	a805003a 	cmpeq	r2,r21,zero
   44a94:	d880a615 	stw	r2,664(sp)
   44a98:	1003d31e 	bne	r2,zero,459e8 <__svfscanf_r+0x13cc>
   44a9c:	0027883a 	mov	r19,zero
   44aa0:	d900a317 	ldw	r4,652(sp)
   44aa4:	2003c726 	beq	r4,zero,459c4 <__svfscanf_r+0x13a8>
   44aa8:	07000174 	movhi	fp,5
   44aac:	e715d404 	addi	fp,fp,22352
   44ab0:	e0800017 	ldw	r2,0(fp)
   44ab4:	103f2e26 	beq	r2,zero,44770 <__svfscanf_r+0x154>
   44ab8:	d8804404 	addi	r2,sp,272
   44abc:	0025883a 	mov	r18,zero
   44ac0:	d880a515 	stw	r2,660(sp)
   44ac4:	05ffffc4 	movi	r23,-1
   44ac8:	80800017 	ldw	r2,0(r16)
   44acc:	80c00117 	ldw	r3,4(r16)
   44ad0:	d900a517 	ldw	r4,660(sp)
   44ad4:	12000003 	ldbu	r8,0(r2)
   44ad8:	18ffffc4 	addi	r3,r3,-1
   44adc:	11800044 	addi	r6,r2,1
   44ae0:	248f883a 	add	r7,r4,r18
   44ae4:	80c00115 	stw	r3,4(r16)
   44ae8:	81800015 	stw	r6,0(r16)
   44aec:	3a000005 	stb	r8,0(r7)
   44af0:	d9000204 	addi	r4,sp,8
   44af4:	000b883a 	mov	r5,zero
   44af8:	01800204 	movi	r6,8
   44afc:	0048f680 	call	48f68 <memset>
   44b00:	d980a517 	ldw	r6,660(sp)
   44b04:	94800044 	addi	r18,r18,1
   44b08:	d8800204 	addi	r2,sp,8
   44b0c:	b009883a 	mov	r4,r22
   44b10:	980b883a 	mov	r5,r19
   44b14:	900f883a 	mov	r7,r18
   44b18:	d8800015 	stw	r2,0(sp)
   44b1c:	0048c040 	call	48c04 <_mbrtowc_r>
   44b20:	1007883a 	mov	r3,r2
   44b24:	15ff1226 	beq	r2,r23,44770 <__svfscanf_r+0x154>
   44b28:	10039e1e 	bne	r2,zero,459a4 <__svfscanf_r+0x1388>
   44b2c:	a800011e 	bne	r21,zero,44b34 <__svfscanf_r+0x518>
   44b30:	98000015 	stw	zero,0(r19)
   44b34:	d8c0a317 	ldw	r3,652(sp)
   44b38:	d900a617 	ldw	r4,664(sp)
   44b3c:	8ca3883a 	add	r17,r17,r18
   44b40:	18ffffc4 	addi	r3,r3,-1
   44b44:	d8c0a315 	stw	r3,652(sp)
   44b48:	20000126 	beq	r4,zero,44b50 <__svfscanf_r+0x534>
   44b4c:	9cc00104 	addi	r19,r19,4
   44b50:	0025883a 	mov	r18,zero
   44b54:	80c00117 	ldw	r3,4(r16)
   44b58:	00c3950e 	bge	zero,r3,459b0 <__svfscanf_r+0x1394>
   44b5c:	d880a317 	ldw	r2,652(sp)
   44b60:	10039826 	beq	r2,zero,459c4 <__svfscanf_r+0x13a8>
   44b64:	e0800017 	ldw	r2,0(fp)
   44b68:	90bfd71e 	bne	r18,r2,44ac8 <__svfscanf_r+0x4ac>
   44b6c:	003f0006 	br	44770 <__svfscanf_r+0x154>
   44b70:	d880a317 	ldw	r2,652(sp)
   44b74:	1000021e 	bne	r2,zero,44b80 <__svfscanf_r+0x564>
   44b78:	00ffffc4 	movi	r3,-1
   44b7c:	d8c0a315 	stw	r3,652(sp)
   44b80:	a880040c 	andi	r2,r21,16
   44b84:	1003b826 	beq	r2,zero,45a68 <__svfscanf_r+0x144c>
   44b88:	0027883a 	mov	r19,zero
   44b8c:	dd400404 	addi	r21,sp,16
   44b90:	81000017 	ldw	r4,0(r16)
   44b94:	20800003 	ldbu	r2,0(r4)
   44b98:	a885883a 	add	r2,r21,r2
   44b9c:	10c00007 	ldb	r3,0(r2)
   44ba0:	18037d26 	beq	r3,zero,45998 <__svfscanf_r+0x137c>
   44ba4:	80c00117 	ldw	r3,4(r16)
   44ba8:	21800044 	addi	r6,r4,1
   44bac:	d900a317 	ldw	r4,652(sp)
   44bb0:	18ffffc4 	addi	r3,r3,-1
   44bb4:	9cc00044 	addi	r19,r19,1
   44bb8:	81800015 	stw	r6,0(r16)
   44bbc:	80c00115 	stw	r3,4(r16)
   44bc0:	24c37526 	beq	r4,r19,45998 <__svfscanf_r+0x137c>
   44bc4:	00fff216 	blt	zero,r3,44b90 <__svfscanf_r+0x574>
   44bc8:	b009883a 	mov	r4,r22
   44bcc:	800b883a 	mov	r5,r16
   44bd0:	0041f7c0 	call	41f7c <__srefill_r>
   44bd4:	103fee26 	beq	r2,zero,44b90 <__svfscanf_r+0x574>
   44bd8:	983ee526 	beq	r19,zero,44770 <__svfscanf_r+0x154>
   44bdc:	8ce3883a 	add	r17,r17,r19
   44be0:	003ea106 	br	44668 <__svfscanf_r+0x4c>
   44be4:	d900a317 	ldw	r4,652(sp)
   44be8:	00805704 	movi	r2,348
   44bec:	20ffffc4 	addi	r3,r4,-1
   44bf0:	10c0bf2e 	bgeu	r2,r3,44ef0 <__svfscanf_r+0x8d4>
   44bf4:	00805744 	movi	r2,349
   44bf8:	24ffa8c4 	addi	r19,r4,-349
   44bfc:	ac836014 	ori	r18,r21,3456
   44c00:	d880a315 	stw	r2,652(sp)
   44c04:	d8c04404 	addi	r3,sp,272
   44c08:	d8c0a515 	stw	r3,660(sp)
   44c0c:	002f883a 	mov	r23,zero
   44c10:	182b883a 	mov	r21,r3
   44c14:	81800017 	ldw	r6,0(r16)
   44c18:	00c01344 	movi	r3,77
   44c1c:	31400003 	ldbu	r5,0(r6)
   44c20:	28bff544 	addi	r2,r5,-43
   44c24:	10803fcc 	andi	r2,r2,255
   44c28:	1880b836 	bltu	r3,r2,44f0c <__svfscanf_r+0x8f0>
   44c2c:	1085883a 	add	r2,r2,r2
   44c30:	1085883a 	add	r2,r2,r2
   44c34:	00c00134 	movhi	r3,4
   44c38:	18d31204 	addi	r3,r3,19528
   44c3c:	10c5883a 	add	r2,r2,r3
   44c40:	11000017 	ldw	r4,0(r2)
   44c44:	2000683a 	jmp	r4
   44c48:	0004505c 	xori	zero,zero,4417
   44c4c:	00044f0c 	andi	zero,zero,4412
   44c50:	0004505c 	xori	zero,zero,4417
   44c54:	00044f0c 	andi	zero,zero,4412
   44c58:	00044f0c 	andi	zero,zero,4412
   44c5c:	000450a0 	cmpeqi	zero,zero,4418
   44c60:	000458a4 	muli	zero,zero,4450
   44c64:	000458a4 	muli	zero,zero,4450
   44c68:	000458a4 	muli	zero,zero,4450
   44c6c:	000458a4 	muli	zero,zero,4450
   44c70:	000458a4 	muli	zero,zero,4450
   44c74:	000458a4 	muli	zero,zero,4450
   44c78:	000458a4 	muli	zero,zero,4450
   44c7c:	000458cc 	andi	zero,zero,4451
   44c80:	000458cc 	andi	zero,zero,4451
   44c84:	00044f0c 	andi	zero,zero,4412
   44c88:	00044f0c 	andi	zero,zero,4412
   44c8c:	00044f0c 	andi	zero,zero,4412
   44c90:	00044f0c 	andi	zero,zero,4412
   44c94:	00044f0c 	andi	zero,zero,4412
   44c98:	00044f0c 	andi	zero,zero,4412
   44c9c:	00044f0c 	andi	zero,zero,4412
   44ca0:	000458fc 	xorhi	zero,zero,4451
   44ca4:	000458fc 	xorhi	zero,zero,4451
   44ca8:	000458fc 	xorhi	zero,zero,4451
   44cac:	000458fc 	xorhi	zero,zero,4451
   44cb0:	000458fc 	xorhi	zero,zero,4451
   44cb4:	000458fc 	xorhi	zero,zero,4451
   44cb8:	00044f0c 	andi	zero,zero,4412
   44cbc:	00044f0c 	andi	zero,zero,4412
   44cc0:	00044f0c 	andi	zero,zero,4412
   44cc4:	00044f0c 	andi	zero,zero,4412
   44cc8:	00044f0c 	andi	zero,zero,4412
   44ccc:	00044f0c 	andi	zero,zero,4412
   44cd0:	00044f0c 	andi	zero,zero,4412
   44cd4:	00044f0c 	andi	zero,zero,4412
   44cd8:	00044f0c 	andi	zero,zero,4412
   44cdc:	00044f0c 	andi	zero,zero,4412
   44ce0:	00044f0c 	andi	zero,zero,4412
   44ce4:	00044f0c 	andi	zero,zero,4412
   44ce8:	00044f0c 	andi	zero,zero,4412
   44cec:	00044f0c 	andi	zero,zero,4412
   44cf0:	00044f0c 	andi	zero,zero,4412
   44cf4:	00044f0c 	andi	zero,zero,4412
   44cf8:	00044f0c 	andi	zero,zero,4412
   44cfc:	0004590c 	andi	zero,zero,4452
   44d00:	00044f0c 	andi	zero,zero,4412
   44d04:	00044f0c 	andi	zero,zero,4412
   44d08:	00044f0c 	andi	zero,zero,4412
   44d0c:	00044f0c 	andi	zero,zero,4412
   44d10:	00044f0c 	andi	zero,zero,4412
   44d14:	00044f0c 	andi	zero,zero,4412
   44d18:	00044f0c 	andi	zero,zero,4412
   44d1c:	00044f0c 	andi	zero,zero,4412
   44d20:	000458fc 	xorhi	zero,zero,4451
   44d24:	000458fc 	xorhi	zero,zero,4451
   44d28:	000458fc 	xorhi	zero,zero,4451
   44d2c:	000458fc 	xorhi	zero,zero,4451
   44d30:	000458fc 	xorhi	zero,zero,4451
   44d34:	000458fc 	xorhi	zero,zero,4451
   44d38:	00044f0c 	andi	zero,zero,4412
   44d3c:	00044f0c 	andi	zero,zero,4412
   44d40:	00044f0c 	andi	zero,zero,4412
   44d44:	00044f0c 	andi	zero,zero,4412
   44d48:	00044f0c 	andi	zero,zero,4412
   44d4c:	00044f0c 	andi	zero,zero,4412
   44d50:	00044f0c 	andi	zero,zero,4412
   44d54:	00044f0c 	andi	zero,zero,4412
   44d58:	00044f0c 	andi	zero,zero,4412
   44d5c:	00044f0c 	andi	zero,zero,4412
   44d60:	00044f0c 	andi	zero,zero,4412
   44d64:	00044f0c 	andi	zero,zero,4412
   44d68:	00044f0c 	andi	zero,zero,4412
   44d6c:	00044f0c 	andi	zero,zero,4412
   44d70:	00044f0c 	andi	zero,zero,4412
   44d74:	00044f0c 	andi	zero,zero,4412
   44d78:	00044f0c 	andi	zero,zero,4412
   44d7c:	0004590c 	andi	zero,zero,4452
   44d80:	d900a317 	ldw	r4,652(sp)
   44d84:	2000021e 	bne	r4,zero,44d90 <__svfscanf_r+0x774>
   44d88:	00bfffc4 	movi	r2,-1
   44d8c:	d880a315 	stw	r2,652(sp)
   44d90:	a880004c 	andi	r2,r21,1
   44d94:	1005003a 	cmpeq	r2,r2,zero
   44d98:	1003651e 	bne	r2,zero,45b30 <__svfscanf_r+0x1514>
   44d9c:	adc0040c 	andi	r23,r21,16
   44da0:	b807003a 	cmpeq	r3,r23,zero
   44da4:	d8c0a715 	stw	r3,668(sp)
   44da8:	1802f61e 	bne	r3,zero,45984 <__svfscanf_r+0x1368>
   44dac:	dd400104 	addi	r21,sp,4
   44db0:	0025883a 	mov	r18,zero
   44db4:	073fffc4 	movi	fp,-1
   44db8:	81400017 	ldw	r5,0(r16)
   44dbc:	98800017 	ldw	r2,0(r19)
   44dc0:	29c00003 	ldbu	r7,0(r5)
   44dc4:	38c03fcc 	andi	r3,r7,255
   44dc8:	1887883a 	add	r3,r3,r2
   44dcc:	19000003 	ldbu	r4,0(r3)
   44dd0:	2100020c 	andi	r4,r4,8
   44dd4:	2000321e 	bne	r4,zero,44ea0 <__svfscanf_r+0x884>
   44dd8:	d8c0a317 	ldw	r3,652(sp)
   44ddc:	18003026 	beq	r3,zero,44ea0 <__svfscanf_r+0x884>
   44de0:	00800174 	movhi	r2,5
   44de4:	1095d404 	addi	r2,r2,22352
   44de8:	10c00017 	ldw	r3,0(r2)
   44dec:	90fe6026 	beq	r18,r3,44770 <__svfscanf_r+0x154>
   44df0:	d8c04404 	addi	r3,sp,272
   44df4:	80800117 	ldw	r2,4(r16)
   44df8:	d8c0a515 	stw	r3,660(sp)
   44dfc:	d900a517 	ldw	r4,660(sp)
   44e00:	10ffffc4 	addi	r3,r2,-1
   44e04:	29800044 	addi	r6,r5,1
   44e08:	80c00115 	stw	r3,4(r16)
   44e0c:	2485883a 	add	r2,r4,r18
   44e10:	81800015 	stw	r6,0(r16)
   44e14:	d9000204 	addi	r4,sp,8
   44e18:	000b883a 	mov	r5,zero
   44e1c:	01800204 	movi	r6,8
   44e20:	11c00005 	stb	r7,0(r2)
   44e24:	0048f680 	call	48f68 <memset>
   44e28:	d980a517 	ldw	r6,660(sp)
   44e2c:	94800044 	addi	r18,r18,1
   44e30:	d8800204 	addi	r2,sp,8
   44e34:	b009883a 	mov	r4,r22
   44e38:	a80b883a 	mov	r5,r21
   44e3c:	900f883a 	mov	r7,r18
   44e40:	d8800015 	stw	r2,0(sp)
   44e44:	0048c040 	call	48c04 <_mbrtowc_r>
   44e48:	1007883a 	mov	r3,r2
   44e4c:	173e4826 	beq	r2,fp,44770 <__svfscanf_r+0x154>
   44e50:	1002c91e 	bne	r2,zero,45978 <__svfscanf_r+0x135c>
   44e54:	a8000015 	stw	zero,0(r21)
   44e58:	a9000017 	ldw	r4,0(r21)
   44e5c:	0048a9c0 	call	48a9c <iswspace>
   44e60:	1002bc1e 	bne	r2,zero,45954 <__svfscanf_r+0x1338>
   44e64:	d900a317 	ldw	r4,652(sp)
   44e68:	d880a717 	ldw	r2,668(sp)
   44e6c:	8ca3883a 	add	r17,r17,r18
   44e70:	213fffc4 	addi	r4,r4,-1
   44e74:	d900a315 	stw	r4,652(sp)
   44e78:	10000126 	beq	r2,zero,44e80 <__svfscanf_r+0x864>
   44e7c:	ad400104 	addi	r21,r21,4
   44e80:	0025883a 	mov	r18,zero
   44e84:	80c00117 	ldw	r3,4(r16)
   44e88:	00ffcb16 	blt	zero,r3,44db8 <__svfscanf_r+0x79c>
   44e8c:	b009883a 	mov	r4,r22
   44e90:	800b883a 	mov	r5,r16
   44e94:	0041f7c0 	call	41f7c <__srefill_r>
   44e98:	103fc726 	beq	r2,zero,44db8 <__svfscanf_r+0x79c>
   44e9c:	903e341e 	bne	r18,zero,44770 <__svfscanf_r+0x154>
   44ea0:	b83df11e 	bne	r23,zero,44668 <__svfscanf_r+0x4c>
   44ea4:	d900a217 	ldw	r4,648(sp)
   44ea8:	a8000015 	stw	zero,0(r21)
   44eac:	21000044 	addi	r4,r4,1
   44eb0:	d900a215 	stw	r4,648(sp)
   44eb4:	003dec06 	br	44668 <__svfscanf_r+0x4c>
   44eb8:	d900a317 	ldw	r4,652(sp)
   44ebc:	00805704 	movi	r2,348
   44ec0:	20ffffc4 	addi	r3,r4,-1
   44ec4:	10c0902e 	bgeu	r2,r3,45108 <__svfscanf_r+0xaec>
   44ec8:	00805744 	movi	r2,349
   44ecc:	24ffa8c4 	addi	r19,r4,-349
   44ed0:	ad41e014 	ori	r21,r21,1920
   44ed4:	d880a315 	stw	r2,652(sp)
   44ed8:	00010806 	br	452fc <__svfscanf_r+0xce0>
   44edc:	b009883a 	mov	r4,r22
   44ee0:	800b883a 	mov	r5,r16
   44ee4:	0041f7c0 	call	41f7c <__srefill_r>
   44ee8:	103ebd26 	beq	r2,zero,449e0 <__svfscanf_r+0x3c4>
   44eec:	003e2006 	br	44770 <__svfscanf_r+0x154>
   44ef0:	d900a317 	ldw	r4,652(sp)
   44ef4:	ac836014 	ori	r18,r21,3456
   44ef8:	2002941e 	bne	r4,zero,4594c <__svfscanf_r+0x1330>
   44efc:	d8804404 	addi	r2,sp,272
   44f00:	d880a515 	stw	r2,660(sp)
   44f04:	002f883a 	mov	r23,zero
   44f08:	102b883a 	mov	r21,r2
   44f0c:	9080400c 	andi	r2,r18,256
   44f10:	10000926 	beq	r2,zero,44f38 <__svfscanf_r+0x91c>
   44f14:	d8c0a517 	ldw	r3,660(sp)
   44f18:	1d40052e 	bgeu	r3,r21,44f30 <__svfscanf_r+0x914>
   44f1c:	ad7fffc4 	addi	r21,r21,-1
   44f20:	a9400007 	ldb	r5,0(r21)
   44f24:	b009883a 	mov	r4,r22
   44f28:	800d883a 	mov	r6,r16
   44f2c:	004ca5c0 	call	4ca5c <_ungetc_r>
   44f30:	d900a517 	ldw	r4,660(sp)
   44f34:	257dee26 	beq	r4,r21,446f0 <__svfscanf_r+0xd4>
   44f38:	9080040c 	andi	r2,r18,16
   44f3c:	10000a26 	beq	r2,zero,44f68 <__svfscanf_r+0x94c>
   44f40:	d8c0a517 	ldw	r3,660(sp)
   44f44:	a8c5c83a 	sub	r2,r21,r3
   44f48:	b885883a 	add	r2,r23,r2
   44f4c:	88a3883a 	add	r17,r17,r2
   44f50:	003dc506 	br	44668 <__svfscanf_r+0x4c>
   44f54:	a0c00007 	ldb	r3,0(r20)
   44f58:	00801b04 	movi	r2,108
   44f5c:	18801726 	beq	r3,r2,44fbc <__svfscanf_r+0x9a0>
   44f60:	ad400054 	ori	r21,r21,1
   44f64:	003e0906 	br	4478c <__svfscanf_r+0x170>
   44f68:	a8000005 	stb	zero,0(r21)
   44f6c:	d8c0a017 	ldw	r3,640(sp)
   44f70:	d940a517 	ldw	r5,660(sp)
   44f74:	d9c0a117 	ldw	r7,644(sp)
   44f78:	b009883a 	mov	r4,r22
   44f7c:	000d883a 	mov	r6,zero
   44f80:	183ee83a 	callr	r3
   44f84:	1007883a 	mov	r3,r2
   44f88:	9080080c 	andi	r2,r18,32
   44f8c:	1000251e 	bne	r2,zero,45024 <__svfscanf_r+0xa08>
   44f90:	9080010c 	andi	r2,r18,4
   44f94:	10000c26 	beq	r2,zero,44fc8 <__svfscanf_r+0x9ac>
   44f98:	d900a417 	ldw	r4,656(sp)
   44f9c:	20800017 	ldw	r2,0(r4)
   44fa0:	21000104 	addi	r4,r4,4
   44fa4:	d900a415 	stw	r4,656(sp)
   44fa8:	10c0000d 	sth	r3,0(r2)
   44fac:	d880a217 	ldw	r2,648(sp)
   44fb0:	10800044 	addi	r2,r2,1
   44fb4:	d880a215 	stw	r2,648(sp)
   44fb8:	003fe106 	br	44f40 <__svfscanf_r+0x924>
   44fbc:	a5000044 	addi	r20,r20,1
   44fc0:	ad400094 	ori	r21,r21,2
   44fc4:	003df106 	br	4478c <__svfscanf_r+0x170>
   44fc8:	9080004c 	andi	r2,r18,1
   44fcc:	1005003a 	cmpeq	r2,r2,zero
   44fd0:	10001426 	beq	r2,zero,45024 <__svfscanf_r+0xa08>
   44fd4:	9080008c 	andi	r2,r18,2
   44fd8:	10001226 	beq	r2,zero,45024 <__svfscanf_r+0xa08>
   44fdc:	d8c0a017 	ldw	r3,640(sp)
   44fe0:	00800174 	movhi	r2,5
   44fe4:	10b10b04 	addi	r2,r2,-15316
   44fe8:	18801426 	beq	r3,r2,4503c <__svfscanf_r+0xa20>
   44fec:	d9c0a117 	ldw	r7,644(sp)
   44ff0:	d940a517 	ldw	r5,660(sp)
   44ff4:	000d883a 	mov	r6,zero
   44ff8:	b009883a 	mov	r4,r22
   44ffc:	004c1140 	call	4c114 <_strtoll_r>
   45000:	100d883a 	mov	r6,r2
   45004:	180f883a 	mov	r7,r3
   45008:	d900a417 	ldw	r4,656(sp)
   4500c:	20800017 	ldw	r2,0(r4)
   45010:	21000104 	addi	r4,r4,4
   45014:	d900a415 	stw	r4,656(sp)
   45018:	11c00115 	stw	r7,4(r2)
   4501c:	11800015 	stw	r6,0(r2)
   45020:	003fe206 	br	44fac <__svfscanf_r+0x990>
   45024:	d900a417 	ldw	r4,656(sp)
   45028:	20800017 	ldw	r2,0(r4)
   4502c:	21000104 	addi	r4,r4,4
   45030:	d900a415 	stw	r4,656(sp)
   45034:	10c00015 	stw	r3,0(r2)
   45038:	003fdc06 	br	44fac <__svfscanf_r+0x990>
   4503c:	d9c0a117 	ldw	r7,644(sp)
   45040:	d940a517 	ldw	r5,660(sp)
   45044:	000d883a 	mov	r6,zero
   45048:	b009883a 	mov	r4,r22
   4504c:	004c6900 	call	4c690 <_strtoull_r>
   45050:	100d883a 	mov	r6,r2
   45054:	180f883a 	mov	r7,r3
   45058:	003feb06 	br	45008 <__svfscanf_r+0x9ec>
   4505c:	9080200c 	andi	r2,r18,128
   45060:	103faa26 	beq	r2,zero,44f0c <__svfscanf_r+0x8f0>
   45064:	00bfdfc4 	movi	r2,-129
   45068:	90a4703a 	and	r18,r18,r2
   4506c:	a9400005 	stb	r5,0(r21)
   45070:	ad400044 	addi	r21,r21,1
   45074:	80c00117 	ldw	r3,4(r16)
   45078:	18ffffc4 	addi	r3,r3,-1
   4507c:	80c00115 	stw	r3,4(r16)
   45080:	00c0130e 	bge	zero,r3,450d0 <__svfscanf_r+0xab4>
   45084:	31800044 	addi	r6,r6,1
   45088:	81800015 	stw	r6,0(r16)
   4508c:	d880a317 	ldw	r2,652(sp)
   45090:	10bfffc4 	addi	r2,r2,-1
   45094:	d880a315 	stw	r2,652(sp)
   45098:	103ede1e 	bne	r2,zero,44c14 <__svfscanf_r+0x5f8>
   4509c:	003f9b06 	br	44f0c <__svfscanf_r+0x8f0>
   450a0:	9082000c 	andi	r2,r18,2048
   450a4:	103ff126 	beq	r2,zero,4506c <__svfscanf_r+0xa50>
   450a8:	d8c0a117 	ldw	r3,644(sp)
   450ac:	1800031e 	bne	r3,zero,450bc <__svfscanf_r+0xaa0>
   450b0:	01000204 	movi	r4,8
   450b4:	94808014 	ori	r18,r18,512
   450b8:	d900a115 	stw	r4,644(sp)
   450bc:	9081000c 	andi	r2,r18,1024
   450c0:	10000826 	beq	r2,zero,450e4 <__svfscanf_r+0xac8>
   450c4:	00be9fc4 	movi	r2,-1409
   450c8:	90a4703a 	and	r18,r18,r2
   450cc:	003fe706 	br	4506c <__svfscanf_r+0xa50>
   450d0:	b009883a 	mov	r4,r22
   450d4:	800b883a 	mov	r5,r16
   450d8:	0041f7c0 	call	41f7c <__srefill_r>
   450dc:	103feb26 	beq	r2,zero,4508c <__svfscanf_r+0xa70>
   450e0:	003f8a06 	br	44f0c <__svfscanf_r+0x8f0>
   450e4:	98000426 	beq	r19,zero,450f8 <__svfscanf_r+0xadc>
   450e8:	d880a317 	ldw	r2,652(sp)
   450ec:	9cffffc4 	addi	r19,r19,-1
   450f0:	10800044 	addi	r2,r2,1
   450f4:	d880a315 	stw	r2,652(sp)
   450f8:	00bf1fc4 	movi	r2,-897
   450fc:	90a4703a 	and	r18,r18,r2
   45100:	bdc00044 	addi	r23,r23,1
   45104:	003fdb06 	br	45074 <__svfscanf_r+0xa58>
   45108:	d900a317 	ldw	r4,652(sp)
   4510c:	ad41e014 	ori	r21,r21,1920
   45110:	2000791e 	bne	r4,zero,452f8 <__svfscanf_r+0xcdc>
   45114:	d8c04404 	addi	r3,sp,272
   45118:	d8c0a515 	stw	r3,660(sp)
   4511c:	182f883a 	mov	r23,r3
   45120:	d8009c15 	stw	zero,624(sp)
   45124:	d8009d15 	stw	zero,628(sp)
   45128:	d8009f15 	stw	zero,636(sp)
   4512c:	d8009e15 	stw	zero,632(sp)
   45130:	0039883a 	mov	fp,zero
   45134:	e1003fcc 	andi	r4,fp,255
   45138:	2100201c 	xori	r4,r4,128
   4513c:	213fe004 	addi	r4,r4,-128
   45140:	20ffffc4 	addi	r3,r4,-1
   45144:	00800184 	movi	r2,6
   45148:	10c01736 	bltu	r2,r3,451a8 <__svfscanf_r+0xb8c>
   4514c:	00c00084 	movi	r3,2
   45150:	19026d0e 	bge	r3,r4,45b08 <__svfscanf_r+0x14ec>
   45154:	008000c4 	movi	r2,3
   45158:	1100130e 	bge	r2,r4,451a8 <__svfscanf_r+0xb8c>
   4515c:	e4ffffc4 	addi	r19,fp,-1
   45160:	b825883a 	mov	r18,r23
   45164:	94bfffc4 	addi	r18,r18,-1
   45168:	91400007 	ldb	r5,0(r18)
   4516c:	b009883a 	mov	r4,r22
   45170:	800d883a 	mov	r6,r16
   45174:	004ca5c0 	call	4ca5c <_ungetc_r>
   45178:	9cffffc4 	addi	r19,r19,-1
   4517c:	98c03fcc 	andi	r3,r19,255
   45180:	18c0201c 	xori	r3,r3,128
   45184:	18ffe004 	addi	r3,r3,-128
   45188:	00800084 	movi	r2,2
   4518c:	18bff51e 	bne	r3,r2,45164 <__svfscanf_r+0xb48>
   45190:	e0bfff04 	addi	r2,fp,-4
   45194:	10803fcc 	andi	r2,r2,255
   45198:	b887c83a 	sub	r3,r23,r2
   4519c:	8885c83a 	sub	r2,r17,r2
   451a0:	147fffc4 	addi	r17,r2,-1
   451a4:	1dffffc4 	addi	r23,r3,-1
   451a8:	a880400c 	andi	r2,r21,256
   451ac:	10001226 	beq	r2,zero,451f8 <__svfscanf_r+0xbdc>
   451b0:	a881000c 	andi	r2,r21,1024
   451b4:	10002b1e 	bne	r2,zero,45264 <__svfscanf_r+0xc48>
   451b8:	bdffffc4 	addi	r23,r23,-1
   451bc:	b9400007 	ldb	r5,0(r23)
   451c0:	00801944 	movi	r2,101
   451c4:	8c7fffc4 	addi	r17,r17,-1
   451c8:	28800826 	beq	r5,r2,451ec <__svfscanf_r+0xbd0>
   451cc:	00801144 	movi	r2,69
   451d0:	28800626 	beq	r5,r2,451ec <__svfscanf_r+0xbd0>
   451d4:	bdffffc4 	addi	r23,r23,-1
   451d8:	b009883a 	mov	r4,r22
   451dc:	800d883a 	mov	r6,r16
   451e0:	004ca5c0 	call	4ca5c <_ungetc_r>
   451e4:	b9400007 	ldb	r5,0(r23)
   451e8:	8c7fffc4 	addi	r17,r17,-1
   451ec:	b009883a 	mov	r4,r22
   451f0:	800d883a 	mov	r6,r16
   451f4:	004ca5c0 	call	4ca5c <_ungetc_r>
   451f8:	a880040c 	andi	r2,r21,16
   451fc:	103d1a1e 	bne	r2,zero,44668 <__svfscanf_r+0x4c>
   45200:	a8c1800c 	andi	r3,r21,1536
   45204:	00810004 	movi	r2,1024
   45208:	b8000005 	stb	zero,0(r23)
   4520c:	18813326 	beq	r3,r2,456dc <__svfscanf_r+0x10c0>
   45210:	d8809d17 	ldw	r2,628(sp)
   45214:	1000251e 	bne	r2,zero,452ac <__svfscanf_r+0xc90>
   45218:	d940a517 	ldw	r5,660(sp)
   4521c:	b009883a 	mov	r4,r22
   45220:	000d883a 	mov	r6,zero
   45224:	004aa080 	call	4aa08 <_strtod_r>
   45228:	a900004c 	andi	r4,r21,1
   4522c:	2009003a 	cmpeq	r4,r4,zero
   45230:	1025883a 	mov	r18,r2
   45234:	1827883a 	mov	r19,r3
   45238:	2000141e 	bne	r4,zero,4528c <__svfscanf_r+0xc70>
   4523c:	d8c0a417 	ldw	r3,656(sp)
   45240:	18800017 	ldw	r2,0(r3)
   45244:	1d400104 	addi	r21,r3,4
   45248:	14c00115 	stw	r19,4(r2)
   4524c:	14800015 	stw	r18,0(r2)
   45250:	d8c0a217 	ldw	r3,648(sp)
   45254:	dd40a415 	stw	r21,656(sp)
   45258:	18c00044 	addi	r3,r3,1
   4525c:	d8c0a215 	stw	r3,648(sp)
   45260:	003d0106 	br	44668 <__svfscanf_r+0x4c>
   45264:	d900a517 	ldw	r4,660(sp)
   45268:	25fd212e 	bgeu	r4,r23,446f0 <__svfscanf_r+0xd4>
   4526c:	bdffffc4 	addi	r23,r23,-1
   45270:	b9400007 	ldb	r5,0(r23)
   45274:	b009883a 	mov	r4,r22
   45278:	800d883a 	mov	r6,r16
   4527c:	004ca5c0 	call	4ca5c <_ungetc_r>
   45280:	d880a517 	ldw	r2,660(sp)
   45284:	15fff936 	bltu	r2,r23,4526c <__svfscanf_r+0xc50>
   45288:	003d1906 	br	446f0 <__svfscanf_r+0xd4>
   4528c:	a880008c 	andi	r2,r21,2
   45290:	10011926 	beq	r2,zero,456f8 <__svfscanf_r+0x10dc>
   45294:	d900a417 	ldw	r4,656(sp)
   45298:	20800017 	ldw	r2,0(r4)
   4529c:	25400104 	addi	r21,r4,4
   452a0:	10c00115 	stw	r3,4(r2)
   452a4:	14800015 	stw	r18,0(r2)
   452a8:	003fe906 	br	45250 <__svfscanf_r+0xc34>
   452ac:	d8c09c17 	ldw	r3,624(sp)
   452b0:	b009883a 	mov	r4,r22
   452b4:	000d883a 	mov	r6,zero
   452b8:	19400044 	addi	r5,r3,1
   452bc:	01c00284 	movi	r7,10
   452c0:	00424680 	call	42468 <_strtol_r>
   452c4:	d9009d17 	ldw	r4,628(sp)
   452c8:	110dc83a 	sub	r6,r2,r4
   452cc:	d8c0a517 	ldw	r3,660(sp)
   452d0:	d9009c17 	ldw	r4,624(sp)
   452d4:	188054c4 	addi	r2,r3,339
   452d8:	20800236 	bltu	r4,r2,452e4 <__svfscanf_r+0xcc8>
   452dc:	18805484 	addi	r2,r3,338
   452e0:	d8809c15 	stw	r2,624(sp)
   452e4:	d9009c17 	ldw	r4,624(sp)
   452e8:	01400174 	movhi	r5,5
   452ec:	294dc204 	addi	r5,r5,14088
   452f0:	004a8300 	call	4a830 <sprintf>
   452f4:	003fc806 	br	45218 <__svfscanf_r+0xbfc>
   452f8:	0027883a 	mov	r19,zero
   452fc:	d8c04404 	addi	r3,sp,272
   45300:	d8c0a515 	stw	r3,660(sp)
   45304:	182f883a 	mov	r23,r3
   45308:	d8009f15 	stw	zero,636(sp)
   4530c:	d8009e15 	stw	zero,632(sp)
   45310:	d8009d15 	stw	zero,628(sp)
   45314:	d8009c15 	stw	zero,624(sp)
   45318:	0039883a 	mov	fp,zero
   4531c:	0025883a 	mov	r18,zero
   45320:	80800017 	ldw	r2,0(r16)
   45324:	11400003 	ldbu	r5,0(r2)
   45328:	00801384 	movi	r2,78
   4532c:	28fff544 	addi	r3,r5,-43
   45330:	18c03fcc 	andi	r3,r3,255
   45334:	10c08336 	bltu	r2,r3,45544 <__svfscanf_r+0xf28>
   45338:	18c5883a 	add	r2,r3,r3
   4533c:	1085883a 	add	r2,r2,r2
   45340:	00c00134 	movhi	r3,4
   45344:	18d4d504 	addi	r3,r3,21332
   45348:	10c5883a 	add	r2,r2,r3
   4534c:	11000017 	ldw	r4,0(r2)
   45350:	2000683a 	jmp	r4
   45354:	000454fc 	xorhi	zero,zero,4435
   45358:	00045544 	movi	zero,4437
   4535c:	000454fc 	xorhi	zero,zero,4435
   45360:	00045588 	cmpgei	zero,zero,4438
   45364:	00045544 	movi	zero,4437
   45368:	000455f4 	movhi	zero,4439
   4536c:	00045628 	cmpgeui	zero,zero,4440
   45370:	00045628 	cmpgeui	zero,zero,4440
   45374:	00045628 	cmpgeui	zero,zero,4440
   45378:	00045628 	cmpgeui	zero,zero,4440
   4537c:	00045628 	cmpgeui	zero,zero,4440
   45380:	00045628 	cmpgeui	zero,zero,4440
   45384:	00045628 	cmpgeui	zero,zero,4440
   45388:	00045628 	cmpgeui	zero,zero,4440
   4538c:	00045628 	cmpgeui	zero,zero,4440
   45390:	00045544 	movi	zero,4437
   45394:	00045544 	movi	zero,4437
   45398:	00045544 	movi	zero,4437
   4539c:	00045544 	movi	zero,4437
   453a0:	00045544 	movi	zero,4437
   453a4:	00045544 	movi	zero,4437
   453a8:	00045544 	movi	zero,4437
   453ac:	00045648 	cmpgei	zero,zero,4441
   453b0:	00045544 	movi	zero,4437
   453b4:	00045544 	movi	zero,4437
   453b8:	00045544 	movi	zero,4437
   453bc:	00045658 	cmpnei	zero,zero,4441
   453c0:	000456a4 	muli	zero,zero,4442
   453c4:	00045544 	movi	zero,4437
   453c8:	00045544 	movi	zero,4437
   453cc:	0004577c 	xorhi	zero,zero,4445
   453d0:	00045544 	movi	zero,4437
   453d4:	00045544 	movi	zero,4437
   453d8:	00045544 	movi	zero,4437
   453dc:	00045544 	movi	zero,4437
   453e0:	00045728 	cmpgeui	zero,zero,4444
   453e4:	00045544 	movi	zero,4437
   453e8:	00045544 	movi	zero,4437
   453ec:	00045544 	movi	zero,4437
   453f0:	00045544 	movi	zero,4437
   453f4:	00045544 	movi	zero,4437
   453f8:	000457bc 	xorhi	zero,zero,4446
   453fc:	00045544 	movi	zero,4437
   45400:	00045544 	movi	zero,4437
   45404:	00045544 	movi	zero,4437
   45408:	00045544 	movi	zero,4437
   4540c:	000456c0 	call	456c <__alt_mem_onchip_mem-0x3ba94>
   45410:	00045544 	movi	zero,4437
   45414:	00045544 	movi	zero,4437
   45418:	00045544 	movi	zero,4437
   4541c:	00045544 	movi	zero,4437
   45420:	00045544 	movi	zero,4437
   45424:	00045544 	movi	zero,4437
   45428:	00045544 	movi	zero,4437
   4542c:	00045648 	cmpgei	zero,zero,4441
   45430:	00045544 	movi	zero,4437
   45434:	00045544 	movi	zero,4437
   45438:	00045544 	movi	zero,4437
   4543c:	00045658 	cmpnei	zero,zero,4441
   45440:	000456a4 	muli	zero,zero,4442
   45444:	00045544 	movi	zero,4437
   45448:	00045544 	movi	zero,4437
   4544c:	0004577c 	xorhi	zero,zero,4445
   45450:	00045544 	movi	zero,4437
   45454:	00045544 	movi	zero,4437
   45458:	00045544 	movi	zero,4437
   4545c:	00045544 	movi	zero,4437
   45460:	00045728 	cmpgeui	zero,zero,4444
   45464:	00045544 	movi	zero,4437
   45468:	00045544 	movi	zero,4437
   4546c:	00045544 	movi	zero,4437
   45470:	00045544 	movi	zero,4437
   45474:	00045544 	movi	zero,4437
   45478:	000457bc 	xorhi	zero,zero,4446
   4547c:	00045544 	movi	zero,4437
   45480:	00045544 	movi	zero,4437
   45484:	00045544 	movi	zero,4437
   45488:	00045544 	movi	zero,4437
   4548c:	000456c0 	call	456c <__alt_mem_onchip_mem-0x3ba94>
   45490:	a880040c 	andi	r2,r21,16
   45494:	10004826 	beq	r2,zero,455b8 <__svfscanf_r+0xf9c>
   45498:	0027883a 	mov	r19,zero
   4549c:	00000b06 	br	454cc <__svfscanf_r+0xeb0>
   454a0:	80800017 	ldw	r2,0(r16)
   454a4:	b009883a 	mov	r4,r22
   454a8:	800b883a 	mov	r5,r16
   454ac:	148d883a 	add	r6,r2,r18
   454b0:	81800015 	stw	r6,0(r16)
   454b4:	9ca7883a 	add	r19,r19,r18
   454b8:	0041f7c0 	call	41f7c <__srefill_r>
   454bc:	103dc61e 	bne	r2,zero,44bd8 <__svfscanf_r+0x5bc>
   454c0:	d880a317 	ldw	r2,652(sp)
   454c4:	1485c83a 	sub	r2,r2,r18
   454c8:	d880a315 	stw	r2,652(sp)
   454cc:	84800117 	ldw	r18,4(r16)
   454d0:	d900a317 	ldw	r4,652(sp)
   454d4:	913ff216 	blt	r18,r4,454a0 <__svfscanf_r+0xe84>
   454d8:	d900a317 	ldw	r4,652(sp)
   454dc:	80800017 	ldw	r2,0(r16)
   454e0:	9927883a 	add	r19,r19,r4
   454e4:	9107c83a 	sub	r3,r18,r4
   454e8:	110d883a 	add	r6,r2,r4
   454ec:	8ce3883a 	add	r17,r17,r19
   454f0:	80c00115 	stw	r3,4(r16)
   454f4:	81800015 	stw	r6,0(r16)
   454f8:	003c5b06 	br	44668 <__svfscanf_r+0x4c>
   454fc:	a880200c 	andi	r2,r21,128
   45500:	10001026 	beq	r2,zero,45544 <__svfscanf_r+0xf28>
   45504:	00bfdfc4 	movi	r2,-129
   45508:	a8aa703a 	and	r21,r21,r2
   4550c:	b9400005 	stb	r5,0(r23)
   45510:	bdc00044 	addi	r23,r23,1
   45514:	80c00117 	ldw	r3,4(r16)
   45518:	8c400044 	addi	r17,r17,1
   4551c:	18bfffc4 	addi	r2,r3,-1
   45520:	80800115 	stw	r2,4(r16)
   45524:	00801f0e 	bge	zero,r2,455a4 <__svfscanf_r+0xf88>
   45528:	80800017 	ldw	r2,0(r16)
   4552c:	10800044 	addi	r2,r2,1
   45530:	80800015 	stw	r2,0(r16)
   45534:	d880a317 	ldw	r2,652(sp)
   45538:	10bfffc4 	addi	r2,r2,-1
   4553c:	d880a315 	stw	r2,652(sp)
   45540:	103f771e 	bne	r2,zero,45320 <__svfscanf_r+0xd04>
   45544:	d8c09e17 	ldw	r3,632(sp)
   45548:	18000226 	beq	r3,zero,45554 <__svfscanf_r+0xf38>
   4554c:	00bfbfc4 	movi	r2,-257
   45550:	a8aa703a 	and	r21,r21,r2
   45554:	90ffffc4 	addi	r3,r18,-1
   45558:	00800044 	movi	r2,1
   4555c:	10fef536 	bltu	r2,r3,45134 <__svfscanf_r+0xb18>
   45560:	d900a517 	ldw	r4,660(sp)
   45564:	25fc622e 	bgeu	r4,r23,446f0 <__svfscanf_r+0xd4>
   45568:	bdffffc4 	addi	r23,r23,-1
   4556c:	b9400007 	ldb	r5,0(r23)
   45570:	b009883a 	mov	r4,r22
   45574:	800d883a 	mov	r6,r16
   45578:	004ca5c0 	call	4ca5c <_ungetc_r>
   4557c:	d880a517 	ldw	r2,660(sp)
   45580:	15fff936 	bltu	r2,r23,45568 <__svfscanf_r+0xf4c>
   45584:	003c5a06 	br	446f0 <__svfscanf_r+0xd4>
   45588:	a880800c 	andi	r2,r21,512
   4558c:	103fed26 	beq	r2,zero,45544 <__svfscanf_r+0xf28>
   45590:	d9009e17 	ldw	r4,632(sp)
   45594:	00bf5fc4 	movi	r2,-641
   45598:	a8aa703a 	and	r21,r21,r2
   4559c:	d9009f15 	stw	r4,636(sp)
   455a0:	003fda06 	br	4550c <__svfscanf_r+0xef0>
   455a4:	b009883a 	mov	r4,r22
   455a8:	800b883a 	mov	r5,r16
   455ac:	0041f7c0 	call	41f7c <__srefill_r>
   455b0:	103fe026 	beq	r2,zero,45534 <__svfscanf_r+0xf18>
   455b4:	003fe306 	br	45544 <__svfscanf_r+0xf28>
   455b8:	d880a417 	ldw	r2,656(sp)
   455bc:	d980a317 	ldw	r6,652(sp)
   455c0:	01400044 	movi	r5,1
   455c4:	11000017 	ldw	r4,0(r2)
   455c8:	800f883a 	mov	r7,r16
   455cc:	0047f900 	call	47f90 <fread>
   455d0:	103c6726 	beq	r2,zero,44770 <__svfscanf_r+0x154>
   455d4:	d8c0a417 	ldw	r3,656(sp)
   455d8:	d900a217 	ldw	r4,648(sp)
   455dc:	88a3883a 	add	r17,r17,r2
   455e0:	18c00104 	addi	r3,r3,4
   455e4:	21000044 	addi	r4,r4,1
   455e8:	d8c0a415 	stw	r3,656(sp)
   455ec:	d900a215 	stw	r4,648(sp)
   455f0:	003c1d06 	br	44668 <__svfscanf_r+0x4c>
   455f4:	a880400c 	andi	r2,r21,256
   455f8:	10000b26 	beq	r2,zero,45628 <__svfscanf_r+0x100c>
   455fc:	00bfdfc4 	movi	r2,-129
   45600:	a8aa703a 	and	r21,r21,r2
   45604:	d8809e17 	ldw	r2,632(sp)
   45608:	10800044 	addi	r2,r2,1
   4560c:	d8809e15 	stw	r2,632(sp)
   45610:	983fc026 	beq	r19,zero,45514 <__svfscanf_r+0xef8>
   45614:	d8c0a317 	ldw	r3,652(sp)
   45618:	9cffffc4 	addi	r19,r19,-1
   4561c:	18c00044 	addi	r3,r3,1
   45620:	d8c0a315 	stw	r3,652(sp)
   45624:	003fbb06 	br	45514 <__svfscanf_r+0xef8>
   45628:	e0803fcc 	andi	r2,fp,255
   4562c:	1080201c 	xori	r2,r2,128
   45630:	10bfe004 	addi	r2,r2,-128
   45634:	9085883a 	add	r2,r18,r2
   45638:	103fc21e 	bne	r2,zero,45544 <__svfscanf_r+0xf28>
   4563c:	00bf9fc4 	movi	r2,-385
   45640:	a8aa703a 	and	r21,r21,r2
   45644:	003fb106 	br	4550c <__svfscanf_r+0xef0>
   45648:	00800044 	movi	r2,1
   4564c:	90bfbd1e 	bne	r18,r2,45544 <__svfscanf_r+0xf28>
   45650:	04800084 	movi	r18,2
   45654:	003fad06 	br	4550c <__svfscanf_r+0xef0>
   45658:	a8c1400c 	andi	r3,r21,1280
   4565c:	00810004 	movi	r2,1024
   45660:	18800426 	beq	r3,r2,45674 <__svfscanf_r+0x1058>
   45664:	a884703a 	and	r2,r21,r2
   45668:	103fb626 	beq	r2,zero,45544 <__svfscanf_r+0xf28>
   4566c:	d8809e17 	ldw	r2,632(sp)
   45670:	103fb826 	beq	r2,zero,45554 <__svfscanf_r+0xf38>
   45674:	a880800c 	andi	r2,r21,512
   45678:	1000051e 	bne	r2,zero,45690 <__svfscanf_r+0x1074>
   4567c:	d8c09e17 	ldw	r3,632(sp)
   45680:	d9009f17 	ldw	r4,636(sp)
   45684:	ddc09c15 	stw	r23,624(sp)
   45688:	1907c83a 	sub	r3,r3,r4
   4568c:	d8c09d15 	stw	r3,628(sp)
   45690:	00be7fc4 	movi	r2,-1537
   45694:	a884703a 	and	r2,r21,r2
   45698:	15406014 	ori	r21,r2,384
   4569c:	d8009e15 	stw	zero,632(sp)
   456a0:	003f9a06 	br	4550c <__svfscanf_r+0xef0>
   456a4:	e0c03fcc 	andi	r3,fp,255
   456a8:	18c0201c 	xori	r3,r3,128
   456ac:	18ffe004 	addi	r3,r3,-128
   456b0:	00800084 	movi	r2,2
   456b4:	18bfa31e 	bne	r3,r2,45544 <__svfscanf_r+0xf28>
   456b8:	070000c4 	movi	fp,3
   456bc:	003f9306 	br	4550c <__svfscanf_r+0xef0>
   456c0:	e0c03fcc 	andi	r3,fp,255
   456c4:	18c0201c 	xori	r3,r3,128
   456c8:	18ffe004 	addi	r3,r3,-128
   456cc:	008001c4 	movi	r2,7
   456d0:	18bf9c1e 	bne	r3,r2,45544 <__svfscanf_r+0xf28>
   456d4:	07000204 	movi	fp,8
   456d8:	003f8c06 	br	4550c <__svfscanf_r+0xef0>
   456dc:	d8c09e17 	ldw	r3,632(sp)
   456e0:	d9009f17 	ldw	r4,636(sp)
   456e4:	1905c83a 	sub	r2,r3,r4
   456e8:	103ecb26 	beq	r2,zero,45218 <__svfscanf_r+0xbfc>
   456ec:	008dc83a 	sub	r6,zero,r2
   456f0:	ddc09c15 	stw	r23,624(sp)
   456f4:	003ef506 	br	452cc <__svfscanf_r+0xcb0>
   456f8:	d880a417 	ldw	r2,656(sp)
   456fc:	9009883a 	mov	r4,r18
   45700:	180b883a 	mov	r5,r3
   45704:	15c00017 	ldw	r23,0(r2)
   45708:	15400104 	addi	r21,r2,4
   4570c:	004a7380 	call	4a738 <__isnand>
   45710:	1000311e 	bne	r2,zero,457d8 <__svfscanf_r+0x11bc>
   45714:	980b883a 	mov	r5,r19
   45718:	9009883a 	mov	r4,r18
   4571c:	004f9e80 	call	4f9e8 <__truncdfsf2>
   45720:	b8800015 	stw	r2,0(r23)
   45724:	003eca06 	br	45250 <__svfscanf_r+0xc34>
   45728:	9000101e 	bne	r18,zero,4576c <__svfscanf_r+0x1150>
   4572c:	a8c1c00c 	andi	r3,r21,1792
   45730:	0081c004 	movi	r2,1792
   45734:	18800926 	beq	r3,r2,4575c <__svfscanf_r+0x1140>
   45738:	e0c03fcc 	andi	r3,fp,255
   4573c:	18c0201c 	xori	r3,r3,128
   45740:	18ffe004 	addi	r3,r3,-128
   45744:	00800044 	movi	r2,1
   45748:	18800226 	beq	r3,r2,45754 <__svfscanf_r+0x1138>
   4574c:	00800104 	movi	r2,4
   45750:	18bf7c1e 	bne	r3,r2,45544 <__svfscanf_r+0xf28>
   45754:	e7000044 	addi	fp,fp,1
   45758:	003f6c06 	br	4550c <__svfscanf_r+0xef0>
   4575c:	00be1fc4 	movi	r2,-1921
   45760:	a8aa703a 	and	r21,r21,r2
   45764:	04800044 	movi	r18,1
   45768:	003f6806 	br	4550c <__svfscanf_r+0xef0>
   4576c:	00800084 	movi	r2,2
   45770:	90bff11e 	bne	r18,r2,45738 <__svfscanf_r+0x111c>
   45774:	048000c4 	movi	r18,3
   45778:	003f6406 	br	4550c <__svfscanf_r+0xef0>
   4577c:	e0c03fcc 	andi	r3,fp,255
   45780:	18c0201c 	xori	r3,r3,128
   45784:	18ffe004 	addi	r3,r3,-128
   45788:	1800071e 	bne	r3,zero,457a8 <__svfscanf_r+0x118c>
   4578c:	a8c1c00c 	andi	r3,r21,1792
   45790:	0081c004 	movi	r2,1792
   45794:	18bf6b1e 	bne	r3,r2,45544 <__svfscanf_r+0xf28>
   45798:	00be1fc4 	movi	r2,-1921
   4579c:	a8aa703a 	and	r21,r21,r2
   457a0:	07000044 	movi	fp,1
   457a4:	003f5906 	br	4550c <__svfscanf_r+0xef0>
   457a8:	008000c4 	movi	r2,3
   457ac:	18bfe926 	beq	r3,r2,45754 <__svfscanf_r+0x1138>
   457b0:	00800144 	movi	r2,5
   457b4:	18bfe726 	beq	r3,r2,45754 <__svfscanf_r+0x1138>
   457b8:	003f6206 	br	45544 <__svfscanf_r+0xf28>
   457bc:	e0c03fcc 	andi	r3,fp,255
   457c0:	18c0201c 	xori	r3,r3,128
   457c4:	18ffe004 	addi	r3,r3,-128
   457c8:	00800184 	movi	r2,6
   457cc:	18bf5d1e 	bne	r3,r2,45544 <__svfscanf_r+0xf28>
   457d0:	070001c4 	movi	fp,7
   457d4:	003f4d06 	br	4550c <__svfscanf_r+0xef0>
   457d8:	0009883a 	mov	r4,zero
   457dc:	004a8280 	call	4a828 <nanf>
   457e0:	b8800015 	stw	r2,0(r23)
   457e4:	003e9a06 	br	45250 <__svfscanf_r+0xc34>
   457e8:	a00b883a 	mov	r5,r20
   457ec:	d9000404 	addi	r4,sp,16
   457f0:	004a7680 	call	4a768 <__sccl>
   457f4:	1029883a 	mov	r20,r2
   457f8:	ad401014 	ori	r21,r21,64
   457fc:	04800044 	movi	r18,1
   45800:	003c7506 	br	449d8 <__svfscanf_r+0x3bc>
   45804:	01000204 	movi	r4,8
   45808:	00800174 	movhi	r2,5
   4580c:	10b10b04 	addi	r2,r2,-15316
   45810:	ad400054 	ori	r21,r21,1
   45814:	048000c4 	movi	r18,3
   45818:	d900a115 	stw	r4,644(sp)
   4581c:	d880a015 	stw	r2,640(sp)
   45820:	003c6d06 	br	449d8 <__svfscanf_r+0x3bc>
   45824:	ad400094 	ori	r21,r21,2
   45828:	003bd806 	br	4478c <__svfscanf_r+0x170>
   4582c:	d900a317 	ldw	r4,652(sp)
   45830:	01400284 	movi	r5,10
   45834:	004fd3c0 	call	4fd3c <__mulsi3>
   45838:	15c5883a 	add	r2,r2,r23
   4583c:	10bff404 	addi	r2,r2,-48
   45840:	d880a315 	stw	r2,652(sp)
   45844:	003bd106 	br	4478c <__svfscanf_r+0x170>
   45848:	ad400414 	ori	r21,r21,16
   4584c:	003bcf06 	br	4478c <__svfscanf_r+0x170>
   45850:	00800404 	movi	r2,16
   45854:	00c00174 	movhi	r3,5
   45858:	18f10b04 	addi	r3,r3,-15316
   4585c:	ad408014 	ori	r21,r21,512
   45860:	048000c4 	movi	r18,3
   45864:	d880a115 	stw	r2,644(sp)
   45868:	d8c0a015 	stw	r3,640(sp)
   4586c:	003c5a06 	br	449d8 <__svfscanf_r+0x3bc>
   45870:	00c00284 	movi	r3,10
   45874:	01000174 	movhi	r4,5
   45878:	21310b04 	addi	r4,r4,-15316
   4587c:	048000c4 	movi	r18,3
   45880:	d8c0a115 	stw	r3,644(sp)
   45884:	d900a015 	stw	r4,640(sp)
   45888:	003c5306 	br	449d8 <__svfscanf_r+0x3bc>
   4588c:	00c00134 	movhi	r3,4
   45890:	18c91a04 	addi	r3,r3,9320
   45894:	048000c4 	movi	r18,3
   45898:	d8c0a015 	stw	r3,640(sp)
   4589c:	d800a115 	stw	zero,644(sp)
   458a0:	003c4d06 	br	449d8 <__svfscanf_r+0x3bc>
   458a4:	d8c0a117 	ldw	r3,644(sp)
   458a8:	18c5883a 	add	r2,r3,r3
   458ac:	00c00174 	movhi	r3,5
   458b0:	18cdc384 	addi	r3,r3,14094
   458b4:	10c5883a 	add	r2,r2,r3
   458b8:	1080000f 	ldh	r2,0(r2)
   458bc:	00fd1fc4 	movi	r3,-2945
   458c0:	90e4703a 	and	r18,r18,r3
   458c4:	d880a115 	stw	r2,644(sp)
   458c8:	003de806 	br	4506c <__svfscanf_r+0xa50>
   458cc:	d900a117 	ldw	r4,644(sp)
   458d0:	00c00174 	movhi	r3,5
   458d4:	18cdc384 	addi	r3,r3,14094
   458d8:	2105883a 	add	r2,r4,r4
   458dc:	10c5883a 	add	r2,r2,r3
   458e0:	1080000f 	ldh	r2,0(r2)
   458e4:	00c00204 	movi	r3,8
   458e8:	d880a115 	stw	r2,644(sp)
   458ec:	18bd870e 	bge	r3,r2,44f0c <__svfscanf_r+0x8f0>
   458f0:	00bd1fc4 	movi	r2,-2945
   458f4:	90a4703a 	and	r18,r18,r2
   458f8:	003ddc06 	br	4506c <__svfscanf_r+0xa50>
   458fc:	d8c0a117 	ldw	r3,644(sp)
   45900:	00800284 	movi	r2,10
   45904:	10fffa16 	blt	r2,r3,458f0 <__svfscanf_r+0x12d4>
   45908:	003d8006 	br	44f0c <__svfscanf_r+0x8f0>
   4590c:	90c1800c 	andi	r3,r18,1536
   45910:	00808004 	movi	r2,512
   45914:	18bd7d1e 	bne	r3,r2,44f0c <__svfscanf_r+0x8f0>
   45918:	00bf7fc4 	movi	r2,-513
   4591c:	9084703a 	and	r2,r18,r2
   45920:	01000404 	movi	r4,16
   45924:	14814014 	ori	r18,r2,1280
   45928:	d900a115 	stw	r4,644(sp)
   4592c:	003dcf06 	br	4506c <__svfscanf_r+0xa50>
   45930:	04800104 	movi	r18,4
   45934:	003c2806 	br	449d8 <__svfscanf_r+0x3bc>
   45938:	ad401014 	ori	r21,r21,64
   4593c:	0025883a 	mov	r18,zero
   45940:	003c2506 	br	449d8 <__svfscanf_r+0x3bc>
   45944:	ad400114 	ori	r21,r21,4
   45948:	003b9006 	br	4478c <__svfscanf_r+0x170>
   4594c:	0027883a 	mov	r19,zero
   45950:	003cac06 	br	44c04 <__svfscanf_r+0x5e8>
   45954:	903d5226 	beq	r18,zero,44ea0 <__svfscanf_r+0x884>
   45958:	94bfffc4 	addi	r18,r18,-1
   4595c:	d8c04404 	addi	r3,sp,272
   45960:	1c85883a 	add	r2,r3,r18
   45964:	11400003 	ldbu	r5,0(r2)
   45968:	b009883a 	mov	r4,r22
   4596c:	800d883a 	mov	r6,r16
   45970:	004ca5c0 	call	4ca5c <_ungetc_r>
   45974:	003ff706 	br	45954 <__svfscanf_r+0x1338>
   45978:	00bfff84 	movi	r2,-2
   4597c:	18bd361e 	bne	r3,r2,44e58 <__svfscanf_r+0x83c>
   45980:	003d4006 	br	44e84 <__svfscanf_r+0x868>
   45984:	d900a417 	ldw	r4,656(sp)
   45988:	25400017 	ldw	r21,0(r4)
   4598c:	21000104 	addi	r4,r4,4
   45990:	d900a415 	stw	r4,656(sp)
   45994:	003d0606 	br	44db0 <__svfscanf_r+0x794>
   45998:	983b5526 	beq	r19,zero,446f0 <__svfscanf_r+0xd4>
   4599c:	8ce3883a 	add	r17,r17,r19
   459a0:	003b3106 	br	44668 <__svfscanf_r+0x4c>
   459a4:	00bfff84 	movi	r2,-2
   459a8:	18bc621e 	bne	r3,r2,44b34 <__svfscanf_r+0x518>
   459ac:	003c6906 	br	44b54 <__svfscanf_r+0x538>
   459b0:	b009883a 	mov	r4,r22
   459b4:	800b883a 	mov	r5,r16
   459b8:	0041f7c0 	call	41f7c <__srefill_r>
   459bc:	103c6726 	beq	r2,zero,44b5c <__svfscanf_r+0x540>
   459c0:	903b6b1e 	bne	r18,zero,44770 <__svfscanf_r+0x154>
   459c4:	a83b281e 	bne	r21,zero,44668 <__svfscanf_r+0x4c>
   459c8:	d8c0a217 	ldw	r3,648(sp)
   459cc:	18c00044 	addi	r3,r3,1
   459d0:	d8c0a215 	stw	r3,648(sp)
   459d4:	003b2406 	br	44668 <__svfscanf_r+0x4c>
   459d8:	8080030b 	ldhu	r2,12(r16)
   459dc:	1080100c 	andi	r2,r2,64
   459e0:	103b4326 	beq	r2,zero,446f0 <__svfscanf_r+0xd4>
   459e4:	003b6406 	br	44778 <__svfscanf_r+0x15c>
   459e8:	d8c0a417 	ldw	r3,656(sp)
   459ec:	1cc00017 	ldw	r19,0(r3)
   459f0:	18c00104 	addi	r3,r3,4
   459f4:	d8c0a415 	stw	r3,656(sp)
   459f8:	003c2906 	br	44aa0 <__svfscanf_r+0x484>
   459fc:	00800204 	movi	r2,8
   45a00:	00c00174 	movhi	r3,5
   45a04:	18f10b04 	addi	r3,r3,-15316
   45a08:	048000c4 	movi	r18,3
   45a0c:	d880a115 	stw	r2,644(sp)
   45a10:	d8c0a015 	stw	r3,640(sp)
   45a14:	003bf006 	br	449d8 <__svfscanf_r+0x3bc>
   45a18:	04800084 	movi	r18,2
   45a1c:	003bee06 	br	449d8 <__svfscanf_r+0x3bc>
   45a20:	01000404 	movi	r4,16
   45a24:	00800174 	movhi	r2,5
   45a28:	10b10b04 	addi	r2,r2,-15316
   45a2c:	ad408814 	ori	r21,r21,544
   45a30:	048000c4 	movi	r18,3
   45a34:	d900a115 	stw	r4,644(sp)
   45a38:	d880a015 	stw	r2,640(sp)
   45a3c:	003be606 	br	449d8 <__svfscanf_r+0x3bc>
   45a40:	a880040c 	andi	r2,r21,16
   45a44:	103b081e 	bne	r2,zero,44668 <__svfscanf_r+0x4c>
   45a48:	a880010c 	andi	r2,r21,4
   45a4c:	10004e26 	beq	r2,zero,45b88 <__svfscanf_r+0x156c>
   45a50:	d8c0a417 	ldw	r3,656(sp)
   45a54:	18800017 	ldw	r2,0(r3)
   45a58:	18c00104 	addi	r3,r3,4
   45a5c:	d8c0a415 	stw	r3,656(sp)
   45a60:	1440000d 	sth	r17,0(r2)
   45a64:	003b0006 	br	44668 <__svfscanf_r+0x4c>
   45a68:	d880a417 	ldw	r2,656(sp)
   45a6c:	dd400404 	addi	r21,sp,16
   45a70:	14800017 	ldw	r18,0(r2)
   45a74:	9027883a 	mov	r19,r18
   45a78:	81000017 	ldw	r4,0(r16)
   45a7c:	20800003 	ldbu	r2,0(r4)
   45a80:	a885883a 	add	r2,r21,r2
   45a84:	10c00007 	ldb	r3,0(r2)
   45a88:	18001426 	beq	r3,zero,45adc <__svfscanf_r+0x14c0>
   45a8c:	d8c0a317 	ldw	r3,652(sp)
   45a90:	80800117 	ldw	r2,4(r16)
   45a94:	21800044 	addi	r6,r4,1
   45a98:	18ffffc4 	addi	r3,r3,-1
   45a9c:	d8c0a315 	stw	r3,652(sp)
   45aa0:	10ffffc4 	addi	r3,r2,-1
   45aa4:	80c00115 	stw	r3,4(r16)
   45aa8:	20800003 	ldbu	r2,0(r4)
   45aac:	90800005 	stb	r2,0(r18)
   45ab0:	d900a317 	ldw	r4,652(sp)
   45ab4:	81800015 	stw	r6,0(r16)
   45ab8:	94800044 	addi	r18,r18,1
   45abc:	20000726 	beq	r4,zero,45adc <__svfscanf_r+0x14c0>
   45ac0:	80800117 	ldw	r2,4(r16)
   45ac4:	00bfec16 	blt	zero,r2,45a78 <__svfscanf_r+0x145c>
   45ac8:	b009883a 	mov	r4,r22
   45acc:	800b883a 	mov	r5,r16
   45ad0:	0041f7c0 	call	41f7c <__srefill_r>
   45ad4:	103fe826 	beq	r2,zero,45a78 <__svfscanf_r+0x145c>
   45ad8:	9cbb2526 	beq	r19,r18,44770 <__svfscanf_r+0x154>
   45adc:	94e7c83a 	sub	r19,r18,r19
   45ae0:	983b0326 	beq	r19,zero,446f0 <__svfscanf_r+0xd4>
   45ae4:	90000005 	stb	zero,0(r18)
   45ae8:	d880a417 	ldw	r2,656(sp)
   45aec:	d8c0a217 	ldw	r3,648(sp)
   45af0:	8ce3883a 	add	r17,r17,r19
   45af4:	10800104 	addi	r2,r2,4
   45af8:	18c00044 	addi	r3,r3,1
   45afc:	d880a415 	stw	r2,656(sp)
   45b00:	d8c0a215 	stw	r3,648(sp)
   45b04:	003ad806 	br	44668 <__svfscanf_r+0x4c>
   45b08:	d900a517 	ldw	r4,660(sp)
   45b0c:	25faf82e 	bgeu	r4,r23,446f0 <__svfscanf_r+0xd4>
   45b10:	bdffffc4 	addi	r23,r23,-1
   45b14:	b9400007 	ldb	r5,0(r23)
   45b18:	b009883a 	mov	r4,r22
   45b1c:	800d883a 	mov	r6,r16
   45b20:	004ca5c0 	call	4ca5c <_ungetc_r>
   45b24:	d8c0a517 	ldw	r3,660(sp)
   45b28:	1dfff936 	bltu	r3,r23,45b10 <__svfscanf_r+0x14f4>
   45b2c:	003af006 	br	446f0 <__svfscanf_r+0xd4>
   45b30:	a880040c 	andi	r2,r21,16
   45b34:	10002d26 	beq	r2,zero,45bec <__svfscanf_r+0x15d0>
   45b38:	0025883a 	mov	r18,zero
   45b3c:	00000906 	br	45b64 <__svfscanf_r+0x1548>
   45b40:	80c00117 	ldw	r3,4(r16)
   45b44:	d880a317 	ldw	r2,652(sp)
   45b48:	29800044 	addi	r6,r5,1
   45b4c:	18ffffc4 	addi	r3,r3,-1
   45b50:	94800044 	addi	r18,r18,1
   45b54:	81800015 	stw	r6,0(r16)
   45b58:	80c00115 	stw	r3,4(r16)
   45b5c:	14800826 	beq	r2,r18,45b80 <__svfscanf_r+0x1564>
   45b60:	00c0120e 	bge	zero,r3,45bac <__svfscanf_r+0x1590>
   45b64:	81400017 	ldw	r5,0(r16)
   45b68:	98800017 	ldw	r2,0(r19)
   45b6c:	28c00003 	ldbu	r3,0(r5)
   45b70:	1887883a 	add	r3,r3,r2
   45b74:	19000003 	ldbu	r4,0(r3)
   45b78:	2100020c 	andi	r4,r4,8
   45b7c:	203ff026 	beq	r4,zero,45b40 <__svfscanf_r+0x1524>
   45b80:	8ca3883a 	add	r17,r17,r18
   45b84:	003ab806 	br	44668 <__svfscanf_r+0x4c>
   45b88:	a880004c 	andi	r2,r21,1
   45b8c:	1005003a 	cmpeq	r2,r2,zero
   45b90:	10000b1e 	bne	r2,zero,45bc0 <__svfscanf_r+0x15a4>
   45b94:	d900a417 	ldw	r4,656(sp)
   45b98:	20800017 	ldw	r2,0(r4)
   45b9c:	21000104 	addi	r4,r4,4
   45ba0:	d900a415 	stw	r4,656(sp)
   45ba4:	14400015 	stw	r17,0(r2)
   45ba8:	003aaf06 	br	44668 <__svfscanf_r+0x4c>
   45bac:	b009883a 	mov	r4,r22
   45bb0:	800b883a 	mov	r5,r16
   45bb4:	0041f7c0 	call	41f7c <__srefill_r>
   45bb8:	103fea26 	beq	r2,zero,45b64 <__svfscanf_r+0x1548>
   45bbc:	003ff006 	br	45b80 <__svfscanf_r+0x1564>
   45bc0:	a880008c 	andi	r2,r21,2
   45bc4:	10002c26 	beq	r2,zero,45c78 <__svfscanf_r+0x165c>
   45bc8:	d8c0a417 	ldw	r3,656(sp)
   45bcc:	d900a417 	ldw	r4,656(sp)
   45bd0:	18800017 	ldw	r2,0(r3)
   45bd4:	8807d7fa 	srai	r3,r17,31
   45bd8:	21000104 	addi	r4,r4,4
   45bdc:	d900a415 	stw	r4,656(sp)
   45be0:	14400015 	stw	r17,0(r2)
   45be4:	10c00115 	stw	r3,4(r2)
   45be8:	003a9f06 	br	44668 <__svfscanf_r+0x4c>
   45bec:	d8c0a417 	ldw	r3,656(sp)
   45bf0:	1d400017 	ldw	r21,0(r3)
   45bf4:	a825883a 	mov	r18,r21
   45bf8:	00000e06 	br	45c34 <__svfscanf_r+0x1618>
   45bfc:	80800117 	ldw	r2,4(r16)
   45c00:	d900a317 	ldw	r4,652(sp)
   45c04:	29800044 	addi	r6,r5,1
   45c08:	10ffffc4 	addi	r3,r2,-1
   45c0c:	213fffc4 	addi	r4,r4,-1
   45c10:	d900a315 	stw	r4,652(sp)
   45c14:	80c00115 	stw	r3,4(r16)
   45c18:	28800003 	ldbu	r2,0(r5)
   45c1c:	90800005 	stb	r2,0(r18)
   45c20:	81800015 	stw	r6,0(r16)
   45c24:	94800044 	addi	r18,r18,1
   45c28:	20000926 	beq	r4,zero,45c50 <__svfscanf_r+0x1634>
   45c2c:	80800117 	ldw	r2,4(r16)
   45c30:	0080170e 	bge	zero,r2,45c90 <__svfscanf_r+0x1674>
   45c34:	81400017 	ldw	r5,0(r16)
   45c38:	98800017 	ldw	r2,0(r19)
   45c3c:	28c00003 	ldbu	r3,0(r5)
   45c40:	1887883a 	add	r3,r3,r2
   45c44:	19000003 	ldbu	r4,0(r3)
   45c48:	2100020c 	andi	r4,r4,8
   45c4c:	203feb26 	beq	r4,zero,45bfc <__svfscanf_r+0x15e0>
   45c50:	9545c83a 	sub	r2,r18,r21
   45c54:	d8c0a217 	ldw	r3,648(sp)
   45c58:	88a3883a 	add	r17,r17,r2
   45c5c:	d880a417 	ldw	r2,656(sp)
   45c60:	18c00044 	addi	r3,r3,1
   45c64:	d8c0a215 	stw	r3,648(sp)
   45c68:	10800104 	addi	r2,r2,4
   45c6c:	d880a415 	stw	r2,656(sp)
   45c70:	90000005 	stb	zero,0(r18)
   45c74:	003a7c06 	br	44668 <__svfscanf_r+0x4c>
   45c78:	d8c0a417 	ldw	r3,656(sp)
   45c7c:	18800017 	ldw	r2,0(r3)
   45c80:	18c00104 	addi	r3,r3,4
   45c84:	d8c0a415 	stw	r3,656(sp)
   45c88:	14400015 	stw	r17,0(r2)
   45c8c:	003a7606 	br	44668 <__svfscanf_r+0x4c>
   45c90:	b009883a 	mov	r4,r22
   45c94:	800b883a 	mov	r5,r16
   45c98:	0041f7c0 	call	41f7c <__srefill_r>
   45c9c:	103fe526 	beq	r2,zero,45c34 <__svfscanf_r+0x1618>
   45ca0:	003feb06 	br	45c50 <__svfscanf_r+0x1634>

00045ca4 <__svfscanf>:
   45ca4:	00800174 	movhi	r2,5
   45ca8:	1095cf04 	addi	r2,r2,22332
   45cac:	2013883a 	mov	r9,r4
   45cb0:	11000017 	ldw	r4,0(r2)
   45cb4:	2805883a 	mov	r2,r5
   45cb8:	300f883a 	mov	r7,r6
   45cbc:	480b883a 	mov	r5,r9
   45cc0:	100d883a 	mov	r6,r2
   45cc4:	004461c1 	jmpi	4461c <__svfscanf_r>

00045cc8 <_vfscanf_r>:
   45cc8:	defffb04 	addi	sp,sp,-20
   45ccc:	dcc00315 	stw	r19,12(sp)
   45cd0:	dc800215 	stw	r18,8(sp)
   45cd4:	dc400115 	stw	r17,4(sp)
   45cd8:	dc000015 	stw	r16,0(sp)
   45cdc:	dfc00415 	stw	ra,16(sp)
   45ce0:	2021883a 	mov	r16,r4
   45ce4:	2823883a 	mov	r17,r5
   45ce8:	3025883a 	mov	r18,r6
   45cec:	3827883a 	mov	r19,r7
   45cf0:	20000226 	beq	r4,zero,45cfc <_vfscanf_r+0x34>
   45cf4:	20800e17 	ldw	r2,56(r4)
   45cf8:	10000b26 	beq	r2,zero,45d28 <_vfscanf_r+0x60>
   45cfc:	8009883a 	mov	r4,r16
   45d00:	880b883a 	mov	r5,r17
   45d04:	900d883a 	mov	r6,r18
   45d08:	980f883a 	mov	r7,r19
   45d0c:	dfc00417 	ldw	ra,16(sp)
   45d10:	dcc00317 	ldw	r19,12(sp)
   45d14:	dc800217 	ldw	r18,8(sp)
   45d18:	dc400117 	ldw	r17,4(sp)
   45d1c:	dc000017 	ldw	r16,0(sp)
   45d20:	dec00504 	addi	sp,sp,20
   45d24:	004461c1 	jmpi	4461c <__svfscanf_r>
   45d28:	0047a580 	call	47a58 <__sinit>
   45d2c:	003ff306 	br	45cfc <_vfscanf_r+0x34>

00045d30 <vfscanf>:
   45d30:	defffb04 	addi	sp,sp,-20
   45d34:	dcc00315 	stw	r19,12(sp)
   45d38:	04c00174 	movhi	r19,5
   45d3c:	9cd5cf04 	addi	r19,r19,22332
   45d40:	98c00017 	ldw	r3,0(r19)
   45d44:	dc800215 	stw	r18,8(sp)
   45d48:	dc400115 	stw	r17,4(sp)
   45d4c:	dc000015 	stw	r16,0(sp)
   45d50:	dfc00415 	stw	ra,16(sp)
   45d54:	2021883a 	mov	r16,r4
   45d58:	2823883a 	mov	r17,r5
   45d5c:	3025883a 	mov	r18,r6
   45d60:	18000326 	beq	r3,zero,45d70 <vfscanf+0x40>
   45d64:	18800e17 	ldw	r2,56(r3)
   45d68:	1809883a 	mov	r4,r3
   45d6c:	10000b26 	beq	r2,zero,45d9c <vfscanf+0x6c>
   45d70:	99000017 	ldw	r4,0(r19)
   45d74:	800b883a 	mov	r5,r16
   45d78:	880d883a 	mov	r6,r17
   45d7c:	900f883a 	mov	r7,r18
   45d80:	dfc00417 	ldw	ra,16(sp)
   45d84:	dcc00317 	ldw	r19,12(sp)
   45d88:	dc800217 	ldw	r18,8(sp)
   45d8c:	dc400117 	ldw	r17,4(sp)
   45d90:	dc000017 	ldw	r16,0(sp)
   45d94:	dec00504 	addi	sp,sp,20
   45d98:	004461c1 	jmpi	4461c <__svfscanf_r>
   45d9c:	0047a580 	call	47a58 <__sinit>
   45da0:	003ff306 	br	45d70 <vfscanf+0x40>

00045da4 <_write_r>:
   45da4:	defffd04 	addi	sp,sp,-12
   45da8:	dc000015 	stw	r16,0(sp)
   45dac:	04000174 	movhi	r16,5
   45db0:	841cb304 	addi	r16,r16,29388
   45db4:	dc400115 	stw	r17,4(sp)
   45db8:	80000015 	stw	zero,0(r16)
   45dbc:	2023883a 	mov	r17,r4
   45dc0:	2809883a 	mov	r4,r5
   45dc4:	300b883a 	mov	r5,r6
   45dc8:	380d883a 	mov	r6,r7
   45dcc:	dfc00215 	stw	ra,8(sp)
   45dd0:	0050ec80 	call	50ec8 <write>
   45dd4:	1007883a 	mov	r3,r2
   45dd8:	00bfffc4 	movi	r2,-1
   45ddc:	18800626 	beq	r3,r2,45df8 <_write_r+0x54>
   45de0:	1805883a 	mov	r2,r3
   45de4:	dfc00217 	ldw	ra,8(sp)
   45de8:	dc400117 	ldw	r17,4(sp)
   45dec:	dc000017 	ldw	r16,0(sp)
   45df0:	dec00304 	addi	sp,sp,12
   45df4:	f800283a 	ret
   45df8:	80800017 	ldw	r2,0(r16)
   45dfc:	103ff826 	beq	r2,zero,45de0 <_write_r+0x3c>
   45e00:	88800015 	stw	r2,0(r17)
   45e04:	1805883a 	mov	r2,r3
   45e08:	dfc00217 	ldw	ra,8(sp)
   45e0c:	dc400117 	ldw	r17,4(sp)
   45e10:	dc000017 	ldw	r16,0(sp)
   45e14:	dec00304 	addi	sp,sp,12
   45e18:	f800283a 	ret

00045e1c <__swsetup_r>:
   45e1c:	00800174 	movhi	r2,5
   45e20:	1095cf04 	addi	r2,r2,22332
   45e24:	10c00017 	ldw	r3,0(r2)
   45e28:	defffd04 	addi	sp,sp,-12
   45e2c:	dc400115 	stw	r17,4(sp)
   45e30:	dc000015 	stw	r16,0(sp)
   45e34:	dfc00215 	stw	ra,8(sp)
   45e38:	2023883a 	mov	r17,r4
   45e3c:	2821883a 	mov	r16,r5
   45e40:	18000226 	beq	r3,zero,45e4c <__swsetup_r+0x30>
   45e44:	18800e17 	ldw	r2,56(r3)
   45e48:	10001f26 	beq	r2,zero,45ec8 <__swsetup_r+0xac>
   45e4c:	8100030b 	ldhu	r4,12(r16)
   45e50:	2080020c 	andi	r2,r4,8
   45e54:	10002826 	beq	r2,zero,45ef8 <__swsetup_r+0xdc>
   45e58:	81400417 	ldw	r5,16(r16)
   45e5c:	28001d26 	beq	r5,zero,45ed4 <__swsetup_r+0xb8>
   45e60:	2080004c 	andi	r2,r4,1
   45e64:	1005003a 	cmpeq	r2,r2,zero
   45e68:	10000b26 	beq	r2,zero,45e98 <__swsetup_r+0x7c>
   45e6c:	2080008c 	andi	r2,r4,2
   45e70:	10001226 	beq	r2,zero,45ebc <__swsetup_r+0xa0>
   45e74:	0005883a 	mov	r2,zero
   45e78:	80800215 	stw	r2,8(r16)
   45e7c:	28000b26 	beq	r5,zero,45eac <__swsetup_r+0x90>
   45e80:	0005883a 	mov	r2,zero
   45e84:	dfc00217 	ldw	ra,8(sp)
   45e88:	dc400117 	ldw	r17,4(sp)
   45e8c:	dc000017 	ldw	r16,0(sp)
   45e90:	dec00304 	addi	sp,sp,12
   45e94:	f800283a 	ret
   45e98:	80800517 	ldw	r2,20(r16)
   45e9c:	80000215 	stw	zero,8(r16)
   45ea0:	0085c83a 	sub	r2,zero,r2
   45ea4:	80800615 	stw	r2,24(r16)
   45ea8:	283ff51e 	bne	r5,zero,45e80 <__swsetup_r+0x64>
   45eac:	2080200c 	andi	r2,r4,128
   45eb0:	103ff326 	beq	r2,zero,45e80 <__swsetup_r+0x64>
   45eb4:	00bfffc4 	movi	r2,-1
   45eb8:	003ff206 	br	45e84 <__swsetup_r+0x68>
   45ebc:	80800517 	ldw	r2,20(r16)
   45ec0:	80800215 	stw	r2,8(r16)
   45ec4:	003fed06 	br	45e7c <__swsetup_r+0x60>
   45ec8:	1809883a 	mov	r4,r3
   45ecc:	0047a580 	call	47a58 <__sinit>
   45ed0:	003fde06 	br	45e4c <__swsetup_r+0x30>
   45ed4:	20c0a00c 	andi	r3,r4,640
   45ed8:	00808004 	movi	r2,512
   45edc:	18bfe026 	beq	r3,r2,45e60 <__swsetup_r+0x44>
   45ee0:	8809883a 	mov	r4,r17
   45ee4:	800b883a 	mov	r5,r16
   45ee8:	00415040 	call	41504 <__smakebuf_r>
   45eec:	8100030b 	ldhu	r4,12(r16)
   45ef0:	81400417 	ldw	r5,16(r16)
   45ef4:	003fda06 	br	45e60 <__swsetup_r+0x44>
   45ef8:	2080040c 	andi	r2,r4,16
   45efc:	103fed26 	beq	r2,zero,45eb4 <__swsetup_r+0x98>
   45f00:	2080010c 	andi	r2,r4,4
   45f04:	10001226 	beq	r2,zero,45f50 <__swsetup_r+0x134>
   45f08:	81400c17 	ldw	r5,48(r16)
   45f0c:	28000526 	beq	r5,zero,45f24 <__swsetup_r+0x108>
   45f10:	80801004 	addi	r2,r16,64
   45f14:	28800226 	beq	r5,r2,45f20 <__swsetup_r+0x104>
   45f18:	8809883a 	mov	r4,r17
   45f1c:	00480fc0 	call	480fc <_free_r>
   45f20:	80000c15 	stw	zero,48(r16)
   45f24:	8080030b 	ldhu	r2,12(r16)
   45f28:	81400417 	ldw	r5,16(r16)
   45f2c:	80000115 	stw	zero,4(r16)
   45f30:	10bff6cc 	andi	r2,r2,65499
   45f34:	8080030d 	sth	r2,12(r16)
   45f38:	81400015 	stw	r5,0(r16)
   45f3c:	8080030b 	ldhu	r2,12(r16)
   45f40:	10800214 	ori	r2,r2,8
   45f44:	113fffcc 	andi	r4,r2,65535
   45f48:	8080030d 	sth	r2,12(r16)
   45f4c:	003fc306 	br	45e5c <__swsetup_r+0x40>
   45f50:	81400417 	ldw	r5,16(r16)
   45f54:	003ff906 	br	45f3c <__swsetup_r+0x120>

00045f58 <_close_r>:
   45f58:	defffd04 	addi	sp,sp,-12
   45f5c:	dc000015 	stw	r16,0(sp)
   45f60:	04000174 	movhi	r16,5
   45f64:	841cb304 	addi	r16,r16,29388
   45f68:	dc400115 	stw	r17,4(sp)
   45f6c:	80000015 	stw	zero,0(r16)
   45f70:	2023883a 	mov	r17,r4
   45f74:	2809883a 	mov	r4,r5
   45f78:	dfc00215 	stw	ra,8(sp)
   45f7c:	00502280 	call	50228 <close>
   45f80:	1007883a 	mov	r3,r2
   45f84:	00bfffc4 	movi	r2,-1
   45f88:	18800626 	beq	r3,r2,45fa4 <_close_r+0x4c>
   45f8c:	1805883a 	mov	r2,r3
   45f90:	dfc00217 	ldw	ra,8(sp)
   45f94:	dc400117 	ldw	r17,4(sp)
   45f98:	dc000017 	ldw	r16,0(sp)
   45f9c:	dec00304 	addi	sp,sp,12
   45fa0:	f800283a 	ret
   45fa4:	80800017 	ldw	r2,0(r16)
   45fa8:	103ff826 	beq	r2,zero,45f8c <_close_r+0x34>
   45fac:	88800015 	stw	r2,0(r17)
   45fb0:	1805883a 	mov	r2,r3
   45fb4:	dfc00217 	ldw	ra,8(sp)
   45fb8:	dc400117 	ldw	r17,4(sp)
   45fbc:	dc000017 	ldw	r16,0(sp)
   45fc0:	dec00304 	addi	sp,sp,12
   45fc4:	f800283a 	ret

00045fc8 <quorem>:
   45fc8:	28c00417 	ldw	r3,16(r5)
   45fcc:	20800417 	ldw	r2,16(r4)
   45fd0:	defff104 	addi	sp,sp,-60
   45fd4:	dfc00e15 	stw	ra,56(sp)
   45fd8:	df000d15 	stw	fp,52(sp)
   45fdc:	ddc00c15 	stw	r23,48(sp)
   45fe0:	dd800b15 	stw	r22,44(sp)
   45fe4:	dd400a15 	stw	r21,40(sp)
   45fe8:	dd000915 	stw	r20,36(sp)
   45fec:	dcc00815 	stw	r19,32(sp)
   45ff0:	dc800715 	stw	r18,28(sp)
   45ff4:	dc400615 	stw	r17,24(sp)
   45ff8:	dc000515 	stw	r16,20(sp)
   45ffc:	d9000315 	stw	r4,12(sp)
   46000:	d9400415 	stw	r5,16(sp)
   46004:	10c07f16 	blt	r2,r3,46204 <quorem+0x23c>
   46008:	1d3fffc4 	addi	r20,r3,-1
   4600c:	d8c00417 	ldw	r3,16(sp)
   46010:	d9000317 	ldw	r4,12(sp)
   46014:	a505883a 	add	r2,r20,r20
   46018:	1085883a 	add	r2,r2,r2
   4601c:	1cc00504 	addi	r19,r3,20
   46020:	25c00504 	addi	r23,r4,20
   46024:	98ad883a 	add	r22,r19,r2
   46028:	15c7883a 	add	r3,r2,r23
   4602c:	b1400017 	ldw	r5,0(r22)
   46030:	19000017 	ldw	r4,0(r3)
   46034:	d8c00015 	stw	r3,0(sp)
   46038:	29400044 	addi	r5,r5,1
   4603c:	d9000215 	stw	r4,8(sp)
   46040:	004fd2c0 	call	4fd2c <__udivsi3>
   46044:	1039883a 	mov	fp,r2
   46048:	10003d1e 	bne	r2,zero,46140 <quorem+0x178>
   4604c:	d9400417 	ldw	r5,16(sp)
   46050:	d9000317 	ldw	r4,12(sp)
   46054:	004915c0 	call	4915c <__mcmp>
   46058:	10002c16 	blt	r2,zero,4610c <quorem+0x144>
   4605c:	e7000044 	addi	fp,fp,1
   46060:	b80f883a 	mov	r7,r23
   46064:	0011883a 	mov	r8,zero
   46068:	0009883a 	mov	r4,zero
   4606c:	99400017 	ldw	r5,0(r19)
   46070:	38c00017 	ldw	r3,0(r7)
   46074:	9cc00104 	addi	r19,r19,4
   46078:	28bfffcc 	andi	r2,r5,65535
   4607c:	2085883a 	add	r2,r4,r2
   46080:	11bfffcc 	andi	r6,r2,65535
   46084:	193fffcc 	andi	r4,r3,65535
   46088:	1004d43a 	srli	r2,r2,16
   4608c:	280ad43a 	srli	r5,r5,16
   46090:	2189c83a 	sub	r4,r4,r6
   46094:	2209883a 	add	r4,r4,r8
   46098:	1806d43a 	srli	r3,r3,16
   4609c:	288b883a 	add	r5,r5,r2
   460a0:	200dd43a 	srai	r6,r4,16
   460a4:	28bfffcc 	andi	r2,r5,65535
   460a8:	1887c83a 	sub	r3,r3,r2
   460ac:	1987883a 	add	r3,r3,r6
   460b0:	3900000d 	sth	r4,0(r7)
   460b4:	38c0008d 	sth	r3,2(r7)
   460b8:	2808d43a 	srli	r4,r5,16
   460bc:	39c00104 	addi	r7,r7,4
   460c0:	1811d43a 	srai	r8,r3,16
   460c4:	b4ffe92e 	bgeu	r22,r19,4606c <quorem+0xa4>
   460c8:	a505883a 	add	r2,r20,r20
   460cc:	1085883a 	add	r2,r2,r2
   460d0:	b885883a 	add	r2,r23,r2
   460d4:	10c00017 	ldw	r3,0(r2)
   460d8:	18000c1e 	bne	r3,zero,4610c <quorem+0x144>
   460dc:	113fff04 	addi	r4,r2,-4
   460e0:	b900082e 	bgeu	r23,r4,46104 <quorem+0x13c>
   460e4:	10bfff17 	ldw	r2,-4(r2)
   460e8:	10000326 	beq	r2,zero,460f8 <quorem+0x130>
   460ec:	00000506 	br	46104 <quorem+0x13c>
   460f0:	20800017 	ldw	r2,0(r4)
   460f4:	1000031e 	bne	r2,zero,46104 <quorem+0x13c>
   460f8:	213fff04 	addi	r4,r4,-4
   460fc:	a53fffc4 	addi	r20,r20,-1
   46100:	b93ffb36 	bltu	r23,r4,460f0 <quorem+0x128>
   46104:	d9000317 	ldw	r4,12(sp)
   46108:	25000415 	stw	r20,16(r4)
   4610c:	e005883a 	mov	r2,fp
   46110:	dfc00e17 	ldw	ra,56(sp)
   46114:	df000d17 	ldw	fp,52(sp)
   46118:	ddc00c17 	ldw	r23,48(sp)
   4611c:	dd800b17 	ldw	r22,44(sp)
   46120:	dd400a17 	ldw	r21,40(sp)
   46124:	dd000917 	ldw	r20,36(sp)
   46128:	dcc00817 	ldw	r19,32(sp)
   4612c:	dc800717 	ldw	r18,28(sp)
   46130:	dc400617 	ldw	r17,24(sp)
   46134:	dc000517 	ldw	r16,20(sp)
   46138:	dec00f04 	addi	sp,sp,60
   4613c:	f800283a 	ret
   46140:	b823883a 	mov	r17,r23
   46144:	9825883a 	mov	r18,r19
   46148:	d8000115 	stw	zero,4(sp)
   4614c:	002b883a 	mov	r21,zero
   46150:	94000017 	ldw	r16,0(r18)
   46154:	e009883a 	mov	r4,fp
   46158:	94800104 	addi	r18,r18,4
   4615c:	817fffcc 	andi	r5,r16,65535
   46160:	004fd3c0 	call	4fd3c <__mulsi3>
   46164:	800ad43a 	srli	r5,r16,16
   46168:	e009883a 	mov	r4,fp
   4616c:	a8a1883a 	add	r16,r21,r2
   46170:	004fd3c0 	call	4fd3c <__mulsi3>
   46174:	89000017 	ldw	r4,0(r17)
   46178:	80ffffcc 	andi	r3,r16,65535
   4617c:	8020d43a 	srli	r16,r16,16
   46180:	217fffcc 	andi	r5,r4,65535
   46184:	28cbc83a 	sub	r5,r5,r3
   46188:	d8c00117 	ldw	r3,4(sp)
   4618c:	2008d43a 	srli	r4,r4,16
   46190:	1405883a 	add	r2,r2,r16
   46194:	28cb883a 	add	r5,r5,r3
   46198:	280dd43a 	srai	r6,r5,16
   4619c:	10ffffcc 	andi	r3,r2,65535
   461a0:	20c9c83a 	sub	r4,r4,r3
   461a4:	2189883a 	add	r4,r4,r6
   461a8:	8900008d 	sth	r4,2(r17)
   461ac:	2009d43a 	srai	r4,r4,16
   461b0:	8940000d 	sth	r5,0(r17)
   461b4:	102ad43a 	srli	r21,r2,16
   461b8:	8c400104 	addi	r17,r17,4
   461bc:	d9000115 	stw	r4,4(sp)
   461c0:	b4bfe32e 	bgeu	r22,r18,46150 <quorem+0x188>
   461c4:	d9000217 	ldw	r4,8(sp)
   461c8:	203fa01e 	bne	r4,zero,4604c <quorem+0x84>
   461cc:	d8800017 	ldw	r2,0(sp)
   461d0:	10ffff04 	addi	r3,r2,-4
   461d4:	b8c0082e 	bgeu	r23,r3,461f8 <quorem+0x230>
   461d8:	10bfff17 	ldw	r2,-4(r2)
   461dc:	10000326 	beq	r2,zero,461ec <quorem+0x224>
   461e0:	00000506 	br	461f8 <quorem+0x230>
   461e4:	18800017 	ldw	r2,0(r3)
   461e8:	1000031e 	bne	r2,zero,461f8 <quorem+0x230>
   461ec:	18ffff04 	addi	r3,r3,-4
   461f0:	a53fffc4 	addi	r20,r20,-1
   461f4:	b8fffb36 	bltu	r23,r3,461e4 <quorem+0x21c>
   461f8:	d8c00317 	ldw	r3,12(sp)
   461fc:	1d000415 	stw	r20,16(r3)
   46200:	003f9206 	br	4604c <quorem+0x84>
   46204:	0005883a 	mov	r2,zero
   46208:	003fc106 	br	46110 <quorem+0x148>

0004620c <_dtoa_r>:
   4620c:	22001017 	ldw	r8,64(r4)
   46210:	deffda04 	addi	sp,sp,-152
   46214:	dd402115 	stw	r21,132(sp)
   46218:	dd002015 	stw	r20,128(sp)
   4621c:	dc801e15 	stw	r18,120(sp)
   46220:	dc401d15 	stw	r17,116(sp)
   46224:	dfc02515 	stw	ra,148(sp)
   46228:	df002415 	stw	fp,144(sp)
   4622c:	ddc02315 	stw	r23,140(sp)
   46230:	dd802215 	stw	r22,136(sp)
   46234:	dcc01f15 	stw	r19,124(sp)
   46238:	dc001c15 	stw	r16,112(sp)
   4623c:	d9001615 	stw	r4,88(sp)
   46240:	3023883a 	mov	r17,r6
   46244:	2829883a 	mov	r20,r5
   46248:	d9c01715 	stw	r7,92(sp)
   4624c:	dc802817 	ldw	r18,160(sp)
   46250:	302b883a 	mov	r21,r6
   46254:	40000a26 	beq	r8,zero,46280 <_dtoa_r+0x74>
   46258:	20801117 	ldw	r2,68(r4)
   4625c:	400b883a 	mov	r5,r8
   46260:	40800115 	stw	r2,4(r8)
   46264:	20c01117 	ldw	r3,68(r4)
   46268:	00800044 	movi	r2,1
   4626c:	10c4983a 	sll	r2,r2,r3
   46270:	40800215 	stw	r2,8(r8)
   46274:	00490000 	call	49000 <_Bfree>
   46278:	d8c01617 	ldw	r3,88(sp)
   4627c:	18001015 	stw	zero,64(r3)
   46280:	8800a316 	blt	r17,zero,46510 <_dtoa_r+0x304>
   46284:	90000015 	stw	zero,0(r18)
   46288:	a8dffc2c 	andhi	r3,r21,32752
   4628c:	009ffc34 	movhi	r2,32752
   46290:	18809126 	beq	r3,r2,464d8 <_dtoa_r+0x2cc>
   46294:	000d883a 	mov	r6,zero
   46298:	000f883a 	mov	r7,zero
   4629c:	a009883a 	mov	r4,r20
   462a0:	a80b883a 	mov	r5,r21
   462a4:	dd001215 	stw	r20,72(sp)
   462a8:	dd401315 	stw	r21,76(sp)
   462ac:	004f5700 	call	4f570 <__nedf2>
   462b0:	1000171e 	bne	r2,zero,46310 <_dtoa_r+0x104>
   462b4:	d9802717 	ldw	r6,156(sp)
   462b8:	00800044 	movi	r2,1
   462bc:	30800015 	stw	r2,0(r6)
   462c0:	d8802917 	ldw	r2,164(sp)
   462c4:	10029b26 	beq	r2,zero,46d34 <_dtoa_r+0xb28>
   462c8:	d9002917 	ldw	r4,164(sp)
   462cc:	00800174 	movhi	r2,5
   462d0:	108db944 	addi	r2,r2,14053
   462d4:	10ffffc4 	addi	r3,r2,-1
   462d8:	20800015 	stw	r2,0(r4)
   462dc:	1805883a 	mov	r2,r3
   462e0:	dfc02517 	ldw	ra,148(sp)
   462e4:	df002417 	ldw	fp,144(sp)
   462e8:	ddc02317 	ldw	r23,140(sp)
   462ec:	dd802217 	ldw	r22,136(sp)
   462f0:	dd402117 	ldw	r21,132(sp)
   462f4:	dd002017 	ldw	r20,128(sp)
   462f8:	dcc01f17 	ldw	r19,124(sp)
   462fc:	dc801e17 	ldw	r18,120(sp)
   46300:	dc401d17 	ldw	r17,116(sp)
   46304:	dc001c17 	ldw	r16,112(sp)
   46308:	dec02604 	addi	sp,sp,152
   4630c:	f800283a 	ret
   46310:	d9001617 	ldw	r4,88(sp)
   46314:	d9401217 	ldw	r5,72(sp)
   46318:	d8800104 	addi	r2,sp,4
   4631c:	a80d883a 	mov	r6,r21
   46320:	d9c00204 	addi	r7,sp,8
   46324:	d8800015 	stw	r2,0(sp)
   46328:	004963c0 	call	4963c <__d2b>
   4632c:	d8800715 	stw	r2,28(sp)
   46330:	a804d53a 	srli	r2,r21,20
   46334:	1101ffcc 	andi	r4,r2,2047
   46338:	20008626 	beq	r4,zero,46554 <_dtoa_r+0x348>
   4633c:	d8c01217 	ldw	r3,72(sp)
   46340:	00800434 	movhi	r2,16
   46344:	10bfffc4 	addi	r2,r2,-1
   46348:	ddc00117 	ldw	r23,4(sp)
   4634c:	a884703a 	and	r2,r21,r2
   46350:	1811883a 	mov	r8,r3
   46354:	124ffc34 	orhi	r9,r2,16368
   46358:	25bf0044 	addi	r22,r4,-1023
   4635c:	d8000815 	stw	zero,32(sp)
   46360:	0005883a 	mov	r2,zero
   46364:	00cffe34 	movhi	r3,16376
   46368:	480b883a 	mov	r5,r9
   4636c:	4009883a 	mov	r4,r8
   46370:	180f883a 	mov	r7,r3
   46374:	100d883a 	mov	r6,r2
   46378:	004edd80 	call	4edd8 <__subdf3>
   4637c:	0218dbf4 	movhi	r8,25455
   46380:	4210d844 	addi	r8,r8,17249
   46384:	024ff4f4 	movhi	r9,16339
   46388:	4a61e9c4 	addi	r9,r9,-30809
   4638c:	480f883a 	mov	r7,r9
   46390:	400d883a 	mov	r6,r8
   46394:	180b883a 	mov	r5,r3
   46398:	1009883a 	mov	r4,r2
   4639c:	004eecc0 	call	4eecc <__muldf3>
   463a0:	0222d874 	movhi	r8,35681
   463a4:	42322cc4 	addi	r8,r8,-14157
   463a8:	024ff1f4 	movhi	r9,16327
   463ac:	4a628a04 	addi	r9,r9,-30168
   463b0:	480f883a 	mov	r7,r9
   463b4:	400d883a 	mov	r6,r8
   463b8:	180b883a 	mov	r5,r3
   463bc:	1009883a 	mov	r4,r2
   463c0:	004ee580 	call	4ee58 <__adddf3>
   463c4:	b009883a 	mov	r4,r22
   463c8:	1021883a 	mov	r16,r2
   463cc:	1823883a 	mov	r17,r3
   463d0:	004f8180 	call	4f818 <__floatsidf>
   463d4:	021427f4 	movhi	r8,20639
   463d8:	421e7ec4 	addi	r8,r8,31227
   463dc:	024ff4f4 	movhi	r9,16339
   463e0:	4a5104c4 	addi	r9,r9,17427
   463e4:	480f883a 	mov	r7,r9
   463e8:	400d883a 	mov	r6,r8
   463ec:	180b883a 	mov	r5,r3
   463f0:	1009883a 	mov	r4,r2
   463f4:	004eecc0 	call	4eecc <__muldf3>
   463f8:	180f883a 	mov	r7,r3
   463fc:	880b883a 	mov	r5,r17
   46400:	100d883a 	mov	r6,r2
   46404:	8009883a 	mov	r4,r16
   46408:	004ee580 	call	4ee58 <__adddf3>
   4640c:	1009883a 	mov	r4,r2
   46410:	180b883a 	mov	r5,r3
   46414:	1021883a 	mov	r16,r2
   46418:	1823883a 	mov	r17,r3
   4641c:	004f9100 	call	4f910 <__fixdfsi>
   46420:	000d883a 	mov	r6,zero
   46424:	000f883a 	mov	r7,zero
   46428:	8009883a 	mov	r4,r16
   4642c:	880b883a 	mov	r5,r17
   46430:	d8800d15 	stw	r2,52(sp)
   46434:	004f7080 	call	4f708 <__ltdf2>
   46438:	10031716 	blt	r2,zero,47098 <_dtoa_r+0xe8c>
   4643c:	d8c00d17 	ldw	r3,52(sp)
   46440:	00800584 	movi	r2,22
   46444:	10c1482e 	bgeu	r2,r3,46968 <_dtoa_r+0x75c>
   46448:	01000044 	movi	r4,1
   4644c:	d9000c15 	stw	r4,48(sp)
   46450:	bd85c83a 	sub	r2,r23,r22
   46454:	11bfffc4 	addi	r6,r2,-1
   46458:	30030b16 	blt	r6,zero,47088 <_dtoa_r+0xe7c>
   4645c:	d9800a15 	stw	r6,40(sp)
   46460:	d8001115 	stw	zero,68(sp)
   46464:	d8c00d17 	ldw	r3,52(sp)
   46468:	1802ff16 	blt	r3,zero,47068 <_dtoa_r+0xe5c>
   4646c:	d9000a17 	ldw	r4,40(sp)
   46470:	d8c00915 	stw	r3,36(sp)
   46474:	d8001015 	stw	zero,64(sp)
   46478:	20c9883a 	add	r4,r4,r3
   4647c:	d9000a15 	stw	r4,40(sp)
   46480:	d9001717 	ldw	r4,92(sp)
   46484:	00800244 	movi	r2,9
   46488:	11004636 	bltu	r2,r4,465a4 <_dtoa_r+0x398>
   4648c:	00800144 	movi	r2,5
   46490:	11020416 	blt	r2,r4,46ca4 <_dtoa_r+0xa98>
   46494:	04400044 	movi	r17,1
   46498:	d8c01717 	ldw	r3,92(sp)
   4649c:	00800144 	movi	r2,5
   464a0:	10c1ed36 	bltu	r2,r3,46c58 <_dtoa_r+0xa4c>
   464a4:	18c5883a 	add	r2,r3,r3
   464a8:	1085883a 	add	r2,r2,r2
   464ac:	00c00134 	movhi	r3,4
   464b0:	18d93004 	addi	r3,r3,25792
   464b4:	10c5883a 	add	r2,r2,r3
   464b8:	11000017 	ldw	r4,0(r2)
   464bc:	2000683a 	jmp	r4
   464c0:	000465ac 	andhi	zero,zero,4502
   464c4:	000465ac 	andhi	zero,zero,4502
   464c8:	00046fac 	andhi	zero,zero,4542
   464cc:	00046f84 	movi	zero,4542
   464d0:	00046fc8 	cmpgei	zero,zero,4543
   464d4:	00046fd4 	movui	zero,4543
   464d8:	d9002717 	ldw	r4,156(sp)
   464dc:	0089c3c4 	movi	r2,9999
   464e0:	20800015 	stw	r2,0(r4)
   464e4:	a0001026 	beq	r20,zero,46528 <_dtoa_r+0x31c>
   464e8:	00c00174 	movhi	r3,5
   464ec:	18ce7004 	addi	r3,r3,14784
   464f0:	d9802917 	ldw	r6,164(sp)
   464f4:	303f7926 	beq	r6,zero,462dc <_dtoa_r+0xd0>
   464f8:	188000c7 	ldb	r2,3(r3)
   464fc:	190000c4 	addi	r4,r3,3
   46500:	1000101e 	bne	r2,zero,46544 <_dtoa_r+0x338>
   46504:	d8802917 	ldw	r2,164(sp)
   46508:	11000015 	stw	r4,0(r2)
   4650c:	003f7306 	br	462dc <_dtoa_r+0xd0>
   46510:	00a00034 	movhi	r2,32768
   46514:	10bfffc4 	addi	r2,r2,-1
   46518:	00c00044 	movi	r3,1
   4651c:	88aa703a 	and	r21,r17,r2
   46520:	90c00015 	stw	r3,0(r18)
   46524:	003f5806 	br	46288 <_dtoa_r+0x7c>
   46528:	00800434 	movhi	r2,16
   4652c:	10bfffc4 	addi	r2,r2,-1
   46530:	a884703a 	and	r2,r21,r2
   46534:	103fec1e 	bne	r2,zero,464e8 <_dtoa_r+0x2dc>
   46538:	00c00174 	movhi	r3,5
   4653c:	18ce6d04 	addi	r3,r3,14772
   46540:	003feb06 	br	464f0 <_dtoa_r+0x2e4>
   46544:	d8802917 	ldw	r2,164(sp)
   46548:	19000204 	addi	r4,r3,8
   4654c:	11000015 	stw	r4,0(r2)
   46550:	003f6206 	br	462dc <_dtoa_r+0xd0>
   46554:	ddc00117 	ldw	r23,4(sp)
   46558:	d8800217 	ldw	r2,8(sp)
   4655c:	01000804 	movi	r4,32
   46560:	b8c10c84 	addi	r3,r23,1074
   46564:	18a3883a 	add	r17,r3,r2
   46568:	2441b80e 	bge	r4,r17,46c4c <_dtoa_r+0xa40>
   4656c:	00c01004 	movi	r3,64
   46570:	1c47c83a 	sub	r3,r3,r17
   46574:	88bff804 	addi	r2,r17,-32
   46578:	a8c6983a 	sll	r3,r21,r3
   4657c:	a084d83a 	srl	r2,r20,r2
   46580:	1888b03a 	or	r4,r3,r2
   46584:	004fa5c0 	call	4fa5c <__floatunsidf>
   46588:	1011883a 	mov	r8,r2
   4658c:	00bf8434 	movhi	r2,65040
   46590:	01000044 	movi	r4,1
   46594:	10d3883a 	add	r9,r2,r3
   46598:	8dbef344 	addi	r22,r17,-1075
   4659c:	d9000815 	stw	r4,32(sp)
   465a0:	003f6f06 	br	46360 <_dtoa_r+0x154>
   465a4:	d8001715 	stw	zero,92(sp)
   465a8:	04400044 	movi	r17,1
   465ac:	00bfffc4 	movi	r2,-1
   465b0:	00c00044 	movi	r3,1
   465b4:	d8800e15 	stw	r2,56(sp)
   465b8:	d8002615 	stw	zero,152(sp)
   465bc:	d8800f15 	stw	r2,60(sp)
   465c0:	d8c00b15 	stw	r3,44(sp)
   465c4:	1021883a 	mov	r16,r2
   465c8:	d8801617 	ldw	r2,88(sp)
   465cc:	10001115 	stw	zero,68(r2)
   465d0:	d8801617 	ldw	r2,88(sp)
   465d4:	11401117 	ldw	r5,68(r2)
   465d8:	1009883a 	mov	r4,r2
   465dc:	00495800 	call	49580 <_Balloc>
   465e0:	d8c01617 	ldw	r3,88(sp)
   465e4:	d8800515 	stw	r2,20(sp)
   465e8:	18801015 	stw	r2,64(r3)
   465ec:	00800384 	movi	r2,14
   465f0:	14006836 	bltu	r2,r16,46794 <_dtoa_r+0x588>
   465f4:	8805003a 	cmpeq	r2,r17,zero
   465f8:	1000661e 	bne	r2,zero,46794 <_dtoa_r+0x588>
   465fc:	d9000d17 	ldw	r4,52(sp)
   46600:	0102300e 	bge	zero,r4,46ec4 <_dtoa_r+0xcb8>
   46604:	208003cc 	andi	r2,r4,15
   46608:	100490fa 	slli	r2,r2,3
   4660c:	2025d13a 	srai	r18,r4,4
   46610:	00c00174 	movhi	r3,5
   46614:	18ce8104 	addi	r3,r3,14852
   46618:	10c5883a 	add	r2,r2,r3
   4661c:	90c0040c 	andi	r3,r18,16
   46620:	14000017 	ldw	r16,0(r2)
   46624:	14400117 	ldw	r17,4(r2)
   46628:	18036a1e 	bne	r3,zero,473d4 <_dtoa_r+0x11c8>
   4662c:	05800084 	movi	r22,2
   46630:	90001026 	beq	r18,zero,46674 <_dtoa_r+0x468>
   46634:	04c00174 	movhi	r19,5
   46638:	9cceb304 	addi	r19,r19,15052
   4663c:	9080004c 	andi	r2,r18,1
   46640:	1005003a 	cmpeq	r2,r2,zero
   46644:	1000081e 	bne	r2,zero,46668 <_dtoa_r+0x45c>
   46648:	99800017 	ldw	r6,0(r19)
   4664c:	99c00117 	ldw	r7,4(r19)
   46650:	880b883a 	mov	r5,r17
   46654:	8009883a 	mov	r4,r16
   46658:	004eecc0 	call	4eecc <__muldf3>
   4665c:	1021883a 	mov	r16,r2
   46660:	b5800044 	addi	r22,r22,1
   46664:	1823883a 	mov	r17,r3
   46668:	9025d07a 	srai	r18,r18,1
   4666c:	9cc00204 	addi	r19,r19,8
   46670:	903ff21e 	bne	r18,zero,4663c <_dtoa_r+0x430>
   46674:	a80b883a 	mov	r5,r21
   46678:	a009883a 	mov	r4,r20
   4667c:	880f883a 	mov	r7,r17
   46680:	800d883a 	mov	r6,r16
   46684:	004f2900 	call	4f290 <__divdf3>
   46688:	1029883a 	mov	r20,r2
   4668c:	182b883a 	mov	r21,r3
   46690:	d8c00c17 	ldw	r3,48(sp)
   46694:	1805003a 	cmpeq	r2,r3,zero
   46698:	1000081e 	bne	r2,zero,466bc <_dtoa_r+0x4b0>
   4669c:	0005883a 	mov	r2,zero
   466a0:	00cffc34 	movhi	r3,16368
   466a4:	180f883a 	mov	r7,r3
   466a8:	a009883a 	mov	r4,r20
   466ac:	a80b883a 	mov	r5,r21
   466b0:	100d883a 	mov	r6,r2
   466b4:	004f7080 	call	4f708 <__ltdf2>
   466b8:	1003fe16 	blt	r2,zero,476b4 <_dtoa_r+0x14a8>
   466bc:	b009883a 	mov	r4,r22
   466c0:	004f8180 	call	4f818 <__floatsidf>
   466c4:	180b883a 	mov	r5,r3
   466c8:	1009883a 	mov	r4,r2
   466cc:	a00d883a 	mov	r6,r20
   466d0:	a80f883a 	mov	r7,r21
   466d4:	004eecc0 	call	4eecc <__muldf3>
   466d8:	0011883a 	mov	r8,zero
   466dc:	02500734 	movhi	r9,16412
   466e0:	1009883a 	mov	r4,r2
   466e4:	180b883a 	mov	r5,r3
   466e8:	480f883a 	mov	r7,r9
   466ec:	400d883a 	mov	r6,r8
   466f0:	004ee580 	call	4ee58 <__adddf3>
   466f4:	d9000f17 	ldw	r4,60(sp)
   466f8:	102d883a 	mov	r22,r2
   466fc:	00bf3034 	movhi	r2,64704
   46700:	18b9883a 	add	fp,r3,r2
   46704:	e02f883a 	mov	r23,fp
   46708:	20028f1e 	bne	r4,zero,47148 <_dtoa_r+0xf3c>
   4670c:	0005883a 	mov	r2,zero
   46710:	00d00534 	movhi	r3,16404
   46714:	a009883a 	mov	r4,r20
   46718:	a80b883a 	mov	r5,r21
   4671c:	180f883a 	mov	r7,r3
   46720:	100d883a 	mov	r6,r2
   46724:	004edd80 	call	4edd8 <__subdf3>
   46728:	1009883a 	mov	r4,r2
   4672c:	e00f883a 	mov	r7,fp
   46730:	180b883a 	mov	r5,r3
   46734:	b00d883a 	mov	r6,r22
   46738:	1025883a 	mov	r18,r2
   4673c:	1827883a 	mov	r19,r3
   46740:	004f5f80 	call	4f5f8 <__gtdf2>
   46744:	00834f16 	blt	zero,r2,47484 <_dtoa_r+0x1278>
   46748:	e0e0003c 	xorhi	r3,fp,32768
   4674c:	9009883a 	mov	r4,r18
   46750:	980b883a 	mov	r5,r19
   46754:	180f883a 	mov	r7,r3
   46758:	b00d883a 	mov	r6,r22
   4675c:	004f7080 	call	4f708 <__ltdf2>
   46760:	1000080e 	bge	r2,zero,46784 <_dtoa_r+0x578>
   46764:	0027883a 	mov	r19,zero
   46768:	0025883a 	mov	r18,zero
   4676c:	d8802617 	ldw	r2,152(sp)
   46770:	df000517 	ldw	fp,20(sp)
   46774:	d8000615 	stw	zero,24(sp)
   46778:	0084303a 	nor	r2,zero,r2
   4677c:	d8800d15 	stw	r2,52(sp)
   46780:	00019b06 	br	46df0 <_dtoa_r+0xbe4>
   46784:	d9801217 	ldw	r6,72(sp)
   46788:	d8801317 	ldw	r2,76(sp)
   4678c:	3029883a 	mov	r20,r6
   46790:	102b883a 	mov	r21,r2
   46794:	d8c00217 	ldw	r3,8(sp)
   46798:	18008516 	blt	r3,zero,469b0 <_dtoa_r+0x7a4>
   4679c:	d9000d17 	ldw	r4,52(sp)
   467a0:	00800384 	movi	r2,14
   467a4:	11008216 	blt	r2,r4,469b0 <_dtoa_r+0x7a4>
   467a8:	200490fa 	slli	r2,r4,3
   467ac:	d9802617 	ldw	r6,152(sp)
   467b0:	00c00174 	movhi	r3,5
   467b4:	18ce8104 	addi	r3,r3,14852
   467b8:	10c5883a 	add	r2,r2,r3
   467bc:	14800017 	ldw	r18,0(r2)
   467c0:	14c00117 	ldw	r19,4(r2)
   467c4:	30031e16 	blt	r6,zero,47440 <_dtoa_r+0x1234>
   467c8:	d9000517 	ldw	r4,20(sp)
   467cc:	d8c00f17 	ldw	r3,60(sp)
   467d0:	a823883a 	mov	r17,r21
   467d4:	a021883a 	mov	r16,r20
   467d8:	192b883a 	add	r21,r3,r4
   467dc:	2039883a 	mov	fp,r4
   467e0:	00000f06 	br	46820 <_dtoa_r+0x614>
   467e4:	0005883a 	mov	r2,zero
   467e8:	00d00934 	movhi	r3,16420
   467ec:	5009883a 	mov	r4,r10
   467f0:	580b883a 	mov	r5,r11
   467f4:	180f883a 	mov	r7,r3
   467f8:	100d883a 	mov	r6,r2
   467fc:	004eecc0 	call	4eecc <__muldf3>
   46800:	180b883a 	mov	r5,r3
   46804:	000d883a 	mov	r6,zero
   46808:	000f883a 	mov	r7,zero
   4680c:	1009883a 	mov	r4,r2
   46810:	1021883a 	mov	r16,r2
   46814:	1823883a 	mov	r17,r3
   46818:	004f5700 	call	4f570 <__nedf2>
   4681c:	10004526 	beq	r2,zero,46934 <_dtoa_r+0x728>
   46820:	900d883a 	mov	r6,r18
   46824:	980f883a 	mov	r7,r19
   46828:	8009883a 	mov	r4,r16
   4682c:	880b883a 	mov	r5,r17
   46830:	004f2900 	call	4f290 <__divdf3>
   46834:	180b883a 	mov	r5,r3
   46838:	1009883a 	mov	r4,r2
   4683c:	004f9100 	call	4f910 <__fixdfsi>
   46840:	1009883a 	mov	r4,r2
   46844:	1029883a 	mov	r20,r2
   46848:	004f8180 	call	4f818 <__floatsidf>
   4684c:	180f883a 	mov	r7,r3
   46850:	9009883a 	mov	r4,r18
   46854:	980b883a 	mov	r5,r19
   46858:	100d883a 	mov	r6,r2
   4685c:	004eecc0 	call	4eecc <__muldf3>
   46860:	180f883a 	mov	r7,r3
   46864:	880b883a 	mov	r5,r17
   46868:	8009883a 	mov	r4,r16
   4686c:	100d883a 	mov	r6,r2
   46870:	004edd80 	call	4edd8 <__subdf3>
   46874:	1015883a 	mov	r10,r2
   46878:	a0800c04 	addi	r2,r20,48
   4687c:	e0800005 	stb	r2,0(fp)
   46880:	e7000044 	addi	fp,fp,1
   46884:	1817883a 	mov	r11,r3
   46888:	e57fd61e 	bne	fp,r21,467e4 <_dtoa_r+0x5d8>
   4688c:	500d883a 	mov	r6,r10
   46890:	180f883a 	mov	r7,r3
   46894:	5009883a 	mov	r4,r10
   46898:	180b883a 	mov	r5,r3
   4689c:	004ee580 	call	4ee58 <__adddf3>
   468a0:	100d883a 	mov	r6,r2
   468a4:	9009883a 	mov	r4,r18
   468a8:	980b883a 	mov	r5,r19
   468ac:	180f883a 	mov	r7,r3
   468b0:	1021883a 	mov	r16,r2
   468b4:	1823883a 	mov	r17,r3
   468b8:	004f7080 	call	4f708 <__ltdf2>
   468bc:	10000816 	blt	r2,zero,468e0 <_dtoa_r+0x6d4>
   468c0:	980b883a 	mov	r5,r19
   468c4:	800d883a 	mov	r6,r16
   468c8:	880f883a 	mov	r7,r17
   468cc:	9009883a 	mov	r4,r18
   468d0:	004f4e80 	call	4f4e8 <__eqdf2>
   468d4:	1000171e 	bne	r2,zero,46934 <_dtoa_r+0x728>
   468d8:	a080004c 	andi	r2,r20,1
   468dc:	10001526 	beq	r2,zero,46934 <_dtoa_r+0x728>
   468e0:	d8800d17 	ldw	r2,52(sp)
   468e4:	d8800415 	stw	r2,16(sp)
   468e8:	e009883a 	mov	r4,fp
   468ec:	213fffc4 	addi	r4,r4,-1
   468f0:	20c00007 	ldb	r3,0(r4)
   468f4:	00800e44 	movi	r2,57
   468f8:	1880081e 	bne	r3,r2,4691c <_dtoa_r+0x710>
   468fc:	d8800517 	ldw	r2,20(sp)
   46900:	113ffa1e 	bne	r2,r4,468ec <_dtoa_r+0x6e0>
   46904:	d8c00417 	ldw	r3,16(sp)
   46908:	d9800517 	ldw	r6,20(sp)
   4690c:	00800c04 	movi	r2,48
   46910:	18c00044 	addi	r3,r3,1
   46914:	d8c00415 	stw	r3,16(sp)
   46918:	30800005 	stb	r2,0(r6)
   4691c:	20800003 	ldbu	r2,0(r4)
   46920:	d8c00417 	ldw	r3,16(sp)
   46924:	27000044 	addi	fp,r4,1
   46928:	10800044 	addi	r2,r2,1
   4692c:	d8c00d15 	stw	r3,52(sp)
   46930:	20800005 	stb	r2,0(r4)
   46934:	d9001617 	ldw	r4,88(sp)
   46938:	d9400717 	ldw	r5,28(sp)
   4693c:	00490000 	call	49000 <_Bfree>
   46940:	e0000005 	stb	zero,0(fp)
   46944:	d9800d17 	ldw	r6,52(sp)
   46948:	d8c02717 	ldw	r3,156(sp)
   4694c:	d9002917 	ldw	r4,164(sp)
   46950:	30800044 	addi	r2,r6,1
   46954:	18800015 	stw	r2,0(r3)
   46958:	20029c26 	beq	r4,zero,473cc <_dtoa_r+0x11c0>
   4695c:	d8c00517 	ldw	r3,20(sp)
   46960:	27000015 	stw	fp,0(r4)
   46964:	003e5d06 	br	462dc <_dtoa_r+0xd0>
   46968:	d9800d17 	ldw	r6,52(sp)
   4696c:	00c00174 	movhi	r3,5
   46970:	18ce8104 	addi	r3,r3,14852
   46974:	d9001217 	ldw	r4,72(sp)
   46978:	300490fa 	slli	r2,r6,3
   4697c:	d9401317 	ldw	r5,76(sp)
   46980:	10c5883a 	add	r2,r2,r3
   46984:	12000017 	ldw	r8,0(r2)
   46988:	12400117 	ldw	r9,4(r2)
   4698c:	400d883a 	mov	r6,r8
   46990:	480f883a 	mov	r7,r9
   46994:	004f7080 	call	4f708 <__ltdf2>
   46998:	1000030e 	bge	r2,zero,469a8 <_dtoa_r+0x79c>
   4699c:	d8800d17 	ldw	r2,52(sp)
   469a0:	10bfffc4 	addi	r2,r2,-1
   469a4:	d8800d15 	stw	r2,52(sp)
   469a8:	d8000c15 	stw	zero,48(sp)
   469ac:	003ea806 	br	46450 <_dtoa_r+0x244>
   469b0:	d9000b17 	ldw	r4,44(sp)
   469b4:	202cc03a 	cmpne	r22,r4,zero
   469b8:	b000c71e 	bne	r22,zero,46cd8 <_dtoa_r+0xacc>
   469bc:	dc001117 	ldw	r16,68(sp)
   469c0:	dc801017 	ldw	r18,64(sp)
   469c4:	0027883a 	mov	r19,zero
   469c8:	04000b0e 	bge	zero,r16,469f8 <_dtoa_r+0x7ec>
   469cc:	d8c00a17 	ldw	r3,40(sp)
   469d0:	00c0090e 	bge	zero,r3,469f8 <_dtoa_r+0x7ec>
   469d4:	8005883a 	mov	r2,r16
   469d8:	1c011316 	blt	r3,r16,46e28 <_dtoa_r+0xc1c>
   469dc:	d9000a17 	ldw	r4,40(sp)
   469e0:	d9801117 	ldw	r6,68(sp)
   469e4:	80a1c83a 	sub	r16,r16,r2
   469e8:	2089c83a 	sub	r4,r4,r2
   469ec:	308dc83a 	sub	r6,r6,r2
   469f0:	d9000a15 	stw	r4,40(sp)
   469f4:	d9801115 	stw	r6,68(sp)
   469f8:	d8801017 	ldw	r2,64(sp)
   469fc:	0080150e 	bge	zero,r2,46a54 <_dtoa_r+0x848>
   46a00:	d8c00b17 	ldw	r3,44(sp)
   46a04:	1805003a 	cmpeq	r2,r3,zero
   46a08:	1001c91e 	bne	r2,zero,47130 <_dtoa_r+0xf24>
   46a0c:	04800e0e 	bge	zero,r18,46a48 <_dtoa_r+0x83c>
   46a10:	d9001617 	ldw	r4,88(sp)
   46a14:	980b883a 	mov	r5,r19
   46a18:	900d883a 	mov	r6,r18
   46a1c:	0049e4c0 	call	49e4c <__pow5mult>
   46a20:	d9001617 	ldw	r4,88(sp)
   46a24:	d9800717 	ldw	r6,28(sp)
   46a28:	100b883a 	mov	r5,r2
   46a2c:	1027883a 	mov	r19,r2
   46a30:	0049a900 	call	49a90 <__multiply>
   46a34:	d9001617 	ldw	r4,88(sp)
   46a38:	d9400717 	ldw	r5,28(sp)
   46a3c:	1023883a 	mov	r17,r2
   46a40:	00490000 	call	49000 <_Bfree>
   46a44:	dc400715 	stw	r17,28(sp)
   46a48:	d9001017 	ldw	r4,64(sp)
   46a4c:	248dc83a 	sub	r6,r4,r18
   46a50:	30010e1e 	bne	r6,zero,46e8c <_dtoa_r+0xc80>
   46a54:	d9001617 	ldw	r4,88(sp)
   46a58:	04400044 	movi	r17,1
   46a5c:	880b883a 	mov	r5,r17
   46a60:	0049ce40 	call	49ce4 <__i2b>
   46a64:	d9800917 	ldw	r6,36(sp)
   46a68:	1025883a 	mov	r18,r2
   46a6c:	0180040e 	bge	zero,r6,46a80 <_dtoa_r+0x874>
   46a70:	d9001617 	ldw	r4,88(sp)
   46a74:	100b883a 	mov	r5,r2
   46a78:	0049e4c0 	call	49e4c <__pow5mult>
   46a7c:	1025883a 	mov	r18,r2
   46a80:	d8801717 	ldw	r2,92(sp)
   46a84:	8880f30e 	bge	r17,r2,46e54 <_dtoa_r+0xc48>
   46a88:	0023883a 	mov	r17,zero
   46a8c:	d9800917 	ldw	r6,36(sp)
   46a90:	30019e1e 	bne	r6,zero,4710c <_dtoa_r+0xf00>
   46a94:	00c00044 	movi	r3,1
   46a98:	d9000a17 	ldw	r4,40(sp)
   46a9c:	20c5883a 	add	r2,r4,r3
   46aa0:	10c007cc 	andi	r3,r2,31
   46aa4:	1800841e 	bne	r3,zero,46cb8 <_dtoa_r+0xaac>
   46aa8:	00800704 	movi	r2,28
   46aac:	d9000a17 	ldw	r4,40(sp)
   46ab0:	d9801117 	ldw	r6,68(sp)
   46ab4:	80a1883a 	add	r16,r16,r2
   46ab8:	2089883a 	add	r4,r4,r2
   46abc:	308d883a 	add	r6,r6,r2
   46ac0:	d9000a15 	stw	r4,40(sp)
   46ac4:	d9801115 	stw	r6,68(sp)
   46ac8:	d8801117 	ldw	r2,68(sp)
   46acc:	0080050e 	bge	zero,r2,46ae4 <_dtoa_r+0x8d8>
   46ad0:	d9400717 	ldw	r5,28(sp)
   46ad4:	d9001617 	ldw	r4,88(sp)
   46ad8:	100d883a 	mov	r6,r2
   46adc:	00499440 	call	49944 <__lshift>
   46ae0:	d8800715 	stw	r2,28(sp)
   46ae4:	d8c00a17 	ldw	r3,40(sp)
   46ae8:	00c0050e 	bge	zero,r3,46b00 <_dtoa_r+0x8f4>
   46aec:	d9001617 	ldw	r4,88(sp)
   46af0:	900b883a 	mov	r5,r18
   46af4:	180d883a 	mov	r6,r3
   46af8:	00499440 	call	49944 <__lshift>
   46afc:	1025883a 	mov	r18,r2
   46b00:	d9000c17 	ldw	r4,48(sp)
   46b04:	2005003a 	cmpeq	r2,r4,zero
   46b08:	10016f26 	beq	r2,zero,470c8 <_dtoa_r+0xebc>
   46b0c:	d9000f17 	ldw	r4,60(sp)
   46b10:	0102170e 	bge	zero,r4,47370 <_dtoa_r+0x1164>
   46b14:	d9800b17 	ldw	r6,44(sp)
   46b18:	3005003a 	cmpeq	r2,r6,zero
   46b1c:	1000881e 	bne	r2,zero,46d40 <_dtoa_r+0xb34>
   46b20:	0400050e 	bge	zero,r16,46b38 <_dtoa_r+0x92c>
   46b24:	d9001617 	ldw	r4,88(sp)
   46b28:	980b883a 	mov	r5,r19
   46b2c:	800d883a 	mov	r6,r16
   46b30:	00499440 	call	49944 <__lshift>
   46b34:	1027883a 	mov	r19,r2
   46b38:	8804c03a 	cmpne	r2,r17,zero
   46b3c:	1002541e 	bne	r2,zero,47490 <_dtoa_r+0x1284>
   46b40:	980b883a 	mov	r5,r19
   46b44:	dd800517 	ldw	r22,20(sp)
   46b48:	dcc00615 	stw	r19,24(sp)
   46b4c:	a700004c 	andi	fp,r20,1
   46b50:	2827883a 	mov	r19,r5
   46b54:	d9000717 	ldw	r4,28(sp)
   46b58:	900b883a 	mov	r5,r18
   46b5c:	0045fc80 	call	45fc8 <quorem>
   46b60:	d9000717 	ldw	r4,28(sp)
   46b64:	d9400617 	ldw	r5,24(sp)
   46b68:	1023883a 	mov	r17,r2
   46b6c:	8dc00c04 	addi	r23,r17,48
   46b70:	004915c0 	call	4915c <__mcmp>
   46b74:	d9001617 	ldw	r4,88(sp)
   46b78:	900b883a 	mov	r5,r18
   46b7c:	980d883a 	mov	r6,r19
   46b80:	1029883a 	mov	r20,r2
   46b84:	00497b80 	call	497b8 <__mdiff>
   46b88:	102b883a 	mov	r21,r2
   46b8c:	10800317 	ldw	r2,12(r2)
   46b90:	1001281e 	bne	r2,zero,47034 <_dtoa_r+0xe28>
   46b94:	d9000717 	ldw	r4,28(sp)
   46b98:	a80b883a 	mov	r5,r21
   46b9c:	004915c0 	call	4915c <__mcmp>
   46ba0:	d9001617 	ldw	r4,88(sp)
   46ba4:	1021883a 	mov	r16,r2
   46ba8:	a80b883a 	mov	r5,r21
   46bac:	00490000 	call	49000 <_Bfree>
   46bb0:	8000041e 	bne	r16,zero,46bc4 <_dtoa_r+0x9b8>
   46bb4:	d8801717 	ldw	r2,92(sp)
   46bb8:	1000021e 	bne	r2,zero,46bc4 <_dtoa_r+0x9b8>
   46bbc:	e004c03a 	cmpne	r2,fp,zero
   46bc0:	10011726 	beq	r2,zero,47020 <_dtoa_r+0xe14>
   46bc4:	a0010616 	blt	r20,zero,46fe0 <_dtoa_r+0xdd4>
   46bc8:	a000041e 	bne	r20,zero,46bdc <_dtoa_r+0x9d0>
   46bcc:	d8c01717 	ldw	r3,92(sp)
   46bd0:	1800021e 	bne	r3,zero,46bdc <_dtoa_r+0x9d0>
   46bd4:	e004c03a 	cmpne	r2,fp,zero
   46bd8:	10010126 	beq	r2,zero,46fe0 <_dtoa_r+0xdd4>
   46bdc:	04023d16 	blt	zero,r16,474d4 <_dtoa_r+0x12c8>
   46be0:	b5c00005 	stb	r23,0(r22)
   46be4:	d9800517 	ldw	r6,20(sp)
   46be8:	d9000f17 	ldw	r4,60(sp)
   46bec:	b5800044 	addi	r22,r22,1
   46bf0:	3105883a 	add	r2,r6,r4
   46bf4:	b0806526 	beq	r22,r2,46d8c <_dtoa_r+0xb80>
   46bf8:	d9400717 	ldw	r5,28(sp)
   46bfc:	d9001617 	ldw	r4,88(sp)
   46c00:	01800284 	movi	r6,10
   46c04:	000f883a 	mov	r7,zero
   46c08:	0049d200 	call	49d20 <__multadd>
   46c0c:	d8800715 	stw	r2,28(sp)
   46c10:	d8800617 	ldw	r2,24(sp)
   46c14:	14c10c26 	beq	r2,r19,47048 <_dtoa_r+0xe3c>
   46c18:	d9400617 	ldw	r5,24(sp)
   46c1c:	d9001617 	ldw	r4,88(sp)
   46c20:	01800284 	movi	r6,10
   46c24:	000f883a 	mov	r7,zero
   46c28:	0049d200 	call	49d20 <__multadd>
   46c2c:	d9001617 	ldw	r4,88(sp)
   46c30:	980b883a 	mov	r5,r19
   46c34:	01800284 	movi	r6,10
   46c38:	000f883a 	mov	r7,zero
   46c3c:	d8800615 	stw	r2,24(sp)
   46c40:	0049d200 	call	49d20 <__multadd>
   46c44:	1027883a 	mov	r19,r2
   46c48:	003fc206 	br	46b54 <_dtoa_r+0x948>
   46c4c:	2445c83a 	sub	r2,r4,r17
   46c50:	a088983a 	sll	r4,r20,r2
   46c54:	003e4b06 	br	46584 <_dtoa_r+0x378>
   46c58:	01bfffc4 	movi	r6,-1
   46c5c:	00800044 	movi	r2,1
   46c60:	d9800e15 	stw	r6,56(sp)
   46c64:	d9800f15 	stw	r6,60(sp)
   46c68:	d8800b15 	stw	r2,44(sp)
   46c6c:	d8c01617 	ldw	r3,88(sp)
   46c70:	008005c4 	movi	r2,23
   46c74:	18001115 	stw	zero,68(r3)
   46c78:	1580082e 	bgeu	r2,r22,46c9c <_dtoa_r+0xa90>
   46c7c:	00c00104 	movi	r3,4
   46c80:	0009883a 	mov	r4,zero
   46c84:	18c7883a 	add	r3,r3,r3
   46c88:	18800504 	addi	r2,r3,20
   46c8c:	21000044 	addi	r4,r4,1
   46c90:	b0bffc2e 	bgeu	r22,r2,46c84 <_dtoa_r+0xa78>
   46c94:	d9801617 	ldw	r6,88(sp)
   46c98:	31001115 	stw	r4,68(r6)
   46c9c:	dc000f17 	ldw	r16,60(sp)
   46ca0:	003e4b06 	br	465d0 <_dtoa_r+0x3c4>
   46ca4:	d9801717 	ldw	r6,92(sp)
   46ca8:	0023883a 	mov	r17,zero
   46cac:	31bfff04 	addi	r6,r6,-4
   46cb0:	d9801715 	stw	r6,92(sp)
   46cb4:	003df806 	br	46498 <_dtoa_r+0x28c>
   46cb8:	00800804 	movi	r2,32
   46cbc:	10c9c83a 	sub	r4,r2,r3
   46cc0:	00c00104 	movi	r3,4
   46cc4:	19005a16 	blt	r3,r4,46e30 <_dtoa_r+0xc24>
   46cc8:	008000c4 	movi	r2,3
   46ccc:	113f7e16 	blt	r2,r4,46ac8 <_dtoa_r+0x8bc>
   46cd0:	20800704 	addi	r2,r4,28
   46cd4:	003f7506 	br	46aac <_dtoa_r+0x8a0>
   46cd8:	d9801717 	ldw	r6,92(sp)
   46cdc:	00800044 	movi	r2,1
   46ce0:	1180a10e 	bge	r2,r6,46f68 <_dtoa_r+0xd5c>
   46ce4:	d9800f17 	ldw	r6,60(sp)
   46ce8:	d8c01017 	ldw	r3,64(sp)
   46cec:	30bfffc4 	addi	r2,r6,-1
   46cf0:	1881c616 	blt	r3,r2,4740c <_dtoa_r+0x1200>
   46cf4:	18a5c83a 	sub	r18,r3,r2
   46cf8:	d8800f17 	ldw	r2,60(sp)
   46cfc:	10026216 	blt	r2,zero,47688 <_dtoa_r+0x147c>
   46d00:	dc001117 	ldw	r16,68(sp)
   46d04:	1007883a 	mov	r3,r2
   46d08:	d9800a17 	ldw	r6,40(sp)
   46d0c:	d8801117 	ldw	r2,68(sp)
   46d10:	d9001617 	ldw	r4,88(sp)
   46d14:	30cd883a 	add	r6,r6,r3
   46d18:	10c5883a 	add	r2,r2,r3
   46d1c:	01400044 	movi	r5,1
   46d20:	d9800a15 	stw	r6,40(sp)
   46d24:	d8801115 	stw	r2,68(sp)
   46d28:	0049ce40 	call	49ce4 <__i2b>
   46d2c:	1027883a 	mov	r19,r2
   46d30:	003f2506 	br	469c8 <_dtoa_r+0x7bc>
   46d34:	00c00174 	movhi	r3,5
   46d38:	18cdb904 	addi	r3,r3,14052
   46d3c:	003d6706 	br	462dc <_dtoa_r+0xd0>
   46d40:	dd800517 	ldw	r22,20(sp)
   46d44:	04000044 	movi	r16,1
   46d48:	00000706 	br	46d68 <_dtoa_r+0xb5c>
   46d4c:	d9400717 	ldw	r5,28(sp)
   46d50:	d9001617 	ldw	r4,88(sp)
   46d54:	01800284 	movi	r6,10
   46d58:	000f883a 	mov	r7,zero
   46d5c:	0049d200 	call	49d20 <__multadd>
   46d60:	d8800715 	stw	r2,28(sp)
   46d64:	84000044 	addi	r16,r16,1
   46d68:	d9000717 	ldw	r4,28(sp)
   46d6c:	900b883a 	mov	r5,r18
   46d70:	0045fc80 	call	45fc8 <quorem>
   46d74:	15c00c04 	addi	r23,r2,48
   46d78:	b5c00005 	stb	r23,0(r22)
   46d7c:	d8c00f17 	ldw	r3,60(sp)
   46d80:	b5800044 	addi	r22,r22,1
   46d84:	80fff116 	blt	r16,r3,46d4c <_dtoa_r+0xb40>
   46d88:	d8000615 	stw	zero,24(sp)
   46d8c:	d9400717 	ldw	r5,28(sp)
   46d90:	d9001617 	ldw	r4,88(sp)
   46d94:	01800044 	movi	r6,1
   46d98:	00499440 	call	49944 <__lshift>
   46d9c:	1009883a 	mov	r4,r2
   46da0:	900b883a 	mov	r5,r18
   46da4:	d8800715 	stw	r2,28(sp)
   46da8:	004915c0 	call	4915c <__mcmp>
   46dac:	00803c0e 	bge	zero,r2,46ea0 <_dtoa_r+0xc94>
   46db0:	b009883a 	mov	r4,r22
   46db4:	213fffc4 	addi	r4,r4,-1
   46db8:	21400003 	ldbu	r5,0(r4)
   46dbc:	00800e44 	movi	r2,57
   46dc0:	28c03fcc 	andi	r3,r5,255
   46dc4:	18c0201c 	xori	r3,r3,128
   46dc8:	18ffe004 	addi	r3,r3,-128
   46dcc:	1881981e 	bne	r3,r2,47430 <_dtoa_r+0x1224>
   46dd0:	d9800517 	ldw	r6,20(sp)
   46dd4:	21bff71e 	bne	r4,r6,46db4 <_dtoa_r+0xba8>
   46dd8:	d8800d17 	ldw	r2,52(sp)
   46ddc:	37000044 	addi	fp,r6,1
   46de0:	10800044 	addi	r2,r2,1
   46de4:	d8800d15 	stw	r2,52(sp)
   46de8:	00800c44 	movi	r2,49
   46dec:	30800005 	stb	r2,0(r6)
   46df0:	d9001617 	ldw	r4,88(sp)
   46df4:	900b883a 	mov	r5,r18
   46df8:	00490000 	call	49000 <_Bfree>
   46dfc:	983ecd26 	beq	r19,zero,46934 <_dtoa_r+0x728>
   46e00:	d8c00617 	ldw	r3,24(sp)
   46e04:	18000426 	beq	r3,zero,46e18 <_dtoa_r+0xc0c>
   46e08:	1cc00326 	beq	r3,r19,46e18 <_dtoa_r+0xc0c>
   46e0c:	d9001617 	ldw	r4,88(sp)
   46e10:	180b883a 	mov	r5,r3
   46e14:	00490000 	call	49000 <_Bfree>
   46e18:	d9001617 	ldw	r4,88(sp)
   46e1c:	980b883a 	mov	r5,r19
   46e20:	00490000 	call	49000 <_Bfree>
   46e24:	003ec306 	br	46934 <_dtoa_r+0x728>
   46e28:	1805883a 	mov	r2,r3
   46e2c:	003eeb06 	br	469dc <_dtoa_r+0x7d0>
   46e30:	d9800a17 	ldw	r6,40(sp)
   46e34:	d8c01117 	ldw	r3,68(sp)
   46e38:	20bfff04 	addi	r2,r4,-4
   46e3c:	308d883a 	add	r6,r6,r2
   46e40:	1887883a 	add	r3,r3,r2
   46e44:	80a1883a 	add	r16,r16,r2
   46e48:	d9800a15 	stw	r6,40(sp)
   46e4c:	d8c01115 	stw	r3,68(sp)
   46e50:	003f1d06 	br	46ac8 <_dtoa_r+0x8bc>
   46e54:	a03f0c1e 	bne	r20,zero,46a88 <_dtoa_r+0x87c>
   46e58:	00800434 	movhi	r2,16
   46e5c:	10bfffc4 	addi	r2,r2,-1
   46e60:	a884703a 	and	r2,r21,r2
   46e64:	103f081e 	bne	r2,zero,46a88 <_dtoa_r+0x87c>
   46e68:	a89ffc2c 	andhi	r2,r21,32752
   46e6c:	103f0626 	beq	r2,zero,46a88 <_dtoa_r+0x87c>
   46e70:	d8c01117 	ldw	r3,68(sp)
   46e74:	d9000a17 	ldw	r4,40(sp)
   46e78:	18c00044 	addi	r3,r3,1
   46e7c:	21000044 	addi	r4,r4,1
   46e80:	d8c01115 	stw	r3,68(sp)
   46e84:	d9000a15 	stw	r4,40(sp)
   46e88:	003f0006 	br	46a8c <_dtoa_r+0x880>
   46e8c:	d9400717 	ldw	r5,28(sp)
   46e90:	d9001617 	ldw	r4,88(sp)
   46e94:	0049e4c0 	call	49e4c <__pow5mult>
   46e98:	d8800715 	stw	r2,28(sp)
   46e9c:	003eed06 	br	46a54 <_dtoa_r+0x848>
   46ea0:	1000021e 	bne	r2,zero,46eac <_dtoa_r+0xca0>
   46ea4:	b880004c 	andi	r2,r23,1
   46ea8:	103fc11e 	bne	r2,zero,46db0 <_dtoa_r+0xba4>
   46eac:	b5bfffc4 	addi	r22,r22,-1
   46eb0:	b0c00007 	ldb	r3,0(r22)
   46eb4:	00800c04 	movi	r2,48
   46eb8:	18bffc26 	beq	r3,r2,46eac <_dtoa_r+0xca0>
   46ebc:	b7000044 	addi	fp,r22,1
   46ec0:	003fcb06 	br	46df0 <_dtoa_r+0xbe4>
   46ec4:	d9800d17 	ldw	r6,52(sp)
   46ec8:	018fc83a 	sub	r7,zero,r6
   46ecc:	3801f726 	beq	r7,zero,476ac <_dtoa_r+0x14a0>
   46ed0:	398003cc 	andi	r6,r7,15
   46ed4:	300c90fa 	slli	r6,r6,3
   46ed8:	01400174 	movhi	r5,5
   46edc:	294e8104 	addi	r5,r5,14852
   46ee0:	d9001217 	ldw	r4,72(sp)
   46ee4:	314d883a 	add	r6,r6,r5
   46ee8:	30c00117 	ldw	r3,4(r6)
   46eec:	30800017 	ldw	r2,0(r6)
   46ef0:	d9401317 	ldw	r5,76(sp)
   46ef4:	3821d13a 	srai	r16,r7,4
   46ef8:	100d883a 	mov	r6,r2
   46efc:	180f883a 	mov	r7,r3
   46f00:	004eecc0 	call	4eecc <__muldf3>
   46f04:	1011883a 	mov	r8,r2
   46f08:	1813883a 	mov	r9,r3
   46f0c:	1029883a 	mov	r20,r2
   46f10:	182b883a 	mov	r21,r3
   46f14:	8001e526 	beq	r16,zero,476ac <_dtoa_r+0x14a0>
   46f18:	05800084 	movi	r22,2
   46f1c:	04400174 	movhi	r17,5
   46f20:	8c4eb304 	addi	r17,r17,15052
   46f24:	8080004c 	andi	r2,r16,1
   46f28:	1005003a 	cmpeq	r2,r2,zero
   46f2c:	1000081e 	bne	r2,zero,46f50 <_dtoa_r+0xd44>
   46f30:	89800017 	ldw	r6,0(r17)
   46f34:	89c00117 	ldw	r7,4(r17)
   46f38:	480b883a 	mov	r5,r9
   46f3c:	4009883a 	mov	r4,r8
   46f40:	004eecc0 	call	4eecc <__muldf3>
   46f44:	1011883a 	mov	r8,r2
   46f48:	b5800044 	addi	r22,r22,1
   46f4c:	1813883a 	mov	r9,r3
   46f50:	8021d07a 	srai	r16,r16,1
   46f54:	8c400204 	addi	r17,r17,8
   46f58:	803ff21e 	bne	r16,zero,46f24 <_dtoa_r+0xd18>
   46f5c:	4029883a 	mov	r20,r8
   46f60:	482b883a 	mov	r21,r9
   46f64:	003dca06 	br	46690 <_dtoa_r+0x484>
   46f68:	d9000817 	ldw	r4,32(sp)
   46f6c:	2005003a 	cmpeq	r2,r4,zero
   46f70:	1001f61e 	bne	r2,zero,4774c <_dtoa_r+0x1540>
   46f74:	dc001117 	ldw	r16,68(sp)
   46f78:	dc801017 	ldw	r18,64(sp)
   46f7c:	18c10cc4 	addi	r3,r3,1075
   46f80:	003f6106 	br	46d08 <_dtoa_r+0xafc>
   46f84:	d8000b15 	stw	zero,44(sp)
   46f88:	d9802617 	ldw	r6,152(sp)
   46f8c:	d8c00d17 	ldw	r3,52(sp)
   46f90:	30800044 	addi	r2,r6,1
   46f94:	18ad883a 	add	r22,r3,r2
   46f98:	b13fffc4 	addi	r4,r22,-1
   46f9c:	d9000e15 	stw	r4,56(sp)
   46fa0:	0581f60e 	bge	zero,r22,4777c <_dtoa_r+0x1570>
   46fa4:	dd800f15 	stw	r22,60(sp)
   46fa8:	003f3006 	br	46c6c <_dtoa_r+0xa60>
   46fac:	d8000b15 	stw	zero,44(sp)
   46fb0:	d9002617 	ldw	r4,152(sp)
   46fb4:	0101eb0e 	bge	zero,r4,47764 <_dtoa_r+0x1558>
   46fb8:	202d883a 	mov	r22,r4
   46fbc:	d9000e15 	stw	r4,56(sp)
   46fc0:	d9000f15 	stw	r4,60(sp)
   46fc4:	003f2906 	br	46c6c <_dtoa_r+0xa60>
   46fc8:	01800044 	movi	r6,1
   46fcc:	d9800b15 	stw	r6,44(sp)
   46fd0:	003ff706 	br	46fb0 <_dtoa_r+0xda4>
   46fd4:	01000044 	movi	r4,1
   46fd8:	d9000b15 	stw	r4,44(sp)
   46fdc:	003fea06 	br	46f88 <_dtoa_r+0xd7c>
   46fe0:	04000c0e 	bge	zero,r16,47014 <_dtoa_r+0xe08>
   46fe4:	d9400717 	ldw	r5,28(sp)
   46fe8:	d9001617 	ldw	r4,88(sp)
   46fec:	01800044 	movi	r6,1
   46ff0:	00499440 	call	49944 <__lshift>
   46ff4:	1009883a 	mov	r4,r2
   46ff8:	900b883a 	mov	r5,r18
   46ffc:	d8800715 	stw	r2,28(sp)
   47000:	004915c0 	call	4915c <__mcmp>
   47004:	0081e00e 	bge	zero,r2,47788 <_dtoa_r+0x157c>
   47008:	bdc00044 	addi	r23,r23,1
   4700c:	00800e84 	movi	r2,58
   47010:	b881a226 	beq	r23,r2,4769c <_dtoa_r+0x1490>
   47014:	b7000044 	addi	fp,r22,1
   47018:	b5c00005 	stb	r23,0(r22)
   4701c:	003f7406 	br	46df0 <_dtoa_r+0xbe4>
   47020:	00800e44 	movi	r2,57
   47024:	b8819d26 	beq	r23,r2,4769c <_dtoa_r+0x1490>
   47028:	053ffa0e 	bge	zero,r20,47014 <_dtoa_r+0xe08>
   4702c:	8dc00c44 	addi	r23,r17,49
   47030:	003ff806 	br	47014 <_dtoa_r+0xe08>
   47034:	d9001617 	ldw	r4,88(sp)
   47038:	a80b883a 	mov	r5,r21
   4703c:	04000044 	movi	r16,1
   47040:	00490000 	call	49000 <_Bfree>
   47044:	003edf06 	br	46bc4 <_dtoa_r+0x9b8>
   47048:	d9001617 	ldw	r4,88(sp)
   4704c:	980b883a 	mov	r5,r19
   47050:	01800284 	movi	r6,10
   47054:	000f883a 	mov	r7,zero
   47058:	0049d200 	call	49d20 <__multadd>
   4705c:	1027883a 	mov	r19,r2
   47060:	d8800615 	stw	r2,24(sp)
   47064:	003ebb06 	br	46b54 <_dtoa_r+0x948>
   47068:	d9801117 	ldw	r6,68(sp)
   4706c:	d8800d17 	ldw	r2,52(sp)
   47070:	d8000915 	stw	zero,36(sp)
   47074:	308dc83a 	sub	r6,r6,r2
   47078:	0087c83a 	sub	r3,zero,r2
   4707c:	d9801115 	stw	r6,68(sp)
   47080:	d8c01015 	stw	r3,64(sp)
   47084:	003cfe06 	br	46480 <_dtoa_r+0x274>
   47088:	018dc83a 	sub	r6,zero,r6
   4708c:	d9801115 	stw	r6,68(sp)
   47090:	d8000a15 	stw	zero,40(sp)
   47094:	003cf306 	br	46464 <_dtoa_r+0x258>
   47098:	d9000d17 	ldw	r4,52(sp)
   4709c:	004f8180 	call	4f818 <__floatsidf>
   470a0:	880b883a 	mov	r5,r17
   470a4:	8009883a 	mov	r4,r16
   470a8:	180f883a 	mov	r7,r3
   470ac:	100d883a 	mov	r6,r2
   470b0:	004f5700 	call	4f570 <__nedf2>
   470b4:	103ce126 	beq	r2,zero,4643c <_dtoa_r+0x230>
   470b8:	d9800d17 	ldw	r6,52(sp)
   470bc:	31bfffc4 	addi	r6,r6,-1
   470c0:	d9800d15 	stw	r6,52(sp)
   470c4:	003cdd06 	br	4643c <_dtoa_r+0x230>
   470c8:	d9000717 	ldw	r4,28(sp)
   470cc:	900b883a 	mov	r5,r18
   470d0:	004915c0 	call	4915c <__mcmp>
   470d4:	103e8d0e 	bge	r2,zero,46b0c <_dtoa_r+0x900>
   470d8:	d9400717 	ldw	r5,28(sp)
   470dc:	d9001617 	ldw	r4,88(sp)
   470e0:	01800284 	movi	r6,10
   470e4:	000f883a 	mov	r7,zero
   470e8:	0049d200 	call	49d20 <__multadd>
   470ec:	d9800d17 	ldw	r6,52(sp)
   470f0:	d8800715 	stw	r2,28(sp)
   470f4:	31bfffc4 	addi	r6,r6,-1
   470f8:	d9800d15 	stw	r6,52(sp)
   470fc:	b001a71e 	bne	r22,zero,4779c <_dtoa_r+0x1590>
   47100:	d8800e17 	ldw	r2,56(sp)
   47104:	d8800f15 	stw	r2,60(sp)
   47108:	003e8006 	br	46b0c <_dtoa_r+0x900>
   4710c:	90800417 	ldw	r2,16(r18)
   47110:	1085883a 	add	r2,r2,r2
   47114:	1085883a 	add	r2,r2,r2
   47118:	1485883a 	add	r2,r2,r18
   4711c:	11000417 	ldw	r4,16(r2)
   47120:	00490280 	call	49028 <__hi0bits>
   47124:	00c00804 	movi	r3,32
   47128:	1887c83a 	sub	r3,r3,r2
   4712c:	003e5a06 	br	46a98 <_dtoa_r+0x88c>
   47130:	d9400717 	ldw	r5,28(sp)
   47134:	d9801017 	ldw	r6,64(sp)
   47138:	d9001617 	ldw	r4,88(sp)
   4713c:	0049e4c0 	call	49e4c <__pow5mult>
   47140:	d8800715 	stw	r2,28(sp)
   47144:	003e4306 	br	46a54 <_dtoa_r+0x848>
   47148:	d9800f17 	ldw	r6,60(sp)
   4714c:	d8800d17 	ldw	r2,52(sp)
   47150:	d9800315 	stw	r6,12(sp)
   47154:	d8800415 	stw	r2,16(sp)
   47158:	d8c00b17 	ldw	r3,44(sp)
   4715c:	1805003a 	cmpeq	r2,r3,zero
   47160:	1000e21e 	bne	r2,zero,474ec <_dtoa_r+0x12e0>
   47164:	d9000317 	ldw	r4,12(sp)
   47168:	0005883a 	mov	r2,zero
   4716c:	00cff834 	movhi	r3,16352
   47170:	200c90fa 	slli	r6,r4,3
   47174:	01000174 	movhi	r4,5
   47178:	210e8104 	addi	r4,r4,14852
   4717c:	180b883a 	mov	r5,r3
   47180:	310d883a 	add	r6,r6,r4
   47184:	327fff17 	ldw	r9,-4(r6)
   47188:	323ffe17 	ldw	r8,-8(r6)
   4718c:	1009883a 	mov	r4,r2
   47190:	480f883a 	mov	r7,r9
   47194:	400d883a 	mov	r6,r8
   47198:	004f2900 	call	4f290 <__divdf3>
   4719c:	180b883a 	mov	r5,r3
   471a0:	b00d883a 	mov	r6,r22
   471a4:	b80f883a 	mov	r7,r23
   471a8:	1009883a 	mov	r4,r2
   471ac:	004edd80 	call	4edd8 <__subdf3>
   471b0:	a80b883a 	mov	r5,r21
   471b4:	a009883a 	mov	r4,r20
   471b8:	d8c01915 	stw	r3,100(sp)
   471bc:	d8801815 	stw	r2,96(sp)
   471c0:	004f9100 	call	4f910 <__fixdfsi>
   471c4:	1009883a 	mov	r4,r2
   471c8:	1027883a 	mov	r19,r2
   471cc:	004f8180 	call	4f818 <__floatsidf>
   471d0:	a80b883a 	mov	r5,r21
   471d4:	a009883a 	mov	r4,r20
   471d8:	180f883a 	mov	r7,r3
   471dc:	100d883a 	mov	r6,r2
   471e0:	004edd80 	call	4edd8 <__subdf3>
   471e4:	d9801817 	ldw	r6,96(sp)
   471e8:	1823883a 	mov	r17,r3
   471ec:	d8801415 	stw	r2,80(sp)
   471f0:	302d883a 	mov	r22,r6
   471f4:	d9800517 	ldw	r6,20(sp)
   471f8:	9cc00c04 	addi	r19,r19,48
   471fc:	dc401515 	stw	r17,84(sp)
   47200:	d8c01917 	ldw	r3,100(sp)
   47204:	34c00005 	stb	r19,0(r6)
   47208:	d8800517 	ldw	r2,20(sp)
   4720c:	d9401917 	ldw	r5,100(sp)
   47210:	d9801417 	ldw	r6,80(sp)
   47214:	b009883a 	mov	r4,r22
   47218:	880f883a 	mov	r7,r17
   4721c:	182f883a 	mov	r23,r3
   47220:	17000044 	addi	fp,r2,1
   47224:	004f5f80 	call	4f5f8 <__gtdf2>
   47228:	00804e16 	blt	zero,r2,47364 <_dtoa_r+0x1158>
   4722c:	d9801417 	ldw	r6,80(sp)
   47230:	0005883a 	mov	r2,zero
   47234:	00cffc34 	movhi	r3,16368
   47238:	180b883a 	mov	r5,r3
   4723c:	880f883a 	mov	r7,r17
   47240:	1009883a 	mov	r4,r2
   47244:	004edd80 	call	4edd8 <__subdf3>
   47248:	d9401917 	ldw	r5,100(sp)
   4724c:	180f883a 	mov	r7,r3
   47250:	b009883a 	mov	r4,r22
   47254:	100d883a 	mov	r6,r2
   47258:	004f5f80 	call	4f5f8 <__gtdf2>
   4725c:	00bda216 	blt	zero,r2,468e8 <_dtoa_r+0x6dc>
   47260:	d8c00317 	ldw	r3,12(sp)
   47264:	00800044 	movi	r2,1
   47268:	10c01216 	blt	r2,r3,472b4 <_dtoa_r+0x10a8>
   4726c:	003d4506 	br	46784 <_dtoa_r+0x578>
   47270:	d9801417 	ldw	r6,80(sp)
   47274:	0005883a 	mov	r2,zero
   47278:	00cffc34 	movhi	r3,16368
   4727c:	180b883a 	mov	r5,r3
   47280:	880f883a 	mov	r7,r17
   47284:	1009883a 	mov	r4,r2
   47288:	004edd80 	call	4edd8 <__subdf3>
   4728c:	d9c01b17 	ldw	r7,108(sp)
   47290:	180b883a 	mov	r5,r3
   47294:	1009883a 	mov	r4,r2
   47298:	b00d883a 	mov	r6,r22
   4729c:	004f7080 	call	4f708 <__ltdf2>
   472a0:	103d9116 	blt	r2,zero,468e8 <_dtoa_r+0x6dc>
   472a4:	d9800517 	ldw	r6,20(sp)
   472a8:	d9000317 	ldw	r4,12(sp)
   472ac:	3105883a 	add	r2,r6,r4
   472b0:	e0bd3426 	beq	fp,r2,46784 <_dtoa_r+0x578>
   472b4:	04500934 	movhi	r17,16420
   472b8:	0021883a 	mov	r16,zero
   472bc:	b80b883a 	mov	r5,r23
   472c0:	b009883a 	mov	r4,r22
   472c4:	800d883a 	mov	r6,r16
   472c8:	880f883a 	mov	r7,r17
   472cc:	004eecc0 	call	4eecc <__muldf3>
   472d0:	d9401517 	ldw	r5,84(sp)
   472d4:	d9001417 	ldw	r4,80(sp)
   472d8:	880f883a 	mov	r7,r17
   472dc:	000d883a 	mov	r6,zero
   472e0:	d8801a15 	stw	r2,104(sp)
   472e4:	d8c01b15 	stw	r3,108(sp)
   472e8:	004eecc0 	call	4eecc <__muldf3>
   472ec:	180b883a 	mov	r5,r3
   472f0:	1009883a 	mov	r4,r2
   472f4:	1823883a 	mov	r17,r3
   472f8:	1021883a 	mov	r16,r2
   472fc:	004f9100 	call	4f910 <__fixdfsi>
   47300:	1009883a 	mov	r4,r2
   47304:	102b883a 	mov	r21,r2
   47308:	004f8180 	call	4f818 <__floatsidf>
   4730c:	880b883a 	mov	r5,r17
   47310:	8009883a 	mov	r4,r16
   47314:	180f883a 	mov	r7,r3
   47318:	100d883a 	mov	r6,r2
   4731c:	004edd80 	call	4edd8 <__subdf3>
   47320:	1021883a 	mov	r16,r2
   47324:	d9001b17 	ldw	r4,108(sp)
   47328:	1823883a 	mov	r17,r3
   4732c:	dc001415 	stw	r16,80(sp)
   47330:	ad400c04 	addi	r21,r21,48
   47334:	dc401515 	stw	r17,84(sp)
   47338:	d8801a17 	ldw	r2,104(sp)
   4733c:	e5400005 	stb	r21,0(fp)
   47340:	202f883a 	mov	r23,r4
   47344:	d9c01b17 	ldw	r7,108(sp)
   47348:	d9001417 	ldw	r4,80(sp)
   4734c:	880b883a 	mov	r5,r17
   47350:	100d883a 	mov	r6,r2
   47354:	102d883a 	mov	r22,r2
   47358:	e7000044 	addi	fp,fp,1
   4735c:	004f7080 	call	4f708 <__ltdf2>
   47360:	103fc30e 	bge	r2,zero,47270 <_dtoa_r+0x1064>
   47364:	d9000417 	ldw	r4,16(sp)
   47368:	d9000d15 	stw	r4,52(sp)
   4736c:	003d7106 	br	46934 <_dtoa_r+0x728>
   47370:	d9801717 	ldw	r6,92(sp)
   47374:	00800084 	movi	r2,2
   47378:	11bde60e 	bge	r2,r6,46b14 <_dtoa_r+0x908>
   4737c:	203cfb1e 	bne	r4,zero,4676c <_dtoa_r+0x560>
   47380:	d9001617 	ldw	r4,88(sp)
   47384:	900b883a 	mov	r5,r18
   47388:	01800144 	movi	r6,5
   4738c:	000f883a 	mov	r7,zero
   47390:	0049d200 	call	49d20 <__multadd>
   47394:	d9000717 	ldw	r4,28(sp)
   47398:	100b883a 	mov	r5,r2
   4739c:	1025883a 	mov	r18,r2
   473a0:	004915c0 	call	4915c <__mcmp>
   473a4:	00bcf10e 	bge	zero,r2,4676c <_dtoa_r+0x560>
   473a8:	d8c00d17 	ldw	r3,52(sp)
   473ac:	d9000517 	ldw	r4,20(sp)
   473b0:	d8000615 	stw	zero,24(sp)
   473b4:	18c00044 	addi	r3,r3,1
   473b8:	d8c00d15 	stw	r3,52(sp)
   473bc:	00800c44 	movi	r2,49
   473c0:	27000044 	addi	fp,r4,1
   473c4:	20800005 	stb	r2,0(r4)
   473c8:	003e8906 	br	46df0 <_dtoa_r+0xbe4>
   473cc:	d8c00517 	ldw	r3,20(sp)
   473d0:	003bc206 	br	462dc <_dtoa_r+0xd0>
   473d4:	01800174 	movhi	r6,5
   473d8:	318eb304 	addi	r6,r6,15052
   473dc:	30c00917 	ldw	r3,36(r6)
   473e0:	30800817 	ldw	r2,32(r6)
   473e4:	d9001217 	ldw	r4,72(sp)
   473e8:	d9401317 	ldw	r5,76(sp)
   473ec:	180f883a 	mov	r7,r3
   473f0:	100d883a 	mov	r6,r2
   473f4:	004f2900 	call	4f290 <__divdf3>
   473f8:	948003cc 	andi	r18,r18,15
   473fc:	058000c4 	movi	r22,3
   47400:	1029883a 	mov	r20,r2
   47404:	182b883a 	mov	r21,r3
   47408:	003c8906 	br	46630 <_dtoa_r+0x424>
   4740c:	d9001017 	ldw	r4,64(sp)
   47410:	d9800917 	ldw	r6,36(sp)
   47414:	0025883a 	mov	r18,zero
   47418:	1105c83a 	sub	r2,r2,r4
   4741c:	2089883a 	add	r4,r4,r2
   47420:	308d883a 	add	r6,r6,r2
   47424:	d9001015 	stw	r4,64(sp)
   47428:	d9800915 	stw	r6,36(sp)
   4742c:	003e3206 	br	46cf8 <_dtoa_r+0xaec>
   47430:	28800044 	addi	r2,r5,1
   47434:	27000044 	addi	fp,r4,1
   47438:	20800005 	stb	r2,0(r4)
   4743c:	003e6c06 	br	46df0 <_dtoa_r+0xbe4>
   47440:	d8800f17 	ldw	r2,60(sp)
   47444:	00bce016 	blt	zero,r2,467c8 <_dtoa_r+0x5bc>
   47448:	d9800f17 	ldw	r6,60(sp)
   4744c:	303cc51e 	bne	r6,zero,46764 <_dtoa_r+0x558>
   47450:	0005883a 	mov	r2,zero
   47454:	00d00534 	movhi	r3,16404
   47458:	980b883a 	mov	r5,r19
   4745c:	180f883a 	mov	r7,r3
   47460:	9009883a 	mov	r4,r18
   47464:	100d883a 	mov	r6,r2
   47468:	004eecc0 	call	4eecc <__muldf3>
   4746c:	180b883a 	mov	r5,r3
   47470:	a80f883a 	mov	r7,r21
   47474:	1009883a 	mov	r4,r2
   47478:	a00d883a 	mov	r6,r20
   4747c:	004f6800 	call	4f680 <__gedf2>
   47480:	103cb80e 	bge	r2,zero,46764 <_dtoa_r+0x558>
   47484:	0027883a 	mov	r19,zero
   47488:	0025883a 	mov	r18,zero
   4748c:	003fc606 	br	473a8 <_dtoa_r+0x119c>
   47490:	99400117 	ldw	r5,4(r19)
   47494:	d9001617 	ldw	r4,88(sp)
   47498:	00495800 	call	49580 <_Balloc>
   4749c:	99800417 	ldw	r6,16(r19)
   474a0:	11000304 	addi	r4,r2,12
   474a4:	99400304 	addi	r5,r19,12
   474a8:	318d883a 	add	r6,r6,r6
   474ac:	318d883a 	add	r6,r6,r6
   474b0:	31800204 	addi	r6,r6,8
   474b4:	1023883a 	mov	r17,r2
   474b8:	0048de80 	call	48de8 <memcpy>
   474bc:	d9001617 	ldw	r4,88(sp)
   474c0:	880b883a 	mov	r5,r17
   474c4:	01800044 	movi	r6,1
   474c8:	00499440 	call	49944 <__lshift>
   474cc:	100b883a 	mov	r5,r2
   474d0:	003d9c06 	br	46b44 <_dtoa_r+0x938>
   474d4:	00800e44 	movi	r2,57
   474d8:	b8807026 	beq	r23,r2,4769c <_dtoa_r+0x1490>
   474dc:	b8800044 	addi	r2,r23,1
   474e0:	b7000044 	addi	fp,r22,1
   474e4:	b0800005 	stb	r2,0(r22)
   474e8:	003e4106 	br	46df0 <_dtoa_r+0xbe4>
   474ec:	d8800317 	ldw	r2,12(sp)
   474f0:	01800174 	movhi	r6,5
   474f4:	318e8104 	addi	r6,r6,14852
   474f8:	b009883a 	mov	r4,r22
   474fc:	100e90fa 	slli	r7,r2,3
   47500:	b80b883a 	mov	r5,r23
   47504:	398f883a 	add	r7,r7,r6
   47508:	38bffe17 	ldw	r2,-8(r7)
   4750c:	d9800517 	ldw	r6,20(sp)
   47510:	38ffff17 	ldw	r3,-4(r7)
   47514:	37000044 	addi	fp,r6,1
   47518:	180f883a 	mov	r7,r3
   4751c:	100d883a 	mov	r6,r2
   47520:	004eecc0 	call	4eecc <__muldf3>
   47524:	a80b883a 	mov	r5,r21
   47528:	a009883a 	mov	r4,r20
   4752c:	182f883a 	mov	r23,r3
   47530:	102d883a 	mov	r22,r2
   47534:	004f9100 	call	4f910 <__fixdfsi>
   47538:	1009883a 	mov	r4,r2
   4753c:	1027883a 	mov	r19,r2
   47540:	004f8180 	call	4f818 <__floatsidf>
   47544:	a80b883a 	mov	r5,r21
   47548:	a009883a 	mov	r4,r20
   4754c:	180f883a 	mov	r7,r3
   47550:	100d883a 	mov	r6,r2
   47554:	004edd80 	call	4edd8 <__subdf3>
   47558:	180b883a 	mov	r5,r3
   4755c:	d8c00517 	ldw	r3,20(sp)
   47560:	9cc00c04 	addi	r19,r19,48
   47564:	1009883a 	mov	r4,r2
   47568:	1cc00005 	stb	r19,0(r3)
   4756c:	2021883a 	mov	r16,r4
   47570:	d9000317 	ldw	r4,12(sp)
   47574:	00800044 	movi	r2,1
   47578:	2823883a 	mov	r17,r5
   4757c:	20802226 	beq	r4,r2,47608 <_dtoa_r+0x13fc>
   47580:	1029883a 	mov	r20,r2
   47584:	0005883a 	mov	r2,zero
   47588:	00d00934 	movhi	r3,16420
   4758c:	180f883a 	mov	r7,r3
   47590:	100d883a 	mov	r6,r2
   47594:	880b883a 	mov	r5,r17
   47598:	8009883a 	mov	r4,r16
   4759c:	004eecc0 	call	4eecc <__muldf3>
   475a0:	180b883a 	mov	r5,r3
   475a4:	1009883a 	mov	r4,r2
   475a8:	1823883a 	mov	r17,r3
   475ac:	1021883a 	mov	r16,r2
   475b0:	004f9100 	call	4f910 <__fixdfsi>
   475b4:	1009883a 	mov	r4,r2
   475b8:	102b883a 	mov	r21,r2
   475bc:	004f8180 	call	4f818 <__floatsidf>
   475c0:	880b883a 	mov	r5,r17
   475c4:	8009883a 	mov	r4,r16
   475c8:	180f883a 	mov	r7,r3
   475cc:	100d883a 	mov	r6,r2
   475d0:	004edd80 	call	4edd8 <__subdf3>
   475d4:	180b883a 	mov	r5,r3
   475d8:	d8c00517 	ldw	r3,20(sp)
   475dc:	1009883a 	mov	r4,r2
   475e0:	ad400c04 	addi	r21,r21,48
   475e4:	1d05883a 	add	r2,r3,r20
   475e8:	15400005 	stb	r21,0(r2)
   475ec:	2021883a 	mov	r16,r4
   475f0:	d9000317 	ldw	r4,12(sp)
   475f4:	a5000044 	addi	r20,r20,1
   475f8:	2823883a 	mov	r17,r5
   475fc:	a13fe11e 	bne	r20,r4,47584 <_dtoa_r+0x1378>
   47600:	e505883a 	add	r2,fp,r20
   47604:	173fffc4 	addi	fp,r2,-1
   47608:	0025883a 	mov	r18,zero
   4760c:	04cff834 	movhi	r19,16352
   47610:	b009883a 	mov	r4,r22
   47614:	b80b883a 	mov	r5,r23
   47618:	900d883a 	mov	r6,r18
   4761c:	980f883a 	mov	r7,r19
   47620:	004ee580 	call	4ee58 <__adddf3>
   47624:	180b883a 	mov	r5,r3
   47628:	1009883a 	mov	r4,r2
   4762c:	800d883a 	mov	r6,r16
   47630:	880f883a 	mov	r7,r17
   47634:	004f7080 	call	4f708 <__ltdf2>
   47638:	103cab16 	blt	r2,zero,468e8 <_dtoa_r+0x6dc>
   4763c:	0009883a 	mov	r4,zero
   47640:	980b883a 	mov	r5,r19
   47644:	b80f883a 	mov	r7,r23
   47648:	b00d883a 	mov	r6,r22
   4764c:	004edd80 	call	4edd8 <__subdf3>
   47650:	180b883a 	mov	r5,r3
   47654:	880f883a 	mov	r7,r17
   47658:	1009883a 	mov	r4,r2
   4765c:	800d883a 	mov	r6,r16
   47660:	004f5f80 	call	4f5f8 <__gtdf2>
   47664:	00bc470e 	bge	zero,r2,46784 <_dtoa_r+0x578>
   47668:	00c00c04 	movi	r3,48
   4766c:	e73fffc4 	addi	fp,fp,-1
   47670:	e0800007 	ldb	r2,0(fp)
   47674:	10fffd26 	beq	r2,r3,4766c <_dtoa_r+0x1460>
   47678:	d9800417 	ldw	r6,16(sp)
   4767c:	e7000044 	addi	fp,fp,1
   47680:	d9800d15 	stw	r6,52(sp)
   47684:	003cab06 	br	46934 <_dtoa_r+0x728>
   47688:	d8c00f17 	ldw	r3,60(sp)
   4768c:	d9001117 	ldw	r4,68(sp)
   47690:	20e1c83a 	sub	r16,r4,r3
   47694:	0007883a 	mov	r3,zero
   47698:	003d9b06 	br	46d08 <_dtoa_r+0xafc>
   4769c:	00800e44 	movi	r2,57
   476a0:	b0800005 	stb	r2,0(r22)
   476a4:	b5800044 	addi	r22,r22,1
   476a8:	003dc106 	br	46db0 <_dtoa_r+0xba4>
   476ac:	05800084 	movi	r22,2
   476b0:	003bf706 	br	46690 <_dtoa_r+0x484>
   476b4:	d9000f17 	ldw	r4,60(sp)
   476b8:	013c000e 	bge	zero,r4,466bc <_dtoa_r+0x4b0>
   476bc:	d9800e17 	ldw	r6,56(sp)
   476c0:	01bc300e 	bge	zero,r6,46784 <_dtoa_r+0x578>
   476c4:	0005883a 	mov	r2,zero
   476c8:	00d00934 	movhi	r3,16420
   476cc:	a80b883a 	mov	r5,r21
   476d0:	180f883a 	mov	r7,r3
   476d4:	a009883a 	mov	r4,r20
   476d8:	100d883a 	mov	r6,r2
   476dc:	004eecc0 	call	4eecc <__muldf3>
   476e0:	b1000044 	addi	r4,r22,1
   476e4:	1021883a 	mov	r16,r2
   476e8:	1823883a 	mov	r17,r3
   476ec:	004f8180 	call	4f818 <__floatsidf>
   476f0:	880b883a 	mov	r5,r17
   476f4:	8009883a 	mov	r4,r16
   476f8:	180f883a 	mov	r7,r3
   476fc:	100d883a 	mov	r6,r2
   47700:	004eecc0 	call	4eecc <__muldf3>
   47704:	0011883a 	mov	r8,zero
   47708:	02500734 	movhi	r9,16412
   4770c:	180b883a 	mov	r5,r3
   47710:	480f883a 	mov	r7,r9
   47714:	1009883a 	mov	r4,r2
   47718:	400d883a 	mov	r6,r8
   4771c:	004ee580 	call	4ee58 <__adddf3>
   47720:	102d883a 	mov	r22,r2
   47724:	00bf3034 	movhi	r2,64704
   47728:	10ef883a 	add	r23,r2,r3
   4772c:	d8800d17 	ldw	r2,52(sp)
   47730:	d8c00e17 	ldw	r3,56(sp)
   47734:	8029883a 	mov	r20,r16
   47738:	10bfffc4 	addi	r2,r2,-1
   4773c:	882b883a 	mov	r21,r17
   47740:	d8800415 	stw	r2,16(sp)
   47744:	d8c00315 	stw	r3,12(sp)
   47748:	003e8306 	br	47158 <_dtoa_r+0xf4c>
   4774c:	d8800117 	ldw	r2,4(sp)
   47750:	dc001117 	ldw	r16,68(sp)
   47754:	dc801017 	ldw	r18,64(sp)
   47758:	00c00d84 	movi	r3,54
   4775c:	1887c83a 	sub	r3,r3,r2
   47760:	003d6906 	br	46d08 <_dtoa_r+0xafc>
   47764:	01800044 	movi	r6,1
   47768:	3021883a 	mov	r16,r6
   4776c:	d9800f15 	stw	r6,60(sp)
   47770:	d9802615 	stw	r6,152(sp)
   47774:	d9800e15 	stw	r6,56(sp)
   47778:	003b9306 	br	465c8 <_dtoa_r+0x3bc>
   4777c:	b021883a 	mov	r16,r22
   47780:	dd800f15 	stw	r22,60(sp)
   47784:	003b9006 	br	465c8 <_dtoa_r+0x3bc>
   47788:	103e221e 	bne	r2,zero,47014 <_dtoa_r+0xe08>
   4778c:	b880004c 	andi	r2,r23,1
   47790:	1005003a 	cmpeq	r2,r2,zero
   47794:	103e1f1e 	bne	r2,zero,47014 <_dtoa_r+0xe08>
   47798:	003e1b06 	br	47008 <_dtoa_r+0xdfc>
   4779c:	d9001617 	ldw	r4,88(sp)
   477a0:	980b883a 	mov	r5,r19
   477a4:	01800284 	movi	r6,10
   477a8:	000f883a 	mov	r7,zero
   477ac:	0049d200 	call	49d20 <__multadd>
   477b0:	d8c00e17 	ldw	r3,56(sp)
   477b4:	1027883a 	mov	r19,r2
   477b8:	d8c00f15 	stw	r3,60(sp)
   477bc:	003cd306 	br	46b0c <_dtoa_r+0x900>

000477c0 <_fflush_r>:
   477c0:	defffb04 	addi	sp,sp,-20
   477c4:	dcc00315 	stw	r19,12(sp)
   477c8:	dc800215 	stw	r18,8(sp)
   477cc:	dfc00415 	stw	ra,16(sp)
   477d0:	dc400115 	stw	r17,4(sp)
   477d4:	dc000015 	stw	r16,0(sp)
   477d8:	2027883a 	mov	r19,r4
   477dc:	2825883a 	mov	r18,r5
   477e0:	20000226 	beq	r4,zero,477ec <_fflush_r+0x2c>
   477e4:	20800e17 	ldw	r2,56(r4)
   477e8:	10005626 	beq	r2,zero,47944 <_fflush_r+0x184>
   477ec:	9100030b 	ldhu	r4,12(r18)
   477f0:	20ffffcc 	andi	r3,r4,65535
   477f4:	18e0001c 	xori	r3,r3,32768
   477f8:	18e00004 	addi	r3,r3,-32768
   477fc:	1880020c 	andi	r2,r3,8
   47800:	1000261e 	bne	r2,zero,4789c <_fflush_r+0xdc>
   47804:	90c00117 	ldw	r3,4(r18)
   47808:	20820014 	ori	r2,r4,2048
   4780c:	9080030d 	sth	r2,12(r18)
   47810:	1009883a 	mov	r4,r2
   47814:	00c0400e 	bge	zero,r3,47918 <_fflush_r+0x158>
   47818:	92000a17 	ldw	r8,40(r18)
   4781c:	40004026 	beq	r8,zero,47920 <_fflush_r+0x160>
   47820:	2084000c 	andi	r2,r4,4096
   47824:	10005326 	beq	r2,zero,47974 <_fflush_r+0x1b4>
   47828:	94001417 	ldw	r16,80(r18)
   4782c:	9080030b 	ldhu	r2,12(r18)
   47830:	1080010c 	andi	r2,r2,4
   47834:	1000481e 	bne	r2,zero,47958 <_fflush_r+0x198>
   47838:	91400717 	ldw	r5,28(r18)
   4783c:	9809883a 	mov	r4,r19
   47840:	800d883a 	mov	r6,r16
   47844:	000f883a 	mov	r7,zero
   47848:	403ee83a 	callr	r8
   4784c:	8080261e 	bne	r16,r2,478e8 <_fflush_r+0x128>
   47850:	9080030b 	ldhu	r2,12(r18)
   47854:	91000417 	ldw	r4,16(r18)
   47858:	90000115 	stw	zero,4(r18)
   4785c:	10bdffcc 	andi	r2,r2,63487
   47860:	10ffffcc 	andi	r3,r2,65535
   47864:	18c4000c 	andi	r3,r3,4096
   47868:	9080030d 	sth	r2,12(r18)
   4786c:	91000015 	stw	r4,0(r18)
   47870:	18002b26 	beq	r3,zero,47920 <_fflush_r+0x160>
   47874:	0007883a 	mov	r3,zero
   47878:	1805883a 	mov	r2,r3
   4787c:	94001415 	stw	r16,80(r18)
   47880:	dfc00417 	ldw	ra,16(sp)
   47884:	dcc00317 	ldw	r19,12(sp)
   47888:	dc800217 	ldw	r18,8(sp)
   4788c:	dc400117 	ldw	r17,4(sp)
   47890:	dc000017 	ldw	r16,0(sp)
   47894:	dec00504 	addi	sp,sp,20
   47898:	f800283a 	ret
   4789c:	94400417 	ldw	r17,16(r18)
   478a0:	88001f26 	beq	r17,zero,47920 <_fflush_r+0x160>
   478a4:	90800017 	ldw	r2,0(r18)
   478a8:	18c000cc 	andi	r3,r3,3
   478ac:	94400015 	stw	r17,0(r18)
   478b0:	1461c83a 	sub	r16,r2,r17
   478b4:	18002526 	beq	r3,zero,4794c <_fflush_r+0x18c>
   478b8:	0005883a 	mov	r2,zero
   478bc:	90800215 	stw	r2,8(r18)
   478c0:	0400170e 	bge	zero,r16,47920 <_fflush_r+0x160>
   478c4:	90c00917 	ldw	r3,36(r18)
   478c8:	91400717 	ldw	r5,28(r18)
   478cc:	880d883a 	mov	r6,r17
   478d0:	800f883a 	mov	r7,r16
   478d4:	9809883a 	mov	r4,r19
   478d8:	183ee83a 	callr	r3
   478dc:	88a3883a 	add	r17,r17,r2
   478e0:	80a1c83a 	sub	r16,r16,r2
   478e4:	00bff616 	blt	zero,r2,478c0 <_fflush_r+0x100>
   478e8:	9080030b 	ldhu	r2,12(r18)
   478ec:	00ffffc4 	movi	r3,-1
   478f0:	10801014 	ori	r2,r2,64
   478f4:	9080030d 	sth	r2,12(r18)
   478f8:	1805883a 	mov	r2,r3
   478fc:	dfc00417 	ldw	ra,16(sp)
   47900:	dcc00317 	ldw	r19,12(sp)
   47904:	dc800217 	ldw	r18,8(sp)
   47908:	dc400117 	ldw	r17,4(sp)
   4790c:	dc000017 	ldw	r16,0(sp)
   47910:	dec00504 	addi	sp,sp,20
   47914:	f800283a 	ret
   47918:	90800f17 	ldw	r2,60(r18)
   4791c:	00bfbe16 	blt	zero,r2,47818 <_fflush_r+0x58>
   47920:	0007883a 	mov	r3,zero
   47924:	1805883a 	mov	r2,r3
   47928:	dfc00417 	ldw	ra,16(sp)
   4792c:	dcc00317 	ldw	r19,12(sp)
   47930:	dc800217 	ldw	r18,8(sp)
   47934:	dc400117 	ldw	r17,4(sp)
   47938:	dc000017 	ldw	r16,0(sp)
   4793c:	dec00504 	addi	sp,sp,20
   47940:	f800283a 	ret
   47944:	0047a580 	call	47a58 <__sinit>
   47948:	003fa806 	br	477ec <_fflush_r+0x2c>
   4794c:	90800517 	ldw	r2,20(r18)
   47950:	90800215 	stw	r2,8(r18)
   47954:	003fda06 	br	478c0 <_fflush_r+0x100>
   47958:	90800117 	ldw	r2,4(r18)
   4795c:	90c00c17 	ldw	r3,48(r18)
   47960:	80a1c83a 	sub	r16,r16,r2
   47964:	183fb426 	beq	r3,zero,47838 <_fflush_r+0x78>
   47968:	90800f17 	ldw	r2,60(r18)
   4796c:	80a1c83a 	sub	r16,r16,r2
   47970:	003fb106 	br	47838 <_fflush_r+0x78>
   47974:	91400717 	ldw	r5,28(r18)
   47978:	9809883a 	mov	r4,r19
   4797c:	000d883a 	mov	r6,zero
   47980:	01c00044 	movi	r7,1
   47984:	403ee83a 	callr	r8
   47988:	1021883a 	mov	r16,r2
   4798c:	00bfffc4 	movi	r2,-1
   47990:	80800226 	beq	r16,r2,4799c <_fflush_r+0x1dc>
   47994:	92000a17 	ldw	r8,40(r18)
   47998:	003fa406 	br	4782c <_fflush_r+0x6c>
   4799c:	98c00017 	ldw	r3,0(r19)
   479a0:	00800744 	movi	r2,29
   479a4:	18bfde26 	beq	r3,r2,47920 <_fflush_r+0x160>
   479a8:	9080030b 	ldhu	r2,12(r18)
   479ac:	8007883a 	mov	r3,r16
   479b0:	10801014 	ori	r2,r2,64
   479b4:	9080030d 	sth	r2,12(r18)
   479b8:	003fcf06 	br	478f8 <_fflush_r+0x138>

000479bc <fflush>:
   479bc:	01400134 	movhi	r5,4
   479c0:	295df004 	addi	r5,r5,30656
   479c4:	2007883a 	mov	r3,r4
   479c8:	20000526 	beq	r4,zero,479e0 <fflush+0x24>
   479cc:	00800174 	movhi	r2,5
   479d0:	1095cf04 	addi	r2,r2,22332
   479d4:	11000017 	ldw	r4,0(r2)
   479d8:	180b883a 	mov	r5,r3
   479dc:	00477c01 	jmpi	477c0 <_fflush_r>
   479e0:	00800174 	movhi	r2,5
   479e4:	1095d004 	addi	r2,r2,22336
   479e8:	11000017 	ldw	r4,0(r2)
   479ec:	00488ac1 	jmpi	488ac <_fwalk_reent>

000479f0 <std>:
   479f0:	00800134 	movhi	r2,4
   479f4:	1088aa04 	addi	r2,r2,8872
   479f8:	20800b15 	stw	r2,44(r4)
   479fc:	00800134 	movhi	r2,4
   47a00:	1088e504 	addi	r2,r2,9108
   47a04:	20800815 	stw	r2,32(r4)
   47a08:	00c00134 	movhi	r3,4
   47a0c:	18c8c604 	addi	r3,r3,8984
   47a10:	00800134 	movhi	r2,4
   47a14:	1088ac04 	addi	r2,r2,8880
   47a18:	2140030d 	sth	r5,12(r4)
   47a1c:	2180038d 	sth	r6,14(r4)
   47a20:	20c00915 	stw	r3,36(r4)
   47a24:	20800a15 	stw	r2,40(r4)
   47a28:	20000015 	stw	zero,0(r4)
   47a2c:	20000115 	stw	zero,4(r4)
   47a30:	20000215 	stw	zero,8(r4)
   47a34:	20000415 	stw	zero,16(r4)
   47a38:	20000515 	stw	zero,20(r4)
   47a3c:	20000615 	stw	zero,24(r4)
   47a40:	21000715 	stw	r4,28(r4)
   47a44:	f800283a 	ret

00047a48 <__sfp_lock_acquire>:
   47a48:	f800283a 	ret

00047a4c <__sfp_lock_release>:
   47a4c:	f800283a 	ret

00047a50 <__sinit_lock_acquire>:
   47a50:	f800283a 	ret

00047a54 <__sinit_lock_release>:
   47a54:	f800283a 	ret

00047a58 <__sinit>:
   47a58:	20800e17 	ldw	r2,56(r4)
   47a5c:	defffd04 	addi	sp,sp,-12
   47a60:	dc400115 	stw	r17,4(sp)
   47a64:	dc000015 	stw	r16,0(sp)
   47a68:	dfc00215 	stw	ra,8(sp)
   47a6c:	04400044 	movi	r17,1
   47a70:	01400104 	movi	r5,4
   47a74:	000d883a 	mov	r6,zero
   47a78:	2021883a 	mov	r16,r4
   47a7c:	2200bb04 	addi	r8,r4,748
   47a80:	200f883a 	mov	r7,r4
   47a84:	10000526 	beq	r2,zero,47a9c <__sinit+0x44>
   47a88:	dfc00217 	ldw	ra,8(sp)
   47a8c:	dc400117 	ldw	r17,4(sp)
   47a90:	dc000017 	ldw	r16,0(sp)
   47a94:	dec00304 	addi	sp,sp,12
   47a98:	f800283a 	ret
   47a9c:	21000117 	ldw	r4,4(r4)
   47aa0:	00800134 	movhi	r2,4
   47aa4:	109ecf04 	addi	r2,r2,31548
   47aa8:	00c000c4 	movi	r3,3
   47aac:	80800f15 	stw	r2,60(r16)
   47ab0:	80c0b915 	stw	r3,740(r16)
   47ab4:	8200ba15 	stw	r8,744(r16)
   47ab8:	84400e15 	stw	r17,56(r16)
   47abc:	8000b815 	stw	zero,736(r16)
   47ac0:	00479f00 	call	479f0 <std>
   47ac4:	81000217 	ldw	r4,8(r16)
   47ac8:	880d883a 	mov	r6,r17
   47acc:	800f883a 	mov	r7,r16
   47ad0:	01400284 	movi	r5,10
   47ad4:	00479f00 	call	479f0 <std>
   47ad8:	81000317 	ldw	r4,12(r16)
   47adc:	800f883a 	mov	r7,r16
   47ae0:	01400484 	movi	r5,18
   47ae4:	01800084 	movi	r6,2
   47ae8:	dfc00217 	ldw	ra,8(sp)
   47aec:	dc400117 	ldw	r17,4(sp)
   47af0:	dc000017 	ldw	r16,0(sp)
   47af4:	dec00304 	addi	sp,sp,12
   47af8:	00479f01 	jmpi	479f0 <std>

00047afc <__fp_lock>:
   47afc:	0005883a 	mov	r2,zero
   47b00:	f800283a 	ret

00047b04 <__fp_unlock>:
   47b04:	0005883a 	mov	r2,zero
   47b08:	f800283a 	ret

00047b0c <__fp_unlock_all>:
   47b0c:	00800174 	movhi	r2,5
   47b10:	1095cf04 	addi	r2,r2,22332
   47b14:	11000017 	ldw	r4,0(r2)
   47b18:	01400134 	movhi	r5,4
   47b1c:	295ec104 	addi	r5,r5,31492
   47b20:	00489741 	jmpi	48974 <_fwalk>

00047b24 <__fp_lock_all>:
   47b24:	00800174 	movhi	r2,5
   47b28:	1095cf04 	addi	r2,r2,22332
   47b2c:	11000017 	ldw	r4,0(r2)
   47b30:	01400134 	movhi	r5,4
   47b34:	295ebf04 	addi	r5,r5,31484
   47b38:	00489741 	jmpi	48974 <_fwalk>

00047b3c <_cleanup_r>:
   47b3c:	01400174 	movhi	r5,5
   47b40:	29737b04 	addi	r5,r5,-12820
   47b44:	00489741 	jmpi	48974 <_fwalk>

00047b48 <_cleanup>:
   47b48:	00800174 	movhi	r2,5
   47b4c:	1095d004 	addi	r2,r2,22336
   47b50:	11000017 	ldw	r4,0(r2)
   47b54:	0047b3c1 	jmpi	47b3c <_cleanup_r>

00047b58 <__sfmoreglue>:
   47b58:	defffc04 	addi	sp,sp,-16
   47b5c:	dc000015 	stw	r16,0(sp)
   47b60:	2821883a 	mov	r16,r5
   47b64:	dc400115 	stw	r17,4(sp)
   47b68:	01401704 	movi	r5,92
   47b6c:	2023883a 	mov	r17,r4
   47b70:	8009883a 	mov	r4,r16
   47b74:	dfc00315 	stw	ra,12(sp)
   47b78:	dcc00215 	stw	r19,8(sp)
   47b7c:	004fd3c0 	call	4fd3c <__mulsi3>
   47b80:	11400304 	addi	r5,r2,12
   47b84:	8809883a 	mov	r4,r17
   47b88:	1027883a 	mov	r19,r2
   47b8c:	00416980 	call	41698 <_malloc_r>
   47b90:	10c00304 	addi	r3,r2,12
   47b94:	1023883a 	mov	r17,r2
   47b98:	1809883a 	mov	r4,r3
   47b9c:	980d883a 	mov	r6,r19
   47ba0:	000b883a 	mov	r5,zero
   47ba4:	10000b26 	beq	r2,zero,47bd4 <__sfmoreglue+0x7c>
   47ba8:	14000115 	stw	r16,4(r2)
   47bac:	10c00215 	stw	r3,8(r2)
   47bb0:	10000015 	stw	zero,0(r2)
   47bb4:	0048f680 	call	48f68 <memset>
   47bb8:	8805883a 	mov	r2,r17
   47bbc:	dfc00317 	ldw	ra,12(sp)
   47bc0:	dcc00217 	ldw	r19,8(sp)
   47bc4:	dc400117 	ldw	r17,4(sp)
   47bc8:	dc000017 	ldw	r16,0(sp)
   47bcc:	dec00404 	addi	sp,sp,16
   47bd0:	f800283a 	ret
   47bd4:	0023883a 	mov	r17,zero
   47bd8:	8805883a 	mov	r2,r17
   47bdc:	dfc00317 	ldw	ra,12(sp)
   47be0:	dcc00217 	ldw	r19,8(sp)
   47be4:	dc400117 	ldw	r17,4(sp)
   47be8:	dc000017 	ldw	r16,0(sp)
   47bec:	dec00404 	addi	sp,sp,16
   47bf0:	f800283a 	ret

00047bf4 <__sfp>:
   47bf4:	defffd04 	addi	sp,sp,-12
   47bf8:	00800174 	movhi	r2,5
   47bfc:	1095d004 	addi	r2,r2,22336
   47c00:	dc000015 	stw	r16,0(sp)
   47c04:	14000017 	ldw	r16,0(r2)
   47c08:	dc400115 	stw	r17,4(sp)
   47c0c:	dfc00215 	stw	ra,8(sp)
   47c10:	80800e17 	ldw	r2,56(r16)
   47c14:	2023883a 	mov	r17,r4
   47c18:	10002626 	beq	r2,zero,47cb4 <__sfp+0xc0>
   47c1c:	8400b804 	addi	r16,r16,736
   47c20:	80800117 	ldw	r2,4(r16)
   47c24:	81000217 	ldw	r4,8(r16)
   47c28:	10ffffc4 	addi	r3,r2,-1
   47c2c:	18000916 	blt	r3,zero,47c54 <__sfp+0x60>
   47c30:	2080030f 	ldh	r2,12(r4)
   47c34:	10000b26 	beq	r2,zero,47c64 <__sfp+0x70>
   47c38:	017fffc4 	movi	r5,-1
   47c3c:	00000206 	br	47c48 <__sfp+0x54>
   47c40:	2080030f 	ldh	r2,12(r4)
   47c44:	10000726 	beq	r2,zero,47c64 <__sfp+0x70>
   47c48:	18ffffc4 	addi	r3,r3,-1
   47c4c:	21001704 	addi	r4,r4,92
   47c50:	197ffb1e 	bne	r3,r5,47c40 <__sfp+0x4c>
   47c54:	80800017 	ldw	r2,0(r16)
   47c58:	10001926 	beq	r2,zero,47cc0 <__sfp+0xcc>
   47c5c:	1021883a 	mov	r16,r2
   47c60:	003fef06 	br	47c20 <__sfp+0x2c>
   47c64:	00bfffc4 	movi	r2,-1
   47c68:	00c00044 	movi	r3,1
   47c6c:	2080038d 	sth	r2,14(r4)
   47c70:	20c0030d 	sth	r3,12(r4)
   47c74:	20000015 	stw	zero,0(r4)
   47c78:	20000215 	stw	zero,8(r4)
   47c7c:	20000115 	stw	zero,4(r4)
   47c80:	20000415 	stw	zero,16(r4)
   47c84:	20000515 	stw	zero,20(r4)
   47c88:	20000615 	stw	zero,24(r4)
   47c8c:	20000c15 	stw	zero,48(r4)
   47c90:	20000d15 	stw	zero,52(r4)
   47c94:	20001115 	stw	zero,68(r4)
   47c98:	20001215 	stw	zero,72(r4)
   47c9c:	2005883a 	mov	r2,r4
   47ca0:	dfc00217 	ldw	ra,8(sp)
   47ca4:	dc400117 	ldw	r17,4(sp)
   47ca8:	dc000017 	ldw	r16,0(sp)
   47cac:	dec00304 	addi	sp,sp,12
   47cb0:	f800283a 	ret
   47cb4:	8009883a 	mov	r4,r16
   47cb8:	0047a580 	call	47a58 <__sinit>
   47cbc:	003fd706 	br	47c1c <__sfp+0x28>
   47cc0:	8809883a 	mov	r4,r17
   47cc4:	01400104 	movi	r5,4
   47cc8:	0047b580 	call	47b58 <__sfmoreglue>
   47ccc:	80800015 	stw	r2,0(r16)
   47cd0:	103fe21e 	bne	r2,zero,47c5c <__sfp+0x68>
   47cd4:	00800304 	movi	r2,12
   47cd8:	0009883a 	mov	r4,zero
   47cdc:	88800015 	stw	r2,0(r17)
   47ce0:	003fee06 	br	47c9c <__sfp+0xa8>

00047ce4 <__sflags>:
   47ce4:	28c00007 	ldb	r3,0(r5)
   47ce8:	00801c84 	movi	r2,114
   47cec:	18800926 	beq	r3,r2,47d14 <__sflags+0x30>
   47cf0:	00801dc4 	movi	r2,119
   47cf4:	18801426 	beq	r3,r2,47d48 <__sflags+0x64>
   47cf8:	00801844 	movi	r2,97
   47cfc:	18801626 	beq	r3,r2,47d58 <__sflags+0x74>
   47d00:	0007883a 	mov	r3,zero
   47d04:	00800584 	movi	r2,22
   47d08:	20800015 	stw	r2,0(r4)
   47d0c:	1805883a 	mov	r2,r3
   47d10:	f800283a 	ret
   47d14:	000f883a 	mov	r7,zero
   47d18:	0011883a 	mov	r8,zero
   47d1c:	00c00104 	movi	r3,4
   47d20:	28800047 	ldb	r2,1(r5)
   47d24:	10000426 	beq	r2,zero,47d38 <__sflags+0x54>
   47d28:	01000ac4 	movi	r4,43
   47d2c:	11000e26 	beq	r2,r4,47d68 <__sflags+0x84>
   47d30:	28800087 	ldb	r2,2(r5)
   47d34:	11000c26 	beq	r2,r4,47d68 <__sflags+0x84>
   47d38:	3a04b03a 	or	r2,r7,r8
   47d3c:	30800015 	stw	r2,0(r6)
   47d40:	1805883a 	mov	r2,r3
   47d44:	f800283a 	ret
   47d48:	01c00044 	movi	r7,1
   47d4c:	02018004 	movi	r8,1536
   47d50:	00c00204 	movi	r3,8
   47d54:	003ff206 	br	47d20 <__sflags+0x3c>
   47d58:	01c00044 	movi	r7,1
   47d5c:	02008204 	movi	r8,520
   47d60:	00c04204 	movi	r3,264
   47d64:	003fee06 	br	47d20 <__sflags+0x3c>
   47d68:	00bffcc4 	movi	r2,-13
   47d6c:	1884703a 	and	r2,r3,r2
   47d70:	01c00084 	movi	r7,2
   47d74:	10c00414 	ori	r3,r2,16
   47d78:	3a04b03a 	or	r2,r7,r8
   47d7c:	30800015 	stw	r2,0(r6)
   47d80:	003fef06 	br	47d40 <__sflags+0x5c>

00047d84 <_fread_r>:
   47d84:	defff504 	addi	sp,sp,-44
   47d88:	dd800715 	stw	r22,28(sp)
   47d8c:	dc000115 	stw	r16,4(sp)
   47d90:	202d883a 	mov	r22,r4
   47d94:	2821883a 	mov	r16,r5
   47d98:	3809883a 	mov	r4,r7
   47d9c:	300b883a 	mov	r5,r6
   47da0:	df000915 	stw	fp,36(sp)
   47da4:	ddc00815 	stw	r23,32(sp)
   47da8:	dcc00415 	stw	r19,16(sp)
   47dac:	dfc00a15 	stw	ra,40(sp)
   47db0:	dd400615 	stw	r21,24(sp)
   47db4:	dd000515 	stw	r20,20(sp)
   47db8:	dc800315 	stw	r18,12(sp)
   47dbc:	dc400215 	stw	r17,8(sp)
   47dc0:	d9800015 	stw	r6,0(sp)
   47dc4:	3839883a 	mov	fp,r7
   47dc8:	004fd3c0 	call	4fd3c <__mulsi3>
   47dcc:	102f883a 	mov	r23,r2
   47dd0:	dcc00b17 	ldw	r19,44(sp)
   47dd4:	10005926 	beq	r2,zero,47f3c <_fread_r+0x1b8>
   47dd8:	b0000226 	beq	r22,zero,47de4 <_fread_r+0x60>
   47ddc:	b0800e17 	ldw	r2,56(r22)
   47de0:	10005826 	beq	r2,zero,47f44 <_fread_r+0x1c0>
   47de4:	9c400117 	ldw	r17,4(r19)
   47de8:	88005a16 	blt	r17,zero,47f54 <_fread_r+0x1d0>
   47dec:	9880030b 	ldhu	r2,12(r19)
   47df0:	8029883a 	mov	r20,r16
   47df4:	1080008c 	andi	r2,r2,2
   47df8:	1000221e 	bne	r2,zero,47e84 <_fread_r+0x100>
   47dfc:	b825883a 	mov	r18,r23
   47e00:	00000106 	br	47e08 <_fread_r+0x84>
   47e04:	9c400117 	ldw	r17,4(r19)
   47e08:	a009883a 	mov	r4,r20
   47e0c:	880d883a 	mov	r6,r17
   47e10:	8c80552e 	bgeu	r17,r18,47f68 <_fread_r+0x1e4>
   47e14:	99400017 	ldw	r5,0(r19)
   47e18:	a469883a 	add	r20,r20,r17
   47e1c:	9465c83a 	sub	r18,r18,r17
   47e20:	0048de80 	call	48de8 <memcpy>
   47e24:	98800017 	ldw	r2,0(r19)
   47e28:	b009883a 	mov	r4,r22
   47e2c:	980b883a 	mov	r5,r19
   47e30:	1461883a 	add	r16,r2,r17
   47e34:	9c000015 	stw	r16,0(r19)
   47e38:	0041f7c0 	call	41f7c <__srefill_r>
   47e3c:	103ff126 	beq	r2,zero,47e04 <_fread_r+0x80>
   47e40:	d9400017 	ldw	r5,0(sp)
   47e44:	bc89c83a 	sub	r4,r23,r18
   47e48:	004fd2c0 	call	4fd2c <__udivsi3>
   47e4c:	1039883a 	mov	fp,r2
   47e50:	e005883a 	mov	r2,fp
   47e54:	dfc00a17 	ldw	ra,40(sp)
   47e58:	df000917 	ldw	fp,36(sp)
   47e5c:	ddc00817 	ldw	r23,32(sp)
   47e60:	dd800717 	ldw	r22,28(sp)
   47e64:	dd400617 	ldw	r21,24(sp)
   47e68:	dd000517 	ldw	r20,20(sp)
   47e6c:	dcc00417 	ldw	r19,16(sp)
   47e70:	dc800317 	ldw	r18,12(sp)
   47e74:	dc400217 	ldw	r17,8(sp)
   47e78:	dc000117 	ldw	r16,4(sp)
   47e7c:	dec00b04 	addi	sp,sp,44
   47e80:	f800283a 	ret
   47e84:	b825883a 	mov	r18,r23
   47e88:	8dc03536 	bltu	r17,r23,47f60 <_fread_r+0x1dc>
   47e8c:	99400017 	ldw	r5,0(r19)
   47e90:	a009883a 	mov	r4,r20
   47e94:	900d883a 	mov	r6,r18
   47e98:	0048de80 	call	48de8 <memcpy>
   47e9c:	9c000017 	ldw	r16,0(r19)
   47ea0:	98800117 	ldw	r2,4(r19)
   47ea4:	99400c17 	ldw	r5,48(r19)
   47ea8:	84a1883a 	add	r16,r16,r18
   47eac:	14a3c83a 	sub	r17,r2,r18
   47eb0:	a4ab883a 	add	r21,r20,r18
   47eb4:	9c400115 	stw	r17,4(r19)
   47eb8:	9c000015 	stw	r16,0(r19)
   47ebc:	bca9c83a 	sub	r20,r23,r18
   47ec0:	28000826 	beq	r5,zero,47ee4 <_fread_r+0x160>
   47ec4:	a03fe226 	beq	r20,zero,47e50 <_fread_r+0xcc>
   47ec8:	98801004 	addi	r2,r19,64
   47ecc:	28800326 	beq	r5,r2,47edc <_fread_r+0x158>
   47ed0:	b009883a 	mov	r4,r22
   47ed4:	00480fc0 	call	480fc <_free_r>
   47ed8:	9c000017 	ldw	r16,0(r19)
   47edc:	98000c15 	stw	zero,48(r19)
   47ee0:	00000106 	br	47ee8 <_fread_r+0x164>
   47ee4:	a03fda26 	beq	r20,zero,47e50 <_fread_r+0xcc>
   47ee8:	9c800417 	ldw	r18,16(r19)
   47eec:	9c400517 	ldw	r17,20(r19)
   47ef0:	9d400015 	stw	r21,0(r19)
   47ef4:	9d400415 	stw	r21,16(r19)
   47ef8:	9d000515 	stw	r20,20(r19)
   47efc:	b009883a 	mov	r4,r22
   47f00:	980b883a 	mov	r5,r19
   47f04:	0041f7c0 	call	41f7c <__srefill_r>
   47f08:	98c00117 	ldw	r3,4(r19)
   47f0c:	9c800415 	stw	r18,16(r19)
   47f10:	9c400515 	stw	r17,20(r19)
   47f14:	a8eb883a 	add	r21,r21,r3
   47f18:	9c000015 	stw	r16,0(r19)
   47f1c:	a0e9c83a 	sub	r20,r20,r3
   47f20:	98000115 	stw	zero,4(r19)
   47f24:	103fef26 	beq	r2,zero,47ee4 <_fread_r+0x160>
   47f28:	d9400017 	ldw	r5,0(sp)
   47f2c:	bd09c83a 	sub	r4,r23,r20
   47f30:	004fd2c0 	call	4fd2c <__udivsi3>
   47f34:	1039883a 	mov	fp,r2
   47f38:	003fc506 	br	47e50 <_fread_r+0xcc>
   47f3c:	0039883a 	mov	fp,zero
   47f40:	003fc306 	br	47e50 <_fread_r+0xcc>
   47f44:	b009883a 	mov	r4,r22
   47f48:	0047a580 	call	47a58 <__sinit>
   47f4c:	9c400117 	ldw	r17,4(r19)
   47f50:	883fa60e 	bge	r17,zero,47dec <_fread_r+0x68>
   47f54:	0023883a 	mov	r17,zero
   47f58:	98000115 	stw	zero,4(r19)
   47f5c:	003fa306 	br	47dec <_fread_r+0x68>
   47f60:	8825883a 	mov	r18,r17
   47f64:	003fc906 	br	47e8c <_fread_r+0x108>
   47f68:	99400017 	ldw	r5,0(r19)
   47f6c:	900d883a 	mov	r6,r18
   47f70:	0048de80 	call	48de8 <memcpy>
   47f74:	98c00117 	ldw	r3,4(r19)
   47f78:	98800017 	ldw	r2,0(r19)
   47f7c:	1c87c83a 	sub	r3,r3,r18
   47f80:	1485883a 	add	r2,r2,r18
   47f84:	98800015 	stw	r2,0(r19)
   47f88:	98c00115 	stw	r3,4(r19)
   47f8c:	003fb006 	br	47e50 <_fread_r+0xcc>

00047f90 <fread>:
   47f90:	00800174 	movhi	r2,5
   47f94:	1095cf04 	addi	r2,r2,22332
   47f98:	2017883a 	mov	r11,r4
   47f9c:	11000017 	ldw	r4,0(r2)
   47fa0:	defffe04 	addi	sp,sp,-8
   47fa4:	3013883a 	mov	r9,r6
   47fa8:	2805883a 	mov	r2,r5
   47fac:	d9c00015 	stw	r7,0(sp)
   47fb0:	580b883a 	mov	r5,r11
   47fb4:	100d883a 	mov	r6,r2
   47fb8:	480f883a 	mov	r7,r9
   47fbc:	dfc00115 	stw	ra,4(sp)
   47fc0:	0047d840 	call	47d84 <_fread_r>
   47fc4:	dfc00117 	ldw	ra,4(sp)
   47fc8:	dec00204 	addi	sp,sp,8
   47fcc:	f800283a 	ret

00047fd0 <_malloc_trim_r>:
   47fd0:	defffb04 	addi	sp,sp,-20
   47fd4:	dcc00315 	stw	r19,12(sp)
   47fd8:	04c00174 	movhi	r19,5
   47fdc:	9cd03404 	addi	r19,r19,16592
   47fe0:	dc800215 	stw	r18,8(sp)
   47fe4:	dc400115 	stw	r17,4(sp)
   47fe8:	dc000015 	stw	r16,0(sp)
   47fec:	2823883a 	mov	r17,r5
   47ff0:	2025883a 	mov	r18,r4
   47ff4:	dfc00415 	stw	ra,16(sp)
   47ff8:	00508bc0 	call	508bc <__malloc_lock>
   47ffc:	98800217 	ldw	r2,8(r19)
   48000:	9009883a 	mov	r4,r18
   48004:	000b883a 	mov	r5,zero
   48008:	10c00117 	ldw	r3,4(r2)
   4800c:	00bfff04 	movi	r2,-4
   48010:	18a0703a 	and	r16,r3,r2
   48014:	8463c83a 	sub	r17,r16,r17
   48018:	8c43fbc4 	addi	r17,r17,4079
   4801c:	8822d33a 	srli	r17,r17,12
   48020:	0083ffc4 	movi	r2,4095
   48024:	8c7fffc4 	addi	r17,r17,-1
   48028:	8822933a 	slli	r17,r17,12
   4802c:	1440060e 	bge	r2,r17,48048 <_malloc_trim_r+0x78>
   48030:	00421bc0 	call	421bc <_sbrk_r>
   48034:	98c00217 	ldw	r3,8(r19)
   48038:	9009883a 	mov	r4,r18
   4803c:	044bc83a 	sub	r5,zero,r17
   48040:	80c7883a 	add	r3,r16,r3
   48044:	10c00926 	beq	r2,r3,4806c <_malloc_trim_r+0x9c>
   48048:	00508dc0 	call	508dc <__malloc_unlock>
   4804c:	0005883a 	mov	r2,zero
   48050:	dfc00417 	ldw	ra,16(sp)
   48054:	dcc00317 	ldw	r19,12(sp)
   48058:	dc800217 	ldw	r18,8(sp)
   4805c:	dc400117 	ldw	r17,4(sp)
   48060:	dc000017 	ldw	r16,0(sp)
   48064:	dec00504 	addi	sp,sp,20
   48068:	f800283a 	ret
   4806c:	9009883a 	mov	r4,r18
   48070:	00421bc0 	call	421bc <_sbrk_r>
   48074:	844dc83a 	sub	r6,r16,r17
   48078:	00ffffc4 	movi	r3,-1
   4807c:	9009883a 	mov	r4,r18
   48080:	000b883a 	mov	r5,zero
   48084:	01c00174 	movhi	r7,5
   48088:	39dcc004 	addi	r7,r7,29440
   4808c:	31800054 	ori	r6,r6,1
   48090:	10c00926 	beq	r2,r3,480b8 <_malloc_trim_r+0xe8>
   48094:	38800017 	ldw	r2,0(r7)
   48098:	98c00217 	ldw	r3,8(r19)
   4809c:	9009883a 	mov	r4,r18
   480a0:	1445c83a 	sub	r2,r2,r17
   480a4:	38800015 	stw	r2,0(r7)
   480a8:	19800115 	stw	r6,4(r3)
   480ac:	00508dc0 	call	508dc <__malloc_unlock>
   480b0:	00800044 	movi	r2,1
   480b4:	003fe606 	br	48050 <_malloc_trim_r+0x80>
   480b8:	00421bc0 	call	421bc <_sbrk_r>
   480bc:	99800217 	ldw	r6,8(r19)
   480c0:	100f883a 	mov	r7,r2
   480c4:	9009883a 	mov	r4,r18
   480c8:	1187c83a 	sub	r3,r2,r6
   480cc:	008003c4 	movi	r2,15
   480d0:	19400054 	ori	r5,r3,1
   480d4:	10ffdc0e 	bge	r2,r3,48048 <_malloc_trim_r+0x78>
   480d8:	00800174 	movhi	r2,5
   480dc:	1095d204 	addi	r2,r2,22344
   480e0:	10c00017 	ldw	r3,0(r2)
   480e4:	00800174 	movhi	r2,5
   480e8:	109cc004 	addi	r2,r2,29440
   480ec:	31400115 	stw	r5,4(r6)
   480f0:	38c7c83a 	sub	r3,r7,r3
   480f4:	10c00015 	stw	r3,0(r2)
   480f8:	003fd306 	br	48048 <_malloc_trim_r+0x78>

000480fc <_free_r>:
   480fc:	defffd04 	addi	sp,sp,-12
   48100:	dc400115 	stw	r17,4(sp)
   48104:	dc000015 	stw	r16,0(sp)
   48108:	dfc00215 	stw	ra,8(sp)
   4810c:	2821883a 	mov	r16,r5
   48110:	2023883a 	mov	r17,r4
   48114:	28005a26 	beq	r5,zero,48280 <_free_r+0x184>
   48118:	00508bc0 	call	508bc <__malloc_lock>
   4811c:	823ffe04 	addi	r8,r16,-8
   48120:	41400117 	ldw	r5,4(r8)
   48124:	00bfff84 	movi	r2,-2
   48128:	02800174 	movhi	r10,5
   4812c:	52903404 	addi	r10,r10,16592
   48130:	288e703a 	and	r7,r5,r2
   48134:	41cd883a 	add	r6,r8,r7
   48138:	30c00117 	ldw	r3,4(r6)
   4813c:	51000217 	ldw	r4,8(r10)
   48140:	00bfff04 	movi	r2,-4
   48144:	1892703a 	and	r9,r3,r2
   48148:	5017883a 	mov	r11,r10
   4814c:	31006726 	beq	r6,r4,482ec <_free_r+0x1f0>
   48150:	2880004c 	andi	r2,r5,1
   48154:	1005003a 	cmpeq	r2,r2,zero
   48158:	32400115 	stw	r9,4(r6)
   4815c:	10001a1e 	bne	r2,zero,481c8 <_free_r+0xcc>
   48160:	000b883a 	mov	r5,zero
   48164:	3247883a 	add	r3,r6,r9
   48168:	18800117 	ldw	r2,4(r3)
   4816c:	1080004c 	andi	r2,r2,1
   48170:	1000231e 	bne	r2,zero,48200 <_free_r+0x104>
   48174:	280ac03a 	cmpne	r5,r5,zero
   48178:	3a4f883a 	add	r7,r7,r9
   4817c:	2800451e 	bne	r5,zero,48294 <_free_r+0x198>
   48180:	31000217 	ldw	r4,8(r6)
   48184:	00800174 	movhi	r2,5
   48188:	10903604 	addi	r2,r2,16600
   4818c:	20807b26 	beq	r4,r2,4837c <_free_r+0x280>
   48190:	30800317 	ldw	r2,12(r6)
   48194:	3a07883a 	add	r3,r7,r8
   48198:	19c00015 	stw	r7,0(r3)
   4819c:	11000215 	stw	r4,8(r2)
   481a0:	20800315 	stw	r2,12(r4)
   481a4:	38800054 	ori	r2,r7,1
   481a8:	40800115 	stw	r2,4(r8)
   481ac:	28001a26 	beq	r5,zero,48218 <_free_r+0x11c>
   481b0:	8809883a 	mov	r4,r17
   481b4:	dfc00217 	ldw	ra,8(sp)
   481b8:	dc400117 	ldw	r17,4(sp)
   481bc:	dc000017 	ldw	r16,0(sp)
   481c0:	dec00304 	addi	sp,sp,12
   481c4:	00508dc1 	jmpi	508dc <__malloc_unlock>
   481c8:	80bffe17 	ldw	r2,-8(r16)
   481cc:	50c00204 	addi	r3,r10,8
   481d0:	4091c83a 	sub	r8,r8,r2
   481d4:	41000217 	ldw	r4,8(r8)
   481d8:	388f883a 	add	r7,r7,r2
   481dc:	20c06126 	beq	r4,r3,48364 <_free_r+0x268>
   481e0:	40800317 	ldw	r2,12(r8)
   481e4:	3247883a 	add	r3,r6,r9
   481e8:	000b883a 	mov	r5,zero
   481ec:	11000215 	stw	r4,8(r2)
   481f0:	20800315 	stw	r2,12(r4)
   481f4:	18800117 	ldw	r2,4(r3)
   481f8:	1080004c 	andi	r2,r2,1
   481fc:	103fdd26 	beq	r2,zero,48174 <_free_r+0x78>
   48200:	38800054 	ori	r2,r7,1
   48204:	3a07883a 	add	r3,r7,r8
   48208:	280ac03a 	cmpne	r5,r5,zero
   4820c:	40800115 	stw	r2,4(r8)
   48210:	19c00015 	stw	r7,0(r3)
   48214:	283fe61e 	bne	r5,zero,481b0 <_free_r+0xb4>
   48218:	00807fc4 	movi	r2,511
   4821c:	11c01f2e 	bgeu	r2,r7,4829c <_free_r+0x1a0>
   48220:	3806d27a 	srli	r3,r7,9
   48224:	1800481e 	bne	r3,zero,48348 <_free_r+0x24c>
   48228:	3804d0fa 	srli	r2,r7,3
   4822c:	100690fa 	slli	r3,r2,3
   48230:	1acd883a 	add	r6,r3,r11
   48234:	31400217 	ldw	r5,8(r6)
   48238:	31405926 	beq	r6,r5,483a0 <_free_r+0x2a4>
   4823c:	28800117 	ldw	r2,4(r5)
   48240:	00ffff04 	movi	r3,-4
   48244:	10c4703a 	and	r2,r2,r3
   48248:	3880022e 	bgeu	r7,r2,48254 <_free_r+0x158>
   4824c:	29400217 	ldw	r5,8(r5)
   48250:	317ffa1e 	bne	r6,r5,4823c <_free_r+0x140>
   48254:	29800317 	ldw	r6,12(r5)
   48258:	41800315 	stw	r6,12(r8)
   4825c:	41400215 	stw	r5,8(r8)
   48260:	8809883a 	mov	r4,r17
   48264:	2a000315 	stw	r8,12(r5)
   48268:	32000215 	stw	r8,8(r6)
   4826c:	dfc00217 	ldw	ra,8(sp)
   48270:	dc400117 	ldw	r17,4(sp)
   48274:	dc000017 	ldw	r16,0(sp)
   48278:	dec00304 	addi	sp,sp,12
   4827c:	00508dc1 	jmpi	508dc <__malloc_unlock>
   48280:	dfc00217 	ldw	ra,8(sp)
   48284:	dc400117 	ldw	r17,4(sp)
   48288:	dc000017 	ldw	r16,0(sp)
   4828c:	dec00304 	addi	sp,sp,12
   48290:	f800283a 	ret
   48294:	31000217 	ldw	r4,8(r6)
   48298:	003fbd06 	br	48190 <_free_r+0x94>
   4829c:	3806d0fa 	srli	r3,r7,3
   482a0:	00800044 	movi	r2,1
   482a4:	51400117 	ldw	r5,4(r10)
   482a8:	180890fa 	slli	r4,r3,3
   482ac:	1807d0ba 	srai	r3,r3,2
   482b0:	22c9883a 	add	r4,r4,r11
   482b4:	21800217 	ldw	r6,8(r4)
   482b8:	10c4983a 	sll	r2,r2,r3
   482bc:	41000315 	stw	r4,12(r8)
   482c0:	41800215 	stw	r6,8(r8)
   482c4:	288ab03a 	or	r5,r5,r2
   482c8:	22000215 	stw	r8,8(r4)
   482cc:	8809883a 	mov	r4,r17
   482d0:	51400115 	stw	r5,4(r10)
   482d4:	32000315 	stw	r8,12(r6)
   482d8:	dfc00217 	ldw	ra,8(sp)
   482dc:	dc400117 	ldw	r17,4(sp)
   482e0:	dc000017 	ldw	r16,0(sp)
   482e4:	dec00304 	addi	sp,sp,12
   482e8:	00508dc1 	jmpi	508dc <__malloc_unlock>
   482ec:	2880004c 	andi	r2,r5,1
   482f0:	3a4d883a 	add	r6,r7,r9
   482f4:	1000071e 	bne	r2,zero,48314 <_free_r+0x218>
   482f8:	80bffe17 	ldw	r2,-8(r16)
   482fc:	4091c83a 	sub	r8,r8,r2
   48300:	41000317 	ldw	r4,12(r8)
   48304:	40c00217 	ldw	r3,8(r8)
   48308:	308d883a 	add	r6,r6,r2
   4830c:	20c00215 	stw	r3,8(r4)
   48310:	19000315 	stw	r4,12(r3)
   48314:	00800174 	movhi	r2,5
   48318:	1095d104 	addi	r2,r2,22340
   4831c:	11000017 	ldw	r4,0(r2)
   48320:	30c00054 	ori	r3,r6,1
   48324:	52000215 	stw	r8,8(r10)
   48328:	40c00115 	stw	r3,4(r8)
   4832c:	313fa036 	bltu	r6,r4,481b0 <_free_r+0xb4>
   48330:	00800174 	movhi	r2,5
   48334:	109cb404 	addi	r2,r2,29392
   48338:	11400017 	ldw	r5,0(r2)
   4833c:	8809883a 	mov	r4,r17
   48340:	0047fd00 	call	47fd0 <_malloc_trim_r>
   48344:	003f9a06 	br	481b0 <_free_r+0xb4>
   48348:	00800104 	movi	r2,4
   4834c:	10c0072e 	bgeu	r2,r3,4836c <_free_r+0x270>
   48350:	00800504 	movi	r2,20
   48354:	10c01936 	bltu	r2,r3,483bc <_free_r+0x2c0>
   48358:	188016c4 	addi	r2,r3,91
   4835c:	100690fa 	slli	r3,r2,3
   48360:	003fb306 	br	48230 <_free_r+0x134>
   48364:	01400044 	movi	r5,1
   48368:	003f7e06 	br	48164 <_free_r+0x68>
   4836c:	3804d1ba 	srli	r2,r7,6
   48370:	10800e04 	addi	r2,r2,56
   48374:	100690fa 	slli	r3,r2,3
   48378:	003fad06 	br	48230 <_free_r+0x134>
   4837c:	22000315 	stw	r8,12(r4)
   48380:	22000215 	stw	r8,8(r4)
   48384:	3a05883a 	add	r2,r7,r8
   48388:	38c00054 	ori	r3,r7,1
   4838c:	11c00015 	stw	r7,0(r2)
   48390:	41000215 	stw	r4,8(r8)
   48394:	40c00115 	stw	r3,4(r8)
   48398:	41000315 	stw	r4,12(r8)
   4839c:	003f8406 	br	481b0 <_free_r+0xb4>
   483a0:	1005d0ba 	srai	r2,r2,2
   483a4:	00c00044 	movi	r3,1
   483a8:	51000117 	ldw	r4,4(r10)
   483ac:	1886983a 	sll	r3,r3,r2
   483b0:	20c8b03a 	or	r4,r4,r3
   483b4:	51000115 	stw	r4,4(r10)
   483b8:	003fa706 	br	48258 <_free_r+0x15c>
   483bc:	00801504 	movi	r2,84
   483c0:	10c00436 	bltu	r2,r3,483d4 <_free_r+0x2d8>
   483c4:	3804d33a 	srli	r2,r7,12
   483c8:	10801b84 	addi	r2,r2,110
   483cc:	100690fa 	slli	r3,r2,3
   483d0:	003f9706 	br	48230 <_free_r+0x134>
   483d4:	00805504 	movi	r2,340
   483d8:	10c00436 	bltu	r2,r3,483ec <_free_r+0x2f0>
   483dc:	3804d3fa 	srli	r2,r7,15
   483e0:	10801dc4 	addi	r2,r2,119
   483e4:	100690fa 	slli	r3,r2,3
   483e8:	003f9106 	br	48230 <_free_r+0x134>
   483ec:	00815504 	movi	r2,1364
   483f0:	10c0032e 	bgeu	r2,r3,48400 <_free_r+0x304>
   483f4:	00801f84 	movi	r2,126
   483f8:	00c0fc04 	movi	r3,1008
   483fc:	003f8c06 	br	48230 <_free_r+0x134>
   48400:	3804d4ba 	srli	r2,r7,18
   48404:	10801f04 	addi	r2,r2,124
   48408:	100690fa 	slli	r3,r2,3
   4840c:	003f8806 	br	48230 <_free_r+0x134>

00048410 <__sfvwrite_r>:
   48410:	30800217 	ldw	r2,8(r6)
   48414:	defff504 	addi	sp,sp,-44
   48418:	df000915 	stw	fp,36(sp)
   4841c:	dd800715 	stw	r22,28(sp)
   48420:	dc800315 	stw	r18,12(sp)
   48424:	dfc00a15 	stw	ra,40(sp)
   48428:	ddc00815 	stw	r23,32(sp)
   4842c:	dd400615 	stw	r21,24(sp)
   48430:	dd000515 	stw	r20,20(sp)
   48434:	dcc00415 	stw	r19,16(sp)
   48438:	dc400215 	stw	r17,8(sp)
   4843c:	dc000115 	stw	r16,4(sp)
   48440:	302d883a 	mov	r22,r6
   48444:	2039883a 	mov	fp,r4
   48448:	2825883a 	mov	r18,r5
   4844c:	10001c26 	beq	r2,zero,484c0 <__sfvwrite_r+0xb0>
   48450:	29c0030b 	ldhu	r7,12(r5)
   48454:	3880020c 	andi	r2,r7,8
   48458:	10002726 	beq	r2,zero,484f8 <__sfvwrite_r+0xe8>
   4845c:	28800417 	ldw	r2,16(r5)
   48460:	10002526 	beq	r2,zero,484f8 <__sfvwrite_r+0xe8>
   48464:	3880008c 	andi	r2,r7,2
   48468:	b5400017 	ldw	r21,0(r22)
   4846c:	10002826 	beq	r2,zero,48510 <__sfvwrite_r+0x100>
   48470:	0021883a 	mov	r16,zero
   48474:	0023883a 	mov	r17,zero
   48478:	880d883a 	mov	r6,r17
   4847c:	e009883a 	mov	r4,fp
   48480:	00810004 	movi	r2,1024
   48484:	80006e26 	beq	r16,zero,48640 <__sfvwrite_r+0x230>
   48488:	800f883a 	mov	r7,r16
   4848c:	91400717 	ldw	r5,28(r18)
   48490:	1400012e 	bgeu	r2,r16,48498 <__sfvwrite_r+0x88>
   48494:	100f883a 	mov	r7,r2
   48498:	90c00917 	ldw	r3,36(r18)
   4849c:	183ee83a 	callr	r3
   484a0:	1007883a 	mov	r3,r2
   484a4:	80a1c83a 	sub	r16,r16,r2
   484a8:	88a3883a 	add	r17,r17,r2
   484ac:	00806d0e 	bge	zero,r2,48664 <__sfvwrite_r+0x254>
   484b0:	b0800217 	ldw	r2,8(r22)
   484b4:	10c5c83a 	sub	r2,r2,r3
   484b8:	b0800215 	stw	r2,8(r22)
   484bc:	103fee1e 	bne	r2,zero,48478 <__sfvwrite_r+0x68>
   484c0:	0009883a 	mov	r4,zero
   484c4:	2005883a 	mov	r2,r4
   484c8:	dfc00a17 	ldw	ra,40(sp)
   484cc:	df000917 	ldw	fp,36(sp)
   484d0:	ddc00817 	ldw	r23,32(sp)
   484d4:	dd800717 	ldw	r22,28(sp)
   484d8:	dd400617 	ldw	r21,24(sp)
   484dc:	dd000517 	ldw	r20,20(sp)
   484e0:	dcc00417 	ldw	r19,16(sp)
   484e4:	dc800317 	ldw	r18,12(sp)
   484e8:	dc400217 	ldw	r17,8(sp)
   484ec:	dc000117 	ldw	r16,4(sp)
   484f0:	dec00b04 	addi	sp,sp,44
   484f4:	f800283a 	ret
   484f8:	0045e1c0 	call	45e1c <__swsetup_r>
   484fc:	1000e41e 	bne	r2,zero,48890 <__sfvwrite_r+0x480>
   48500:	91c0030b 	ldhu	r7,12(r18)
   48504:	b5400017 	ldw	r21,0(r22)
   48508:	3880008c 	andi	r2,r7,2
   4850c:	103fd81e 	bne	r2,zero,48470 <__sfvwrite_r+0x60>
   48510:	3880004c 	andi	r2,r7,1
   48514:	1005003a 	cmpeq	r2,r2,zero
   48518:	10005726 	beq	r2,zero,48678 <__sfvwrite_r+0x268>
   4851c:	0029883a 	mov	r20,zero
   48520:	002f883a 	mov	r23,zero
   48524:	a0004226 	beq	r20,zero,48630 <__sfvwrite_r+0x220>
   48528:	3880800c 	andi	r2,r7,512
   4852c:	94000217 	ldw	r16,8(r18)
   48530:	10008b26 	beq	r2,zero,48760 <__sfvwrite_r+0x350>
   48534:	800d883a 	mov	r6,r16
   48538:	a400a536 	bltu	r20,r16,487d0 <__sfvwrite_r+0x3c0>
   4853c:	3881200c 	andi	r2,r7,1152
   48540:	10002726 	beq	r2,zero,485e0 <__sfvwrite_r+0x1d0>
   48544:	90800517 	ldw	r2,20(r18)
   48548:	92000417 	ldw	r8,16(r18)
   4854c:	91400017 	ldw	r5,0(r18)
   48550:	1087883a 	add	r3,r2,r2
   48554:	1887883a 	add	r3,r3,r2
   48558:	1808d7fa 	srli	r4,r3,31
   4855c:	2a21c83a 	sub	r16,r5,r8
   48560:	80800044 	addi	r2,r16,1
   48564:	20c9883a 	add	r4,r4,r3
   48568:	2027d07a 	srai	r19,r4,1
   4856c:	a085883a 	add	r2,r20,r2
   48570:	980d883a 	mov	r6,r19
   48574:	9880022e 	bgeu	r19,r2,48580 <__sfvwrite_r+0x170>
   48578:	1027883a 	mov	r19,r2
   4857c:	100d883a 	mov	r6,r2
   48580:	3881000c 	andi	r2,r7,1024
   48584:	1000b826 	beq	r2,zero,48868 <__sfvwrite_r+0x458>
   48588:	300b883a 	mov	r5,r6
   4858c:	e009883a 	mov	r4,fp
   48590:	00416980 	call	41698 <_malloc_r>
   48594:	10003126 	beq	r2,zero,4865c <__sfvwrite_r+0x24c>
   48598:	91400417 	ldw	r5,16(r18)
   4859c:	1009883a 	mov	r4,r2
   485a0:	800d883a 	mov	r6,r16
   485a4:	1023883a 	mov	r17,r2
   485a8:	0048de80 	call	48de8 <memcpy>
   485ac:	90c0030b 	ldhu	r3,12(r18)
   485b0:	00beffc4 	movi	r2,-1025
   485b4:	1886703a 	and	r3,r3,r2
   485b8:	18c02014 	ori	r3,r3,128
   485bc:	90c0030d 	sth	r3,12(r18)
   485c0:	9c07c83a 	sub	r3,r19,r16
   485c4:	8c05883a 	add	r2,r17,r16
   485c8:	a00d883a 	mov	r6,r20
   485cc:	a021883a 	mov	r16,r20
   485d0:	90800015 	stw	r2,0(r18)
   485d4:	90c00215 	stw	r3,8(r18)
   485d8:	94400415 	stw	r17,16(r18)
   485dc:	94c00515 	stw	r19,20(r18)
   485e0:	91000017 	ldw	r4,0(r18)
   485e4:	b80b883a 	mov	r5,r23
   485e8:	a023883a 	mov	r17,r20
   485ec:	0048e880 	call	48e88 <memmove>
   485f0:	90c00217 	ldw	r3,8(r18)
   485f4:	90800017 	ldw	r2,0(r18)
   485f8:	a027883a 	mov	r19,r20
   485fc:	1c07c83a 	sub	r3,r3,r16
   48600:	1405883a 	add	r2,r2,r16
   48604:	90c00215 	stw	r3,8(r18)
   48608:	a021883a 	mov	r16,r20
   4860c:	90800015 	stw	r2,0(r18)
   48610:	b0800217 	ldw	r2,8(r22)
   48614:	1405c83a 	sub	r2,r2,r16
   48618:	b0800215 	stw	r2,8(r22)
   4861c:	103fa826 	beq	r2,zero,484c0 <__sfvwrite_r+0xb0>
   48620:	a469c83a 	sub	r20,r20,r17
   48624:	91c0030b 	ldhu	r7,12(r18)
   48628:	bcef883a 	add	r23,r23,r19
   4862c:	a03fbe1e 	bne	r20,zero,48528 <__sfvwrite_r+0x118>
   48630:	adc00017 	ldw	r23,0(r21)
   48634:	ad000117 	ldw	r20,4(r21)
   48638:	ad400204 	addi	r21,r21,8
   4863c:	003fb906 	br	48524 <__sfvwrite_r+0x114>
   48640:	ac400017 	ldw	r17,0(r21)
   48644:	ac000117 	ldw	r16,4(r21)
   48648:	ad400204 	addi	r21,r21,8
   4864c:	003f8a06 	br	48478 <__sfvwrite_r+0x68>
   48650:	91400417 	ldw	r5,16(r18)
   48654:	e009883a 	mov	r4,fp
   48658:	00480fc0 	call	480fc <_free_r>
   4865c:	00800304 	movi	r2,12
   48660:	e0800015 	stw	r2,0(fp)
   48664:	9080030b 	ldhu	r2,12(r18)
   48668:	013fffc4 	movi	r4,-1
   4866c:	10801014 	ori	r2,r2,64
   48670:	9080030d 	sth	r2,12(r18)
   48674:	003f9306 	br	484c4 <__sfvwrite_r+0xb4>
   48678:	0027883a 	mov	r19,zero
   4867c:	002f883a 	mov	r23,zero
   48680:	d8000015 	stw	zero,0(sp)
   48684:	0029883a 	mov	r20,zero
   48688:	98001e26 	beq	r19,zero,48704 <__sfvwrite_r+0x2f4>
   4868c:	d8c00017 	ldw	r3,0(sp)
   48690:	1804c03a 	cmpne	r2,r3,zero
   48694:	10005e26 	beq	r2,zero,48810 <__sfvwrite_r+0x400>
   48698:	9821883a 	mov	r16,r19
   4869c:	a4c0012e 	bgeu	r20,r19,486a4 <__sfvwrite_r+0x294>
   486a0:	a021883a 	mov	r16,r20
   486a4:	91000017 	ldw	r4,0(r18)
   486a8:	90800417 	ldw	r2,16(r18)
   486ac:	91800217 	ldw	r6,8(r18)
   486b0:	91c00517 	ldw	r7,20(r18)
   486b4:	1100022e 	bgeu	r2,r4,486c0 <__sfvwrite_r+0x2b0>
   486b8:	31e3883a 	add	r17,r6,r7
   486bc:	8c001616 	blt	r17,r16,48718 <__sfvwrite_r+0x308>
   486c0:	81c03816 	blt	r16,r7,487a4 <__sfvwrite_r+0x394>
   486c4:	90c00917 	ldw	r3,36(r18)
   486c8:	91400717 	ldw	r5,28(r18)
   486cc:	e009883a 	mov	r4,fp
   486d0:	b80d883a 	mov	r6,r23
   486d4:	183ee83a 	callr	r3
   486d8:	1023883a 	mov	r17,r2
   486dc:	00bfe10e 	bge	zero,r2,48664 <__sfvwrite_r+0x254>
   486e0:	a469c83a 	sub	r20,r20,r17
   486e4:	a0001826 	beq	r20,zero,48748 <__sfvwrite_r+0x338>
   486e8:	b0800217 	ldw	r2,8(r22)
   486ec:	1445c83a 	sub	r2,r2,r17
   486f0:	b0800215 	stw	r2,8(r22)
   486f4:	103f7226 	beq	r2,zero,484c0 <__sfvwrite_r+0xb0>
   486f8:	9c67c83a 	sub	r19,r19,r17
   486fc:	bc6f883a 	add	r23,r23,r17
   48700:	983fe21e 	bne	r19,zero,4868c <__sfvwrite_r+0x27c>
   48704:	adc00017 	ldw	r23,0(r21)
   48708:	acc00117 	ldw	r19,4(r21)
   4870c:	ad400204 	addi	r21,r21,8
   48710:	d8000015 	stw	zero,0(sp)
   48714:	003fdc06 	br	48688 <__sfvwrite_r+0x278>
   48718:	b80b883a 	mov	r5,r23
   4871c:	880d883a 	mov	r6,r17
   48720:	0048e880 	call	48e88 <memmove>
   48724:	90c00017 	ldw	r3,0(r18)
   48728:	e009883a 	mov	r4,fp
   4872c:	900b883a 	mov	r5,r18
   48730:	1c47883a 	add	r3,r3,r17
   48734:	90c00015 	stw	r3,0(r18)
   48738:	00477c00 	call	477c0 <_fflush_r>
   4873c:	103fc91e 	bne	r2,zero,48664 <__sfvwrite_r+0x254>
   48740:	a469c83a 	sub	r20,r20,r17
   48744:	a03fe81e 	bne	r20,zero,486e8 <__sfvwrite_r+0x2d8>
   48748:	e009883a 	mov	r4,fp
   4874c:	900b883a 	mov	r5,r18
   48750:	00477c00 	call	477c0 <_fflush_r>
   48754:	103fc31e 	bne	r2,zero,48664 <__sfvwrite_r+0x254>
   48758:	d8000015 	stw	zero,0(sp)
   4875c:	003fe206 	br	486e8 <__sfvwrite_r+0x2d8>
   48760:	91000017 	ldw	r4,0(r18)
   48764:	90800417 	ldw	r2,16(r18)
   48768:	1100022e 	bgeu	r2,r4,48774 <__sfvwrite_r+0x364>
   4876c:	8023883a 	mov	r17,r16
   48770:	85003136 	bltu	r16,r20,48838 <__sfvwrite_r+0x428>
   48774:	91c00517 	ldw	r7,20(r18)
   48778:	a1c01836 	bltu	r20,r7,487dc <__sfvwrite_r+0x3cc>
   4877c:	90c00917 	ldw	r3,36(r18)
   48780:	91400717 	ldw	r5,28(r18)
   48784:	e009883a 	mov	r4,fp
   48788:	b80d883a 	mov	r6,r23
   4878c:	183ee83a 	callr	r3
   48790:	1021883a 	mov	r16,r2
   48794:	00bfb30e 	bge	zero,r2,48664 <__sfvwrite_r+0x254>
   48798:	1023883a 	mov	r17,r2
   4879c:	1027883a 	mov	r19,r2
   487a0:	003f9b06 	br	48610 <__sfvwrite_r+0x200>
   487a4:	b80b883a 	mov	r5,r23
   487a8:	800d883a 	mov	r6,r16
   487ac:	0048e880 	call	48e88 <memmove>
   487b0:	90c00217 	ldw	r3,8(r18)
   487b4:	90800017 	ldw	r2,0(r18)
   487b8:	8023883a 	mov	r17,r16
   487bc:	1c07c83a 	sub	r3,r3,r16
   487c0:	1405883a 	add	r2,r2,r16
   487c4:	90c00215 	stw	r3,8(r18)
   487c8:	90800015 	stw	r2,0(r18)
   487cc:	003fc406 	br	486e0 <__sfvwrite_r+0x2d0>
   487d0:	a00d883a 	mov	r6,r20
   487d4:	a021883a 	mov	r16,r20
   487d8:	003f8106 	br	485e0 <__sfvwrite_r+0x1d0>
   487dc:	b80b883a 	mov	r5,r23
   487e0:	a00d883a 	mov	r6,r20
   487e4:	0048e880 	call	48e88 <memmove>
   487e8:	90c00217 	ldw	r3,8(r18)
   487ec:	90800017 	ldw	r2,0(r18)
   487f0:	a021883a 	mov	r16,r20
   487f4:	1d07c83a 	sub	r3,r3,r20
   487f8:	1505883a 	add	r2,r2,r20
   487fc:	a023883a 	mov	r17,r20
   48800:	a027883a 	mov	r19,r20
   48804:	90c00215 	stw	r3,8(r18)
   48808:	90800015 	stw	r2,0(r18)
   4880c:	003f8006 	br	48610 <__sfvwrite_r+0x200>
   48810:	b809883a 	mov	r4,r23
   48814:	01400284 	movi	r5,10
   48818:	980d883a 	mov	r6,r19
   4881c:	0048d040 	call	48d04 <memchr>
   48820:	10001726 	beq	r2,zero,48880 <__sfvwrite_r+0x470>
   48824:	15c5c83a 	sub	r2,r2,r23
   48828:	15000044 	addi	r20,r2,1
   4882c:	00800044 	movi	r2,1
   48830:	d8800015 	stw	r2,0(sp)
   48834:	003f9806 	br	48698 <__sfvwrite_r+0x288>
   48838:	b80b883a 	mov	r5,r23
   4883c:	800d883a 	mov	r6,r16
   48840:	0048e880 	call	48e88 <memmove>
   48844:	90c00017 	ldw	r3,0(r18)
   48848:	e009883a 	mov	r4,fp
   4884c:	900b883a 	mov	r5,r18
   48850:	1c07883a 	add	r3,r3,r16
   48854:	90c00015 	stw	r3,0(r18)
   48858:	8027883a 	mov	r19,r16
   4885c:	00477c00 	call	477c0 <_fflush_r>
   48860:	103f6b26 	beq	r2,zero,48610 <__sfvwrite_r+0x200>
   48864:	003f7f06 	br	48664 <__sfvwrite_r+0x254>
   48868:	400b883a 	mov	r5,r8
   4886c:	e009883a 	mov	r4,fp
   48870:	004a1040 	call	4a104 <_realloc_r>
   48874:	103f7626 	beq	r2,zero,48650 <__sfvwrite_r+0x240>
   48878:	1023883a 	mov	r17,r2
   4887c:	003f5006 	br	485c0 <__sfvwrite_r+0x1b0>
   48880:	00c00044 	movi	r3,1
   48884:	9d000044 	addi	r20,r19,1
   48888:	d8c00015 	stw	r3,0(sp)
   4888c:	003f8206 	br	48698 <__sfvwrite_r+0x288>
   48890:	9080030b 	ldhu	r2,12(r18)
   48894:	00c00244 	movi	r3,9
   48898:	013fffc4 	movi	r4,-1
   4889c:	10801014 	ori	r2,r2,64
   488a0:	9080030d 	sth	r2,12(r18)
   488a4:	e0c00015 	stw	r3,0(fp)
   488a8:	003f0606 	br	484c4 <__sfvwrite_r+0xb4>

000488ac <_fwalk_reent>:
   488ac:	defff704 	addi	sp,sp,-36
   488b0:	dcc00315 	stw	r19,12(sp)
   488b4:	24c0b804 	addi	r19,r4,736
   488b8:	dd800615 	stw	r22,24(sp)
   488bc:	dd400515 	stw	r21,20(sp)
   488c0:	dfc00815 	stw	ra,32(sp)
   488c4:	ddc00715 	stw	r23,28(sp)
   488c8:	dd000415 	stw	r20,16(sp)
   488cc:	dc800215 	stw	r18,8(sp)
   488d0:	dc400115 	stw	r17,4(sp)
   488d4:	dc000015 	stw	r16,0(sp)
   488d8:	202b883a 	mov	r21,r4
   488dc:	282d883a 	mov	r22,r5
   488e0:	0047a480 	call	47a48 <__sfp_lock_acquire>
   488e4:	98002126 	beq	r19,zero,4896c <_fwalk_reent+0xc0>
   488e8:	002f883a 	mov	r23,zero
   488ec:	9c800117 	ldw	r18,4(r19)
   488f0:	9c000217 	ldw	r16,8(r19)
   488f4:	90bfffc4 	addi	r2,r18,-1
   488f8:	10000d16 	blt	r2,zero,48930 <_fwalk_reent+0x84>
   488fc:	0023883a 	mov	r17,zero
   48900:	053fffc4 	movi	r20,-1
   48904:	8080030f 	ldh	r2,12(r16)
   48908:	8c400044 	addi	r17,r17,1
   4890c:	10000626 	beq	r2,zero,48928 <_fwalk_reent+0x7c>
   48910:	8080038f 	ldh	r2,14(r16)
   48914:	800b883a 	mov	r5,r16
   48918:	a809883a 	mov	r4,r21
   4891c:	15000226 	beq	r2,r20,48928 <_fwalk_reent+0x7c>
   48920:	b03ee83a 	callr	r22
   48924:	b8aeb03a 	or	r23,r23,r2
   48928:	84001704 	addi	r16,r16,92
   4892c:	947ff51e 	bne	r18,r17,48904 <_fwalk_reent+0x58>
   48930:	9cc00017 	ldw	r19,0(r19)
   48934:	983fed1e 	bne	r19,zero,488ec <_fwalk_reent+0x40>
   48938:	0047a4c0 	call	47a4c <__sfp_lock_release>
   4893c:	b805883a 	mov	r2,r23
   48940:	dfc00817 	ldw	ra,32(sp)
   48944:	ddc00717 	ldw	r23,28(sp)
   48948:	dd800617 	ldw	r22,24(sp)
   4894c:	dd400517 	ldw	r21,20(sp)
   48950:	dd000417 	ldw	r20,16(sp)
   48954:	dcc00317 	ldw	r19,12(sp)
   48958:	dc800217 	ldw	r18,8(sp)
   4895c:	dc400117 	ldw	r17,4(sp)
   48960:	dc000017 	ldw	r16,0(sp)
   48964:	dec00904 	addi	sp,sp,36
   48968:	f800283a 	ret
   4896c:	002f883a 	mov	r23,zero
   48970:	003ff106 	br	48938 <_fwalk_reent+0x8c>

00048974 <_fwalk>:
   48974:	defff804 	addi	sp,sp,-32
   48978:	dcc00315 	stw	r19,12(sp)
   4897c:	24c0b804 	addi	r19,r4,736
   48980:	dd400515 	stw	r21,20(sp)
   48984:	dfc00715 	stw	ra,28(sp)
   48988:	dd800615 	stw	r22,24(sp)
   4898c:	dd000415 	stw	r20,16(sp)
   48990:	dc800215 	stw	r18,8(sp)
   48994:	dc400115 	stw	r17,4(sp)
   48998:	dc000015 	stw	r16,0(sp)
   4899c:	282b883a 	mov	r21,r5
   489a0:	0047a480 	call	47a48 <__sfp_lock_acquire>
   489a4:	98001f26 	beq	r19,zero,48a24 <_fwalk+0xb0>
   489a8:	002d883a 	mov	r22,zero
   489ac:	9c800117 	ldw	r18,4(r19)
   489b0:	9c000217 	ldw	r16,8(r19)
   489b4:	90bfffc4 	addi	r2,r18,-1
   489b8:	10000c16 	blt	r2,zero,489ec <_fwalk+0x78>
   489bc:	0023883a 	mov	r17,zero
   489c0:	053fffc4 	movi	r20,-1
   489c4:	8080030f 	ldh	r2,12(r16)
   489c8:	8c400044 	addi	r17,r17,1
   489cc:	10000526 	beq	r2,zero,489e4 <_fwalk+0x70>
   489d0:	8080038f 	ldh	r2,14(r16)
   489d4:	8009883a 	mov	r4,r16
   489d8:	15000226 	beq	r2,r20,489e4 <_fwalk+0x70>
   489dc:	a83ee83a 	callr	r21
   489e0:	b0acb03a 	or	r22,r22,r2
   489e4:	84001704 	addi	r16,r16,92
   489e8:	947ff61e 	bne	r18,r17,489c4 <_fwalk+0x50>
   489ec:	9cc00017 	ldw	r19,0(r19)
   489f0:	983fee1e 	bne	r19,zero,489ac <_fwalk+0x38>
   489f4:	0047a4c0 	call	47a4c <__sfp_lock_release>
   489f8:	b005883a 	mov	r2,r22
   489fc:	dfc00717 	ldw	ra,28(sp)
   48a00:	dd800617 	ldw	r22,24(sp)
   48a04:	dd400517 	ldw	r21,20(sp)
   48a08:	dd000417 	ldw	r20,16(sp)
   48a0c:	dcc00317 	ldw	r19,12(sp)
   48a10:	dc800217 	ldw	r18,8(sp)
   48a14:	dc400117 	ldw	r17,4(sp)
   48a18:	dc000017 	ldw	r16,0(sp)
   48a1c:	dec00804 	addi	sp,sp,32
   48a20:	f800283a 	ret
   48a24:	002d883a 	mov	r22,zero
   48a28:	003ff206 	br	489f4 <_fwalk+0x80>

00048a2c <_isatty_r>:
   48a2c:	defffd04 	addi	sp,sp,-12
   48a30:	dc000015 	stw	r16,0(sp)
   48a34:	04000174 	movhi	r16,5
   48a38:	841cb304 	addi	r16,r16,29388
   48a3c:	dc400115 	stw	r17,4(sp)
   48a40:	80000015 	stw	zero,0(r16)
   48a44:	2023883a 	mov	r17,r4
   48a48:	2809883a 	mov	r4,r5
   48a4c:	dfc00215 	stw	ra,8(sp)
   48a50:	00504ec0 	call	504ec <isatty>
   48a54:	1007883a 	mov	r3,r2
   48a58:	00bfffc4 	movi	r2,-1
   48a5c:	18800626 	beq	r3,r2,48a78 <_isatty_r+0x4c>
   48a60:	1805883a 	mov	r2,r3
   48a64:	dfc00217 	ldw	ra,8(sp)
   48a68:	dc400117 	ldw	r17,4(sp)
   48a6c:	dc000017 	ldw	r16,0(sp)
   48a70:	dec00304 	addi	sp,sp,12
   48a74:	f800283a 	ret
   48a78:	80800017 	ldw	r2,0(r16)
   48a7c:	103ff826 	beq	r2,zero,48a60 <_isatty_r+0x34>
   48a80:	88800015 	stw	r2,0(r17)
   48a84:	1805883a 	mov	r2,r3
   48a88:	dfc00217 	ldw	ra,8(sp)
   48a8c:	dc400117 	ldw	r17,4(sp)
   48a90:	dc000017 	ldw	r16,0(sp)
   48a94:	dec00304 	addi	sp,sp,12
   48a98:	f800283a 	ret

00048a9c <iswspace>:
   48a9c:	00803fc4 	movi	r2,255
   48aa0:	0007883a 	mov	r3,zero
   48aa4:	11000636 	bltu	r2,r4,48ac0 <iswspace+0x24>
   48aa8:	00800174 	movhi	r2,5
   48aac:	1095d304 	addi	r2,r2,22348
   48ab0:	10c00017 	ldw	r3,0(r2)
   48ab4:	1907883a 	add	r3,r3,r4
   48ab8:	18800003 	ldbu	r2,0(r3)
   48abc:	10c0020c 	andi	r3,r2,8
   48ac0:	1805883a 	mov	r2,r3
   48ac4:	f800283a 	ret

00048ac8 <__locale_charset>:
   48ac8:	d0a00617 	ldw	r2,-32744(gp)
   48acc:	f800283a 	ret

00048ad0 <_localeconv_r>:
   48ad0:	00800174 	movhi	r2,5
   48ad4:	108e7504 	addi	r2,r2,14804
   48ad8:	f800283a 	ret

00048adc <localeconv>:
   48adc:	00800174 	movhi	r2,5
   48ae0:	1095cf04 	addi	r2,r2,22332
   48ae4:	11000017 	ldw	r4,0(r2)
   48ae8:	0048ad01 	jmpi	48ad0 <_localeconv_r>

00048aec <_setlocale_r>:
   48aec:	defffc04 	addi	sp,sp,-16
   48af0:	00c00174 	movhi	r3,5
   48af4:	18cda004 	addi	r3,r3,13952
   48af8:	dc800215 	stw	r18,8(sp)
   48afc:	dc400115 	stw	r17,4(sp)
   48b00:	dc000015 	stw	r16,0(sp)
   48b04:	2023883a 	mov	r17,r4
   48b08:	2825883a 	mov	r18,r5
   48b0c:	dfc00315 	stw	ra,12(sp)
   48b10:	3021883a 	mov	r16,r6
   48b14:	3009883a 	mov	r4,r6
   48b18:	180b883a 	mov	r5,r3
   48b1c:	30000926 	beq	r6,zero,48b44 <_setlocale_r+0x58>
   48b20:	004a9040 	call	4a904 <strcmp>
   48b24:	8009883a 	mov	r4,r16
   48b28:	01400174 	movhi	r5,5
   48b2c:	294db104 	addi	r5,r5,14020
   48b30:	10000b1e 	bne	r2,zero,48b60 <_setlocale_r+0x74>
   48b34:	8c000d15 	stw	r16,52(r17)
   48b38:	8c800c15 	stw	r18,48(r17)
   48b3c:	00c00174 	movhi	r3,5
   48b40:	18cda004 	addi	r3,r3,13952
   48b44:	1805883a 	mov	r2,r3
   48b48:	dfc00317 	ldw	ra,12(sp)
   48b4c:	dc800217 	ldw	r18,8(sp)
   48b50:	dc400117 	ldw	r17,4(sp)
   48b54:	dc000017 	ldw	r16,0(sp)
   48b58:	dec00404 	addi	sp,sp,16
   48b5c:	f800283a 	ret
   48b60:	004a9040 	call	4a904 <strcmp>
   48b64:	0007883a 	mov	r3,zero
   48b68:	103ff226 	beq	r2,zero,48b34 <_setlocale_r+0x48>
   48b6c:	003ff506 	br	48b44 <_setlocale_r+0x58>

00048b70 <setlocale>:
   48b70:	01800174 	movhi	r6,5
   48b74:	3195cf04 	addi	r6,r6,22332
   48b78:	2007883a 	mov	r3,r4
   48b7c:	31000017 	ldw	r4,0(r6)
   48b80:	280d883a 	mov	r6,r5
   48b84:	180b883a 	mov	r5,r3
   48b88:	0048aec1 	jmpi	48aec <_setlocale_r>

00048b8c <_lseek_r>:
   48b8c:	defffd04 	addi	sp,sp,-12
   48b90:	dc000015 	stw	r16,0(sp)
   48b94:	04000174 	movhi	r16,5
   48b98:	841cb304 	addi	r16,r16,29388
   48b9c:	dc400115 	stw	r17,4(sp)
   48ba0:	80000015 	stw	zero,0(r16)
   48ba4:	2023883a 	mov	r17,r4
   48ba8:	2809883a 	mov	r4,r5
   48bac:	300b883a 	mov	r5,r6
   48bb0:	380d883a 	mov	r6,r7
   48bb4:	dfc00215 	stw	ra,8(sp)
   48bb8:	00506fc0 	call	506fc <lseek>
   48bbc:	1007883a 	mov	r3,r2
   48bc0:	00bfffc4 	movi	r2,-1
   48bc4:	18800626 	beq	r3,r2,48be0 <_lseek_r+0x54>
   48bc8:	1805883a 	mov	r2,r3
   48bcc:	dfc00217 	ldw	ra,8(sp)
   48bd0:	dc400117 	ldw	r17,4(sp)
   48bd4:	dc000017 	ldw	r16,0(sp)
   48bd8:	dec00304 	addi	sp,sp,12
   48bdc:	f800283a 	ret
   48be0:	80800017 	ldw	r2,0(r16)
   48be4:	103ff826 	beq	r2,zero,48bc8 <_lseek_r+0x3c>
   48be8:	88800015 	stw	r2,0(r17)
   48bec:	1805883a 	mov	r2,r3
   48bf0:	dfc00217 	ldw	ra,8(sp)
   48bf4:	dc400117 	ldw	r17,4(sp)
   48bf8:	dc000017 	ldw	r16,0(sp)
   48bfc:	dec00304 	addi	sp,sp,12
   48c00:	f800283a 	ret

00048c04 <_mbrtowc_r>:
   48c04:	defffc04 	addi	sp,sp,-16
   48c08:	dc400215 	stw	r17,8(sp)
   48c0c:	dc000115 	stw	r16,4(sp)
   48c10:	dfc00315 	stw	ra,12(sp)
   48c14:	dc000417 	ldw	r16,16(sp)
   48c18:	2023883a 	mov	r17,r4
   48c1c:	30000f26 	beq	r6,zero,48c5c <_mbrtowc_r+0x58>
   48c20:	dc000015 	stw	r16,0(sp)
   48c24:	0048cc40 	call	48cc4 <_mbtowc_r>
   48c28:	1007883a 	mov	r3,r2
   48c2c:	00bfffc4 	movi	r2,-1
   48c30:	1809883a 	mov	r4,r3
   48c34:	1880111e 	bne	r3,r2,48c7c <_mbrtowc_r+0x78>
   48c38:	80000015 	stw	zero,0(r16)
   48c3c:	00802284 	movi	r2,138
   48c40:	88800015 	stw	r2,0(r17)
   48c44:	2005883a 	mov	r2,r4
   48c48:	dfc00317 	ldw	ra,12(sp)
   48c4c:	dc400217 	ldw	r17,8(sp)
   48c50:	dc000117 	ldw	r16,4(sp)
   48c54:	dec00404 	addi	sp,sp,16
   48c58:	f800283a 	ret
   48c5c:	000b883a 	mov	r5,zero
   48c60:	01800174 	movhi	r6,5
   48c64:	318db104 	addi	r6,r6,14020
   48c68:	01c00044 	movi	r7,1
   48c6c:	dc000015 	stw	r16,0(sp)
   48c70:	0048cc40 	call	48cc4 <_mbtowc_r>
   48c74:	1007883a 	mov	r3,r2
   48c78:	003fec06 	br	48c2c <_mbrtowc_r+0x28>
   48c7c:	1809883a 	mov	r4,r3
   48c80:	003ff006 	br	48c44 <_mbrtowc_r+0x40>

00048c84 <mbrtowc>:
   48c84:	00800174 	movhi	r2,5
   48c88:	1095cf04 	addi	r2,r2,22332
   48c8c:	2017883a 	mov	r11,r4
   48c90:	11000017 	ldw	r4,0(r2)
   48c94:	defffe04 	addi	sp,sp,-8
   48c98:	3013883a 	mov	r9,r6
   48c9c:	2805883a 	mov	r2,r5
   48ca0:	d9c00015 	stw	r7,0(sp)
   48ca4:	580b883a 	mov	r5,r11
   48ca8:	100d883a 	mov	r6,r2
   48cac:	480f883a 	mov	r7,r9
   48cb0:	dfc00115 	stw	ra,4(sp)
   48cb4:	0048c040 	call	48c04 <_mbrtowc_r>
   48cb8:	dfc00117 	ldw	ra,4(sp)
   48cbc:	dec00204 	addi	sp,sp,8
   48cc0:	f800283a 	ret

00048cc4 <_mbtowc_r>:
   48cc4:	deffff04 	addi	sp,sp,-4
   48cc8:	0005883a 	mov	r2,zero
   48ccc:	28000326 	beq	r5,zero,48cdc <_mbtowc_r+0x18>
   48cd0:	3000041e 	bne	r6,zero,48ce4 <_mbtowc_r+0x20>
   48cd4:	dec00104 	addi	sp,sp,4
   48cd8:	f800283a 	ret
   48cdc:	d80b883a 	mov	r5,sp
   48ce0:	303ffc26 	beq	r6,zero,48cd4 <_mbtowc_r+0x10>
   48ce4:	00bfff84 	movi	r2,-2
   48ce8:	383ffa26 	beq	r7,zero,48cd4 <_mbtowc_r+0x10>
   48cec:	30800003 	ldbu	r2,0(r6)
   48cf0:	28800015 	stw	r2,0(r5)
   48cf4:	30c00003 	ldbu	r3,0(r6)
   48cf8:	1804c03a 	cmpne	r2,r3,zero
   48cfc:	dec00104 	addi	sp,sp,4
   48d00:	f800283a 	ret

00048d04 <memchr>:
   48d04:	008000c4 	movi	r2,3
   48d08:	29403fcc 	andi	r5,r5,255
   48d0c:	2007883a 	mov	r3,r4
   48d10:	1180022e 	bgeu	r2,r6,48d1c <memchr+0x18>
   48d14:	2084703a 	and	r2,r4,r2
   48d18:	10000b26 	beq	r2,zero,48d48 <memchr+0x44>
   48d1c:	313fffc4 	addi	r4,r6,-1
   48d20:	3000051e 	bne	r6,zero,48d38 <memchr+0x34>
   48d24:	00002c06 	br	48dd8 <memchr+0xd4>
   48d28:	213fffc4 	addi	r4,r4,-1
   48d2c:	00bfffc4 	movi	r2,-1
   48d30:	18c00044 	addi	r3,r3,1
   48d34:	20802826 	beq	r4,r2,48dd8 <memchr+0xd4>
   48d38:	18800003 	ldbu	r2,0(r3)
   48d3c:	28bffa1e 	bne	r5,r2,48d28 <memchr+0x24>
   48d40:	1805883a 	mov	r2,r3
   48d44:	f800283a 	ret
   48d48:	0011883a 	mov	r8,zero
   48d4c:	0007883a 	mov	r3,zero
   48d50:	01c00104 	movi	r7,4
   48d54:	4004923a 	slli	r2,r8,8
   48d58:	18c00044 	addi	r3,r3,1
   48d5c:	1151883a 	add	r8,r2,r5
   48d60:	19fffc1e 	bne	r3,r7,48d54 <memchr+0x50>
   48d64:	02bfbff4 	movhi	r10,65279
   48d68:	52bfbfc4 	addi	r10,r10,-257
   48d6c:	02602074 	movhi	r9,32897
   48d70:	4a602004 	addi	r9,r9,-32640
   48d74:	02c000c4 	movi	r11,3
   48d78:	20800017 	ldw	r2,0(r4)
   48d7c:	31bfff04 	addi	r6,r6,-4
   48d80:	200f883a 	mov	r7,r4
   48d84:	1204f03a 	xor	r2,r2,r8
   48d88:	1287883a 	add	r3,r2,r10
   48d8c:	1a46703a 	and	r3,r3,r9
   48d90:	0084303a 	nor	r2,zero,r2
   48d94:	10c4703a 	and	r2,r2,r3
   48d98:	10000b26 	beq	r2,zero,48dc8 <memchr+0xc4>
   48d9c:	20800003 	ldbu	r2,0(r4)
   48da0:	28800f26 	beq	r5,r2,48de0 <memchr+0xdc>
   48da4:	20800043 	ldbu	r2,1(r4)
   48da8:	21c00044 	addi	r7,r4,1
   48dac:	28800c26 	beq	r5,r2,48de0 <memchr+0xdc>
   48db0:	20800083 	ldbu	r2,2(r4)
   48db4:	21c00084 	addi	r7,r4,2
   48db8:	28800926 	beq	r5,r2,48de0 <memchr+0xdc>
   48dbc:	208000c3 	ldbu	r2,3(r4)
   48dc0:	21c000c4 	addi	r7,r4,3
   48dc4:	28800626 	beq	r5,r2,48de0 <memchr+0xdc>
   48dc8:	21000104 	addi	r4,r4,4
   48dcc:	59bfea36 	bltu	r11,r6,48d78 <memchr+0x74>
   48dd0:	2007883a 	mov	r3,r4
   48dd4:	003fd106 	br	48d1c <memchr+0x18>
   48dd8:	0005883a 	mov	r2,zero
   48ddc:	f800283a 	ret
   48de0:	3805883a 	mov	r2,r7
   48de4:	f800283a 	ret

00048de8 <memcpy>:
   48de8:	01c003c4 	movi	r7,15
   48dec:	2007883a 	mov	r3,r4
   48df0:	3980032e 	bgeu	r7,r6,48e00 <memcpy+0x18>
   48df4:	2904b03a 	or	r2,r5,r4
   48df8:	108000cc 	andi	r2,r2,3
   48dfc:	10000926 	beq	r2,zero,48e24 <memcpy+0x3c>
   48e00:	30000626 	beq	r6,zero,48e1c <memcpy+0x34>
   48e04:	30cd883a 	add	r6,r6,r3
   48e08:	28800003 	ldbu	r2,0(r5)
   48e0c:	29400044 	addi	r5,r5,1
   48e10:	18800005 	stb	r2,0(r3)
   48e14:	18c00044 	addi	r3,r3,1
   48e18:	30fffb1e 	bne	r6,r3,48e08 <memcpy+0x20>
   48e1c:	2005883a 	mov	r2,r4
   48e20:	f800283a 	ret
   48e24:	3811883a 	mov	r8,r7
   48e28:	200f883a 	mov	r7,r4
   48e2c:	28c00017 	ldw	r3,0(r5)
   48e30:	31bffc04 	addi	r6,r6,-16
   48e34:	38c00015 	stw	r3,0(r7)
   48e38:	28800117 	ldw	r2,4(r5)
   48e3c:	38800115 	stw	r2,4(r7)
   48e40:	28c00217 	ldw	r3,8(r5)
   48e44:	38c00215 	stw	r3,8(r7)
   48e48:	28800317 	ldw	r2,12(r5)
   48e4c:	29400404 	addi	r5,r5,16
   48e50:	38800315 	stw	r2,12(r7)
   48e54:	39c00404 	addi	r7,r7,16
   48e58:	41bff436 	bltu	r8,r6,48e2c <memcpy+0x44>
   48e5c:	008000c4 	movi	r2,3
   48e60:	1180072e 	bgeu	r2,r6,48e80 <memcpy+0x98>
   48e64:	1007883a 	mov	r3,r2
   48e68:	28800017 	ldw	r2,0(r5)
   48e6c:	31bfff04 	addi	r6,r6,-4
   48e70:	29400104 	addi	r5,r5,4
   48e74:	38800015 	stw	r2,0(r7)
   48e78:	39c00104 	addi	r7,r7,4
   48e7c:	19bffa36 	bltu	r3,r6,48e68 <memcpy+0x80>
   48e80:	3807883a 	mov	r3,r7
   48e84:	003fde06 	br	48e00 <memcpy+0x18>

00048e88 <memmove>:
   48e88:	2807883a 	mov	r3,r5
   48e8c:	2011883a 	mov	r8,r4
   48e90:	29000c2e 	bgeu	r5,r4,48ec4 <memmove+0x3c>
   48e94:	298f883a 	add	r7,r5,r6
   48e98:	21c00a2e 	bgeu	r4,r7,48ec4 <memmove+0x3c>
   48e9c:	30000726 	beq	r6,zero,48ebc <memmove+0x34>
   48ea0:	2187883a 	add	r3,r4,r6
   48ea4:	198dc83a 	sub	r6,r3,r6
   48ea8:	39ffffc4 	addi	r7,r7,-1
   48eac:	38800003 	ldbu	r2,0(r7)
   48eb0:	18ffffc4 	addi	r3,r3,-1
   48eb4:	18800005 	stb	r2,0(r3)
   48eb8:	19bffb1e 	bne	r3,r6,48ea8 <memmove+0x20>
   48ebc:	2005883a 	mov	r2,r4
   48ec0:	f800283a 	ret
   48ec4:	01c003c4 	movi	r7,15
   48ec8:	39800a36 	bltu	r7,r6,48ef4 <memmove+0x6c>
   48ecc:	303ffb26 	beq	r6,zero,48ebc <memmove+0x34>
   48ed0:	400f883a 	mov	r7,r8
   48ed4:	320d883a 	add	r6,r6,r8
   48ed8:	28800003 	ldbu	r2,0(r5)
   48edc:	29400044 	addi	r5,r5,1
   48ee0:	38800005 	stb	r2,0(r7)
   48ee4:	39c00044 	addi	r7,r7,1
   48ee8:	39bffb1e 	bne	r7,r6,48ed8 <memmove+0x50>
   48eec:	2005883a 	mov	r2,r4
   48ef0:	f800283a 	ret
   48ef4:	1904b03a 	or	r2,r3,r4
   48ef8:	108000cc 	andi	r2,r2,3
   48efc:	103ff31e 	bne	r2,zero,48ecc <memmove+0x44>
   48f00:	3811883a 	mov	r8,r7
   48f04:	180b883a 	mov	r5,r3
   48f08:	200f883a 	mov	r7,r4
   48f0c:	28c00017 	ldw	r3,0(r5)
   48f10:	31bffc04 	addi	r6,r6,-16
   48f14:	38c00015 	stw	r3,0(r7)
   48f18:	28800117 	ldw	r2,4(r5)
   48f1c:	38800115 	stw	r2,4(r7)
   48f20:	28c00217 	ldw	r3,8(r5)
   48f24:	38c00215 	stw	r3,8(r7)
   48f28:	28800317 	ldw	r2,12(r5)
   48f2c:	29400404 	addi	r5,r5,16
   48f30:	38800315 	stw	r2,12(r7)
   48f34:	39c00404 	addi	r7,r7,16
   48f38:	41bff436 	bltu	r8,r6,48f0c <memmove+0x84>
   48f3c:	008000c4 	movi	r2,3
   48f40:	1180072e 	bgeu	r2,r6,48f60 <memmove+0xd8>
   48f44:	1007883a 	mov	r3,r2
   48f48:	28800017 	ldw	r2,0(r5)
   48f4c:	31bfff04 	addi	r6,r6,-4
   48f50:	29400104 	addi	r5,r5,4
   48f54:	38800015 	stw	r2,0(r7)
   48f58:	39c00104 	addi	r7,r7,4
   48f5c:	19bffa36 	bltu	r3,r6,48f48 <memmove+0xc0>
   48f60:	3811883a 	mov	r8,r7
   48f64:	003fd906 	br	48ecc <memmove+0x44>

00048f68 <memset>:
   48f68:	008000c4 	movi	r2,3
   48f6c:	29403fcc 	andi	r5,r5,255
   48f70:	2007883a 	mov	r3,r4
   48f74:	1180022e 	bgeu	r2,r6,48f80 <memset+0x18>
   48f78:	2084703a 	and	r2,r4,r2
   48f7c:	10000826 	beq	r2,zero,48fa0 <memset+0x38>
   48f80:	30000526 	beq	r6,zero,48f98 <memset+0x30>
   48f84:	2805883a 	mov	r2,r5
   48f88:	30cd883a 	add	r6,r6,r3
   48f8c:	18800005 	stb	r2,0(r3)
   48f90:	18c00044 	addi	r3,r3,1
   48f94:	19bffd1e 	bne	r3,r6,48f8c <memset+0x24>
   48f98:	2005883a 	mov	r2,r4
   48f9c:	f800283a 	ret
   48fa0:	2804923a 	slli	r2,r5,8
   48fa4:	020003c4 	movi	r8,15
   48fa8:	200f883a 	mov	r7,r4
   48fac:	2884b03a 	or	r2,r5,r2
   48fb0:	1006943a 	slli	r3,r2,16
   48fb4:	10c6b03a 	or	r3,r2,r3
   48fb8:	41800a2e 	bgeu	r8,r6,48fe4 <memset+0x7c>
   48fbc:	4005883a 	mov	r2,r8
   48fc0:	31bffc04 	addi	r6,r6,-16
   48fc4:	38c00015 	stw	r3,0(r7)
   48fc8:	38c00115 	stw	r3,4(r7)
   48fcc:	38c00215 	stw	r3,8(r7)
   48fd0:	38c00315 	stw	r3,12(r7)
   48fd4:	39c00404 	addi	r7,r7,16
   48fd8:	11bff936 	bltu	r2,r6,48fc0 <memset+0x58>
   48fdc:	008000c4 	movi	r2,3
   48fe0:	1180052e 	bgeu	r2,r6,48ff8 <memset+0x90>
   48fe4:	31bfff04 	addi	r6,r6,-4
   48fe8:	008000c4 	movi	r2,3
   48fec:	38c00015 	stw	r3,0(r7)
   48ff0:	39c00104 	addi	r7,r7,4
   48ff4:	11bffb36 	bltu	r2,r6,48fe4 <memset+0x7c>
   48ff8:	3807883a 	mov	r3,r7
   48ffc:	003fe006 	br	48f80 <memset+0x18>

00049000 <_Bfree>:
   49000:	28000826 	beq	r5,zero,49024 <_Bfree+0x24>
   49004:	28800117 	ldw	r2,4(r5)
   49008:	21001317 	ldw	r4,76(r4)
   4900c:	1085883a 	add	r2,r2,r2
   49010:	1085883a 	add	r2,r2,r2
   49014:	1105883a 	add	r2,r2,r4
   49018:	10c00017 	ldw	r3,0(r2)
   4901c:	28c00015 	stw	r3,0(r5)
   49020:	11400015 	stw	r5,0(r2)
   49024:	f800283a 	ret

00049028 <__hi0bits>:
   49028:	20bfffec 	andhi	r2,r4,65535
   4902c:	10001426 	beq	r2,zero,49080 <__hi0bits+0x58>
   49030:	0007883a 	mov	r3,zero
   49034:	20bfc02c 	andhi	r2,r4,65280
   49038:	1000021e 	bne	r2,zero,49044 <__hi0bits+0x1c>
   4903c:	2008923a 	slli	r4,r4,8
   49040:	18c00204 	addi	r3,r3,8
   49044:	20bc002c 	andhi	r2,r4,61440
   49048:	1000021e 	bne	r2,zero,49054 <__hi0bits+0x2c>
   4904c:	2008913a 	slli	r4,r4,4
   49050:	18c00104 	addi	r3,r3,4
   49054:	20b0002c 	andhi	r2,r4,49152
   49058:	1000031e 	bne	r2,zero,49068 <__hi0bits+0x40>
   4905c:	2105883a 	add	r2,r4,r4
   49060:	18c00084 	addi	r3,r3,2
   49064:	1089883a 	add	r4,r2,r2
   49068:	20000316 	blt	r4,zero,49078 <__hi0bits+0x50>
   4906c:	2090002c 	andhi	r2,r4,16384
   49070:	10000626 	beq	r2,zero,4908c <__hi0bits+0x64>
   49074:	18c00044 	addi	r3,r3,1
   49078:	1805883a 	mov	r2,r3
   4907c:	f800283a 	ret
   49080:	2008943a 	slli	r4,r4,16
   49084:	00c00404 	movi	r3,16
   49088:	003fea06 	br	49034 <__hi0bits+0xc>
   4908c:	00c00804 	movi	r3,32
   49090:	1805883a 	mov	r2,r3
   49094:	f800283a 	ret

00049098 <__lo0bits>:
   49098:	20c00017 	ldw	r3,0(r4)
   4909c:	188001cc 	andi	r2,r3,7
   490a0:	10000a26 	beq	r2,zero,490cc <__lo0bits+0x34>
   490a4:	1880004c 	andi	r2,r3,1
   490a8:	1005003a 	cmpeq	r2,r2,zero
   490ac:	10002126 	beq	r2,zero,49134 <__lo0bits+0x9c>
   490b0:	1880008c 	andi	r2,r3,2
   490b4:	1000251e 	bne	r2,zero,4914c <__lo0bits+0xb4>
   490b8:	1804d0ba 	srli	r2,r3,2
   490bc:	01400084 	movi	r5,2
   490c0:	20800015 	stw	r2,0(r4)
   490c4:	2805883a 	mov	r2,r5
   490c8:	f800283a 	ret
   490cc:	18bfffcc 	andi	r2,r3,65535
   490d0:	10001526 	beq	r2,zero,49128 <__lo0bits+0x90>
   490d4:	000b883a 	mov	r5,zero
   490d8:	18803fcc 	andi	r2,r3,255
   490dc:	1000021e 	bne	r2,zero,490e8 <__lo0bits+0x50>
   490e0:	1806d23a 	srli	r3,r3,8
   490e4:	29400204 	addi	r5,r5,8
   490e8:	188003cc 	andi	r2,r3,15
   490ec:	1000021e 	bne	r2,zero,490f8 <__lo0bits+0x60>
   490f0:	1806d13a 	srli	r3,r3,4
   490f4:	29400104 	addi	r5,r5,4
   490f8:	188000cc 	andi	r2,r3,3
   490fc:	1000021e 	bne	r2,zero,49108 <__lo0bits+0x70>
   49100:	1806d0ba 	srli	r3,r3,2
   49104:	29400084 	addi	r5,r5,2
   49108:	1880004c 	andi	r2,r3,1
   4910c:	1000031e 	bne	r2,zero,4911c <__lo0bits+0x84>
   49110:	1806d07a 	srli	r3,r3,1
   49114:	18000a26 	beq	r3,zero,49140 <__lo0bits+0xa8>
   49118:	29400044 	addi	r5,r5,1
   4911c:	2805883a 	mov	r2,r5
   49120:	20c00015 	stw	r3,0(r4)
   49124:	f800283a 	ret
   49128:	1806d43a 	srli	r3,r3,16
   4912c:	01400404 	movi	r5,16
   49130:	003fe906 	br	490d8 <__lo0bits+0x40>
   49134:	000b883a 	mov	r5,zero
   49138:	2805883a 	mov	r2,r5
   4913c:	f800283a 	ret
   49140:	01400804 	movi	r5,32
   49144:	2805883a 	mov	r2,r5
   49148:	f800283a 	ret
   4914c:	1804d07a 	srli	r2,r3,1
   49150:	01400044 	movi	r5,1
   49154:	20800015 	stw	r2,0(r4)
   49158:	003fda06 	br	490c4 <__lo0bits+0x2c>

0004915c <__mcmp>:
   4915c:	20800417 	ldw	r2,16(r4)
   49160:	28c00417 	ldw	r3,16(r5)
   49164:	10cfc83a 	sub	r7,r2,r3
   49168:	38000c1e 	bne	r7,zero,4919c <__mcmp+0x40>
   4916c:	18c5883a 	add	r2,r3,r3
   49170:	1085883a 	add	r2,r2,r2
   49174:	10c00504 	addi	r3,r2,20
   49178:	21000504 	addi	r4,r4,20
   4917c:	28cb883a 	add	r5,r5,r3
   49180:	2085883a 	add	r2,r4,r2
   49184:	10bfff04 	addi	r2,r2,-4
   49188:	297fff04 	addi	r5,r5,-4
   4918c:	11800017 	ldw	r6,0(r2)
   49190:	28c00017 	ldw	r3,0(r5)
   49194:	30c0031e 	bne	r6,r3,491a4 <__mcmp+0x48>
   49198:	20bffa36 	bltu	r4,r2,49184 <__mcmp+0x28>
   4919c:	3805883a 	mov	r2,r7
   491a0:	f800283a 	ret
   491a4:	30c00336 	bltu	r6,r3,491b4 <__mcmp+0x58>
   491a8:	01c00044 	movi	r7,1
   491ac:	3805883a 	mov	r2,r7
   491b0:	f800283a 	ret
   491b4:	01ffffc4 	movi	r7,-1
   491b8:	003ff806 	br	4919c <__mcmp+0x40>

000491bc <__ulp>:
   491bc:	295ffc2c 	andhi	r5,r5,32752
   491c0:	013f3034 	movhi	r4,64704
   491c4:	290b883a 	add	r5,r5,r4
   491c8:	0145c83a 	sub	r2,zero,r5
   491cc:	1007d53a 	srai	r3,r2,20
   491d0:	000d883a 	mov	r6,zero
   491d4:	0140040e 	bge	zero,r5,491e8 <__ulp+0x2c>
   491d8:	280f883a 	mov	r7,r5
   491dc:	3807883a 	mov	r3,r7
   491e0:	3005883a 	mov	r2,r6
   491e4:	f800283a 	ret
   491e8:	008004c4 	movi	r2,19
   491ec:	193ffb04 	addi	r4,r3,-20
   491f0:	10c00c0e 	bge	r2,r3,49224 <__ulp+0x68>
   491f4:	008007c4 	movi	r2,31
   491f8:	1107c83a 	sub	r3,r2,r4
   491fc:	00800784 	movi	r2,30
   49200:	01400044 	movi	r5,1
   49204:	11000216 	blt	r2,r4,49210 <__ulp+0x54>
   49208:	00800044 	movi	r2,1
   4920c:	10ca983a 	sll	r5,r2,r3
   49210:	000f883a 	mov	r7,zero
   49214:	280d883a 	mov	r6,r5
   49218:	3807883a 	mov	r3,r7
   4921c:	3005883a 	mov	r2,r6
   49220:	f800283a 	ret
   49224:	00800234 	movhi	r2,8
   49228:	10cfd83a 	sra	r7,r2,r3
   4922c:	000d883a 	mov	r6,zero
   49230:	3005883a 	mov	r2,r6
   49234:	3807883a 	mov	r3,r7
   49238:	f800283a 	ret

0004923c <__b2d>:
   4923c:	20800417 	ldw	r2,16(r4)
   49240:	defff904 	addi	sp,sp,-28
   49244:	dd000415 	stw	r20,16(sp)
   49248:	1085883a 	add	r2,r2,r2
   4924c:	25000504 	addi	r20,r4,20
   49250:	1085883a 	add	r2,r2,r2
   49254:	dc000015 	stw	r16,0(sp)
   49258:	a0a1883a 	add	r16,r20,r2
   4925c:	dd400515 	stw	r21,20(sp)
   49260:	857fff17 	ldw	r21,-4(r16)
   49264:	dc400115 	stw	r17,4(sp)
   49268:	dfc00615 	stw	ra,24(sp)
   4926c:	a809883a 	mov	r4,r21
   49270:	2823883a 	mov	r17,r5
   49274:	dcc00315 	stw	r19,12(sp)
   49278:	dc800215 	stw	r18,8(sp)
   4927c:	00490280 	call	49028 <__hi0bits>
   49280:	100b883a 	mov	r5,r2
   49284:	00800804 	movi	r2,32
   49288:	1145c83a 	sub	r2,r2,r5
   4928c:	88800015 	stw	r2,0(r17)
   49290:	00800284 	movi	r2,10
   49294:	80ffff04 	addi	r3,r16,-4
   49298:	11401416 	blt	r2,r5,492ec <__b2d+0xb0>
   4929c:	008002c4 	movi	r2,11
   492a0:	1149c83a 	sub	r4,r2,r5
   492a4:	a0c02736 	bltu	r20,r3,49344 <__b2d+0x108>
   492a8:	000d883a 	mov	r6,zero
   492ac:	28800544 	addi	r2,r5,21
   492b0:	a906d83a 	srl	r3,r21,r4
   492b4:	a884983a 	sll	r2,r21,r2
   492b8:	1ccffc34 	orhi	r19,r3,16368
   492bc:	11a4b03a 	or	r18,r2,r6
   492c0:	9005883a 	mov	r2,r18
   492c4:	9807883a 	mov	r3,r19
   492c8:	dfc00617 	ldw	ra,24(sp)
   492cc:	dd400517 	ldw	r21,20(sp)
   492d0:	dd000417 	ldw	r20,16(sp)
   492d4:	dcc00317 	ldw	r19,12(sp)
   492d8:	dc800217 	ldw	r18,8(sp)
   492dc:	dc400117 	ldw	r17,4(sp)
   492e0:	dc000017 	ldw	r16,0(sp)
   492e4:	dec00704 	addi	sp,sp,28
   492e8:	f800283a 	ret
   492ec:	a0c00e36 	bltu	r20,r3,49328 <__b2d+0xec>
   492f0:	293ffd44 	addi	r4,r5,-11
   492f4:	000d883a 	mov	r6,zero
   492f8:	20000f26 	beq	r4,zero,49338 <__b2d+0xfc>
   492fc:	00800804 	movi	r2,32
   49300:	110bc83a 	sub	r5,r2,r4
   49304:	a0c01236 	bltu	r20,r3,49350 <__b2d+0x114>
   49308:	000f883a 	mov	r7,zero
   4930c:	a904983a 	sll	r2,r21,r4
   49310:	3146d83a 	srl	r3,r6,r5
   49314:	3108983a 	sll	r4,r6,r4
   49318:	108ffc34 	orhi	r2,r2,16368
   4931c:	18a6b03a 	or	r19,r3,r2
   49320:	3924b03a 	or	r18,r7,r4
   49324:	003fe606 	br	492c0 <__b2d+0x84>
   49328:	293ffd44 	addi	r4,r5,-11
   4932c:	81bffe17 	ldw	r6,-8(r16)
   49330:	80fffe04 	addi	r3,r16,-8
   49334:	203ff11e 	bne	r4,zero,492fc <__b2d+0xc0>
   49338:	accffc34 	orhi	r19,r21,16368
   4933c:	3025883a 	mov	r18,r6
   49340:	003fdf06 	br	492c0 <__b2d+0x84>
   49344:	18bfff17 	ldw	r2,-4(r3)
   49348:	110cd83a 	srl	r6,r2,r4
   4934c:	003fd706 	br	492ac <__b2d+0x70>
   49350:	18bfff17 	ldw	r2,-4(r3)
   49354:	114ed83a 	srl	r7,r2,r5
   49358:	003fec06 	br	4930c <__b2d+0xd0>

0004935c <__ratio>:
   4935c:	defff904 	addi	sp,sp,-28
   49360:	dc400215 	stw	r17,8(sp)
   49364:	2823883a 	mov	r17,r5
   49368:	d80b883a 	mov	r5,sp
   4936c:	dfc00615 	stw	ra,24(sp)
   49370:	dd000515 	stw	r20,20(sp)
   49374:	dcc00415 	stw	r19,16(sp)
   49378:	dc800315 	stw	r18,12(sp)
   4937c:	2025883a 	mov	r18,r4
   49380:	004923c0 	call	4923c <__b2d>
   49384:	8809883a 	mov	r4,r17
   49388:	d9400104 	addi	r5,sp,4
   4938c:	1027883a 	mov	r19,r2
   49390:	1829883a 	mov	r20,r3
   49394:	004923c0 	call	4923c <__b2d>
   49398:	89000417 	ldw	r4,16(r17)
   4939c:	91c00417 	ldw	r7,16(r18)
   493a0:	d9800117 	ldw	r6,4(sp)
   493a4:	180b883a 	mov	r5,r3
   493a8:	390fc83a 	sub	r7,r7,r4
   493ac:	1009883a 	mov	r4,r2
   493b0:	d8800017 	ldw	r2,0(sp)
   493b4:	380e917a 	slli	r7,r7,5
   493b8:	2011883a 	mov	r8,r4
   493bc:	1185c83a 	sub	r2,r2,r6
   493c0:	11c5883a 	add	r2,r2,r7
   493c4:	1006953a 	slli	r3,r2,20
   493c8:	2813883a 	mov	r9,r5
   493cc:	00800d0e 	bge	zero,r2,49404 <__ratio+0xa8>
   493d0:	1d29883a 	add	r20,r3,r20
   493d4:	a00b883a 	mov	r5,r20
   493d8:	480f883a 	mov	r7,r9
   493dc:	9809883a 	mov	r4,r19
   493e0:	400d883a 	mov	r6,r8
   493e4:	004f2900 	call	4f290 <__divdf3>
   493e8:	dfc00617 	ldw	ra,24(sp)
   493ec:	dd000517 	ldw	r20,20(sp)
   493f0:	dcc00417 	ldw	r19,16(sp)
   493f4:	dc800317 	ldw	r18,12(sp)
   493f8:	dc400217 	ldw	r17,8(sp)
   493fc:	dec00704 	addi	sp,sp,28
   49400:	f800283a 	ret
   49404:	28d3c83a 	sub	r9,r5,r3
   49408:	003ff206 	br	493d4 <__ratio+0x78>

0004940c <_mprec_log10>:
   4940c:	defffe04 	addi	sp,sp,-8
   49410:	008005c4 	movi	r2,23
   49414:	dc000015 	stw	r16,0(sp)
   49418:	dfc00115 	stw	ra,4(sp)
   4941c:	2021883a 	mov	r16,r4
   49420:	11000c16 	blt	r2,r4,49454 <_mprec_log10+0x48>
   49424:	200490fa 	slli	r2,r4,3
   49428:	00c00174 	movhi	r3,5
   4942c:	18ce8104 	addi	r3,r3,14852
   49430:	10c5883a 	add	r2,r2,r3
   49434:	12400117 	ldw	r9,4(r2)
   49438:	12000017 	ldw	r8,0(r2)
   4943c:	4807883a 	mov	r3,r9
   49440:	4005883a 	mov	r2,r8
   49444:	dfc00117 	ldw	ra,4(sp)
   49448:	dc000017 	ldw	r16,0(sp)
   4944c:	dec00204 	addi	sp,sp,8
   49450:	f800283a 	ret
   49454:	0011883a 	mov	r8,zero
   49458:	024ffc34 	movhi	r9,16368
   4945c:	0005883a 	mov	r2,zero
   49460:	00d00934 	movhi	r3,16420
   49464:	480b883a 	mov	r5,r9
   49468:	4009883a 	mov	r4,r8
   4946c:	180f883a 	mov	r7,r3
   49470:	100d883a 	mov	r6,r2
   49474:	004eecc0 	call	4eecc <__muldf3>
   49478:	843fffc4 	addi	r16,r16,-1
   4947c:	1011883a 	mov	r8,r2
   49480:	1813883a 	mov	r9,r3
   49484:	803ff51e 	bne	r16,zero,4945c <_mprec_log10+0x50>
   49488:	4005883a 	mov	r2,r8
   4948c:	4807883a 	mov	r3,r9
   49490:	dfc00117 	ldw	ra,4(sp)
   49494:	dc000017 	ldw	r16,0(sp)
   49498:	dec00204 	addi	sp,sp,8
   4949c:	f800283a 	ret

000494a0 <__copybits>:
   494a0:	297fffc4 	addi	r5,r5,-1
   494a4:	30800417 	ldw	r2,16(r6)
   494a8:	280bd17a 	srai	r5,r5,5
   494ac:	31800504 	addi	r6,r6,20
   494b0:	1085883a 	add	r2,r2,r2
   494b4:	294b883a 	add	r5,r5,r5
   494b8:	294b883a 	add	r5,r5,r5
   494bc:	1085883a 	add	r2,r2,r2
   494c0:	290b883a 	add	r5,r5,r4
   494c4:	3087883a 	add	r3,r6,r2
   494c8:	29400104 	addi	r5,r5,4
   494cc:	30c0052e 	bgeu	r6,r3,494e4 <__copybits+0x44>
   494d0:	30800017 	ldw	r2,0(r6)
   494d4:	31800104 	addi	r6,r6,4
   494d8:	20800015 	stw	r2,0(r4)
   494dc:	21000104 	addi	r4,r4,4
   494e0:	30fffb36 	bltu	r6,r3,494d0 <__copybits+0x30>
   494e4:	2140032e 	bgeu	r4,r5,494f4 <__copybits+0x54>
   494e8:	20000015 	stw	zero,0(r4)
   494ec:	21000104 	addi	r4,r4,4
   494f0:	217ffd36 	bltu	r4,r5,494e8 <__copybits+0x48>
   494f4:	f800283a 	ret

000494f8 <__any_on>:
   494f8:	20800417 	ldw	r2,16(r4)
   494fc:	2807d17a 	srai	r3,r5,5
   49500:	21000504 	addi	r4,r4,20
   49504:	10c00d0e 	bge	r2,r3,4953c <__any_on+0x44>
   49508:	1085883a 	add	r2,r2,r2
   4950c:	1085883a 	add	r2,r2,r2
   49510:	208d883a 	add	r6,r4,r2
   49514:	2180182e 	bgeu	r4,r6,49578 <__any_on+0x80>
   49518:	30bfff17 	ldw	r2,-4(r6)
   4951c:	30ffff04 	addi	r3,r6,-4
   49520:	1000041e 	bne	r2,zero,49534 <__any_on+0x3c>
   49524:	20c0142e 	bgeu	r4,r3,49578 <__any_on+0x80>
   49528:	18ffff04 	addi	r3,r3,-4
   4952c:	18800017 	ldw	r2,0(r3)
   49530:	103ffc26 	beq	r2,zero,49524 <__any_on+0x2c>
   49534:	00800044 	movi	r2,1
   49538:	f800283a 	ret
   4953c:	18800a0e 	bge	r3,r2,49568 <__any_on+0x70>
   49540:	294007cc 	andi	r5,r5,31
   49544:	28000826 	beq	r5,zero,49568 <__any_on+0x70>
   49548:	18c5883a 	add	r2,r3,r3
   4954c:	1085883a 	add	r2,r2,r2
   49550:	208d883a 	add	r6,r4,r2
   49554:	30c00017 	ldw	r3,0(r6)
   49558:	1944d83a 	srl	r2,r3,r5
   4955c:	1144983a 	sll	r2,r2,r5
   49560:	18bff41e 	bne	r3,r2,49534 <__any_on+0x3c>
   49564:	003feb06 	br	49514 <__any_on+0x1c>
   49568:	18c5883a 	add	r2,r3,r3
   4956c:	1085883a 	add	r2,r2,r2
   49570:	208d883a 	add	r6,r4,r2
   49574:	003fe706 	br	49514 <__any_on+0x1c>
   49578:	0005883a 	mov	r2,zero
   4957c:	f800283a 	ret

00049580 <_Balloc>:
   49580:	20c01317 	ldw	r3,76(r4)
   49584:	defffb04 	addi	sp,sp,-20
   49588:	dcc00315 	stw	r19,12(sp)
   4958c:	dc800215 	stw	r18,8(sp)
   49590:	dfc00415 	stw	ra,16(sp)
   49594:	2825883a 	mov	r18,r5
   49598:	dc400115 	stw	r17,4(sp)
   4959c:	dc000015 	stw	r16,0(sp)
   495a0:	2027883a 	mov	r19,r4
   495a4:	01800404 	movi	r6,16
   495a8:	01400104 	movi	r5,4
   495ac:	18001726 	beq	r3,zero,4960c <_Balloc+0x8c>
   495b0:	01400044 	movi	r5,1
   495b4:	9485883a 	add	r2,r18,r18
   495b8:	2ca2983a 	sll	r17,r5,r18
   495bc:	1085883a 	add	r2,r2,r2
   495c0:	10c7883a 	add	r3,r2,r3
   495c4:	1c000017 	ldw	r16,0(r3)
   495c8:	8c4d883a 	add	r6,r17,r17
   495cc:	318d883a 	add	r6,r6,r6
   495d0:	9809883a 	mov	r4,r19
   495d4:	31800504 	addi	r6,r6,20
   495d8:	80001226 	beq	r16,zero,49624 <_Balloc+0xa4>
   495dc:	80800017 	ldw	r2,0(r16)
   495e0:	18800015 	stw	r2,0(r3)
   495e4:	80000415 	stw	zero,16(r16)
   495e8:	80000315 	stw	zero,12(r16)
   495ec:	8005883a 	mov	r2,r16
   495f0:	dfc00417 	ldw	ra,16(sp)
   495f4:	dcc00317 	ldw	r19,12(sp)
   495f8:	dc800217 	ldw	r18,8(sp)
   495fc:	dc400117 	ldw	r17,4(sp)
   49600:	dc000017 	ldw	r16,0(sp)
   49604:	dec00504 	addi	sp,sp,20
   49608:	f800283a 	ret
   4960c:	004cc140 	call	4cc14 <_calloc_r>
   49610:	1007883a 	mov	r3,r2
   49614:	0021883a 	mov	r16,zero
   49618:	98801315 	stw	r2,76(r19)
   4961c:	103fe41e 	bne	r2,zero,495b0 <_Balloc+0x30>
   49620:	003ff206 	br	495ec <_Balloc+0x6c>
   49624:	004cc140 	call	4cc14 <_calloc_r>
   49628:	103ff026 	beq	r2,zero,495ec <_Balloc+0x6c>
   4962c:	1021883a 	mov	r16,r2
   49630:	14800115 	stw	r18,4(r2)
   49634:	14400215 	stw	r17,8(r2)
   49638:	003fea06 	br	495e4 <_Balloc+0x64>

0004963c <__d2b>:
   4963c:	defff504 	addi	sp,sp,-44
   49640:	dcc00515 	stw	r19,20(sp)
   49644:	04c00044 	movi	r19,1
   49648:	dc000215 	stw	r16,8(sp)
   4964c:	2821883a 	mov	r16,r5
   49650:	980b883a 	mov	r5,r19
   49654:	ddc00915 	stw	r23,36(sp)
   49658:	dd800815 	stw	r22,32(sp)
   4965c:	dd400715 	stw	r21,28(sp)
   49660:	dd000615 	stw	r20,24(sp)
   49664:	dc800415 	stw	r18,16(sp)
   49668:	dc400315 	stw	r17,12(sp)
   4966c:	dfc00a15 	stw	ra,40(sp)
   49670:	3023883a 	mov	r17,r6
   49674:	382d883a 	mov	r22,r7
   49678:	ddc00b17 	ldw	r23,44(sp)
   4967c:	00495800 	call	49580 <_Balloc>
   49680:	1025883a 	mov	r18,r2
   49684:	00a00034 	movhi	r2,32768
   49688:	10bfffc4 	addi	r2,r2,-1
   4968c:	8888703a 	and	r4,r17,r2
   49690:	202ad53a 	srli	r21,r4,20
   49694:	00800434 	movhi	r2,16
   49698:	10bfffc4 	addi	r2,r2,-1
   4969c:	8886703a 	and	r3,r17,r2
   496a0:	a829003a 	cmpeq	r20,r21,zero
   496a4:	800b883a 	mov	r5,r16
   496a8:	d8c00115 	stw	r3,4(sp)
   496ac:	94000504 	addi	r16,r18,20
   496b0:	a000021e 	bne	r20,zero,496bc <__d2b+0x80>
   496b4:	18c00434 	orhi	r3,r3,16
   496b8:	d8c00115 	stw	r3,4(sp)
   496bc:	28002726 	beq	r5,zero,4975c <__d2b+0x120>
   496c0:	d809883a 	mov	r4,sp
   496c4:	d9400015 	stw	r5,0(sp)
   496c8:	00490980 	call	49098 <__lo0bits>
   496cc:	100d883a 	mov	r6,r2
   496d0:	10003526 	beq	r2,zero,497a8 <__d2b+0x16c>
   496d4:	d8c00117 	ldw	r3,4(sp)
   496d8:	00800804 	movi	r2,32
   496dc:	1185c83a 	sub	r2,r2,r6
   496e0:	d9000017 	ldw	r4,0(sp)
   496e4:	1886983a 	sll	r3,r3,r2
   496e8:	1906b03a 	or	r3,r3,r4
   496ec:	90c00515 	stw	r3,20(r18)
   496f0:	d8c00117 	ldw	r3,4(sp)
   496f4:	1986d83a 	srl	r3,r3,r6
   496f8:	d8c00115 	stw	r3,4(sp)
   496fc:	180b003a 	cmpeq	r5,r3,zero
   49700:	00800084 	movi	r2,2
   49704:	114bc83a 	sub	r5,r2,r5
   49708:	80c00115 	stw	r3,4(r16)
   4970c:	91400415 	stw	r5,16(r18)
   49710:	a0001a1e 	bne	r20,zero,4977c <__d2b+0x140>
   49714:	3545883a 	add	r2,r6,r21
   49718:	10bef344 	addi	r2,r2,-1075
   4971c:	00c00d44 	movi	r3,53
   49720:	b0800015 	stw	r2,0(r22)
   49724:	1987c83a 	sub	r3,r3,r6
   49728:	b8c00015 	stw	r3,0(r23)
   4972c:	9005883a 	mov	r2,r18
   49730:	dfc00a17 	ldw	ra,40(sp)
   49734:	ddc00917 	ldw	r23,36(sp)
   49738:	dd800817 	ldw	r22,32(sp)
   4973c:	dd400717 	ldw	r21,28(sp)
   49740:	dd000617 	ldw	r20,24(sp)
   49744:	dcc00517 	ldw	r19,20(sp)
   49748:	dc800417 	ldw	r18,16(sp)
   4974c:	dc400317 	ldw	r17,12(sp)
   49750:	dc000217 	ldw	r16,8(sp)
   49754:	dec00b04 	addi	sp,sp,44
   49758:	f800283a 	ret
   4975c:	d9000104 	addi	r4,sp,4
   49760:	00490980 	call	49098 <__lo0bits>
   49764:	11800804 	addi	r6,r2,32
   49768:	d8800117 	ldw	r2,4(sp)
   4976c:	94c00415 	stw	r19,16(r18)
   49770:	980b883a 	mov	r5,r19
   49774:	90800515 	stw	r2,20(r18)
   49778:	a03fe626 	beq	r20,zero,49714 <__d2b+0xd8>
   4977c:	2945883a 	add	r2,r5,r5
   49780:	1085883a 	add	r2,r2,r2
   49784:	1405883a 	add	r2,r2,r16
   49788:	113fff17 	ldw	r4,-4(r2)
   4978c:	30fef384 	addi	r3,r6,-1074
   49790:	2820917a 	slli	r16,r5,5
   49794:	b0c00015 	stw	r3,0(r22)
   49798:	00490280 	call	49028 <__hi0bits>
   4979c:	80a1c83a 	sub	r16,r16,r2
   497a0:	bc000015 	stw	r16,0(r23)
   497a4:	003fe106 	br	4972c <__d2b+0xf0>
   497a8:	d8800017 	ldw	r2,0(sp)
   497ac:	90800515 	stw	r2,20(r18)
   497b0:	d8c00117 	ldw	r3,4(sp)
   497b4:	003fd106 	br	496fc <__d2b+0xc0>

000497b8 <__mdiff>:
   497b8:	defffb04 	addi	sp,sp,-20
   497bc:	dc000015 	stw	r16,0(sp)
   497c0:	2821883a 	mov	r16,r5
   497c4:	dc800215 	stw	r18,8(sp)
   497c8:	300b883a 	mov	r5,r6
   497cc:	2025883a 	mov	r18,r4
   497d0:	8009883a 	mov	r4,r16
   497d4:	dc400115 	stw	r17,4(sp)
   497d8:	dfc00415 	stw	ra,16(sp)
   497dc:	dcc00315 	stw	r19,12(sp)
   497e0:	3023883a 	mov	r17,r6
   497e4:	004915c0 	call	4915c <__mcmp>
   497e8:	10004226 	beq	r2,zero,498f4 <__mdiff+0x13c>
   497ec:	10005016 	blt	r2,zero,49930 <__mdiff+0x178>
   497f0:	0027883a 	mov	r19,zero
   497f4:	81400117 	ldw	r5,4(r16)
   497f8:	9009883a 	mov	r4,r18
   497fc:	00495800 	call	49580 <_Balloc>
   49800:	1019883a 	mov	r12,r2
   49804:	82800417 	ldw	r10,16(r16)
   49808:	88800417 	ldw	r2,16(r17)
   4980c:	81800504 	addi	r6,r16,20
   49810:	5287883a 	add	r3,r10,r10
   49814:	1085883a 	add	r2,r2,r2
   49818:	18c7883a 	add	r3,r3,r3
   4981c:	1085883a 	add	r2,r2,r2
   49820:	8a000504 	addi	r8,r17,20
   49824:	64c00315 	stw	r19,12(r12)
   49828:	30db883a 	add	r13,r6,r3
   4982c:	4097883a 	add	r11,r8,r2
   49830:	61c00504 	addi	r7,r12,20
   49834:	0013883a 	mov	r9,zero
   49838:	31000017 	ldw	r4,0(r6)
   4983c:	41400017 	ldw	r5,0(r8)
   49840:	42000104 	addi	r8,r8,4
   49844:	20bfffcc 	andi	r2,r4,65535
   49848:	28ffffcc 	andi	r3,r5,65535
   4984c:	10c5c83a 	sub	r2,r2,r3
   49850:	1245883a 	add	r2,r2,r9
   49854:	2008d43a 	srli	r4,r4,16
   49858:	280ad43a 	srli	r5,r5,16
   4985c:	1007d43a 	srai	r3,r2,16
   49860:	3880000d 	sth	r2,0(r7)
   49864:	2149c83a 	sub	r4,r4,r5
   49868:	20c9883a 	add	r4,r4,r3
   4986c:	3900008d 	sth	r4,2(r7)
   49870:	31800104 	addi	r6,r6,4
   49874:	39c00104 	addi	r7,r7,4
   49878:	2013d43a 	srai	r9,r4,16
   4987c:	42ffee36 	bltu	r8,r11,49838 <__mdiff+0x80>
   49880:	33400c2e 	bgeu	r6,r13,498b4 <__mdiff+0xfc>
   49884:	30800017 	ldw	r2,0(r6)
   49888:	31800104 	addi	r6,r6,4
   4988c:	10ffffcc 	andi	r3,r2,65535
   49890:	1a47883a 	add	r3,r3,r9
   49894:	1004d43a 	srli	r2,r2,16
   49898:	1809d43a 	srai	r4,r3,16
   4989c:	38c0000d 	sth	r3,0(r7)
   498a0:	1105883a 	add	r2,r2,r4
   498a4:	3880008d 	sth	r2,2(r7)
   498a8:	1013d43a 	srai	r9,r2,16
   498ac:	39c00104 	addi	r7,r7,4
   498b0:	337ff436 	bltu	r6,r13,49884 <__mdiff+0xcc>
   498b4:	38bfff17 	ldw	r2,-4(r7)
   498b8:	38ffff04 	addi	r3,r7,-4
   498bc:	1000041e 	bne	r2,zero,498d0 <__mdiff+0x118>
   498c0:	18ffff04 	addi	r3,r3,-4
   498c4:	18800017 	ldw	r2,0(r3)
   498c8:	52bfffc4 	addi	r10,r10,-1
   498cc:	103ffc26 	beq	r2,zero,498c0 <__mdiff+0x108>
   498d0:	6005883a 	mov	r2,r12
   498d4:	62800415 	stw	r10,16(r12)
   498d8:	dfc00417 	ldw	ra,16(sp)
   498dc:	dcc00317 	ldw	r19,12(sp)
   498e0:	dc800217 	ldw	r18,8(sp)
   498e4:	dc400117 	ldw	r17,4(sp)
   498e8:	dc000017 	ldw	r16,0(sp)
   498ec:	dec00504 	addi	sp,sp,20
   498f0:	f800283a 	ret
   498f4:	9009883a 	mov	r4,r18
   498f8:	000b883a 	mov	r5,zero
   498fc:	00495800 	call	49580 <_Balloc>
   49900:	1019883a 	mov	r12,r2
   49904:	00800044 	movi	r2,1
   49908:	60800415 	stw	r2,16(r12)
   4990c:	6005883a 	mov	r2,r12
   49910:	60000515 	stw	zero,20(r12)
   49914:	dfc00417 	ldw	ra,16(sp)
   49918:	dcc00317 	ldw	r19,12(sp)
   4991c:	dc800217 	ldw	r18,8(sp)
   49920:	dc400117 	ldw	r17,4(sp)
   49924:	dc000017 	ldw	r16,0(sp)
   49928:	dec00504 	addi	sp,sp,20
   4992c:	f800283a 	ret
   49930:	880d883a 	mov	r6,r17
   49934:	04c00044 	movi	r19,1
   49938:	8023883a 	mov	r17,r16
   4993c:	3021883a 	mov	r16,r6
   49940:	003fac06 	br	497f4 <__mdiff+0x3c>

00049944 <__lshift>:
   49944:	defff904 	addi	sp,sp,-28
   49948:	28800417 	ldw	r2,16(r5)
   4994c:	dc000015 	stw	r16,0(sp)
   49950:	3021d17a 	srai	r16,r6,5
   49954:	28c00217 	ldw	r3,8(r5)
   49958:	10800044 	addi	r2,r2,1
   4995c:	dc400115 	stw	r17,4(sp)
   49960:	80a3883a 	add	r17,r16,r2
   49964:	dd400515 	stw	r21,20(sp)
   49968:	dd000415 	stw	r20,16(sp)
   4996c:	dc800215 	stw	r18,8(sp)
   49970:	dfc00615 	stw	ra,24(sp)
   49974:	2825883a 	mov	r18,r5
   49978:	dcc00315 	stw	r19,12(sp)
   4997c:	3029883a 	mov	r20,r6
   49980:	202b883a 	mov	r21,r4
   49984:	29400117 	ldw	r5,4(r5)
   49988:	1c40030e 	bge	r3,r17,49998 <__lshift+0x54>
   4998c:	18c7883a 	add	r3,r3,r3
   49990:	29400044 	addi	r5,r5,1
   49994:	1c7ffd16 	blt	r3,r17,4998c <__lshift+0x48>
   49998:	a809883a 	mov	r4,r21
   4999c:	00495800 	call	49580 <_Balloc>
   499a0:	1027883a 	mov	r19,r2
   499a4:	11400504 	addi	r5,r2,20
   499a8:	0400090e 	bge	zero,r16,499d0 <__lshift+0x8c>
   499ac:	2805883a 	mov	r2,r5
   499b0:	0007883a 	mov	r3,zero
   499b4:	18c00044 	addi	r3,r3,1
   499b8:	10000015 	stw	zero,0(r2)
   499bc:	10800104 	addi	r2,r2,4
   499c0:	80fffc1e 	bne	r16,r3,499b4 <__lshift+0x70>
   499c4:	8405883a 	add	r2,r16,r16
   499c8:	1085883a 	add	r2,r2,r2
   499cc:	288b883a 	add	r5,r5,r2
   499d0:	90800417 	ldw	r2,16(r18)
   499d4:	91000504 	addi	r4,r18,20
   499d8:	a18007cc 	andi	r6,r20,31
   499dc:	1085883a 	add	r2,r2,r2
   499e0:	1085883a 	add	r2,r2,r2
   499e4:	208f883a 	add	r7,r4,r2
   499e8:	30001e26 	beq	r6,zero,49a64 <__lshift+0x120>
   499ec:	00800804 	movi	r2,32
   499f0:	1191c83a 	sub	r8,r2,r6
   499f4:	0007883a 	mov	r3,zero
   499f8:	20800017 	ldw	r2,0(r4)
   499fc:	1184983a 	sll	r2,r2,r6
   49a00:	1884b03a 	or	r2,r3,r2
   49a04:	28800015 	stw	r2,0(r5)
   49a08:	20c00017 	ldw	r3,0(r4)
   49a0c:	21000104 	addi	r4,r4,4
   49a10:	29400104 	addi	r5,r5,4
   49a14:	1a06d83a 	srl	r3,r3,r8
   49a18:	21fff736 	bltu	r4,r7,499f8 <__lshift+0xb4>
   49a1c:	28c00015 	stw	r3,0(r5)
   49a20:	18000126 	beq	r3,zero,49a28 <__lshift+0xe4>
   49a24:	8c400044 	addi	r17,r17,1
   49a28:	88bfffc4 	addi	r2,r17,-1
   49a2c:	98800415 	stw	r2,16(r19)
   49a30:	a809883a 	mov	r4,r21
   49a34:	900b883a 	mov	r5,r18
   49a38:	00490000 	call	49000 <_Bfree>
   49a3c:	9805883a 	mov	r2,r19
   49a40:	dfc00617 	ldw	ra,24(sp)
   49a44:	dd400517 	ldw	r21,20(sp)
   49a48:	dd000417 	ldw	r20,16(sp)
   49a4c:	dcc00317 	ldw	r19,12(sp)
   49a50:	dc800217 	ldw	r18,8(sp)
   49a54:	dc400117 	ldw	r17,4(sp)
   49a58:	dc000017 	ldw	r16,0(sp)
   49a5c:	dec00704 	addi	sp,sp,28
   49a60:	f800283a 	ret
   49a64:	20800017 	ldw	r2,0(r4)
   49a68:	21000104 	addi	r4,r4,4
   49a6c:	28800015 	stw	r2,0(r5)
   49a70:	29400104 	addi	r5,r5,4
   49a74:	21ffec2e 	bgeu	r4,r7,49a28 <__lshift+0xe4>
   49a78:	20800017 	ldw	r2,0(r4)
   49a7c:	21000104 	addi	r4,r4,4
   49a80:	28800015 	stw	r2,0(r5)
   49a84:	29400104 	addi	r5,r5,4
   49a88:	21fff636 	bltu	r4,r7,49a64 <__lshift+0x120>
   49a8c:	003fe606 	br	49a28 <__lshift+0xe4>

00049a90 <__multiply>:
   49a90:	defff004 	addi	sp,sp,-64
   49a94:	dc800815 	stw	r18,32(sp)
   49a98:	dc400715 	stw	r17,28(sp)
   49a9c:	2c800417 	ldw	r18,16(r5)
   49aa0:	34400417 	ldw	r17,16(r6)
   49aa4:	dcc00915 	stw	r19,36(sp)
   49aa8:	dc000615 	stw	r16,24(sp)
   49aac:	dfc00f15 	stw	ra,60(sp)
   49ab0:	df000e15 	stw	fp,56(sp)
   49ab4:	ddc00d15 	stw	r23,52(sp)
   49ab8:	dd800c15 	stw	r22,48(sp)
   49abc:	dd400b15 	stw	r21,44(sp)
   49ac0:	dd000a15 	stw	r20,40(sp)
   49ac4:	2821883a 	mov	r16,r5
   49ac8:	3027883a 	mov	r19,r6
   49acc:	9440040e 	bge	r18,r17,49ae0 <__multiply+0x50>
   49ad0:	8825883a 	mov	r18,r17
   49ad4:	2c400417 	ldw	r17,16(r5)
   49ad8:	2827883a 	mov	r19,r5
   49adc:	3021883a 	mov	r16,r6
   49ae0:	80800217 	ldw	r2,8(r16)
   49ae4:	9447883a 	add	r3,r18,r17
   49ae8:	d8c00415 	stw	r3,16(sp)
   49aec:	81400117 	ldw	r5,4(r16)
   49af0:	10c0010e 	bge	r2,r3,49af8 <__multiply+0x68>
   49af4:	29400044 	addi	r5,r5,1
   49af8:	00495800 	call	49580 <_Balloc>
   49afc:	d8800515 	stw	r2,20(sp)
   49b00:	d9000417 	ldw	r4,16(sp)
   49b04:	d8c00517 	ldw	r3,20(sp)
   49b08:	2105883a 	add	r2,r4,r4
   49b0c:	1085883a 	add	r2,r2,r2
   49b10:	19000504 	addi	r4,r3,20
   49b14:	2085883a 	add	r2,r4,r2
   49b18:	d8800315 	stw	r2,12(sp)
   49b1c:	2080052e 	bgeu	r4,r2,49b34 <__multiply+0xa4>
   49b20:	2005883a 	mov	r2,r4
   49b24:	d8c00317 	ldw	r3,12(sp)
   49b28:	10000015 	stw	zero,0(r2)
   49b2c:	10800104 	addi	r2,r2,4
   49b30:	10fffc36 	bltu	r2,r3,49b24 <__multiply+0x94>
   49b34:	8c45883a 	add	r2,r17,r17
   49b38:	9487883a 	add	r3,r18,r18
   49b3c:	9dc00504 	addi	r23,r19,20
   49b40:	1085883a 	add	r2,r2,r2
   49b44:	84000504 	addi	r16,r16,20
   49b48:	18c7883a 	add	r3,r3,r3
   49b4c:	b885883a 	add	r2,r23,r2
   49b50:	dc000015 	stw	r16,0(sp)
   49b54:	d8800215 	stw	r2,8(sp)
   49b58:	80f9883a 	add	fp,r16,r3
   49b5c:	b880432e 	bgeu	r23,r2,49c6c <__multiply+0x1dc>
   49b60:	d9000115 	stw	r4,4(sp)
   49b64:	b9000017 	ldw	r4,0(r23)
   49b68:	253fffcc 	andi	r20,r4,65535
   49b6c:	a0001a26 	beq	r20,zero,49bd8 <__multiply+0x148>
   49b70:	dcc00017 	ldw	r19,0(sp)
   49b74:	dc800117 	ldw	r18,4(sp)
   49b78:	002b883a 	mov	r21,zero
   49b7c:	9c400017 	ldw	r17,0(r19)
   49b80:	94000017 	ldw	r16,0(r18)
   49b84:	a009883a 	mov	r4,r20
   49b88:	897fffcc 	andi	r5,r17,65535
   49b8c:	004fd3c0 	call	4fd3c <__mulsi3>
   49b90:	880ad43a 	srli	r5,r17,16
   49b94:	80ffffcc 	andi	r3,r16,65535
   49b98:	a8c7883a 	add	r3,r21,r3
   49b9c:	a009883a 	mov	r4,r20
   49ba0:	10e3883a 	add	r17,r2,r3
   49ba4:	8020d43a 	srli	r16,r16,16
   49ba8:	004fd3c0 	call	4fd3c <__mulsi3>
   49bac:	8806d43a 	srli	r3,r17,16
   49bb0:	1405883a 	add	r2,r2,r16
   49bb4:	9cc00104 	addi	r19,r19,4
   49bb8:	1887883a 	add	r3,r3,r2
   49bbc:	90c0008d 	sth	r3,2(r18)
   49bc0:	9440000d 	sth	r17,0(r18)
   49bc4:	182ad43a 	srli	r21,r3,16
   49bc8:	94800104 	addi	r18,r18,4
   49bcc:	9f3feb36 	bltu	r19,fp,49b7c <__multiply+0xec>
   49bd0:	95400015 	stw	r21,0(r18)
   49bd4:	b9000017 	ldw	r4,0(r23)
   49bd8:	202ad43a 	srli	r21,r4,16
   49bdc:	a8001c26 	beq	r21,zero,49c50 <__multiply+0x1c0>
   49be0:	d9000117 	ldw	r4,4(sp)
   49be4:	dd000017 	ldw	r20,0(sp)
   49be8:	002d883a 	mov	r22,zero
   49bec:	24c00017 	ldw	r19,0(r4)
   49bf0:	2025883a 	mov	r18,r4
   49bf4:	9823883a 	mov	r17,r19
   49bf8:	a4000017 	ldw	r16,0(r20)
   49bfc:	a809883a 	mov	r4,r21
   49c00:	a5000104 	addi	r20,r20,4
   49c04:	817fffcc 	andi	r5,r16,65535
   49c08:	004fd3c0 	call	4fd3c <__mulsi3>
   49c0c:	8806d43a 	srli	r3,r17,16
   49c10:	800ad43a 	srli	r5,r16,16
   49c14:	94c0000d 	sth	r19,0(r18)
   49c18:	b0c7883a 	add	r3,r22,r3
   49c1c:	10e1883a 	add	r16,r2,r3
   49c20:	9400008d 	sth	r16,2(r18)
   49c24:	a809883a 	mov	r4,r21
   49c28:	94800104 	addi	r18,r18,4
   49c2c:	004fd3c0 	call	4fd3c <__mulsi3>
   49c30:	94400017 	ldw	r17,0(r18)
   49c34:	8020d43a 	srli	r16,r16,16
   49c38:	88ffffcc 	andi	r3,r17,65535
   49c3c:	10c5883a 	add	r2,r2,r3
   49c40:	80a7883a 	add	r19,r16,r2
   49c44:	982cd43a 	srli	r22,r19,16
   49c48:	a73feb36 	bltu	r20,fp,49bf8 <__multiply+0x168>
   49c4c:	94c00015 	stw	r19,0(r18)
   49c50:	d8800217 	ldw	r2,8(sp)
   49c54:	bdc00104 	addi	r23,r23,4
   49c58:	b880042e 	bgeu	r23,r2,49c6c <__multiply+0x1dc>
   49c5c:	d8c00117 	ldw	r3,4(sp)
   49c60:	18c00104 	addi	r3,r3,4
   49c64:	d8c00115 	stw	r3,4(sp)
   49c68:	003fbe06 	br	49b64 <__multiply+0xd4>
   49c6c:	d9000417 	ldw	r4,16(sp)
   49c70:	01000c0e 	bge	zero,r4,49ca4 <__multiply+0x214>
   49c74:	d8c00317 	ldw	r3,12(sp)
   49c78:	18bfff17 	ldw	r2,-4(r3)
   49c7c:	18ffff04 	addi	r3,r3,-4
   49c80:	10000326 	beq	r2,zero,49c90 <__multiply+0x200>
   49c84:	00000706 	br	49ca4 <__multiply+0x214>
   49c88:	18800017 	ldw	r2,0(r3)
   49c8c:	1000051e 	bne	r2,zero,49ca4 <__multiply+0x214>
   49c90:	d9000417 	ldw	r4,16(sp)
   49c94:	18ffff04 	addi	r3,r3,-4
   49c98:	213fffc4 	addi	r4,r4,-1
   49c9c:	d9000415 	stw	r4,16(sp)
   49ca0:	203ff91e 	bne	r4,zero,49c88 <__multiply+0x1f8>
   49ca4:	d8800417 	ldw	r2,16(sp)
   49ca8:	d8c00517 	ldw	r3,20(sp)
   49cac:	18800415 	stw	r2,16(r3)
   49cb0:	1805883a 	mov	r2,r3
   49cb4:	dfc00f17 	ldw	ra,60(sp)
   49cb8:	df000e17 	ldw	fp,56(sp)
   49cbc:	ddc00d17 	ldw	r23,52(sp)
   49cc0:	dd800c17 	ldw	r22,48(sp)
   49cc4:	dd400b17 	ldw	r21,44(sp)
   49cc8:	dd000a17 	ldw	r20,40(sp)
   49ccc:	dcc00917 	ldw	r19,36(sp)
   49cd0:	dc800817 	ldw	r18,32(sp)
   49cd4:	dc400717 	ldw	r17,28(sp)
   49cd8:	dc000617 	ldw	r16,24(sp)
   49cdc:	dec01004 	addi	sp,sp,64
   49ce0:	f800283a 	ret

00049ce4 <__i2b>:
   49ce4:	defffd04 	addi	sp,sp,-12
   49ce8:	dc000015 	stw	r16,0(sp)
   49cec:	04000044 	movi	r16,1
   49cf0:	dc800115 	stw	r18,4(sp)
   49cf4:	2825883a 	mov	r18,r5
   49cf8:	800b883a 	mov	r5,r16
   49cfc:	dfc00215 	stw	ra,8(sp)
   49d00:	00495800 	call	49580 <_Balloc>
   49d04:	14000415 	stw	r16,16(r2)
   49d08:	14800515 	stw	r18,20(r2)
   49d0c:	dfc00217 	ldw	ra,8(sp)
   49d10:	dc800117 	ldw	r18,4(sp)
   49d14:	dc000017 	ldw	r16,0(sp)
   49d18:	dec00304 	addi	sp,sp,12
   49d1c:	f800283a 	ret

00049d20 <__multadd>:
   49d20:	defff604 	addi	sp,sp,-40
   49d24:	dd800615 	stw	r22,24(sp)
   49d28:	2d800417 	ldw	r22,16(r5)
   49d2c:	df000815 	stw	fp,32(sp)
   49d30:	ddc00715 	stw	r23,28(sp)
   49d34:	dd400515 	stw	r21,20(sp)
   49d38:	dd000415 	stw	r20,16(sp)
   49d3c:	dcc00315 	stw	r19,12(sp)
   49d40:	dc800215 	stw	r18,8(sp)
   49d44:	dfc00915 	stw	ra,36(sp)
   49d48:	dc400115 	stw	r17,4(sp)
   49d4c:	dc000015 	stw	r16,0(sp)
   49d50:	282f883a 	mov	r23,r5
   49d54:	2039883a 	mov	fp,r4
   49d58:	302b883a 	mov	r21,r6
   49d5c:	3829883a 	mov	r20,r7
   49d60:	2c800504 	addi	r18,r5,20
   49d64:	0027883a 	mov	r19,zero
   49d68:	94400017 	ldw	r17,0(r18)
   49d6c:	a80b883a 	mov	r5,r21
   49d70:	9cc00044 	addi	r19,r19,1
   49d74:	893fffcc 	andi	r4,r17,65535
   49d78:	004fd3c0 	call	4fd3c <__mulsi3>
   49d7c:	8808d43a 	srli	r4,r17,16
   49d80:	1521883a 	add	r16,r2,r20
   49d84:	a80b883a 	mov	r5,r21
   49d88:	004fd3c0 	call	4fd3c <__mulsi3>
   49d8c:	8008d43a 	srli	r4,r16,16
   49d90:	843fffcc 	andi	r16,r16,65535
   49d94:	1105883a 	add	r2,r2,r4
   49d98:	1006943a 	slli	r3,r2,16
   49d9c:	1028d43a 	srli	r20,r2,16
   49da0:	1c07883a 	add	r3,r3,r16
   49da4:	90c00015 	stw	r3,0(r18)
   49da8:	94800104 	addi	r18,r18,4
   49dac:	9dbfee16 	blt	r19,r22,49d68 <__multadd+0x48>
   49db0:	a0000826 	beq	r20,zero,49dd4 <__multadd+0xb4>
   49db4:	b8800217 	ldw	r2,8(r23)
   49db8:	b080130e 	bge	r22,r2,49e08 <__multadd+0xe8>
   49dbc:	b585883a 	add	r2,r22,r22
   49dc0:	1085883a 	add	r2,r2,r2
   49dc4:	15c5883a 	add	r2,r2,r23
   49dc8:	b0c00044 	addi	r3,r22,1
   49dcc:	15000515 	stw	r20,20(r2)
   49dd0:	b8c00415 	stw	r3,16(r23)
   49dd4:	b805883a 	mov	r2,r23
   49dd8:	dfc00917 	ldw	ra,36(sp)
   49ddc:	df000817 	ldw	fp,32(sp)
   49de0:	ddc00717 	ldw	r23,28(sp)
   49de4:	dd800617 	ldw	r22,24(sp)
   49de8:	dd400517 	ldw	r21,20(sp)
   49dec:	dd000417 	ldw	r20,16(sp)
   49df0:	dcc00317 	ldw	r19,12(sp)
   49df4:	dc800217 	ldw	r18,8(sp)
   49df8:	dc400117 	ldw	r17,4(sp)
   49dfc:	dc000017 	ldw	r16,0(sp)
   49e00:	dec00a04 	addi	sp,sp,40
   49e04:	f800283a 	ret
   49e08:	b9400117 	ldw	r5,4(r23)
   49e0c:	e009883a 	mov	r4,fp
   49e10:	29400044 	addi	r5,r5,1
   49e14:	00495800 	call	49580 <_Balloc>
   49e18:	b9800417 	ldw	r6,16(r23)
   49e1c:	b9400304 	addi	r5,r23,12
   49e20:	11000304 	addi	r4,r2,12
   49e24:	318d883a 	add	r6,r6,r6
   49e28:	318d883a 	add	r6,r6,r6
   49e2c:	31800204 	addi	r6,r6,8
   49e30:	1023883a 	mov	r17,r2
   49e34:	0048de80 	call	48de8 <memcpy>
   49e38:	b80b883a 	mov	r5,r23
   49e3c:	e009883a 	mov	r4,fp
   49e40:	00490000 	call	49000 <_Bfree>
   49e44:	882f883a 	mov	r23,r17
   49e48:	003fdc06 	br	49dbc <__multadd+0x9c>

00049e4c <__pow5mult>:
   49e4c:	defffa04 	addi	sp,sp,-24
   49e50:	308000cc 	andi	r2,r6,3
   49e54:	dd000415 	stw	r20,16(sp)
   49e58:	dcc00315 	stw	r19,12(sp)
   49e5c:	dc000015 	stw	r16,0(sp)
   49e60:	dfc00515 	stw	ra,20(sp)
   49e64:	dc800215 	stw	r18,8(sp)
   49e68:	dc400115 	stw	r17,4(sp)
   49e6c:	3021883a 	mov	r16,r6
   49e70:	2027883a 	mov	r19,r4
   49e74:	2829883a 	mov	r20,r5
   49e78:	10002b1e 	bne	r2,zero,49f28 <__pow5mult+0xdc>
   49e7c:	8025d0ba 	srai	r18,r16,2
   49e80:	90001b26 	beq	r18,zero,49ef0 <__pow5mult+0xa4>
   49e84:	9c001217 	ldw	r16,72(r19)
   49e88:	8000081e 	bne	r16,zero,49eac <__pow5mult+0x60>
   49e8c:	00003006 	br	49f50 <__pow5mult+0x104>
   49e90:	800b883a 	mov	r5,r16
   49e94:	800d883a 	mov	r6,r16
   49e98:	9809883a 	mov	r4,r19
   49e9c:	90001426 	beq	r18,zero,49ef0 <__pow5mult+0xa4>
   49ea0:	80800017 	ldw	r2,0(r16)
   49ea4:	10001b26 	beq	r2,zero,49f14 <__pow5mult+0xc8>
   49ea8:	1021883a 	mov	r16,r2
   49eac:	9080004c 	andi	r2,r18,1
   49eb0:	1005003a 	cmpeq	r2,r2,zero
   49eb4:	9025d07a 	srai	r18,r18,1
   49eb8:	800d883a 	mov	r6,r16
   49ebc:	9809883a 	mov	r4,r19
   49ec0:	a00b883a 	mov	r5,r20
   49ec4:	103ff21e 	bne	r2,zero,49e90 <__pow5mult+0x44>
   49ec8:	0049a900 	call	49a90 <__multiply>
   49ecc:	a00b883a 	mov	r5,r20
   49ed0:	9809883a 	mov	r4,r19
   49ed4:	1023883a 	mov	r17,r2
   49ed8:	00490000 	call	49000 <_Bfree>
   49edc:	8829883a 	mov	r20,r17
   49ee0:	800b883a 	mov	r5,r16
   49ee4:	800d883a 	mov	r6,r16
   49ee8:	9809883a 	mov	r4,r19
   49eec:	903fec1e 	bne	r18,zero,49ea0 <__pow5mult+0x54>
   49ef0:	a005883a 	mov	r2,r20
   49ef4:	dfc00517 	ldw	ra,20(sp)
   49ef8:	dd000417 	ldw	r20,16(sp)
   49efc:	dcc00317 	ldw	r19,12(sp)
   49f00:	dc800217 	ldw	r18,8(sp)
   49f04:	dc400117 	ldw	r17,4(sp)
   49f08:	dc000017 	ldw	r16,0(sp)
   49f0c:	dec00604 	addi	sp,sp,24
   49f10:	f800283a 	ret
   49f14:	0049a900 	call	49a90 <__multiply>
   49f18:	80800015 	stw	r2,0(r16)
   49f1c:	1021883a 	mov	r16,r2
   49f20:	10000015 	stw	zero,0(r2)
   49f24:	003fe106 	br	49eac <__pow5mult+0x60>
   49f28:	1085883a 	add	r2,r2,r2
   49f2c:	00c00174 	movhi	r3,5
   49f30:	18cec704 	addi	r3,r3,15132
   49f34:	1085883a 	add	r2,r2,r2
   49f38:	10c5883a 	add	r2,r2,r3
   49f3c:	11bfff17 	ldw	r6,-4(r2)
   49f40:	000f883a 	mov	r7,zero
   49f44:	0049d200 	call	49d20 <__multadd>
   49f48:	1029883a 	mov	r20,r2
   49f4c:	003fcb06 	br	49e7c <__pow5mult+0x30>
   49f50:	9809883a 	mov	r4,r19
   49f54:	01409c44 	movi	r5,625
   49f58:	0049ce40 	call	49ce4 <__i2b>
   49f5c:	98801215 	stw	r2,72(r19)
   49f60:	1021883a 	mov	r16,r2
   49f64:	10000015 	stw	zero,0(r2)
   49f68:	003fd006 	br	49eac <__pow5mult+0x60>

00049f6c <__s2b>:
   49f6c:	defff904 	addi	sp,sp,-28
   49f70:	dcc00315 	stw	r19,12(sp)
   49f74:	dc800215 	stw	r18,8(sp)
   49f78:	2827883a 	mov	r19,r5
   49f7c:	2025883a 	mov	r18,r4
   49f80:	01400244 	movi	r5,9
   49f84:	39000204 	addi	r4,r7,8
   49f88:	dd000415 	stw	r20,16(sp)
   49f8c:	dc400115 	stw	r17,4(sp)
   49f90:	dfc00615 	stw	ra,24(sp)
   49f94:	dd400515 	stw	r21,20(sp)
   49f98:	dc000015 	stw	r16,0(sp)
   49f9c:	3829883a 	mov	r20,r7
   49fa0:	3023883a 	mov	r17,r6
   49fa4:	004fc6c0 	call	4fc6c <__divsi3>
   49fa8:	00c00044 	movi	r3,1
   49fac:	1880350e 	bge	r3,r2,4a084 <__s2b+0x118>
   49fb0:	000b883a 	mov	r5,zero
   49fb4:	18c7883a 	add	r3,r3,r3
   49fb8:	29400044 	addi	r5,r5,1
   49fbc:	18bffd16 	blt	r3,r2,49fb4 <__s2b+0x48>
   49fc0:	9009883a 	mov	r4,r18
   49fc4:	00495800 	call	49580 <_Balloc>
   49fc8:	1011883a 	mov	r8,r2
   49fcc:	d8800717 	ldw	r2,28(sp)
   49fd0:	00c00044 	movi	r3,1
   49fd4:	01800244 	movi	r6,9
   49fd8:	40800515 	stw	r2,20(r8)
   49fdc:	40c00415 	stw	r3,16(r8)
   49fe0:	3440260e 	bge	r6,r17,4a07c <__s2b+0x110>
   49fe4:	3021883a 	mov	r16,r6
   49fe8:	99ab883a 	add	r21,r19,r6
   49fec:	9c05883a 	add	r2,r19,r16
   49ff0:	11c00007 	ldb	r7,0(r2)
   49ff4:	400b883a 	mov	r5,r8
   49ff8:	9009883a 	mov	r4,r18
   49ffc:	39fff404 	addi	r7,r7,-48
   4a000:	01800284 	movi	r6,10
   4a004:	0049d200 	call	49d20 <__multadd>
   4a008:	84000044 	addi	r16,r16,1
   4a00c:	1011883a 	mov	r8,r2
   4a010:	8c3ff61e 	bne	r17,r16,49fec <__s2b+0x80>
   4a014:	ac45883a 	add	r2,r21,r17
   4a018:	117ffe04 	addi	r5,r2,-8
   4a01c:	880d883a 	mov	r6,r17
   4a020:	35000c0e 	bge	r6,r20,4a054 <__s2b+0xe8>
   4a024:	a185c83a 	sub	r2,r20,r6
   4a028:	2821883a 	mov	r16,r5
   4a02c:	28a3883a 	add	r17,r5,r2
   4a030:	81c00007 	ldb	r7,0(r16)
   4a034:	400b883a 	mov	r5,r8
   4a038:	9009883a 	mov	r4,r18
   4a03c:	39fff404 	addi	r7,r7,-48
   4a040:	01800284 	movi	r6,10
   4a044:	0049d200 	call	49d20 <__multadd>
   4a048:	84000044 	addi	r16,r16,1
   4a04c:	1011883a 	mov	r8,r2
   4a050:	847ff71e 	bne	r16,r17,4a030 <__s2b+0xc4>
   4a054:	4005883a 	mov	r2,r8
   4a058:	dfc00617 	ldw	ra,24(sp)
   4a05c:	dd400517 	ldw	r21,20(sp)
   4a060:	dd000417 	ldw	r20,16(sp)
   4a064:	dcc00317 	ldw	r19,12(sp)
   4a068:	dc800217 	ldw	r18,8(sp)
   4a06c:	dc400117 	ldw	r17,4(sp)
   4a070:	dc000017 	ldw	r16,0(sp)
   4a074:	dec00704 	addi	sp,sp,28
   4a078:	f800283a 	ret
   4a07c:	99400284 	addi	r5,r19,10
   4a080:	003fe706 	br	4a020 <__s2b+0xb4>
   4a084:	000b883a 	mov	r5,zero
   4a088:	003fcd06 	br	49fc0 <__s2b+0x54>

0004a08c <_read_r>:
   4a08c:	defffd04 	addi	sp,sp,-12
   4a090:	dc000015 	stw	r16,0(sp)
   4a094:	04000174 	movhi	r16,5
   4a098:	841cb304 	addi	r16,r16,29388
   4a09c:	dc400115 	stw	r17,4(sp)
   4a0a0:	80000015 	stw	zero,0(r16)
   4a0a4:	2023883a 	mov	r17,r4
   4a0a8:	2809883a 	mov	r4,r5
   4a0ac:	300b883a 	mov	r5,r6
   4a0b0:	380d883a 	mov	r6,r7
   4a0b4:	dfc00215 	stw	ra,8(sp)
   4a0b8:	0050be00 	call	50be0 <read>
   4a0bc:	1007883a 	mov	r3,r2
   4a0c0:	00bfffc4 	movi	r2,-1
   4a0c4:	18800626 	beq	r3,r2,4a0e0 <_read_r+0x54>
   4a0c8:	1805883a 	mov	r2,r3
   4a0cc:	dfc00217 	ldw	ra,8(sp)
   4a0d0:	dc400117 	ldw	r17,4(sp)
   4a0d4:	dc000017 	ldw	r16,0(sp)
   4a0d8:	dec00304 	addi	sp,sp,12
   4a0dc:	f800283a 	ret
   4a0e0:	80800017 	ldw	r2,0(r16)
   4a0e4:	103ff826 	beq	r2,zero,4a0c8 <_read_r+0x3c>
   4a0e8:	88800015 	stw	r2,0(r17)
   4a0ec:	1805883a 	mov	r2,r3
   4a0f0:	dfc00217 	ldw	ra,8(sp)
   4a0f4:	dc400117 	ldw	r17,4(sp)
   4a0f8:	dc000017 	ldw	r16,0(sp)
   4a0fc:	dec00304 	addi	sp,sp,12
   4a100:	f800283a 	ret

0004a104 <_realloc_r>:
   4a104:	defff404 	addi	sp,sp,-48
   4a108:	dd800815 	stw	r22,32(sp)
   4a10c:	dc800415 	stw	r18,16(sp)
   4a110:	dc400315 	stw	r17,12(sp)
   4a114:	dfc00b15 	stw	ra,44(sp)
   4a118:	df000a15 	stw	fp,40(sp)
   4a11c:	ddc00915 	stw	r23,36(sp)
   4a120:	dd400715 	stw	r21,28(sp)
   4a124:	dd000615 	stw	r20,24(sp)
   4a128:	dcc00515 	stw	r19,20(sp)
   4a12c:	dc000215 	stw	r16,8(sp)
   4a130:	2825883a 	mov	r18,r5
   4a134:	3023883a 	mov	r17,r6
   4a138:	202d883a 	mov	r22,r4
   4a13c:	2800c926 	beq	r5,zero,4a464 <_realloc_r+0x360>
   4a140:	00508bc0 	call	508bc <__malloc_lock>
   4a144:	943ffe04 	addi	r16,r18,-8
   4a148:	88c002c4 	addi	r3,r17,11
   4a14c:	00800584 	movi	r2,22
   4a150:	82000117 	ldw	r8,4(r16)
   4a154:	10c01b2e 	bgeu	r2,r3,4a1c4 <_realloc_r+0xc0>
   4a158:	00bffe04 	movi	r2,-8
   4a15c:	188e703a 	and	r7,r3,r2
   4a160:	3839883a 	mov	fp,r7
   4a164:	38001a16 	blt	r7,zero,4a1d0 <_realloc_r+0xcc>
   4a168:	e4401936 	bltu	fp,r17,4a1d0 <_realloc_r+0xcc>
   4a16c:	013fff04 	movi	r4,-4
   4a170:	4126703a 	and	r19,r8,r4
   4a174:	99c02616 	blt	r19,r7,4a210 <_realloc_r+0x10c>
   4a178:	802b883a 	mov	r21,r16
   4a17c:	9829883a 	mov	r20,r19
   4a180:	84000204 	addi	r16,r16,8
   4a184:	a80f883a 	mov	r7,r21
   4a188:	a70dc83a 	sub	r6,r20,fp
   4a18c:	008003c4 	movi	r2,15
   4a190:	1180c136 	bltu	r2,r6,4a498 <_realloc_r+0x394>
   4a194:	38800117 	ldw	r2,4(r7)
   4a198:	a549883a 	add	r4,r20,r21
   4a19c:	1080004c 	andi	r2,r2,1
   4a1a0:	a084b03a 	or	r2,r20,r2
   4a1a4:	38800115 	stw	r2,4(r7)
   4a1a8:	20c00117 	ldw	r3,4(r4)
   4a1ac:	18c00054 	ori	r3,r3,1
   4a1b0:	20c00115 	stw	r3,4(r4)
   4a1b4:	b009883a 	mov	r4,r22
   4a1b8:	00508dc0 	call	508dc <__malloc_unlock>
   4a1bc:	8023883a 	mov	r17,r16
   4a1c0:	00000606 	br	4a1dc <_realloc_r+0xd8>
   4a1c4:	01c00404 	movi	r7,16
   4a1c8:	3839883a 	mov	fp,r7
   4a1cc:	e47fe72e 	bgeu	fp,r17,4a16c <_realloc_r+0x68>
   4a1d0:	00800304 	movi	r2,12
   4a1d4:	0023883a 	mov	r17,zero
   4a1d8:	b0800015 	stw	r2,0(r22)
   4a1dc:	8805883a 	mov	r2,r17
   4a1e0:	dfc00b17 	ldw	ra,44(sp)
   4a1e4:	df000a17 	ldw	fp,40(sp)
   4a1e8:	ddc00917 	ldw	r23,36(sp)
   4a1ec:	dd800817 	ldw	r22,32(sp)
   4a1f0:	dd400717 	ldw	r21,28(sp)
   4a1f4:	dd000617 	ldw	r20,24(sp)
   4a1f8:	dcc00517 	ldw	r19,20(sp)
   4a1fc:	dc800417 	ldw	r18,16(sp)
   4a200:	dc400317 	ldw	r17,12(sp)
   4a204:	dc000217 	ldw	r16,8(sp)
   4a208:	dec00c04 	addi	sp,sp,48
   4a20c:	f800283a 	ret
   4a210:	00800174 	movhi	r2,5
   4a214:	10903404 	addi	r2,r2,16592
   4a218:	12400217 	ldw	r9,8(r2)
   4a21c:	84cd883a 	add	r6,r16,r19
   4a220:	802b883a 	mov	r21,r16
   4a224:	3240b926 	beq	r6,r9,4a50c <_realloc_r+0x408>
   4a228:	31400117 	ldw	r5,4(r6)
   4a22c:	00bfff84 	movi	r2,-2
   4a230:	2884703a 	and	r2,r5,r2
   4a234:	1185883a 	add	r2,r2,r6
   4a238:	10c00117 	ldw	r3,4(r2)
   4a23c:	18c0004c 	andi	r3,r3,1
   4a240:	1807003a 	cmpeq	r3,r3,zero
   4a244:	1800a326 	beq	r3,zero,4a4d4 <_realloc_r+0x3d0>
   4a248:	2908703a 	and	r4,r5,r4
   4a24c:	9929883a 	add	r20,r19,r4
   4a250:	a1c0a30e 	bge	r20,r7,4a4e0 <_realloc_r+0x3dc>
   4a254:	4080004c 	andi	r2,r8,1
   4a258:	1000551e 	bne	r2,zero,4a3b0 <_realloc_r+0x2ac>
   4a25c:	80800017 	ldw	r2,0(r16)
   4a260:	80afc83a 	sub	r23,r16,r2
   4a264:	b8c00117 	ldw	r3,4(r23)
   4a268:	00bfff04 	movi	r2,-4
   4a26c:	1884703a 	and	r2,r3,r2
   4a270:	30002e26 	beq	r6,zero,4a32c <_realloc_r+0x228>
   4a274:	3240b926 	beq	r6,r9,4a55c <_realloc_r+0x458>
   4a278:	98a9883a 	add	r20,r19,r2
   4a27c:	2509883a 	add	r4,r4,r20
   4a280:	d9000015 	stw	r4,0(sp)
   4a284:	21c02a16 	blt	r4,r7,4a330 <_realloc_r+0x22c>
   4a288:	30800317 	ldw	r2,12(r6)
   4a28c:	30c00217 	ldw	r3,8(r6)
   4a290:	01400904 	movi	r5,36
   4a294:	99bfff04 	addi	r6,r19,-4
   4a298:	18800315 	stw	r2,12(r3)
   4a29c:	10c00215 	stw	r3,8(r2)
   4a2a0:	b9000317 	ldw	r4,12(r23)
   4a2a4:	b8800217 	ldw	r2,8(r23)
   4a2a8:	b82b883a 	mov	r21,r23
   4a2ac:	bc000204 	addi	r16,r23,8
   4a2b0:	20800215 	stw	r2,8(r4)
   4a2b4:	11000315 	stw	r4,12(r2)
   4a2b8:	2980e436 	bltu	r5,r6,4a64c <_realloc_r+0x548>
   4a2bc:	008004c4 	movi	r2,19
   4a2c0:	9009883a 	mov	r4,r18
   4a2c4:	8011883a 	mov	r8,r16
   4a2c8:	11800f2e 	bgeu	r2,r6,4a308 <_realloc_r+0x204>
   4a2cc:	90800017 	ldw	r2,0(r18)
   4a2d0:	ba000404 	addi	r8,r23,16
   4a2d4:	91000204 	addi	r4,r18,8
   4a2d8:	b8800215 	stw	r2,8(r23)
   4a2dc:	90c00117 	ldw	r3,4(r18)
   4a2e0:	008006c4 	movi	r2,27
   4a2e4:	b8c00315 	stw	r3,12(r23)
   4a2e8:	1180072e 	bgeu	r2,r6,4a308 <_realloc_r+0x204>
   4a2ec:	90c00217 	ldw	r3,8(r18)
   4a2f0:	ba000604 	addi	r8,r23,24
   4a2f4:	91000404 	addi	r4,r18,16
   4a2f8:	b8c00415 	stw	r3,16(r23)
   4a2fc:	90800317 	ldw	r2,12(r18)
   4a300:	b8800515 	stw	r2,20(r23)
   4a304:	3140e726 	beq	r6,r5,4a6a4 <_realloc_r+0x5a0>
   4a308:	20800017 	ldw	r2,0(r4)
   4a30c:	dd000017 	ldw	r20,0(sp)
   4a310:	b80f883a 	mov	r7,r23
   4a314:	40800015 	stw	r2,0(r8)
   4a318:	20c00117 	ldw	r3,4(r4)
   4a31c:	40c00115 	stw	r3,4(r8)
   4a320:	20800217 	ldw	r2,8(r4)
   4a324:	40800215 	stw	r2,8(r8)
   4a328:	003f9706 	br	4a188 <_realloc_r+0x84>
   4a32c:	98a9883a 	add	r20,r19,r2
   4a330:	a1c01f16 	blt	r20,r7,4a3b0 <_realloc_r+0x2ac>
   4a334:	b8c00317 	ldw	r3,12(r23)
   4a338:	b8800217 	ldw	r2,8(r23)
   4a33c:	99bfff04 	addi	r6,r19,-4
   4a340:	01400904 	movi	r5,36
   4a344:	b82b883a 	mov	r21,r23
   4a348:	18800215 	stw	r2,8(r3)
   4a34c:	10c00315 	stw	r3,12(r2)
   4a350:	bc000204 	addi	r16,r23,8
   4a354:	2980c336 	bltu	r5,r6,4a664 <_realloc_r+0x560>
   4a358:	008004c4 	movi	r2,19
   4a35c:	9009883a 	mov	r4,r18
   4a360:	8011883a 	mov	r8,r16
   4a364:	11800f2e 	bgeu	r2,r6,4a3a4 <_realloc_r+0x2a0>
   4a368:	90800017 	ldw	r2,0(r18)
   4a36c:	ba000404 	addi	r8,r23,16
   4a370:	91000204 	addi	r4,r18,8
   4a374:	b8800215 	stw	r2,8(r23)
   4a378:	90c00117 	ldw	r3,4(r18)
   4a37c:	008006c4 	movi	r2,27
   4a380:	b8c00315 	stw	r3,12(r23)
   4a384:	1180072e 	bgeu	r2,r6,4a3a4 <_realloc_r+0x2a0>
   4a388:	90c00217 	ldw	r3,8(r18)
   4a38c:	ba000604 	addi	r8,r23,24
   4a390:	91000404 	addi	r4,r18,16
   4a394:	b8c00415 	stw	r3,16(r23)
   4a398:	90800317 	ldw	r2,12(r18)
   4a39c:	b8800515 	stw	r2,20(r23)
   4a3a0:	3140c726 	beq	r6,r5,4a6c0 <_realloc_r+0x5bc>
   4a3a4:	20800017 	ldw	r2,0(r4)
   4a3a8:	b80f883a 	mov	r7,r23
   4a3ac:	003fd906 	br	4a314 <_realloc_r+0x210>
   4a3b0:	880b883a 	mov	r5,r17
   4a3b4:	b009883a 	mov	r4,r22
   4a3b8:	00416980 	call	41698 <_malloc_r>
   4a3bc:	1023883a 	mov	r17,r2
   4a3c0:	10002526 	beq	r2,zero,4a458 <_realloc_r+0x354>
   4a3c4:	80800117 	ldw	r2,4(r16)
   4a3c8:	00ffff84 	movi	r3,-2
   4a3cc:	893ffe04 	addi	r4,r17,-8
   4a3d0:	10c4703a 	and	r2,r2,r3
   4a3d4:	8085883a 	add	r2,r16,r2
   4a3d8:	20809526 	beq	r4,r2,4a630 <_realloc_r+0x52c>
   4a3dc:	99bfff04 	addi	r6,r19,-4
   4a3e0:	01c00904 	movi	r7,36
   4a3e4:	39804536 	bltu	r7,r6,4a4fc <_realloc_r+0x3f8>
   4a3e8:	008004c4 	movi	r2,19
   4a3ec:	9009883a 	mov	r4,r18
   4a3f0:	880b883a 	mov	r5,r17
   4a3f4:	11800f2e 	bgeu	r2,r6,4a434 <_realloc_r+0x330>
   4a3f8:	90800017 	ldw	r2,0(r18)
   4a3fc:	89400204 	addi	r5,r17,8
   4a400:	91000204 	addi	r4,r18,8
   4a404:	88800015 	stw	r2,0(r17)
   4a408:	90c00117 	ldw	r3,4(r18)
   4a40c:	008006c4 	movi	r2,27
   4a410:	88c00115 	stw	r3,4(r17)
   4a414:	1180072e 	bgeu	r2,r6,4a434 <_realloc_r+0x330>
   4a418:	90c00217 	ldw	r3,8(r18)
   4a41c:	89400404 	addi	r5,r17,16
   4a420:	91000404 	addi	r4,r18,16
   4a424:	88c00215 	stw	r3,8(r17)
   4a428:	90800317 	ldw	r2,12(r18)
   4a42c:	88800315 	stw	r2,12(r17)
   4a430:	31c09126 	beq	r6,r7,4a678 <_realloc_r+0x574>
   4a434:	20800017 	ldw	r2,0(r4)
   4a438:	28800015 	stw	r2,0(r5)
   4a43c:	20c00117 	ldw	r3,4(r4)
   4a440:	28c00115 	stw	r3,4(r5)
   4a444:	20800217 	ldw	r2,8(r4)
   4a448:	28800215 	stw	r2,8(r5)
   4a44c:	900b883a 	mov	r5,r18
   4a450:	b009883a 	mov	r4,r22
   4a454:	00480fc0 	call	480fc <_free_r>
   4a458:	b009883a 	mov	r4,r22
   4a45c:	00508dc0 	call	508dc <__malloc_unlock>
   4a460:	003f5e06 	br	4a1dc <_realloc_r+0xd8>
   4a464:	300b883a 	mov	r5,r6
   4a468:	dfc00b17 	ldw	ra,44(sp)
   4a46c:	df000a17 	ldw	fp,40(sp)
   4a470:	ddc00917 	ldw	r23,36(sp)
   4a474:	dd800817 	ldw	r22,32(sp)
   4a478:	dd400717 	ldw	r21,28(sp)
   4a47c:	dd000617 	ldw	r20,24(sp)
   4a480:	dcc00517 	ldw	r19,20(sp)
   4a484:	dc800417 	ldw	r18,16(sp)
   4a488:	dc400317 	ldw	r17,12(sp)
   4a48c:	dc000217 	ldw	r16,8(sp)
   4a490:	dec00c04 	addi	sp,sp,48
   4a494:	00416981 	jmpi	41698 <_malloc_r>
   4a498:	38800117 	ldw	r2,4(r7)
   4a49c:	e54b883a 	add	r5,fp,r21
   4a4a0:	31000054 	ori	r4,r6,1
   4a4a4:	1080004c 	andi	r2,r2,1
   4a4a8:	1704b03a 	or	r2,r2,fp
   4a4ac:	38800115 	stw	r2,4(r7)
   4a4b0:	29000115 	stw	r4,4(r5)
   4a4b4:	2987883a 	add	r3,r5,r6
   4a4b8:	18800117 	ldw	r2,4(r3)
   4a4bc:	29400204 	addi	r5,r5,8
   4a4c0:	b009883a 	mov	r4,r22
   4a4c4:	10800054 	ori	r2,r2,1
   4a4c8:	18800115 	stw	r2,4(r3)
   4a4cc:	00480fc0 	call	480fc <_free_r>
   4a4d0:	003f3806 	br	4a1b4 <_realloc_r+0xb0>
   4a4d4:	000d883a 	mov	r6,zero
   4a4d8:	0009883a 	mov	r4,zero
   4a4dc:	003f5d06 	br	4a254 <_realloc_r+0x150>
   4a4e0:	30c00217 	ldw	r3,8(r6)
   4a4e4:	30800317 	ldw	r2,12(r6)
   4a4e8:	800f883a 	mov	r7,r16
   4a4ec:	84000204 	addi	r16,r16,8
   4a4f0:	10c00215 	stw	r3,8(r2)
   4a4f4:	18800315 	stw	r2,12(r3)
   4a4f8:	003f2306 	br	4a188 <_realloc_r+0x84>
   4a4fc:	8809883a 	mov	r4,r17
   4a500:	900b883a 	mov	r5,r18
   4a504:	0048e880 	call	48e88 <memmove>
   4a508:	003fd006 	br	4a44c <_realloc_r+0x348>
   4a50c:	30800117 	ldw	r2,4(r6)
   4a510:	e0c00404 	addi	r3,fp,16
   4a514:	1108703a 	and	r4,r2,r4
   4a518:	9905883a 	add	r2,r19,r4
   4a51c:	10ff4d16 	blt	r2,r3,4a254 <_realloc_r+0x150>
   4a520:	1705c83a 	sub	r2,r2,fp
   4a524:	870b883a 	add	r5,r16,fp
   4a528:	10800054 	ori	r2,r2,1
   4a52c:	28800115 	stw	r2,4(r5)
   4a530:	80c00117 	ldw	r3,4(r16)
   4a534:	00800174 	movhi	r2,5
   4a538:	10903404 	addi	r2,r2,16592
   4a53c:	b009883a 	mov	r4,r22
   4a540:	18c0004c 	andi	r3,r3,1
   4a544:	e0c6b03a 	or	r3,fp,r3
   4a548:	11400215 	stw	r5,8(r2)
   4a54c:	80c00115 	stw	r3,4(r16)
   4a550:	00508dc0 	call	508dc <__malloc_unlock>
   4a554:	84400204 	addi	r17,r16,8
   4a558:	003f2006 	br	4a1dc <_realloc_r+0xd8>
   4a55c:	98a9883a 	add	r20,r19,r2
   4a560:	2509883a 	add	r4,r4,r20
   4a564:	e0800404 	addi	r2,fp,16
   4a568:	d9000115 	stw	r4,4(sp)
   4a56c:	20bf7016 	blt	r4,r2,4a330 <_realloc_r+0x22c>
   4a570:	b8c00317 	ldw	r3,12(r23)
   4a574:	b8800217 	ldw	r2,8(r23)
   4a578:	99bfff04 	addi	r6,r19,-4
   4a57c:	01400904 	movi	r5,36
   4a580:	18800215 	stw	r2,8(r3)
   4a584:	10c00315 	stw	r3,12(r2)
   4a588:	bc400204 	addi	r17,r23,8
   4a58c:	29804136 	bltu	r5,r6,4a694 <_realloc_r+0x590>
   4a590:	008004c4 	movi	r2,19
   4a594:	9009883a 	mov	r4,r18
   4a598:	880f883a 	mov	r7,r17
   4a59c:	11800f2e 	bgeu	r2,r6,4a5dc <_realloc_r+0x4d8>
   4a5a0:	90800017 	ldw	r2,0(r18)
   4a5a4:	b9c00404 	addi	r7,r23,16
   4a5a8:	91000204 	addi	r4,r18,8
   4a5ac:	b8800215 	stw	r2,8(r23)
   4a5b0:	90c00117 	ldw	r3,4(r18)
   4a5b4:	008006c4 	movi	r2,27
   4a5b8:	b8c00315 	stw	r3,12(r23)
   4a5bc:	1180072e 	bgeu	r2,r6,4a5dc <_realloc_r+0x4d8>
   4a5c0:	90c00217 	ldw	r3,8(r18)
   4a5c4:	b9c00604 	addi	r7,r23,24
   4a5c8:	91000404 	addi	r4,r18,16
   4a5cc:	b8c00415 	stw	r3,16(r23)
   4a5d0:	90800317 	ldw	r2,12(r18)
   4a5d4:	b8800515 	stw	r2,20(r23)
   4a5d8:	31404026 	beq	r6,r5,4a6dc <_realloc_r+0x5d8>
   4a5dc:	20800017 	ldw	r2,0(r4)
   4a5e0:	38800015 	stw	r2,0(r7)
   4a5e4:	20c00117 	ldw	r3,4(r4)
   4a5e8:	38c00115 	stw	r3,4(r7)
   4a5ec:	20800217 	ldw	r2,8(r4)
   4a5f0:	38800215 	stw	r2,8(r7)
   4a5f4:	d8c00117 	ldw	r3,4(sp)
   4a5f8:	bf0b883a 	add	r5,r23,fp
   4a5fc:	b009883a 	mov	r4,r22
   4a600:	1f05c83a 	sub	r2,r3,fp
   4a604:	10800054 	ori	r2,r2,1
   4a608:	28800115 	stw	r2,4(r5)
   4a60c:	b8c00117 	ldw	r3,4(r23)
   4a610:	00800174 	movhi	r2,5
   4a614:	10903404 	addi	r2,r2,16592
   4a618:	11400215 	stw	r5,8(r2)
   4a61c:	18c0004c 	andi	r3,r3,1
   4a620:	e0c6b03a 	or	r3,fp,r3
   4a624:	b8c00115 	stw	r3,4(r23)
   4a628:	00508dc0 	call	508dc <__malloc_unlock>
   4a62c:	003eeb06 	br	4a1dc <_realloc_r+0xd8>
   4a630:	20800117 	ldw	r2,4(r4)
   4a634:	00ffff04 	movi	r3,-4
   4a638:	800f883a 	mov	r7,r16
   4a63c:	10c4703a 	and	r2,r2,r3
   4a640:	98a9883a 	add	r20,r19,r2
   4a644:	84000204 	addi	r16,r16,8
   4a648:	003ecf06 	br	4a188 <_realloc_r+0x84>
   4a64c:	900b883a 	mov	r5,r18
   4a650:	8009883a 	mov	r4,r16
   4a654:	0048e880 	call	48e88 <memmove>
   4a658:	dd000017 	ldw	r20,0(sp)
   4a65c:	b80f883a 	mov	r7,r23
   4a660:	003ec906 	br	4a188 <_realloc_r+0x84>
   4a664:	900b883a 	mov	r5,r18
   4a668:	8009883a 	mov	r4,r16
   4a66c:	0048e880 	call	48e88 <memmove>
   4a670:	b80f883a 	mov	r7,r23
   4a674:	003ec406 	br	4a188 <_realloc_r+0x84>
   4a678:	90c00417 	ldw	r3,16(r18)
   4a67c:	89400604 	addi	r5,r17,24
   4a680:	91000604 	addi	r4,r18,24
   4a684:	88c00415 	stw	r3,16(r17)
   4a688:	90800517 	ldw	r2,20(r18)
   4a68c:	88800515 	stw	r2,20(r17)
   4a690:	003f6806 	br	4a434 <_realloc_r+0x330>
   4a694:	900b883a 	mov	r5,r18
   4a698:	8809883a 	mov	r4,r17
   4a69c:	0048e880 	call	48e88 <memmove>
   4a6a0:	003fd406 	br	4a5f4 <_realloc_r+0x4f0>
   4a6a4:	90c00417 	ldw	r3,16(r18)
   4a6a8:	91000604 	addi	r4,r18,24
   4a6ac:	ba000804 	addi	r8,r23,32
   4a6b0:	b8c00615 	stw	r3,24(r23)
   4a6b4:	90800517 	ldw	r2,20(r18)
   4a6b8:	b8800715 	stw	r2,28(r23)
   4a6bc:	003f1206 	br	4a308 <_realloc_r+0x204>
   4a6c0:	90c00417 	ldw	r3,16(r18)
   4a6c4:	91000604 	addi	r4,r18,24
   4a6c8:	ba000804 	addi	r8,r23,32
   4a6cc:	b8c00615 	stw	r3,24(r23)
   4a6d0:	90800517 	ldw	r2,20(r18)
   4a6d4:	b8800715 	stw	r2,28(r23)
   4a6d8:	003f3206 	br	4a3a4 <_realloc_r+0x2a0>
   4a6dc:	90c00417 	ldw	r3,16(r18)
   4a6e0:	91000604 	addi	r4,r18,24
   4a6e4:	b9c00804 	addi	r7,r23,32
   4a6e8:	b8c00615 	stw	r3,24(r23)
   4a6ec:	90800517 	ldw	r2,20(r18)
   4a6f0:	b8800715 	stw	r2,28(r23)
   4a6f4:	003fb906 	br	4a5dc <_realloc_r+0x4d8>

0004a6f8 <__isinfd>:
   4a6f8:	200d883a 	mov	r6,r4
   4a6fc:	0109c83a 	sub	r4,zero,r4
   4a700:	2188b03a 	or	r4,r4,r6
   4a704:	2008d7fa 	srli	r4,r4,31
   4a708:	00a00034 	movhi	r2,32768
   4a70c:	10bfffc4 	addi	r2,r2,-1
   4a710:	1144703a 	and	r2,r2,r5
   4a714:	2088b03a 	or	r4,r4,r2
   4a718:	009ffc34 	movhi	r2,32752
   4a71c:	1105c83a 	sub	r2,r2,r4
   4a720:	0087c83a 	sub	r3,zero,r2
   4a724:	10c4b03a 	or	r2,r2,r3
   4a728:	1004d7fa 	srli	r2,r2,31
   4a72c:	00c00044 	movi	r3,1
   4a730:	1885c83a 	sub	r2,r3,r2
   4a734:	f800283a 	ret

0004a738 <__isnand>:
   4a738:	200d883a 	mov	r6,r4
   4a73c:	0109c83a 	sub	r4,zero,r4
   4a740:	2188b03a 	or	r4,r4,r6
   4a744:	2008d7fa 	srli	r4,r4,31
   4a748:	00a00034 	movhi	r2,32768
   4a74c:	10bfffc4 	addi	r2,r2,-1
   4a750:	1144703a 	and	r2,r2,r5
   4a754:	2088b03a 	or	r4,r4,r2
   4a758:	009ffc34 	movhi	r2,32752
   4a75c:	1105c83a 	sub	r2,r2,r4
   4a760:	1004d7fa 	srli	r2,r2,31
   4a764:	f800283a 	ret

0004a768 <__sccl>:
   4a768:	28c00003 	ldbu	r3,0(r5)
   4a76c:	00801784 	movi	r2,94
   4a770:	2a000044 	addi	r8,r5,1
   4a774:	18802526 	beq	r3,r2,4a80c <__sccl+0xa4>
   4a778:	180f883a 	mov	r7,r3
   4a77c:	0013883a 	mov	r9,zero
   4a780:	000d883a 	mov	r6,zero
   4a784:	0007883a 	mov	r3,zero
   4a788:	01404004 	movi	r5,256
   4a78c:	1905883a 	add	r2,r3,r4
   4a790:	18c00044 	addi	r3,r3,1
   4a794:	11800005 	stb	r6,0(r2)
   4a798:	197ffc1e 	bne	r3,r5,4a78c <__sccl+0x24>
   4a79c:	38000c26 	beq	r7,zero,4a7d0 <__sccl+0x68>
   4a7a0:	00800044 	movi	r2,1
   4a7a4:	124dc83a 	sub	r6,r2,r9
   4a7a8:	3905883a 	add	r2,r7,r4
   4a7ac:	11800005 	stb	r6,0(r2)
   4a7b0:	41400044 	addi	r5,r8,1
   4a7b4:	02400b44 	movi	r9,45
   4a7b8:	02801744 	movi	r10,93
   4a7bc:	28bfffc3 	ldbu	r2,-1(r5)
   4a7c0:	2811883a 	mov	r8,r5
   4a7c4:	12400726 	beq	r2,r9,4a7e4 <__sccl+0x7c>
   4a7c8:	12800226 	beq	r2,r10,4a7d4 <__sccl+0x6c>
   4a7cc:	1000031e 	bne	r2,zero,4a7dc <__sccl+0x74>
   4a7d0:	423fffc4 	addi	r8,r8,-1
   4a7d4:	4005883a 	mov	r2,r8
   4a7d8:	f800283a 	ret
   4a7dc:	100f883a 	mov	r7,r2
   4a7e0:	003ff106 	br	4a7a8 <__sccl+0x40>
   4a7e4:	28c00003 	ldbu	r3,0(r5)
   4a7e8:	1a800d26 	beq	r3,r10,4a820 <__sccl+0xb8>
   4a7ec:	19c00c16 	blt	r3,r7,4a820 <__sccl+0xb8>
   4a7f0:	21c5883a 	add	r2,r4,r7
   4a7f4:	39c00044 	addi	r7,r7,1
   4a7f8:	11800045 	stb	r6,1(r2)
   4a7fc:	10800044 	addi	r2,r2,1
   4a800:	38fffc16 	blt	r7,r3,4a7f4 <__sccl+0x8c>
   4a804:	29400084 	addi	r5,r5,2
   4a808:	003fec06 	br	4a7bc <__sccl+0x54>
   4a80c:	29c00043 	ldbu	r7,1(r5)
   4a810:	02400044 	movi	r9,1
   4a814:	2a000084 	addi	r8,r5,2
   4a818:	480d883a 	mov	r6,r9
   4a81c:	003fd906 	br	4a784 <__sccl+0x1c>
   4a820:	01c00b44 	movi	r7,45
   4a824:	003fe006 	br	4a7a8 <__sccl+0x40>

0004a828 <nanf>:
   4a828:	009ff034 	movhi	r2,32704
   4a82c:	f800283a 	ret

0004a830 <sprintf>:
   4a830:	deffe504 	addi	sp,sp,-108
   4a834:	2013883a 	mov	r9,r4
   4a838:	dfc01815 	stw	ra,96(sp)
   4a83c:	d9801915 	stw	r6,100(sp)
   4a840:	d9c01a15 	stw	r7,104(sp)
   4a844:	d8801904 	addi	r2,sp,100
   4a848:	d8800015 	stw	r2,0(sp)
   4a84c:	00800174 	movhi	r2,5
   4a850:	1095cf04 	addi	r2,r2,22332
   4a854:	11000017 	ldw	r4,0(r2)
   4a858:	d9c00017 	ldw	r7,0(sp)
   4a85c:	00808204 	movi	r2,520
   4a860:	00e00034 	movhi	r3,32768
   4a864:	18ffffc4 	addi	r3,r3,-1
   4a868:	280d883a 	mov	r6,r5
   4a86c:	d880040d 	sth	r2,16(sp)
   4a870:	d9400104 	addi	r5,sp,4
   4a874:	00bfffc4 	movi	r2,-1
   4a878:	d8c00615 	stw	r3,24(sp)
   4a87c:	d8c00315 	stw	r3,12(sp)
   4a880:	da400515 	stw	r9,20(sp)
   4a884:	d880048d 	sth	r2,18(sp)
   4a888:	da400115 	stw	r9,4(sp)
   4a88c:	00427340 	call	42734 <___vfprintf_internal_r>
   4a890:	d8c00117 	ldw	r3,4(sp)
   4a894:	18000005 	stb	zero,0(r3)
   4a898:	dfc01817 	ldw	ra,96(sp)
   4a89c:	dec01b04 	addi	sp,sp,108
   4a8a0:	f800283a 	ret

0004a8a4 <_sprintf_r>:
   4a8a4:	deffe604 	addi	sp,sp,-104
   4a8a8:	2813883a 	mov	r9,r5
   4a8ac:	dfc01815 	stw	ra,96(sp)
   4a8b0:	d9c01915 	stw	r7,100(sp)
   4a8b4:	d8801904 	addi	r2,sp,100
   4a8b8:	d8800015 	stw	r2,0(sp)
   4a8bc:	100f883a 	mov	r7,r2
   4a8c0:	00808204 	movi	r2,520
   4a8c4:	00e00034 	movhi	r3,32768
   4a8c8:	18ffffc4 	addi	r3,r3,-1
   4a8cc:	d880040d 	sth	r2,16(sp)
   4a8d0:	d9400104 	addi	r5,sp,4
   4a8d4:	00bfffc4 	movi	r2,-1
   4a8d8:	d8c00615 	stw	r3,24(sp)
   4a8dc:	d8c00315 	stw	r3,12(sp)
   4a8e0:	da400515 	stw	r9,20(sp)
   4a8e4:	d880048d 	sth	r2,18(sp)
   4a8e8:	da400115 	stw	r9,4(sp)
   4a8ec:	00427340 	call	42734 <___vfprintf_internal_r>
   4a8f0:	d8c00117 	ldw	r3,4(sp)
   4a8f4:	18000005 	stb	zero,0(r3)
   4a8f8:	dfc01817 	ldw	ra,96(sp)
   4a8fc:	dec01a04 	addi	sp,sp,104
   4a900:	f800283a 	ret

0004a904 <strcmp>:
   4a904:	2144b03a 	or	r2,r4,r5
   4a908:	108000cc 	andi	r2,r2,3
   4a90c:	10001d1e 	bne	r2,zero,4a984 <strcmp+0x80>
   4a910:	200f883a 	mov	r7,r4
   4a914:	28800017 	ldw	r2,0(r5)
   4a918:	21000017 	ldw	r4,0(r4)
   4a91c:	280d883a 	mov	r6,r5
   4a920:	2080161e 	bne	r4,r2,4a97c <strcmp+0x78>
   4a924:	023fbff4 	movhi	r8,65279
   4a928:	423fbfc4 	addi	r8,r8,-257
   4a92c:	2207883a 	add	r3,r4,r8
   4a930:	01602074 	movhi	r5,32897
   4a934:	29602004 	addi	r5,r5,-32640
   4a938:	1946703a 	and	r3,r3,r5
   4a93c:	0104303a 	nor	r2,zero,r4
   4a940:	10c4703a 	and	r2,r2,r3
   4a944:	10001c1e 	bne	r2,zero,4a9b8 <strcmp+0xb4>
   4a948:	4013883a 	mov	r9,r8
   4a94c:	2811883a 	mov	r8,r5
   4a950:	00000106 	br	4a958 <strcmp+0x54>
   4a954:	1800181e 	bne	r3,zero,4a9b8 <strcmp+0xb4>
   4a958:	39c00104 	addi	r7,r7,4
   4a95c:	39000017 	ldw	r4,0(r7)
   4a960:	31800104 	addi	r6,r6,4
   4a964:	31400017 	ldw	r5,0(r6)
   4a968:	2245883a 	add	r2,r4,r9
   4a96c:	1204703a 	and	r2,r2,r8
   4a970:	0106303a 	nor	r3,zero,r4
   4a974:	1886703a 	and	r3,r3,r2
   4a978:	217ff626 	beq	r4,r5,4a954 <strcmp+0x50>
   4a97c:	3809883a 	mov	r4,r7
   4a980:	300b883a 	mov	r5,r6
   4a984:	20c00007 	ldb	r3,0(r4)
   4a988:	1800051e 	bne	r3,zero,4a9a0 <strcmp+0x9c>
   4a98c:	00000606 	br	4a9a8 <strcmp+0xa4>
   4a990:	21000044 	addi	r4,r4,1
   4a994:	20c00007 	ldb	r3,0(r4)
   4a998:	29400044 	addi	r5,r5,1
   4a99c:	18000226 	beq	r3,zero,4a9a8 <strcmp+0xa4>
   4a9a0:	28800007 	ldb	r2,0(r5)
   4a9a4:	18bffa26 	beq	r3,r2,4a990 <strcmp+0x8c>
   4a9a8:	20c00003 	ldbu	r3,0(r4)
   4a9ac:	28800003 	ldbu	r2,0(r5)
   4a9b0:	1885c83a 	sub	r2,r3,r2
   4a9b4:	f800283a 	ret
   4a9b8:	0005883a 	mov	r2,zero
   4a9bc:	f800283a 	ret

0004a9c0 <match>:
   4a9c0:	21800017 	ldw	r6,0(r4)
   4a9c4:	01c01004 	movi	r7,64
   4a9c8:	02001684 	movi	r8,90
   4a9cc:	28800007 	ldb	r2,0(r5)
   4a9d0:	29400044 	addi	r5,r5,1
   4a9d4:	10000826 	beq	r2,zero,4a9f8 <match+0x38>
   4a9d8:	31800044 	addi	r6,r6,1
   4a9dc:	30c00007 	ldb	r3,0(r6)
   4a9e0:	38c0020e 	bge	r7,r3,4a9ec <match+0x2c>
   4a9e4:	40c00116 	blt	r8,r3,4a9ec <match+0x2c>
   4a9e8:	18c00804 	addi	r3,r3,32
   4a9ec:	18bff726 	beq	r3,r2,4a9cc <match+0xc>
   4a9f0:	0005883a 	mov	r2,zero
   4a9f4:	f800283a 	ret
   4a9f8:	30800044 	addi	r2,r6,1
   4a9fc:	20800015 	stw	r2,0(r4)
   4aa00:	00800044 	movi	r2,1
   4aa04:	f800283a 	ret

0004aa08 <_strtod_r>:
   4aa08:	deffd504 	addi	sp,sp,-172
   4aa0c:	df002915 	stw	fp,164(sp)
   4aa10:	dd402615 	stw	r21,152(sp)
   4aa14:	dd002515 	stw	r20,148(sp)
   4aa18:	dfc02a15 	stw	ra,168(sp)
   4aa1c:	ddc02815 	stw	r23,160(sp)
   4aa20:	dd802715 	stw	r22,156(sp)
   4aa24:	dcc02415 	stw	r19,144(sp)
   4aa28:	dc802315 	stw	r18,140(sp)
   4aa2c:	dc402215 	stw	r17,136(sp)
   4aa30:	dc002115 	stw	r16,132(sp)
   4aa34:	2829883a 	mov	r20,r5
   4aa38:	202b883a 	mov	r21,r4
   4aa3c:	d9801d15 	stw	r6,116(sp)
   4aa40:	d8000915 	stw	zero,36(sp)
   4aa44:	d8000a15 	stw	zero,40(sp)
   4aa48:	d9400415 	stw	r5,16(sp)
   4aa4c:	df000904 	addi	fp,sp,36
   4aa50:	dc000417 	ldw	r16,16(sp)
   4aa54:	00800b44 	movi	r2,45
   4aa58:	80c00003 	ldbu	r3,0(r16)
   4aa5c:	10c03536 	bltu	r2,r3,4ab34 <_strtod_r+0x12c>
   4aa60:	18c5883a 	add	r2,r3,r3
   4aa64:	1085883a 	add	r2,r2,r2
   4aa68:	00c00174 	movhi	r3,5
   4aa6c:	18ea9f04 	addi	r3,r3,-21892
   4aa70:	10c5883a 	add	r2,r2,r3
   4aa74:	11000017 	ldw	r4,0(r2)
   4aa78:	2000683a 	jmp	r4
   4aa7c:	0004acb4 	movhi	zero,4786
   4aa80:	0004ab34 	movhi	zero,4780
   4aa84:	0004ab34 	movhi	zero,4780
   4aa88:	0004ab34 	movhi	zero,4780
   4aa8c:	0004ab34 	movhi	zero,4780
   4aa90:	0004ab34 	movhi	zero,4780
   4aa94:	0004ab34 	movhi	zero,4780
   4aa98:	0004ab34 	movhi	zero,4780
   4aa9c:	0004ab34 	movhi	zero,4780
   4aaa0:	0004affc 	xorhi	zero,zero,4799
   4aaa4:	0004affc 	xorhi	zero,zero,4799
   4aaa8:	0004affc 	xorhi	zero,zero,4799
   4aaac:	0004affc 	xorhi	zero,zero,4799
   4aab0:	0004affc 	xorhi	zero,zero,4799
   4aab4:	0004ab34 	movhi	zero,4780
   4aab8:	0004ab34 	movhi	zero,4780
   4aabc:	0004ab34 	movhi	zero,4780
   4aac0:	0004ab34 	movhi	zero,4780
   4aac4:	0004ab34 	movhi	zero,4780
   4aac8:	0004ab34 	movhi	zero,4780
   4aacc:	0004ab34 	movhi	zero,4780
   4aad0:	0004ab34 	movhi	zero,4780
   4aad4:	0004ab34 	movhi	zero,4780
   4aad8:	0004ab34 	movhi	zero,4780
   4aadc:	0004ab34 	movhi	zero,4780
   4aae0:	0004ab34 	movhi	zero,4780
   4aae4:	0004ab34 	movhi	zero,4780
   4aae8:	0004ab34 	movhi	zero,4780
   4aaec:	0004ab34 	movhi	zero,4780
   4aaf0:	0004ab34 	movhi	zero,4780
   4aaf4:	0004ab34 	movhi	zero,4780
   4aaf8:	0004ab34 	movhi	zero,4780
   4aafc:	0004affc 	xorhi	zero,zero,4799
   4ab00:	0004ab34 	movhi	zero,4780
   4ab04:	0004ab34 	movhi	zero,4780
   4ab08:	0004ab34 	movhi	zero,4780
   4ab0c:	0004ab34 	movhi	zero,4780
   4ab10:	0004ab34 	movhi	zero,4780
   4ab14:	0004ab34 	movhi	zero,4780
   4ab18:	0004ab34 	movhi	zero,4780
   4ab1c:	0004ab34 	movhi	zero,4780
   4ab20:	0004ab34 	movhi	zero,4780
   4ab24:	0004ab34 	movhi	zero,4780
   4ab28:	0004afdc 	xori	zero,zero,4799
   4ab2c:	0004ab34 	movhi	zero,4780
   4ab30:	0004b008 	cmpgei	zero,zero,4800
   4ab34:	d8001515 	stw	zero,84(sp)
   4ab38:	80c00007 	ldb	r3,0(r16)
   4ab3c:	00800c04 	movi	r2,48
   4ab40:	1880e926 	beq	r3,r2,4aee8 <_strtod_r+0x4e0>
   4ab44:	d8001615 	stw	zero,88(sp)
   4ab48:	dc001415 	stw	r16,80(sp)
   4ab4c:	84400007 	ldb	r17,0(r16)
   4ab50:	00800bc4 	movi	r2,47
   4ab54:	1443760e 	bge	r2,r17,4b930 <_strtod_r+0xf28>
   4ab58:	00800e44 	movi	r2,57
   4ab5c:	14437416 	blt	r2,r17,4b930 <_strtod_r+0xf28>
   4ab60:	8025883a 	mov	r18,r16
   4ab64:	0027883a 	mov	r19,zero
   4ab68:	d8001215 	stw	zero,72(sp)
   4ab6c:	d8001115 	stw	zero,68(sp)
   4ab70:	00000f06 	br	4abb0 <_strtod_r+0x1a8>
   4ab74:	d9001217 	ldw	r4,72(sp)
   4ab78:	01400284 	movi	r5,10
   4ab7c:	004fd3c0 	call	4fd3c <__mulsi3>
   4ab80:	1445883a 	add	r2,r2,r17
   4ab84:	10bff404 	addi	r2,r2,-48
   4ab88:	d8801215 	stw	r2,72(sp)
   4ab8c:	94000044 	addi	r16,r18,1
   4ab90:	dc000415 	stw	r16,16(sp)
   4ab94:	84400007 	ldb	r17,0(r16)
   4ab98:	00800bc4 	movi	r2,47
   4ab9c:	9cc00044 	addi	r19,r19,1
   4aba0:	8025883a 	mov	r18,r16
   4aba4:	1440130e 	bge	r2,r17,4abf4 <_strtod_r+0x1ec>
   4aba8:	00800e44 	movi	r2,57
   4abac:	14401116 	blt	r2,r17,4abf4 <_strtod_r+0x1ec>
   4abb0:	00800204 	movi	r2,8
   4abb4:	14ffef0e 	bge	r2,r19,4ab74 <_strtod_r+0x16c>
   4abb8:	008003c4 	movi	r2,15
   4abbc:	14fff316 	blt	r2,r19,4ab8c <_strtod_r+0x184>
   4abc0:	d9001117 	ldw	r4,68(sp)
   4abc4:	01400284 	movi	r5,10
   4abc8:	94000044 	addi	r16,r18,1
   4abcc:	004fd3c0 	call	4fd3c <__mulsi3>
   4abd0:	1445883a 	add	r2,r2,r17
   4abd4:	10bff404 	addi	r2,r2,-48
   4abd8:	d8801115 	stw	r2,68(sp)
   4abdc:	dc000415 	stw	r16,16(sp)
   4abe0:	84400007 	ldb	r17,0(r16)
   4abe4:	00800bc4 	movi	r2,47
   4abe8:	9cc00044 	addi	r19,r19,1
   4abec:	8025883a 	mov	r18,r16
   4abf0:	147fed16 	blt	r2,r17,4aba8 <_strtod_r+0x1a0>
   4abf4:	00800b84 	movi	r2,46
   4abf8:	8880c926 	beq	r17,r2,4af20 <_strtod_r+0x518>
   4abfc:	dcc01815 	stw	r19,96(sp)
   4ac00:	d8001b15 	stw	zero,108(sp)
   4ac04:	d8001715 	stw	zero,92(sp)
   4ac08:	000d883a 	mov	r6,zero
   4ac0c:	00801944 	movi	r2,101
   4ac10:	88802126 	beq	r17,r2,4ac98 <_strtod_r+0x290>
   4ac14:	00801144 	movi	r2,69
   4ac18:	88801f26 	beq	r17,r2,4ac98 <_strtod_r+0x290>
   4ac1c:	d9001817 	ldw	r4,96(sp)
   4ac20:	2024c03a 	cmpne	r18,r4,zero
   4ac24:	0009883a 	mov	r4,zero
   4ac28:	9000651e 	bne	r18,zero,4adc0 <_strtod_r+0x3b8>
   4ac2c:	3000c926 	beq	r6,zero,4af54 <_strtod_r+0x54c>
   4ac30:	d8801d17 	ldw	r2,116(sp)
   4ac34:	10000326 	beq	r2,zero,4ac44 <_strtod_r+0x23c>
   4ac38:	d8800417 	ldw	r2,16(sp)
   4ac3c:	d8c01d17 	ldw	r3,116(sp)
   4ac40:	18800015 	stw	r2,0(r3)
   4ac44:	d9001517 	ldw	r4,84(sp)
   4ac48:	2005003a 	cmpeq	r2,r4,zero
   4ac4c:	10001c1e 	bne	r2,zero,4acc0 <_strtod_r+0x2b8>
   4ac50:	e0800017 	ldw	r2,0(fp)
   4ac54:	e0c00117 	ldw	r3,4(fp)
   4ac58:	1009883a 	mov	r4,r2
   4ac5c:	1960003c 	xorhi	r5,r3,32768
   4ac60:	2005883a 	mov	r2,r4
   4ac64:	2807883a 	mov	r3,r5
   4ac68:	dfc02a17 	ldw	ra,168(sp)
   4ac6c:	df002917 	ldw	fp,164(sp)
   4ac70:	ddc02817 	ldw	r23,160(sp)
   4ac74:	dd802717 	ldw	r22,156(sp)
   4ac78:	dd402617 	ldw	r21,152(sp)
   4ac7c:	dd002517 	ldw	r20,148(sp)
   4ac80:	dcc02417 	ldw	r19,144(sp)
   4ac84:	dc802317 	ldw	r18,140(sp)
   4ac88:	dc402217 	ldw	r17,136(sp)
   4ac8c:	dc002117 	ldw	r16,132(sp)
   4ac90:	dec02b04 	addi	sp,sp,172
   4ac94:	f800283a 	ret
   4ac98:	d8801817 	ldw	r2,96(sp)
   4ac9c:	1024c03a 	cmpne	r18,r2,zero
   4aca0:	90000a1e 	bne	r18,zero,4accc <_strtod_r+0x2c4>
   4aca4:	3000091e 	bne	r6,zero,4accc <_strtod_r+0x2c4>
   4aca8:	d8c01617 	ldw	r3,88(sp)
   4acac:	1805003a 	cmpeq	r2,r3,zero
   4acb0:	10000626 	beq	r2,zero,4accc <_strtod_r+0x2c4>
   4acb4:	d8001515 	stw	zero,84(sp)
   4acb8:	dd000415 	stw	r20,16(sp)
   4acbc:	003fdc06 	br	4ac30 <_strtod_r+0x228>
   4acc0:	e1000017 	ldw	r4,0(fp)
   4acc4:	e1400117 	ldw	r5,4(fp)
   4acc8:	003fe506 	br	4ac60 <_strtod_r+0x258>
   4accc:	dd000417 	ldw	r20,16(sp)
   4acd0:	00800ac4 	movi	r2,43
   4acd4:	a4000044 	addi	r16,r20,1
   4acd8:	dc000415 	stw	r16,16(sp)
   4acdc:	a0c00047 	ldb	r3,1(r20)
   4ace0:	8009883a 	mov	r4,r16
   4ace4:	1880cb26 	beq	r3,r2,4b014 <_strtod_r+0x60c>
   4ace8:	00800b44 	movi	r2,45
   4acec:	18838326 	beq	r3,r2,4bafc <_strtod_r+0x10f4>
   4acf0:	1823883a 	mov	r17,r3
   4acf4:	88fff404 	addi	r3,r17,-48
   4acf8:	00800244 	movi	r2,9
   4acfc:	d8001915 	stw	zero,100(sp)
   4ad00:	10c0cb36 	bltu	r2,r3,4b030 <_strtod_r+0x628>
   4ad04:	00800c04 	movi	r2,48
   4ad08:	8880061e 	bne	r17,r2,4ad24 <_strtod_r+0x31c>
   4ad0c:	dc000417 	ldw	r16,16(sp)
   4ad10:	8805883a 	mov	r2,r17
   4ad14:	84000044 	addi	r16,r16,1
   4ad18:	dc000415 	stw	r16,16(sp)
   4ad1c:	84400007 	ldb	r17,0(r16)
   4ad20:	88bffc26 	beq	r17,r2,4ad14 <_strtod_r+0x30c>
   4ad24:	88fff3c4 	addi	r3,r17,-49
   4ad28:	00800204 	movi	r2,8
   4ad2c:	10ffbd36 	bltu	r2,r3,4ac24 <_strtod_r+0x21c>
   4ad30:	dc000417 	ldw	r16,16(sp)
   4ad34:	893ff404 	addi	r4,r17,-48
   4ad38:	00c00bc4 	movi	r3,47
   4ad3c:	dc001315 	stw	r16,76(sp)
   4ad40:	84000044 	addi	r16,r16,1
   4ad44:	dc000415 	stw	r16,16(sp)
   4ad48:	84400007 	ldb	r17,0(r16)
   4ad4c:	1c40100e 	bge	r3,r17,4ad90 <_strtod_r+0x388>
   4ad50:	00800e44 	movi	r2,57
   4ad54:	14400e16 	blt	r2,r17,4ad90 <_strtod_r+0x388>
   4ad58:	182f883a 	mov	r23,r3
   4ad5c:	102d883a 	mov	r22,r2
   4ad60:	00000106 	br	4ad68 <_strtod_r+0x360>
   4ad64:	b4400a16 	blt	r22,r17,4ad90 <_strtod_r+0x388>
   4ad68:	84000044 	addi	r16,r16,1
   4ad6c:	01400284 	movi	r5,10
   4ad70:	d9802015 	stw	r6,128(sp)
   4ad74:	004fd3c0 	call	4fd3c <__mulsi3>
   4ad78:	dc000415 	stw	r16,16(sp)
   4ad7c:	8885883a 	add	r2,r17,r2
   4ad80:	84400007 	ldb	r17,0(r16)
   4ad84:	113ff404 	addi	r4,r2,-48
   4ad88:	d9802017 	ldw	r6,128(sp)
   4ad8c:	bc7ff516 	blt	r23,r17,4ad64 <_strtod_r+0x35c>
   4ad90:	d8801317 	ldw	r2,76(sp)
   4ad94:	8087c83a 	sub	r3,r16,r2
   4ad98:	00800204 	movi	r2,8
   4ad9c:	10c2ff16 	blt	r2,r3,4b99c <_strtod_r+0xf94>
   4ada0:	009387c4 	movi	r2,19999
   4ada4:	1100010e 	bge	r2,r4,4adac <_strtod_r+0x3a4>
   4ada8:	1009883a 	mov	r4,r2
   4adac:	d8c01917 	ldw	r3,100(sp)
   4adb0:	1805003a 	cmpeq	r2,r3,zero
   4adb4:	103f9c1e 	bne	r2,zero,4ac28 <_strtod_r+0x220>
   4adb8:	0109c83a 	sub	r4,zero,r4
   4adbc:	903f9b26 	beq	r18,zero,4ac2c <_strtod_r+0x224>
   4adc0:	d8801717 	ldw	r2,92(sp)
   4adc4:	2089c83a 	sub	r4,r4,r2
   4adc8:	d9000f15 	stw	r4,60(sp)
   4adcc:	9800811e 	bne	r19,zero,4afd4 <_strtod_r+0x5cc>
   4add0:	dd001817 	ldw	r20,96(sp)
   4add4:	dc801817 	ldw	r18,96(sp)
   4add8:	00800404 	movi	r2,16
   4addc:	1480010e 	bge	r2,r18,4ade4 <_strtod_r+0x3dc>
   4ade0:	1025883a 	mov	r18,r2
   4ade4:	d9001217 	ldw	r4,72(sp)
   4ade8:	004fa5c0 	call	4fa5c <__floatunsidf>
   4adec:	100f883a 	mov	r7,r2
   4adf0:	e0800015 	stw	r2,0(fp)
   4adf4:	00800244 	movi	r2,9
   4adf8:	e0c00115 	stw	r3,4(fp)
   4adfc:	1480160e 	bge	r2,r18,4ae58 <_strtod_r+0x450>
   4ae00:	900c90fa 	slli	r6,r18,3
   4ae04:	01000174 	movhi	r4,5
   4ae08:	210e8104 	addi	r4,r4,14852
   4ae0c:	180b883a 	mov	r5,r3
   4ae10:	310d883a 	add	r6,r6,r4
   4ae14:	30ffef17 	ldw	r3,-68(r6)
   4ae18:	30bfee17 	ldw	r2,-72(r6)
   4ae1c:	3809883a 	mov	r4,r7
   4ae20:	180f883a 	mov	r7,r3
   4ae24:	100d883a 	mov	r6,r2
   4ae28:	004eecc0 	call	4eecc <__muldf3>
   4ae2c:	d9001117 	ldw	r4,68(sp)
   4ae30:	1021883a 	mov	r16,r2
   4ae34:	1823883a 	mov	r17,r3
   4ae38:	004fa5c0 	call	4fa5c <__floatunsidf>
   4ae3c:	880b883a 	mov	r5,r17
   4ae40:	180f883a 	mov	r7,r3
   4ae44:	8009883a 	mov	r4,r16
   4ae48:	100d883a 	mov	r6,r2
   4ae4c:	004ee580 	call	4ee58 <__adddf3>
   4ae50:	e0c00115 	stw	r3,4(fp)
   4ae54:	e0800015 	stw	r2,0(fp)
   4ae58:	d8c01817 	ldw	r3,96(sp)
   4ae5c:	010003c4 	movi	r4,15
   4ae60:	20c09e16 	blt	r4,r3,4b0dc <_strtod_r+0x6d4>
   4ae64:	d8800f17 	ldw	r2,60(sp)
   4ae68:	103f7126 	beq	r2,zero,4ac30 <_strtod_r+0x228>
   4ae6c:	0083d90e 	bge	zero,r2,4bdd4 <_strtod_r+0x13cc>
   4ae70:	d8c00f17 	ldw	r3,60(sp)
   4ae74:	00800584 	movi	r2,22
   4ae78:	10c2ca0e 	bge	r2,r3,4b9a4 <_strtod_r+0xf9c>
   4ae7c:	d8801817 	ldw	r2,96(sp)
   4ae80:	d8c00f17 	ldw	r3,60(sp)
   4ae84:	20a3c83a 	sub	r17,r4,r2
   4ae88:	88800584 	addi	r2,r17,22
   4ae8c:	10c09316 	blt	r2,r3,4b0dc <_strtod_r+0x6d4>
   4ae90:	880890fa 	slli	r4,r17,3
   4ae94:	04000174 	movhi	r16,5
   4ae98:	840e8104 	addi	r16,r16,14852
   4ae9c:	e0800017 	ldw	r2,0(fp)
   4aea0:	2409883a 	add	r4,r4,r16
   4aea4:	22000017 	ldw	r8,0(r4)
   4aea8:	22400117 	ldw	r9,4(r4)
   4aeac:	e0c00117 	ldw	r3,4(fp)
   4aeb0:	1009883a 	mov	r4,r2
   4aeb4:	480f883a 	mov	r7,r9
   4aeb8:	180b883a 	mov	r5,r3
   4aebc:	400d883a 	mov	r6,r8
   4aec0:	004eecc0 	call	4eecc <__muldf3>
   4aec4:	d9000f17 	ldw	r4,60(sp)
   4aec8:	180b883a 	mov	r5,r3
   4aecc:	2455c83a 	sub	r10,r4,r17
   4aed0:	501490fa 	slli	r10,r10,3
   4aed4:	1009883a 	mov	r4,r2
   4aed8:	5415883a 	add	r10,r10,r16
   4aedc:	52000017 	ldw	r8,0(r10)
   4aee0:	52400117 	ldw	r9,4(r10)
   4aee4:	0002b906 	br	4b9cc <_strtod_r+0xfc4>
   4aee8:	80c00047 	ldb	r3,1(r16)
   4aeec:	00801604 	movi	r2,88
   4aef0:	18805226 	beq	r3,r2,4b03c <_strtod_r+0x634>
   4aef4:	00801e04 	movi	r2,120
   4aef8:	18805026 	beq	r3,r2,4b03c <_strtod_r+0x634>
   4aefc:	84000044 	addi	r16,r16,1
   4af00:	dc000415 	stw	r16,16(sp)
   4af04:	80c00007 	ldb	r3,0(r16)
   4af08:	00800c04 	movi	r2,48
   4af0c:	18bffb26 	beq	r3,r2,4aefc <_strtod_r+0x4f4>
   4af10:	183f4726 	beq	r3,zero,4ac30 <_strtod_r+0x228>
   4af14:	01000044 	movi	r4,1
   4af18:	d9001615 	stw	r4,88(sp)
   4af1c:	003f0a06 	br	4ab48 <_strtod_r+0x140>
   4af20:	84000044 	addi	r16,r16,1
   4af24:	dc000415 	stw	r16,16(sp)
   4af28:	94400047 	ldb	r17,1(r18)
   4af2c:	9800ba26 	beq	r19,zero,4b218 <_strtod_r+0x810>
   4af30:	dcc01815 	stw	r19,96(sp)
   4af34:	d8001715 	stw	zero,92(sp)
   4af38:	000d883a 	mov	r6,zero
   4af3c:	8dbff404 	addi	r22,r17,-48
   4af40:	00800244 	movi	r2,9
   4af44:	15826e2e 	bgeu	r2,r22,4b900 <_strtod_r+0xef8>
   4af48:	01000044 	movi	r4,1
   4af4c:	d9001b15 	stw	r4,108(sp)
   4af50:	003f2e06 	br	4ac0c <_strtod_r+0x204>
   4af54:	d8c01617 	ldw	r3,88(sp)
   4af58:	1804c03a 	cmpne	r2,r3,zero
   4af5c:	103f341e 	bne	r2,zero,4ac30 <_strtod_r+0x228>
   4af60:	d9001b17 	ldw	r4,108(sp)
   4af64:	2004c03a 	cmpne	r2,r4,zero
   4af68:	103f521e 	bne	r2,zero,4acb4 <_strtod_r+0x2ac>
   4af6c:	00801384 	movi	r2,78
   4af70:	8883b526 	beq	r17,r2,4be48 <_strtod_r+0x1440>
   4af74:	1443b016 	blt	r2,r17,4be38 <_strtod_r+0x1430>
   4af78:	00801244 	movi	r2,73
   4af7c:	88bf4d1e 	bne	r17,r2,4acb4 <_strtod_r+0x2ac>
   4af80:	dc000404 	addi	r16,sp,16
   4af84:	8009883a 	mov	r4,r16
   4af88:	01400174 	movhi	r5,5
   4af8c:	294eca04 	addi	r5,r5,15144
   4af90:	004a9c00 	call	4a9c0 <match>
   4af94:	103f4726 	beq	r2,zero,4acb4 <_strtod_r+0x2ac>
   4af98:	d8800417 	ldw	r2,16(sp)
   4af9c:	8009883a 	mov	r4,r16
   4afa0:	01400174 	movhi	r5,5
   4afa4:	294ecb04 	addi	r5,r5,15148
   4afa8:	143fffc4 	addi	r16,r2,-1
   4afac:	dc000415 	stw	r16,16(sp)
   4afb0:	004a9c00 	call	4a9c0 <match>
   4afb4:	1000031e 	bne	r2,zero,4afc4 <_strtod_r+0x5bc>
   4afb8:	d8800417 	ldw	r2,16(sp)
   4afbc:	14000044 	addi	r16,r2,1
   4afc0:	dc000415 	stw	r16,16(sp)
   4afc4:	019ffc34 	movhi	r6,32752
   4afc8:	e1800115 	stw	r6,4(fp)
   4afcc:	e0000015 	stw	zero,0(fp)
   4afd0:	003f1706 	br	4ac30 <_strtod_r+0x228>
   4afd4:	9829883a 	mov	r20,r19
   4afd8:	003f7e06 	br	4add4 <_strtod_r+0x3cc>
   4afdc:	d8001515 	stw	zero,84(sp)
   4afe0:	84000044 	addi	r16,r16,1
   4afe4:	dc000415 	stw	r16,16(sp)
   4afe8:	80800007 	ldb	r2,0(r16)
   4afec:	103ed21e 	bne	r2,zero,4ab38 <_strtod_r+0x130>
   4aff0:	d8001515 	stw	zero,84(sp)
   4aff4:	dd000415 	stw	r20,16(sp)
   4aff8:	003f0d06 	br	4ac30 <_strtod_r+0x228>
   4affc:	84000044 	addi	r16,r16,1
   4b000:	dc000415 	stw	r16,16(sp)
   4b004:	003e9206 	br	4aa50 <_strtod_r+0x48>
   4b008:	00800044 	movi	r2,1
   4b00c:	d8801515 	stw	r2,84(sp)
   4b010:	003ff306 	br	4afe0 <_strtod_r+0x5d8>
   4b014:	d8001915 	stw	zero,100(sp)
   4b018:	84000044 	addi	r16,r16,1
   4b01c:	dc000415 	stw	r16,16(sp)
   4b020:	24400047 	ldb	r17,1(r4)
   4b024:	00800244 	movi	r2,9
   4b028:	88fff404 	addi	r3,r17,-48
   4b02c:	10ff352e 	bgeu	r2,r3,4ad04 <_strtod_r+0x2fc>
   4b030:	0009883a 	mov	r4,zero
   4b034:	dd000415 	stw	r20,16(sp)
   4b038:	003efb06 	br	4ac28 <_strtod_r+0x220>
   4b03c:	d8c01517 	ldw	r3,84(sp)
   4b040:	04400174 	movhi	r17,5
   4b044:	8c513e04 	addi	r17,r17,17656
   4b048:	d8800504 	addi	r2,sp,20
   4b04c:	a809883a 	mov	r4,r21
   4b050:	d9400404 	addi	r5,sp,16
   4b054:	880d883a 	mov	r6,r17
   4b058:	d9c00604 	addi	r7,sp,24
   4b05c:	d8800015 	stw	r2,0(sp)
   4b060:	d8c00115 	stw	r3,4(sp)
   4b064:	004cf3c0 	call	4cf3c <__gethex>
   4b068:	140001cc 	andi	r16,r2,7
   4b06c:	1025883a 	mov	r18,r2
   4b070:	803eef26 	beq	r16,zero,4ac30 <_strtod_r+0x228>
   4b074:	04c00184 	movi	r19,6
   4b078:	84ff0e26 	beq	r16,r19,4acb4 <_strtod_r+0x2ac>
   4b07c:	d9800517 	ldw	r6,20(sp)
   4b080:	30000626 	beq	r6,zero,4b09c <_strtod_r+0x694>
   4b084:	89400017 	ldw	r5,0(r17)
   4b088:	d9000d04 	addi	r4,sp,52
   4b08c:	00494a00 	call	494a0 <__copybits>
   4b090:	d9400517 	ldw	r5,20(sp)
   4b094:	a809883a 	mov	r4,r21
   4b098:	00490000 	call	49000 <_Bfree>
   4b09c:	d9400617 	ldw	r5,24(sp)
   4b0a0:	9c025436 	bltu	r19,r16,4b9f4 <_strtod_r+0xfec>
   4b0a4:	8405883a 	add	r2,r16,r16
   4b0a8:	1085883a 	add	r2,r2,r2
   4b0ac:	00c00174 	movhi	r3,5
   4b0b0:	18ec3004 	addi	r3,r3,-20288
   4b0b4:	10c5883a 	add	r2,r2,r3
   4b0b8:	11000017 	ldw	r4,0(r2)
   4b0bc:	2000683a 	jmp	r4
   4b0c0:	0004ba34 	movhi	zero,4840
   4b0c4:	0004ba40 	call	4ba4 <__alt_mem_onchip_mem-0x3b45c>
   4b0c8:	0004b9e4 	muli	zero,zero,4839
   4b0cc:	0004ba0c 	andi	zero,zero,4840
   4b0d0:	0004ba1c 	xori	zero,zero,4840
   4b0d4:	0004ba40 	call	4ba4 <__alt_mem_onchip_mem-0x3b45c>
   4b0d8:	0004ba34 	movhi	zero,4840
   4b0dc:	d9001817 	ldw	r4,96(sp)
   4b0e0:	d8c00f17 	ldw	r3,60(sp)
   4b0e4:	2485c83a 	sub	r2,r4,r18
   4b0e8:	18a1883a 	add	r16,r3,r2
   4b0ec:	0402e80e 	bge	zero,r16,4bc90 <_strtod_r+0x1288>
   4b0f0:	814003cc 	andi	r5,r16,15
   4b0f4:	28000f26 	beq	r5,zero,4b134 <_strtod_r+0x72c>
   4b0f8:	280a90fa 	slli	r5,r5,3
   4b0fc:	01000174 	movhi	r4,5
   4b100:	210e8104 	addi	r4,r4,14852
   4b104:	e0800017 	ldw	r2,0(fp)
   4b108:	290b883a 	add	r5,r5,r4
   4b10c:	2a000017 	ldw	r8,0(r5)
   4b110:	e0c00117 	ldw	r3,4(fp)
   4b114:	2a400117 	ldw	r9,4(r5)
   4b118:	1009883a 	mov	r4,r2
   4b11c:	180b883a 	mov	r5,r3
   4b120:	480f883a 	mov	r7,r9
   4b124:	400d883a 	mov	r6,r8
   4b128:	004eecc0 	call	4eecc <__muldf3>
   4b12c:	e0c00115 	stw	r3,4(fp)
   4b130:	e0800015 	stw	r2,0(fp)
   4b134:	00bffc04 	movi	r2,-16
   4b138:	808c703a 	and	r6,r16,r2
   4b13c:	30006726 	beq	r6,zero,4b2dc <_strtod_r+0x8d4>
   4b140:	00804d04 	movi	r2,308
   4b144:	11820f16 	blt	r2,r6,4b984 <_strtod_r+0xf7c>
   4b148:	3021d13a 	srai	r16,r6,4
   4b14c:	00800044 	movi	r2,1
   4b150:	14037f0e 	bge	r2,r16,4bf50 <_strtod_r+0x1548>
   4b154:	05800174 	movhi	r22,5
   4b158:	b58eb304 	addi	r22,r22,15052
   4b15c:	1027883a 	mov	r19,r2
   4b160:	0025883a 	mov	r18,zero
   4b164:	b023883a 	mov	r17,r22
   4b168:	8080004c 	andi	r2,r16,1
   4b16c:	1005003a 	cmpeq	r2,r2,zero
   4b170:	1000091e 	bne	r2,zero,4b198 <_strtod_r+0x790>
   4b174:	e0800017 	ldw	r2,0(fp)
   4b178:	e0c00117 	ldw	r3,4(fp)
   4b17c:	89800017 	ldw	r6,0(r17)
   4b180:	89c00117 	ldw	r7,4(r17)
   4b184:	180b883a 	mov	r5,r3
   4b188:	1009883a 	mov	r4,r2
   4b18c:	004eecc0 	call	4eecc <__muldf3>
   4b190:	e0c00115 	stw	r3,4(fp)
   4b194:	e0800015 	stw	r2,0(fp)
   4b198:	8021d07a 	srai	r16,r16,1
   4b19c:	94800044 	addi	r18,r18,1
   4b1a0:	8c400204 	addi	r17,r17,8
   4b1a4:	9c3ff016 	blt	r19,r16,4b168 <_strtod_r+0x760>
   4b1a8:	900e90fa 	slli	r7,r18,3
   4b1ac:	e2000117 	ldw	r8,4(fp)
   4b1b0:	e1000017 	ldw	r4,0(fp)
   4b1b4:	3d8f883a 	add	r7,r7,r22
   4b1b8:	38800017 	ldw	r2,0(r7)
   4b1bc:	38c00117 	ldw	r3,4(r7)
   4b1c0:	01bf2c34 	movhi	r6,64688
   4b1c4:	418d883a 	add	r6,r8,r6
   4b1c8:	300b883a 	mov	r5,r6
   4b1cc:	180f883a 	mov	r7,r3
   4b1d0:	100d883a 	mov	r6,r2
   4b1d4:	004eecc0 	call	4eecc <__muldf3>
   4b1d8:	1009883a 	mov	r4,r2
   4b1dc:	180b883a 	mov	r5,r3
   4b1e0:	199ffc2c 	andhi	r6,r3,32752
   4b1e4:	009f2834 	movhi	r2,31904
   4b1e8:	e1000015 	stw	r4,0(fp)
   4b1ec:	e1400115 	stw	r5,4(fp)
   4b1f0:	1181e436 	bltu	r2,r6,4b984 <_strtod_r+0xf7c>
   4b1f4:	009f2434 	movhi	r2,31888
   4b1f8:	11833f2e 	bgeu	r2,r6,4bef8 <_strtod_r+0x14f0>
   4b1fc:	d8001c15 	stw	zero,112(sp)
   4b200:	019ffc34 	movhi	r6,32752
   4b204:	31bfffc4 	addi	r6,r6,-1
   4b208:	01ffffc4 	movi	r7,-1
   4b20c:	e1800115 	stw	r6,4(fp)
   4b210:	e1c00015 	stw	r7,0(fp)
   4b214:	00003206 	br	4b2e0 <_strtod_r+0x8d8>
   4b218:	00800c04 	movi	r2,48
   4b21c:	8883221e 	bne	r17,r2,4bea8 <_strtod_r+0x14a0>
   4b220:	8805883a 	mov	r2,r17
   4b224:	000d883a 	mov	r6,zero
   4b228:	84000044 	addi	r16,r16,1
   4b22c:	dc000415 	stw	r16,16(sp)
   4b230:	84400007 	ldb	r17,0(r16)
   4b234:	31800044 	addi	r6,r6,1
   4b238:	88bffb26 	beq	r17,r2,4b228 <_strtod_r+0x820>
   4b23c:	88fff3c4 	addi	r3,r17,-49
   4b240:	00800204 	movi	r2,8
   4b244:	10c1ca36 	bltu	r2,r3,4b970 <_strtod_r+0xf68>
   4b248:	d8c00417 	ldw	r3,16(sp)
   4b24c:	d9801715 	stw	r6,92(sp)
   4b250:	8dbff404 	addi	r22,r17,-48
   4b254:	d8c01415 	stw	r3,80(sp)
   4b258:	1821883a 	mov	r16,r3
   4b25c:	d8001815 	stw	zero,96(sp)
   4b260:	01800044 	movi	r6,1
   4b264:	b0023526 	beq	r22,zero,4bb3c <_strtod_r+0x1134>
   4b268:	d9001717 	ldw	r4,92(sp)
   4b26c:	00800044 	movi	r2,1
   4b270:	2189883a 	add	r4,r4,r6
   4b274:	d9001715 	stw	r4,92(sp)
   4b278:	1183390e 	bge	r2,r6,4bf60 <_strtod_r+0x1558>
   4b27c:	dc401817 	ldw	r17,96(sp)
   4b280:	1025883a 	mov	r18,r2
   4b284:	05c00204 	movi	r23,8
   4b288:	00000806 	br	4b2ac <_strtod_r+0x8a4>
   4b28c:	d9001217 	ldw	r4,72(sp)
   4b290:	01400284 	movi	r5,10
   4b294:	d9802015 	stw	r6,128(sp)
   4b298:	004fd3c0 	call	4fd3c <__mulsi3>
   4b29c:	d9802017 	ldw	r6,128(sp)
   4b2a0:	d8801215 	stw	r2,72(sp)
   4b2a4:	94800044 	addi	r18,r18,1
   4b2a8:	91821726 	beq	r18,r6,4bb08 <_strtod_r+0x1100>
   4b2ac:	8c400044 	addi	r17,r17,1
   4b2b0:	88bfffc4 	addi	r2,r17,-1
   4b2b4:	b8bff50e 	bge	r23,r2,4b28c <_strtod_r+0x884>
   4b2b8:	00800404 	movi	r2,16
   4b2bc:	147ff916 	blt	r2,r17,4b2a4 <_strtod_r+0x89c>
   4b2c0:	d9001117 	ldw	r4,68(sp)
   4b2c4:	01400284 	movi	r5,10
   4b2c8:	d9802015 	stw	r6,128(sp)
   4b2cc:	004fd3c0 	call	4fd3c <__mulsi3>
   4b2d0:	d9802017 	ldw	r6,128(sp)
   4b2d4:	d8801115 	stw	r2,68(sp)
   4b2d8:	003ff206 	br	4b2a4 <_strtod_r+0x89c>
   4b2dc:	d8001c15 	stw	zero,112(sp)
   4b2e0:	d8c01217 	ldw	r3,72(sp)
   4b2e4:	d9401417 	ldw	r5,80(sp)
   4b2e8:	d9c01817 	ldw	r7,96(sp)
   4b2ec:	a809883a 	mov	r4,r21
   4b2f0:	a00d883a 	mov	r6,r20
   4b2f4:	d8c00015 	stw	r3,0(sp)
   4b2f8:	0049f6c0 	call	49f6c <__s2b>
   4b2fc:	11000304 	addi	r4,r2,12
   4b300:	d8801015 	stw	r2,64(sp)
   4b304:	d8800f17 	ldw	r2,60(sp)
   4b308:	d9001f15 	stw	r4,124(sp)
   4b30c:	1004803a 	cmplt	r2,r2,zero
   4b310:	d8801e15 	stw	r2,120(sp)
   4b314:	d8c01017 	ldw	r3,64(sp)
   4b318:	a809883a 	mov	r4,r21
   4b31c:	19400117 	ldw	r5,4(r3)
   4b320:	00495800 	call	49580 <_Balloc>
   4b324:	d9001017 	ldw	r4,64(sp)
   4b328:	d9401f17 	ldw	r5,124(sp)
   4b32c:	102f883a 	mov	r23,r2
   4b330:	21800417 	ldw	r6,16(r4)
   4b334:	11000304 	addi	r4,r2,12
   4b338:	318d883a 	add	r6,r6,r6
   4b33c:	318d883a 	add	r6,r6,r6
   4b340:	31800204 	addi	r6,r6,8
   4b344:	0048de80 	call	48de8 <memcpy>
   4b348:	e2000017 	ldw	r8,0(fp)
   4b34c:	e2400117 	ldw	r9,4(fp)
   4b350:	a809883a 	mov	r4,r21
   4b354:	400b883a 	mov	r5,r8
   4b358:	d9c00204 	addi	r7,sp,8
   4b35c:	d8800304 	addi	r2,sp,12
   4b360:	480d883a 	mov	r6,r9
   4b364:	d8800015 	stw	r2,0(sp)
   4b368:	004963c0 	call	4963c <__d2b>
   4b36c:	a809883a 	mov	r4,r21
   4b370:	01400044 	movi	r5,1
   4b374:	d8800515 	stw	r2,20(sp)
   4b378:	0049ce40 	call	49ce4 <__i2b>
   4b37c:	d8c01e17 	ldw	r3,120(sp)
   4b380:	102d883a 	mov	r22,r2
   4b384:	1801091e 	bne	r3,zero,4b7ac <_strtod_r+0xda4>
   4b388:	dd000f17 	ldw	r20,60(sp)
   4b38c:	000f883a 	mov	r7,zero
   4b390:	0013883a 	mov	r9,zero
   4b394:	a011883a 	mov	r8,r20
   4b398:	d8800217 	ldw	r2,8(sp)
   4b39c:	10010116 	blt	r2,zero,4b7a4 <_strtod_r+0xd9c>
   4b3a0:	388f883a 	add	r7,r7,r2
   4b3a4:	d8c01c17 	ldw	r3,112(sp)
   4b3a8:	d9400317 	ldw	r5,12(sp)
   4b3ac:	10c9c83a 	sub	r4,r2,r3
   4b3b0:	2145883a 	add	r2,r4,r5
   4b3b4:	10bfffc4 	addi	r2,r2,-1
   4b3b8:	00ff0084 	movi	r3,-1022
   4b3bc:	10c09f0e 	bge	r2,r3,4b63c <_strtod_r+0xc34>
   4b3c0:	21810cc4 	addi	r6,r4,1075
   4b3c4:	d9001c17 	ldw	r4,112(sp)
   4b3c8:	4185883a 	add	r2,r8,r6
   4b3cc:	39a1883a 	add	r16,r7,r6
   4b3d0:	20a5883a 	add	r18,r4,r2
   4b3d4:	3807883a 	mov	r3,r7
   4b3d8:	81c0010e 	bge	r16,r7,4b3e0 <_strtod_r+0x9d8>
   4b3dc:	8007883a 	mov	r3,r16
   4b3e0:	9005883a 	mov	r2,r18
   4b3e4:	1c80010e 	bge	r3,r18,4b3ec <_strtod_r+0x9e4>
   4b3e8:	1805883a 	mov	r2,r3
   4b3ec:	0080eb0e 	bge	zero,r2,4b79c <_strtod_r+0xd94>
   4b3f0:	38a7c83a 	sub	r19,r7,r2
   4b3f4:	80a1c83a 	sub	r16,r16,r2
   4b3f8:	90a5c83a 	sub	r18,r18,r2
   4b3fc:	02400e0e 	bge	zero,r9,4b438 <_strtod_r+0xa30>
   4b400:	480d883a 	mov	r6,r9
   4b404:	b00b883a 	mov	r5,r22
   4b408:	a809883a 	mov	r4,r21
   4b40c:	0049e4c0 	call	49e4c <__pow5mult>
   4b410:	d9800517 	ldw	r6,20(sp)
   4b414:	a809883a 	mov	r4,r21
   4b418:	100b883a 	mov	r5,r2
   4b41c:	102d883a 	mov	r22,r2
   4b420:	0049a900 	call	49a90 <__multiply>
   4b424:	d9400517 	ldw	r5,20(sp)
   4b428:	1023883a 	mov	r17,r2
   4b42c:	a809883a 	mov	r4,r21
   4b430:	00490000 	call	49000 <_Bfree>
   4b434:	dc400515 	stw	r17,20(sp)
   4b438:	0400050e 	bge	zero,r16,4b450 <_strtod_r+0xa48>
   4b43c:	d9400517 	ldw	r5,20(sp)
   4b440:	800d883a 	mov	r6,r16
   4b444:	a809883a 	mov	r4,r21
   4b448:	00499440 	call	49944 <__lshift>
   4b44c:	d8800515 	stw	r2,20(sp)
   4b450:	a000741e 	bne	r20,zero,4b624 <_strtod_r+0xc1c>
   4b454:	0480050e 	bge	zero,r18,4b46c <_strtod_r+0xa64>
   4b458:	b80b883a 	mov	r5,r23
   4b45c:	900d883a 	mov	r6,r18
   4b460:	a809883a 	mov	r4,r21
   4b464:	00499440 	call	49944 <__lshift>
   4b468:	102f883a 	mov	r23,r2
   4b46c:	04c0050e 	bge	zero,r19,4b484 <_strtod_r+0xa7c>
   4b470:	b00b883a 	mov	r5,r22
   4b474:	980d883a 	mov	r6,r19
   4b478:	a809883a 	mov	r4,r21
   4b47c:	00499440 	call	49944 <__lshift>
   4b480:	102d883a 	mov	r22,r2
   4b484:	d9400517 	ldw	r5,20(sp)
   4b488:	a809883a 	mov	r4,r21
   4b48c:	b80d883a 	mov	r6,r23
   4b490:	00497b80 	call	497b8 <__mdiff>
   4b494:	1029883a 	mov	r20,r2
   4b498:	10800317 	ldw	r2,12(r2)
   4b49c:	a009883a 	mov	r4,r20
   4b4a0:	a0000315 	stw	zero,12(r20)
   4b4a4:	b00b883a 	mov	r5,r22
   4b4a8:	d8801a15 	stw	r2,104(sp)
   4b4ac:	004915c0 	call	4915c <__mcmp>
   4b4b0:	1001a616 	blt	r2,zero,4bb4c <_strtod_r+0x1144>
   4b4b4:	10016d26 	beq	r2,zero,4ba6c <_strtod_r+0x1064>
   4b4b8:	a009883a 	mov	r4,r20
   4b4bc:	b00b883a 	mov	r5,r22
   4b4c0:	004935c0 	call	4935c <__ratio>
   4b4c4:	0011883a 	mov	r8,zero
   4b4c8:	02500034 	movhi	r9,16384
   4b4cc:	480f883a 	mov	r7,r9
   4b4d0:	1009883a 	mov	r4,r2
   4b4d4:	180b883a 	mov	r5,r3
   4b4d8:	400d883a 	mov	r6,r8
   4b4dc:	1021883a 	mov	r16,r2
   4b4e0:	1823883a 	mov	r17,r3
   4b4e4:	004f7900 	call	4f790 <__ledf2>
   4b4e8:	00805716 	blt	zero,r2,4b648 <_strtod_r+0xc40>
   4b4ec:	d8801a17 	ldw	r2,104(sp)
   4b4f0:	1025003a 	cmpeq	r18,r2,zero
   4b4f4:	90008c1e 	bne	r18,zero,4b728 <_strtod_r+0xd20>
   4b4f8:	008ffc34 	movhi	r2,16368
   4b4fc:	0021883a 	mov	r16,zero
   4b500:	1023883a 	mov	r17,r2
   4b504:	d8000715 	stw	zero,28(sp)
   4b508:	d8800815 	stw	r2,32(sp)
   4b50c:	e1c00117 	ldw	r7,4(fp)
   4b510:	009ff834 	movhi	r2,32736
   4b514:	3cdffc2c 	andhi	r19,r7,32752
   4b518:	98805f26 	beq	r19,r2,4b698 <_strtod_r+0xc90>
   4b51c:	d8c01c17 	ldw	r3,112(sp)
   4b520:	18001b26 	beq	r3,zero,4b590 <_strtod_r+0xb88>
   4b524:	0081a834 	movhi	r2,1696
   4b528:	14c01936 	bltu	r2,r19,4b590 <_strtod_r+0xb88>
   4b52c:	00bff034 	movhi	r2,65472
   4b530:	00d07834 	movhi	r3,16864
   4b534:	18ffffc4 	addi	r3,r3,-1
   4b538:	180f883a 	mov	r7,r3
   4b53c:	8009883a 	mov	r4,r16
   4b540:	880b883a 	mov	r5,r17
   4b544:	100d883a 	mov	r6,r2
   4b548:	004f7900 	call	4f790 <__ledf2>
   4b54c:	00800b16 	blt	zero,r2,4b57c <_strtod_r+0xb74>
   4b550:	880b883a 	mov	r5,r17
   4b554:	8009883a 	mov	r4,r16
   4b558:	004daf00 	call	4daf0 <__fixunsdfsi>
   4b55c:	1000e31e 	bne	r2,zero,4b8ec <_strtod_r+0xee4>
   4b560:	0021883a 	mov	r16,zero
   4b564:	044ffc34 	movhi	r17,16368
   4b568:	9000dd1e 	bne	r18,zero,4b8e0 <_strtod_r+0xed8>
   4b56c:	8005883a 	mov	r2,r16
   4b570:	8807883a 	mov	r3,r17
   4b574:	d8c00815 	stw	r3,32(sp)
   4b578:	d8800715 	stw	r2,28(sp)
   4b57c:	d8800817 	ldw	r2,32(sp)
   4b580:	00c1ac34 	movhi	r3,1712
   4b584:	14c5c83a 	sub	r2,r2,r19
   4b588:	10c5883a 	add	r2,r2,r3
   4b58c:	d8800815 	stw	r2,32(sp)
   4b590:	e0800017 	ldw	r2,0(fp)
   4b594:	e0c00117 	ldw	r3,4(fp)
   4b598:	1009883a 	mov	r4,r2
   4b59c:	180b883a 	mov	r5,r3
   4b5a0:	00491bc0 	call	491bc <__ulp>
   4b5a4:	d9800717 	ldw	r6,28(sp)
   4b5a8:	d9c00817 	ldw	r7,32(sp)
   4b5ac:	180b883a 	mov	r5,r3
   4b5b0:	1009883a 	mov	r4,r2
   4b5b4:	004eecc0 	call	4eecc <__muldf3>
   4b5b8:	e2000017 	ldw	r8,0(fp)
   4b5bc:	e2400117 	ldw	r9,4(fp)
   4b5c0:	180b883a 	mov	r5,r3
   4b5c4:	1009883a 	mov	r4,r2
   4b5c8:	480f883a 	mov	r7,r9
   4b5cc:	400d883a 	mov	r6,r8
   4b5d0:	004ee580 	call	4ee58 <__adddf3>
   4b5d4:	e0c00115 	stw	r3,4(fp)
   4b5d8:	e0800015 	stw	r2,0(fp)
   4b5dc:	d9001c17 	ldw	r4,112(sp)
   4b5e0:	e4800117 	ldw	r18,4(fp)
   4b5e4:	2000021e 	bne	r4,zero,4b5f0 <_strtod_r+0xbe8>
   4b5e8:	909ffc2c 	andhi	r2,r18,32752
   4b5ec:	98807f26 	beq	r19,r2,4b7ec <_strtod_r+0xde4>
   4b5f0:	d9400517 	ldw	r5,20(sp)
   4b5f4:	a809883a 	mov	r4,r21
   4b5f8:	00490000 	call	49000 <_Bfree>
   4b5fc:	a809883a 	mov	r4,r21
   4b600:	b80b883a 	mov	r5,r23
   4b604:	00490000 	call	49000 <_Bfree>
   4b608:	a809883a 	mov	r4,r21
   4b60c:	b00b883a 	mov	r5,r22
   4b610:	00490000 	call	49000 <_Bfree>
   4b614:	a809883a 	mov	r4,r21
   4b618:	a00b883a 	mov	r5,r20
   4b61c:	00490000 	call	49000 <_Bfree>
   4b620:	003f3c06 	br	4b314 <_strtod_r+0x90c>
   4b624:	b80b883a 	mov	r5,r23
   4b628:	a00d883a 	mov	r6,r20
   4b62c:	a809883a 	mov	r4,r21
   4b630:	0049e4c0 	call	49e4c <__pow5mult>
   4b634:	102f883a 	mov	r23,r2
   4b638:	003f8606 	br	4b454 <_strtod_r+0xa4c>
   4b63c:	00800d84 	movi	r2,54
   4b640:	114dc83a 	sub	r6,r2,r5
   4b644:	003f5f06 	br	4b3c4 <_strtod_r+0x9bc>
   4b648:	0005883a 	mov	r2,zero
   4b64c:	00cff834 	movhi	r3,16352
   4b650:	8009883a 	mov	r4,r16
   4b654:	880b883a 	mov	r5,r17
   4b658:	180f883a 	mov	r7,r3
   4b65c:	100d883a 	mov	r6,r2
   4b660:	004eecc0 	call	4eecc <__muldf3>
   4b664:	1009883a 	mov	r4,r2
   4b668:	d8801a17 	ldw	r2,104(sp)
   4b66c:	2021883a 	mov	r16,r4
   4b670:	1823883a 	mov	r17,r3
   4b674:	1025003a 	cmpeq	r18,r2,zero
   4b678:	9000451e 	bne	r18,zero,4b790 <_strtod_r+0xd88>
   4b67c:	2005883a 	mov	r2,r4
   4b680:	d8800715 	stw	r2,28(sp)
   4b684:	d8c00815 	stw	r3,32(sp)
   4b688:	e1c00117 	ldw	r7,4(fp)
   4b68c:	009ff834 	movhi	r2,32736
   4b690:	3cdffc2c 	andhi	r19,r7,32752
   4b694:	98bfa11e 	bne	r19,r2,4b51c <_strtod_r+0xb14>
   4b698:	e1000017 	ldw	r4,0(fp)
   4b69c:	01bf2c34 	movhi	r6,64688
   4b6a0:	398d883a 	add	r6,r7,r6
   4b6a4:	d9000b15 	stw	r4,44(sp)
   4b6a8:	d9c00c15 	stw	r7,48(sp)
   4b6ac:	300b883a 	mov	r5,r6
   4b6b0:	e1800115 	stw	r6,4(fp)
   4b6b4:	00491bc0 	call	491bc <__ulp>
   4b6b8:	d9800717 	ldw	r6,28(sp)
   4b6bc:	d9c00817 	ldw	r7,32(sp)
   4b6c0:	180b883a 	mov	r5,r3
   4b6c4:	1009883a 	mov	r4,r2
   4b6c8:	004eecc0 	call	4eecc <__muldf3>
   4b6cc:	e2000017 	ldw	r8,0(fp)
   4b6d0:	e2400117 	ldw	r9,4(fp)
   4b6d4:	180b883a 	mov	r5,r3
   4b6d8:	1009883a 	mov	r4,r2
   4b6dc:	480f883a 	mov	r7,r9
   4b6e0:	400d883a 	mov	r6,r8
   4b6e4:	004ee580 	call	4ee58 <__adddf3>
   4b6e8:	1009883a 	mov	r4,r2
   4b6ec:	180b883a 	mov	r5,r3
   4b6f0:	009f2834 	movhi	r2,31904
   4b6f4:	10bfffc4 	addi	r2,r2,-1
   4b6f8:	18dffc2c 	andhi	r3,r3,32752
   4b6fc:	e1000015 	stw	r4,0(fp)
   4b700:	e1400115 	stw	r5,4(fp)
   4b704:	10c0722e 	bgeu	r2,r3,4b8d0 <_strtod_r+0xec8>
   4b708:	d8800c17 	ldw	r2,48(sp)
   4b70c:	011ffc34 	movhi	r4,32752
   4b710:	213fffc4 	addi	r4,r4,-1
   4b714:	11007d26 	beq	r2,r4,4b90c <_strtod_r+0xf04>
   4b718:	01ffffc4 	movi	r7,-1
   4b71c:	e1000115 	stw	r4,4(fp)
   4b720:	e1c00015 	stw	r7,0(fp)
   4b724:	003fb206 	br	4b5f0 <_strtod_r+0xbe8>
   4b728:	e0c00017 	ldw	r3,0(fp)
   4b72c:	1800251e 	bne	r3,zero,4b7c4 <_strtod_r+0xdbc>
   4b730:	e0800117 	ldw	r2,4(fp)
   4b734:	00c00434 	movhi	r3,16
   4b738:	18ffffc4 	addi	r3,r3,-1
   4b73c:	10c4703a 	and	r2,r2,r3
   4b740:	1000241e 	bne	r2,zero,4b7d4 <_strtod_r+0xdcc>
   4b744:	0005883a 	mov	r2,zero
   4b748:	00cffc34 	movhi	r3,16368
   4b74c:	180f883a 	mov	r7,r3
   4b750:	8009883a 	mov	r4,r16
   4b754:	880b883a 	mov	r5,r17
   4b758:	100d883a 	mov	r6,r2
   4b75c:	004f7080 	call	4f708 <__ltdf2>
   4b760:	10014616 	blt	r2,zero,4bc7c <_strtod_r+0x1274>
   4b764:	0005883a 	mov	r2,zero
   4b768:	00cff834 	movhi	r3,16352
   4b76c:	880b883a 	mov	r5,r17
   4b770:	8009883a 	mov	r4,r16
   4b774:	180f883a 	mov	r7,r3
   4b778:	100d883a 	mov	r6,r2
   4b77c:	004eecc0 	call	4eecc <__muldf3>
   4b780:	1823883a 	mov	r17,r3
   4b784:	1021883a 	mov	r16,r2
   4b788:	18e0003c 	xorhi	r3,r3,32768
   4b78c:	003fbc06 	br	4b680 <_strtod_r+0xc78>
   4b790:	2005883a 	mov	r2,r4
   4b794:	18e0003c 	xorhi	r3,r3,32768
   4b798:	003fb906 	br	4b680 <_strtod_r+0xc78>
   4b79c:	3827883a 	mov	r19,r7
   4b7a0:	003f1606 	br	4b3fc <_strtod_r+0x9f4>
   4b7a4:	4091c83a 	sub	r8,r8,r2
   4b7a8:	003efe06 	br	4b3a4 <_strtod_r+0x99c>
   4b7ac:	d9000f17 	ldw	r4,60(sp)
   4b7b0:	0011883a 	mov	r8,zero
   4b7b4:	0029883a 	mov	r20,zero
   4b7b8:	0113c83a 	sub	r9,zero,r4
   4b7bc:	480f883a 	mov	r7,r9
   4b7c0:	003ef506 	br	4b398 <_strtod_r+0x990>
   4b7c4:	00800044 	movi	r2,1
   4b7c8:	1880021e 	bne	r3,r2,4b7d4 <_strtod_r+0xdcc>
   4b7cc:	e0800117 	ldw	r2,4(fp)
   4b7d0:	1000c526 	beq	r2,zero,4bae8 <_strtod_r+0x10e0>
   4b7d4:	00affc34 	movhi	r2,49136
   4b7d8:	0021883a 	mov	r16,zero
   4b7dc:	044ffc34 	movhi	r17,16368
   4b7e0:	d8800815 	stw	r2,32(sp)
   4b7e4:	d8000715 	stw	zero,28(sp)
   4b7e8:	003f4806 	br	4b50c <_strtod_r+0xb04>
   4b7ec:	880b883a 	mov	r5,r17
   4b7f0:	8009883a 	mov	r4,r16
   4b7f4:	004f9100 	call	4f910 <__fixdfsi>
   4b7f8:	1009883a 	mov	r4,r2
   4b7fc:	004f8180 	call	4f818 <__floatsidf>
   4b800:	880b883a 	mov	r5,r17
   4b804:	8009883a 	mov	r4,r16
   4b808:	100d883a 	mov	r6,r2
   4b80c:	180f883a 	mov	r7,r3
   4b810:	004edd80 	call	4edd8 <__subdf3>
   4b814:	100b883a 	mov	r5,r2
   4b818:	1021883a 	mov	r16,r2
   4b81c:	d8801a17 	ldw	r2,104(sp)
   4b820:	180d883a 	mov	r6,r3
   4b824:	1823883a 	mov	r17,r3
   4b828:	1000061e 	bne	r2,zero,4b844 <_strtod_r+0xe3c>
   4b82c:	e0800017 	ldw	r2,0(fp)
   4b830:	1000041e 	bne	r2,zero,4b844 <_strtod_r+0xe3c>
   4b834:	00c00434 	movhi	r3,16
   4b838:	18ffffc4 	addi	r3,r3,-1
   4b83c:	90c4703a 	and	r2,r18,r3
   4b840:	10004026 	beq	r2,zero,4b944 <_strtod_r+0xf3c>
   4b844:	00a52834 	movhi	r2,38048
   4b848:	108d6544 	addi	r2,r2,13717
   4b84c:	00cff834 	movhi	r3,16352
   4b850:	18ffffc4 	addi	r3,r3,-1
   4b854:	180f883a 	mov	r7,r3
   4b858:	8009883a 	mov	r4,r16
   4b85c:	880b883a 	mov	r5,r17
   4b860:	100d883a 	mov	r6,r2
   4b864:	004f7080 	call	4f708 <__ltdf2>
   4b868:	10000916 	blt	r2,zero,4b890 <_strtod_r+0xe88>
   4b86c:	008d6c34 	movhi	r2,13744
   4b870:	10b94d44 	addi	r2,r2,-6859
   4b874:	00cff834 	movhi	r3,16352
   4b878:	880b883a 	mov	r5,r17
   4b87c:	180f883a 	mov	r7,r3
   4b880:	8009883a 	mov	r4,r16
   4b884:	100d883a 	mov	r6,r2
   4b888:	004f5f80 	call	4f5f8 <__gtdf2>
   4b88c:	00bf580e 	bge	zero,r2,4b5f0 <_strtod_r+0xbe8>
   4b890:	d9400517 	ldw	r5,20(sp)
   4b894:	a809883a 	mov	r4,r21
   4b898:	00490000 	call	49000 <_Bfree>
   4b89c:	a809883a 	mov	r4,r21
   4b8a0:	b80b883a 	mov	r5,r23
   4b8a4:	00490000 	call	49000 <_Bfree>
   4b8a8:	a809883a 	mov	r4,r21
   4b8ac:	b00b883a 	mov	r5,r22
   4b8b0:	00490000 	call	49000 <_Bfree>
   4b8b4:	d9401017 	ldw	r5,64(sp)
   4b8b8:	a809883a 	mov	r4,r21
   4b8bc:	00490000 	call	49000 <_Bfree>
   4b8c0:	a809883a 	mov	r4,r21
   4b8c4:	a00b883a 	mov	r5,r20
   4b8c8:	00490000 	call	49000 <_Bfree>
   4b8cc:	003cd806 	br	4ac30 <_strtod_r+0x228>
   4b8d0:	0080d434 	movhi	r2,848
   4b8d4:	288d883a 	add	r6,r5,r2
   4b8d8:	e1800115 	stw	r6,4(fp)
   4b8dc:	003f3f06 	br	4b5dc <_strtod_r+0xbd4>
   4b8e0:	8005883a 	mov	r2,r16
   4b8e4:	88e0003c 	xorhi	r3,r17,32768
   4b8e8:	003f2206 	br	4b574 <_strtod_r+0xb6c>
   4b8ec:	1009883a 	mov	r4,r2
   4b8f0:	004fa5c0 	call	4fa5c <__floatunsidf>
   4b8f4:	1021883a 	mov	r16,r2
   4b8f8:	1823883a 	mov	r17,r3
   4b8fc:	003f1a06 	br	4b568 <_strtod_r+0xb60>
   4b900:	dc000417 	ldw	r16,16(sp)
   4b904:	31800044 	addi	r6,r6,1
   4b908:	003e5606 	br	4b264 <_strtod_r+0x85c>
   4b90c:	d8c00b17 	ldw	r3,44(sp)
   4b910:	00bfffc4 	movi	r2,-1
   4b914:	18bf801e 	bne	r3,r2,4b718 <_strtod_r+0xd10>
   4b918:	00c00884 	movi	r3,34
   4b91c:	a8c00015 	stw	r3,0(r21)
   4b920:	009ffc34 	movhi	r2,32752
   4b924:	e0800115 	stw	r2,4(fp)
   4b928:	e0000015 	stw	zero,0(fp)
   4b92c:	003fd806 	br	4b890 <_strtod_r+0xe88>
   4b930:	8025883a 	mov	r18,r16
   4b934:	0027883a 	mov	r19,zero
   4b938:	d8001215 	stw	zero,72(sp)
   4b93c:	d8001115 	stw	zero,68(sp)
   4b940:	003cac06 	br	4abf4 <_strtod_r+0x1ec>
   4b944:	00a52834 	movhi	r2,38048
   4b948:	108d6544 	addi	r2,r2,13717
   4b94c:	00cff434 	movhi	r3,16336
   4b950:	18ffffc4 	addi	r3,r3,-1
   4b954:	2809883a 	mov	r4,r5
   4b958:	180f883a 	mov	r7,r3
   4b95c:	300b883a 	mov	r5,r6
   4b960:	100d883a 	mov	r6,r2
   4b964:	004f7080 	call	4f708 <__ltdf2>
   4b968:	103f210e 	bge	r2,zero,4b5f0 <_strtod_r+0xbe8>
   4b96c:	003fc806 	br	4b890 <_strtod_r+0xe88>
   4b970:	00800044 	movi	r2,1
   4b974:	d8001815 	stw	zero,96(sp)
   4b978:	d8801b15 	stw	r2,108(sp)
   4b97c:	d8001715 	stw	zero,92(sp)
   4b980:	003ca206 	br	4ac0c <_strtod_r+0x204>
   4b984:	00800884 	movi	r2,34
   4b988:	a8800015 	stw	r2,0(r21)
   4b98c:	019ffc34 	movhi	r6,32752
   4b990:	e1800115 	stw	r6,4(fp)
   4b994:	e0000015 	stw	zero,0(fp)
   4b998:	003ca506 	br	4ac30 <_strtod_r+0x228>
   4b99c:	011387c4 	movi	r4,19999
   4b9a0:	003d0206 	br	4adac <_strtod_r+0x3a4>
   4b9a4:	180a90fa 	slli	r5,r3,3
   4b9a8:	e0800017 	ldw	r2,0(fp)
   4b9ac:	e0c00117 	ldw	r3,4(fp)
   4b9b0:	01000174 	movhi	r4,5
   4b9b4:	210e8104 	addi	r4,r4,14852
   4b9b8:	290b883a 	add	r5,r5,r4
   4b9bc:	2a000017 	ldw	r8,0(r5)
   4b9c0:	2a400117 	ldw	r9,4(r5)
   4b9c4:	1009883a 	mov	r4,r2
   4b9c8:	180b883a 	mov	r5,r3
   4b9cc:	480f883a 	mov	r7,r9
   4b9d0:	400d883a 	mov	r6,r8
   4b9d4:	004eecc0 	call	4eecc <__muldf3>
   4b9d8:	e0c00115 	stw	r3,4(fp)
   4b9dc:	e0800015 	stw	r2,0(fp)
   4b9e0:	003c9306 	br	4ac30 <_strtod_r+0x228>
   4b9e4:	d8800d17 	ldw	r2,52(sp)
   4b9e8:	e0800015 	stw	r2,0(fp)
   4b9ec:	d8c00e17 	ldw	r3,56(sp)
   4b9f0:	e0c00115 	stw	r3,4(fp)
   4b9f4:	9080020c 	andi	r2,r18,8
   4b9f8:	103c8d26 	beq	r2,zero,4ac30 <_strtod_r+0x228>
   4b9fc:	e0800117 	ldw	r2,4(fp)
   4ba00:	10a00034 	orhi	r2,r2,32768
   4ba04:	e0800115 	stw	r2,4(fp)
   4ba08:	003c8906 	br	4ac30 <_strtod_r+0x228>
   4ba0c:	009ffc34 	movhi	r2,32752
   4ba10:	e0800115 	stw	r2,4(fp)
   4ba14:	e0000015 	stw	zero,0(fp)
   4ba18:	003ff606 	br	4b9f4 <_strtod_r+0xfec>
   4ba1c:	00a00034 	movhi	r2,32768
   4ba20:	10bfffc4 	addi	r2,r2,-1
   4ba24:	00ffffc4 	movi	r3,-1
   4ba28:	e0800115 	stw	r2,4(fp)
   4ba2c:	e0c00015 	stw	r3,0(fp)
   4ba30:	003ff006 	br	4b9f4 <_strtod_r+0xfec>
   4ba34:	e0000115 	stw	zero,4(fp)
   4ba38:	e0000015 	stw	zero,0(fp)
   4ba3c:	003fed06 	br	4b9f4 <_strtod_r+0xfec>
   4ba40:	d8800e17 	ldw	r2,56(sp)
   4ba44:	29010cc4 	addi	r4,r5,1075
   4ba48:	00fffc34 	movhi	r3,65520
   4ba4c:	18ffffc4 	addi	r3,r3,-1
   4ba50:	2008953a 	slli	r4,r4,20
   4ba54:	10c4703a 	and	r2,r2,r3
   4ba58:	d8c00d17 	ldw	r3,52(sp)
   4ba5c:	1104b03a 	or	r2,r2,r4
   4ba60:	e0800115 	stw	r2,4(fp)
   4ba64:	e0c00015 	stw	r3,0(fp)
   4ba68:	003fe206 	br	4b9f4 <_strtod_r+0xfec>
   4ba6c:	d8c01a17 	ldw	r3,104(sp)
   4ba70:	1825003a 	cmpeq	r18,r3,zero
   4ba74:	9000cf1e 	bne	r18,zero,4bdb4 <_strtod_r+0x13ac>
   4ba78:	e1400117 	ldw	r5,4(fp)
   4ba7c:	01000434 	movhi	r4,16
   4ba80:	213fffc4 	addi	r4,r4,-1
   4ba84:	2904703a 	and	r2,r5,r4
   4ba88:	11006826 	beq	r2,r4,4bc2c <_strtod_r+0x1224>
   4ba8c:	e1c00017 	ldw	r7,0(fp)
   4ba90:	3880004c 	andi	r2,r7,1
   4ba94:	1005003a 	cmpeq	r2,r2,zero
   4ba98:	1000601e 	bne	r2,zero,4bc1c <_strtod_r+0x1214>
   4ba9c:	90010426 	beq	r18,zero,4beb0 <_strtod_r+0x14a8>
   4baa0:	e4400117 	ldw	r17,4(fp)
   4baa4:	3809883a 	mov	r4,r7
   4baa8:	3821883a 	mov	r16,r7
   4baac:	880b883a 	mov	r5,r17
   4bab0:	00491bc0 	call	491bc <__ulp>
   4bab4:	180f883a 	mov	r7,r3
   4bab8:	880b883a 	mov	r5,r17
   4babc:	8009883a 	mov	r4,r16
   4bac0:	100d883a 	mov	r6,r2
   4bac4:	004edd80 	call	4edd8 <__subdf3>
   4bac8:	1009883a 	mov	r4,r2
   4bacc:	000d883a 	mov	r6,zero
   4bad0:	000f883a 	mov	r7,zero
   4bad4:	180b883a 	mov	r5,r3
   4bad8:	e0800015 	stw	r2,0(fp)
   4badc:	e0c00115 	stw	r3,4(fp)
   4bae0:	004f5700 	call	4f570 <__nedf2>
   4bae4:	10004d1e 	bne	r2,zero,4bc1c <_strtod_r+0x1214>
   4bae8:	00800884 	movi	r2,34
   4baec:	a8800015 	stw	r2,0(r21)
   4baf0:	e0000015 	stw	zero,0(fp)
   4baf4:	e0000115 	stw	zero,4(fp)
   4baf8:	003f6506 	br	4b890 <_strtod_r+0xe88>
   4bafc:	00800044 	movi	r2,1
   4bb00:	d8801915 	stw	r2,100(sp)
   4bb04:	003d4406 	br	4b018 <_strtod_r+0x610>
   4bb08:	d8c01817 	ldw	r3,96(sp)
   4bb0c:	1985883a 	add	r2,r3,r6
   4bb10:	11ffffc4 	addi	r7,r2,-1
   4bb14:	39000044 	addi	r4,r7,1
   4bb18:	00800204 	movi	r2,8
   4bb1c:	d9001815 	stw	r4,96(sp)
   4bb20:	11c0d716 	blt	r2,r7,4be80 <_strtod_r+0x1478>
   4bb24:	d9001217 	ldw	r4,72(sp)
   4bb28:	01400284 	movi	r5,10
   4bb2c:	004fd3c0 	call	4fd3c <__mulsi3>
   4bb30:	1585883a 	add	r2,r2,r22
   4bb34:	d8801215 	stw	r2,72(sp)
   4bb38:	000d883a 	mov	r6,zero
   4bb3c:	84000044 	addi	r16,r16,1
   4bb40:	dc000415 	stw	r16,16(sp)
   4bb44:	84400007 	ldb	r17,0(r16)
   4bb48:	003cfc06 	br	4af3c <_strtod_r+0x534>
   4bb4c:	d8c01a17 	ldw	r3,104(sp)
   4bb50:	1800321e 	bne	r3,zero,4bc1c <_strtod_r+0x1214>
   4bb54:	e0800017 	ldw	r2,0(fp)
   4bb58:	1000b31e 	bne	r2,zero,4be28 <_strtod_r+0x1420>
   4bb5c:	e0c00117 	ldw	r3,4(fp)
   4bb60:	01000434 	movhi	r4,16
   4bb64:	213fffc4 	addi	r4,r4,-1
   4bb68:	1904703a 	and	r2,r3,r4
   4bb6c:	1000e71e 	bne	r2,zero,4bf0c <_strtod_r+0x1504>
   4bb70:	18dffc2c 	andhi	r3,r3,32752
   4bb74:	0081ac34 	movhi	r2,1712
   4bb78:	10c0282e 	bgeu	r2,r3,4bc1c <_strtod_r+0x1214>
   4bb7c:	a0800517 	ldw	r2,20(r20)
   4bb80:	1000031e 	bne	r2,zero,4bb90 <_strtod_r+0x1188>
   4bb84:	a0c00417 	ldw	r3,16(r20)
   4bb88:	00800044 	movi	r2,1
   4bb8c:	10c0a60e 	bge	r2,r3,4be28 <_strtod_r+0x1420>
   4bb90:	a00b883a 	mov	r5,r20
   4bb94:	a809883a 	mov	r4,r21
   4bb98:	01800044 	movi	r6,1
   4bb9c:	00499440 	call	49944 <__lshift>
   4bba0:	1009883a 	mov	r4,r2
   4bba4:	b00b883a 	mov	r5,r22
   4bba8:	1029883a 	mov	r20,r2
   4bbac:	004915c0 	call	4915c <__mcmp>
   4bbb0:	00809d0e 	bge	zero,r2,4be28 <_strtod_r+0x1420>
   4bbb4:	e1800117 	ldw	r6,4(fp)
   4bbb8:	d9001c17 	ldw	r4,112(sp)
   4bbbc:	2013003a 	cmpeq	r9,r4,zero
   4bbc0:	4800d61e 	bne	r9,zero,4bf1c <_strtod_r+0x1514>
   4bbc4:	30dffc2c 	andhi	r3,r6,32752
   4bbc8:	0081ac34 	movhi	r2,1712
   4bbcc:	10c0d336 	bltu	r2,r3,4bf1c <_strtod_r+0x1514>
   4bbd0:	0080dc34 	movhi	r2,880
   4bbd4:	10ffc42e 	bgeu	r2,r3,4bae8 <_strtod_r+0x10e0>
   4bbd8:	e0800017 	ldw	r2,0(fp)
   4bbdc:	e0c00117 	ldw	r3,4(fp)
   4bbe0:	020e5434 	movhi	r8,14672
   4bbe4:	000d883a 	mov	r6,zero
   4bbe8:	400f883a 	mov	r7,r8
   4bbec:	180b883a 	mov	r5,r3
   4bbf0:	1009883a 	mov	r4,r2
   4bbf4:	da000c15 	stw	r8,48(sp)
   4bbf8:	d8000b15 	stw	zero,44(sp)
   4bbfc:	004eecc0 	call	4eecc <__muldf3>
   4bc00:	e0800015 	stw	r2,0(fp)
   4bc04:	e0c00115 	stw	r3,4(fp)
   4bc08:	183f211e 	bne	r3,zero,4b890 <_strtod_r+0xe88>
   4bc0c:	103f201e 	bne	r2,zero,4b890 <_strtod_r+0xe88>
   4bc10:	00800884 	movi	r2,34
   4bc14:	a8800015 	stw	r2,0(r21)
   4bc18:	003f1d06 	br	4b890 <_strtod_r+0xe88>
   4bc1c:	d9001c17 	ldw	r4,112(sp)
   4bc20:	2013003a 	cmpeq	r9,r4,zero
   4bc24:	483f1a1e 	bne	r9,zero,4b890 <_strtod_r+0xe88>
   4bc28:	003feb06 	br	4bbd8 <_strtod_r+0x11d0>
   4bc2c:	d8801c17 	ldw	r2,112(sp)
   4bc30:	e1c00017 	ldw	r7,0(fp)
   4bc34:	1013003a 	cmpeq	r9,r2,zero
   4bc38:	4800c31e 	bne	r9,zero,4bf48 <_strtod_r+0x1540>
   4bc3c:	28dffc2c 	andhi	r3,r5,32752
   4bc40:	0081a834 	movhi	r2,1696
   4bc44:	10c0c036 	bltu	r2,r3,4bf48 <_strtod_r+0x1540>
   4bc48:	1804d53a 	srli	r2,r3,20
   4bc4c:	00c01ac4 	movi	r3,107
   4bc50:	013fffc4 	movi	r4,-1
   4bc54:	1887c83a 	sub	r3,r3,r2
   4bc58:	20c4983a 	sll	r2,r4,r3
   4bc5c:	11ff8c1e 	bne	r2,r7,4ba90 <_strtod_r+0x1088>
   4bc60:	28dffc2c 	andhi	r3,r5,32752
   4bc64:	00800434 	movhi	r2,16
   4bc68:	188d883a 	add	r6,r3,r2
   4bc6c:	e1800115 	stw	r6,4(fp)
   4bc70:	e0000015 	stw	zero,0(fp)
   4bc74:	483f061e 	bne	r9,zero,4b890 <_strtod_r+0xe88>
   4bc78:	003fd706 	br	4bbd8 <_strtod_r+0x11d0>
   4bc7c:	0021883a 	mov	r16,zero
   4bc80:	0005883a 	mov	r2,zero
   4bc84:	044ff834 	movhi	r17,16352
   4bc88:	00eff834 	movhi	r3,49120
   4bc8c:	003e7c06 	br	4b680 <_strtod_r+0xc78>
   4bc90:	803d9226 	beq	r16,zero,4b2dc <_strtod_r+0x8d4>
   4bc94:	0421c83a 	sub	r16,zero,r16
   4bc98:	814003cc 	andi	r5,r16,15
   4bc9c:	28000f26 	beq	r5,zero,4bcdc <_strtod_r+0x12d4>
   4bca0:	280a90fa 	slli	r5,r5,3
   4bca4:	01000174 	movhi	r4,5
   4bca8:	210e8104 	addi	r4,r4,14852
   4bcac:	e0800017 	ldw	r2,0(fp)
   4bcb0:	290b883a 	add	r5,r5,r4
   4bcb4:	2a000017 	ldw	r8,0(r5)
   4bcb8:	e0c00117 	ldw	r3,4(fp)
   4bcbc:	2a400117 	ldw	r9,4(r5)
   4bcc0:	1009883a 	mov	r4,r2
   4bcc4:	180b883a 	mov	r5,r3
   4bcc8:	480f883a 	mov	r7,r9
   4bccc:	400d883a 	mov	r6,r8
   4bcd0:	004f2900 	call	4f290 <__divdf3>
   4bcd4:	e0c00115 	stw	r3,4(fp)
   4bcd8:	e0800015 	stw	r2,0(fp)
   4bcdc:	8021d13a 	srai	r16,r16,4
   4bce0:	803d7e26 	beq	r16,zero,4b2dc <_strtod_r+0x8d4>
   4bce4:	008007c4 	movi	r2,31
   4bce8:	14002d16 	blt	r2,r16,4bda0 <_strtod_r+0x1398>
   4bcec:	8080040c 	andi	r2,r16,16
   4bcf0:	10009d26 	beq	r2,zero,4bf68 <_strtod_r+0x1560>
   4bcf4:	01001a84 	movi	r4,106
   4bcf8:	d9001c15 	stw	r4,112(sp)
   4bcfc:	0400110e 	bge	zero,r16,4bd44 <_strtod_r+0x133c>
   4bd00:	04400174 	movhi	r17,5
   4bd04:	8c4ece04 	addi	r17,r17,15160
   4bd08:	8080004c 	andi	r2,r16,1
   4bd0c:	1005003a 	cmpeq	r2,r2,zero
   4bd10:	1000091e 	bne	r2,zero,4bd38 <_strtod_r+0x1330>
   4bd14:	e0800017 	ldw	r2,0(fp)
   4bd18:	e0c00117 	ldw	r3,4(fp)
   4bd1c:	89800017 	ldw	r6,0(r17)
   4bd20:	89c00117 	ldw	r7,4(r17)
   4bd24:	180b883a 	mov	r5,r3
   4bd28:	1009883a 	mov	r4,r2
   4bd2c:	004eecc0 	call	4eecc <__muldf3>
   4bd30:	e0c00115 	stw	r3,4(fp)
   4bd34:	e0800015 	stw	r2,0(fp)
   4bd38:	8021d07a 	srai	r16,r16,1
   4bd3c:	8c400204 	addi	r17,r17,8
   4bd40:	043ff116 	blt	zero,r16,4bd08 <_strtod_r+0x1300>
   4bd44:	d8801c17 	ldw	r2,112(sp)
   4bd48:	10000d26 	beq	r2,zero,4bd80 <_strtod_r+0x1378>
   4bd4c:	e1000117 	ldw	r4,4(fp)
   4bd50:	00c01ac4 	movi	r3,107
   4bd54:	209ffc2c 	andhi	r2,r4,32752
   4bd58:	1004d53a 	srli	r2,r2,20
   4bd5c:	1887c83a 	sub	r3,r3,r2
   4bd60:	00c0070e 	bge	zero,r3,4bd80 <_strtod_r+0x1378>
   4bd64:	008007c4 	movi	r2,31
   4bd68:	10c0940e 	bge	r2,r3,4bfbc <_strtod_r+0x15b4>
   4bd6c:	00800d04 	movi	r2,52
   4bd70:	e0000015 	stw	zero,0(fp)
   4bd74:	10c08b0e 	bge	r2,r3,4bfa4 <_strtod_r+0x159c>
   4bd78:	0180dc34 	movhi	r6,880
   4bd7c:	e1800115 	stw	r6,4(fp)
   4bd80:	e0800017 	ldw	r2,0(fp)
   4bd84:	e0c00117 	ldw	r3,4(fp)
   4bd88:	000d883a 	mov	r6,zero
   4bd8c:	000f883a 	mov	r7,zero
   4bd90:	180b883a 	mov	r5,r3
   4bd94:	1009883a 	mov	r4,r2
   4bd98:	004f5700 	call	4f570 <__nedf2>
   4bd9c:	103d501e 	bne	r2,zero,4b2e0 <_strtod_r+0x8d8>
   4bda0:	00800884 	movi	r2,34
   4bda4:	a8800015 	stw	r2,0(r21)
   4bda8:	e0000015 	stw	zero,0(fp)
   4bdac:	e0000115 	stw	zero,4(fp)
   4bdb0:	003b9f06 	br	4ac30 <_strtod_r+0x228>
   4bdb4:	e1800117 	ldw	r6,4(fp)
   4bdb8:	00c00434 	movhi	r3,16
   4bdbc:	18ffffc4 	addi	r3,r3,-1
   4bdc0:	30c4703a 	and	r2,r6,r3
   4bdc4:	103f311e 	bne	r2,zero,4ba8c <_strtod_r+0x1084>
   4bdc8:	e1c00017 	ldw	r7,0(fp)
   4bdcc:	383f301e 	bne	r7,zero,4ba90 <_strtod_r+0x1088>
   4bdd0:	003f7906 	br	4bbb8 <_strtod_r+0x11b0>
   4bdd4:	d8c00f17 	ldw	r3,60(sp)
   4bdd8:	00bffa84 	movi	r2,-22
   4bddc:	18bcbf16 	blt	r3,r2,4b0dc <_strtod_r+0x6d4>
   4bde0:	1809883a 	mov	r4,r3
   4bde4:	017ffe04 	movi	r5,-8
   4bde8:	004fd3c0 	call	4fd3c <__mulsi3>
   4bdec:	00c00174 	movhi	r3,5
   4bdf0:	18ce8104 	addi	r3,r3,14852
   4bdf4:	10c5883a 	add	r2,r2,r3
   4bdf8:	e2000017 	ldw	r8,0(fp)
   4bdfc:	e2400117 	ldw	r9,4(fp)
   4be00:	12800017 	ldw	r10,0(r2)
   4be04:	12c00117 	ldw	r11,4(r2)
   4be08:	480b883a 	mov	r5,r9
   4be0c:	4009883a 	mov	r4,r8
   4be10:	580f883a 	mov	r7,r11
   4be14:	500d883a 	mov	r6,r10
   4be18:	004f2900 	call	4f290 <__divdf3>
   4be1c:	e0c00115 	stw	r3,4(fp)
   4be20:	e0800015 	stw	r2,0(fp)
   4be24:	003b8206 	br	4ac30 <_strtod_r+0x228>
   4be28:	d8801c17 	ldw	r2,112(sp)
   4be2c:	1013003a 	cmpeq	r9,r2,zero
   4be30:	483e971e 	bne	r9,zero,4b890 <_strtod_r+0xe88>
   4be34:	003f6806 	br	4bbd8 <_strtod_r+0x11d0>
   4be38:	00801a44 	movi	r2,105
   4be3c:	88bc5026 	beq	r17,r2,4af80 <_strtod_r+0x578>
   4be40:	00801b84 	movi	r2,110
   4be44:	88bb9b1e 	bne	r17,r2,4acb4 <_strtod_r+0x2ac>
   4be48:	dc000404 	addi	r16,sp,16
   4be4c:	8009883a 	mov	r4,r16
   4be50:	01400174 	movhi	r5,5
   4be54:	294ecd04 	addi	r5,r5,15156
   4be58:	004a9c00 	call	4a9c0 <match>
   4be5c:	103b9526 	beq	r2,zero,4acb4 <_strtod_r+0x2ac>
   4be60:	d8800417 	ldw	r2,16(sp)
   4be64:	00c00a04 	movi	r3,40
   4be68:	11000007 	ldb	r4,0(r2)
   4be6c:	20c04026 	beq	r4,r3,4bf70 <_strtod_r+0x1568>
   4be70:	01bffe34 	movhi	r6,65528
   4be74:	e1800115 	stw	r6,4(fp)
   4be78:	e0000015 	stw	zero,0(fp)
   4be7c:	003b6c06 	br	4ac30 <_strtod_r+0x228>
   4be80:	d8c01817 	ldw	r3,96(sp)
   4be84:	00800404 	movi	r2,16
   4be88:	10c00516 	blt	r2,r3,4bea0 <_strtod_r+0x1498>
   4be8c:	d9001117 	ldw	r4,68(sp)
   4be90:	01400284 	movi	r5,10
   4be94:	004fd3c0 	call	4fd3c <__mulsi3>
   4be98:	1585883a 	add	r2,r2,r22
   4be9c:	d8801115 	stw	r2,68(sp)
   4bea0:	000d883a 	mov	r6,zero
   4bea4:	003f2506 	br	4bb3c <_strtod_r+0x1134>
   4bea8:	000d883a 	mov	r6,zero
   4beac:	003ce306 	br	4b23c <_strtod_r+0x834>
   4beb0:	e4400117 	ldw	r17,4(fp)
   4beb4:	3809883a 	mov	r4,r7
   4beb8:	3821883a 	mov	r16,r7
   4bebc:	880b883a 	mov	r5,r17
   4bec0:	00491bc0 	call	491bc <__ulp>
   4bec4:	180f883a 	mov	r7,r3
   4bec8:	880b883a 	mov	r5,r17
   4becc:	8009883a 	mov	r4,r16
   4bed0:	100d883a 	mov	r6,r2
   4bed4:	004ee580 	call	4ee58 <__adddf3>
   4bed8:	180b883a 	mov	r5,r3
   4bedc:	d8c01c17 	ldw	r3,112(sp)
   4bee0:	1009883a 	mov	r4,r2
   4bee4:	e1400115 	stw	r5,4(fp)
   4bee8:	1813003a 	cmpeq	r9,r3,zero
   4beec:	e1000015 	stw	r4,0(fp)
   4bef0:	483e671e 	bne	r9,zero,4b890 <_strtod_r+0xe88>
   4bef4:	003f3806 	br	4bbd8 <_strtod_r+0x11d0>
   4bef8:	0080d434 	movhi	r2,848
   4befc:	188d883a 	add	r6,r3,r2
   4bf00:	d8001c15 	stw	zero,112(sp)
   4bf04:	e1800115 	stw	r6,4(fp)
   4bf08:	003cf506 	br	4b2e0 <_strtod_r+0x8d8>
   4bf0c:	d8c01c17 	ldw	r3,112(sp)
   4bf10:	1813003a 	cmpeq	r9,r3,zero
   4bf14:	483e5e1e 	bne	r9,zero,4b890 <_strtod_r+0xe88>
   4bf18:	003f2f06 	br	4bbd8 <_strtod_r+0x11d0>
   4bf1c:	309ffc2c 	andhi	r2,r6,32752
   4bf20:	00fffc34 	movhi	r3,65520
   4bf24:	10c5883a 	add	r2,r2,r3
   4bf28:	00c00434 	movhi	r3,16
   4bf2c:	18ffffc4 	addi	r3,r3,-1
   4bf30:	10ccb03a 	or	r6,r2,r3
   4bf34:	01ffffc4 	movi	r7,-1
   4bf38:	e1800115 	stw	r6,4(fp)
   4bf3c:	e1c00015 	stw	r7,0(fp)
   4bf40:	483e531e 	bne	r9,zero,4b890 <_strtod_r+0xe88>
   4bf44:	003f2406 	br	4bbd8 <_strtod_r+0x11d0>
   4bf48:	00bfffc4 	movi	r2,-1
   4bf4c:	003f4306 	br	4bc5c <_strtod_r+0x1254>
   4bf50:	0025883a 	mov	r18,zero
   4bf54:	05800174 	movhi	r22,5
   4bf58:	b58eb304 	addi	r22,r22,15052
   4bf5c:	003c9206 	br	4b1a8 <_strtod_r+0x7a0>
   4bf60:	d9c01817 	ldw	r7,96(sp)
   4bf64:	003eeb06 	br	4bb14 <_strtod_r+0x110c>
   4bf68:	d8001c15 	stw	zero,112(sp)
   4bf6c:	003f6306 	br	4bcfc <_strtod_r+0x12f4>
   4bf70:	8009883a 	mov	r4,r16
   4bf74:	01400174 	movhi	r5,5
   4bf78:	29513904 	addi	r5,r5,17636
   4bf7c:	d9800d04 	addi	r6,sp,52
   4bf80:	004d7840 	call	4d784 <__hexnan>
   4bf84:	00c00144 	movi	r3,5
   4bf88:	10ffb91e 	bne	r2,r3,4be70 <_strtod_r+0x1468>
   4bf8c:	d8800e17 	ldw	r2,56(sp)
   4bf90:	d9c00d17 	ldw	r7,52(sp)
   4bf94:	119ffc34 	orhi	r6,r2,32752
   4bf98:	e1800115 	stw	r6,4(fp)
   4bf9c:	e1c00015 	stw	r7,0(fp)
   4bfa0:	003b2306 	br	4ac30 <_strtod_r+0x228>
   4bfa4:	18fff804 	addi	r3,r3,-32
   4bfa8:	00bfffc4 	movi	r2,-1
   4bfac:	10c4983a 	sll	r2,r2,r3
   4bfb0:	208c703a 	and	r6,r4,r2
   4bfb4:	e1800115 	stw	r6,4(fp)
   4bfb8:	003f7106 	br	4bd80 <_strtod_r+0x1378>
   4bfbc:	00bfffc4 	movi	r2,-1
   4bfc0:	10c4983a 	sll	r2,r2,r3
   4bfc4:	e0c00017 	ldw	r3,0(fp)
   4bfc8:	188e703a 	and	r7,r3,r2
   4bfcc:	e1c00015 	stw	r7,0(fp)
   4bfd0:	003f6b06 	br	4bd80 <_strtod_r+0x1378>

0004bfd4 <strtof>:
   4bfd4:	defffa04 	addi	sp,sp,-24
   4bfd8:	dd000415 	stw	r20,16(sp)
   4bfdc:	05000174 	movhi	r20,5
   4bfe0:	a515cf04 	addi	r20,r20,22332
   4bfe4:	2007883a 	mov	r3,r4
   4bfe8:	a1000017 	ldw	r4,0(r20)
   4bfec:	280d883a 	mov	r6,r5
   4bff0:	180b883a 	mov	r5,r3
   4bff4:	dfc00515 	stw	ra,20(sp)
   4bff8:	dcc00315 	stw	r19,12(sp)
   4bffc:	dc800215 	stw	r18,8(sp)
   4c000:	dc400115 	stw	r17,4(sp)
   4c004:	dc000015 	stw	r16,0(sp)
   4c008:	004aa080 	call	4aa08 <_strtod_r>
   4c00c:	180b883a 	mov	r5,r3
   4c010:	1009883a 	mov	r4,r2
   4c014:	1823883a 	mov	r17,r3
   4c018:	1021883a 	mov	r16,r2
   4c01c:	004f9e80 	call	4f9e8 <__truncdfsf2>
   4c020:	1009883a 	mov	r4,r2
   4c024:	000b883a 	mov	r5,zero
   4c028:	1025883a 	mov	r18,r2
   4c02c:	1027883a 	mov	r19,r2
   4c030:	004e8600 	call	4e860 <__nesf2>
   4c034:	000d883a 	mov	r6,zero
   4c038:	000f883a 	mov	r7,zero
   4c03c:	8009883a 	mov	r4,r16
   4c040:	880b883a 	mov	r5,r17
   4c044:	10000e1e 	bne	r2,zero,4c080 <strtof+0xac>
   4c048:	004f5700 	call	4f570 <__nedf2>
   4c04c:	10000c26 	beq	r2,zero,4c080 <strtof+0xac>
   4c050:	a0c00017 	ldw	r3,0(r20)
   4c054:	00800884 	movi	r2,34
   4c058:	18800015 	stw	r2,0(r3)
   4c05c:	9805883a 	mov	r2,r19
   4c060:	dfc00517 	ldw	ra,20(sp)
   4c064:	dd000417 	ldw	r20,16(sp)
   4c068:	dcc00317 	ldw	r19,12(sp)
   4c06c:	dc800217 	ldw	r18,8(sp)
   4c070:	dc400117 	ldw	r17,4(sp)
   4c074:	dc000017 	ldw	r16,0(sp)
   4c078:	dec00604 	addi	sp,sp,24
   4c07c:	f800283a 	ret
   4c080:	9009883a 	mov	r4,r18
   4c084:	015fe034 	movhi	r5,32640
   4c088:	297fffc4 	addi	r5,r5,-1
   4c08c:	004e8d80 	call	4e8d8 <__gtsf2>
   4c090:	00ffffc4 	movi	r3,-1
   4c094:	011ffc34 	movhi	r4,32752
   4c098:	213fffc4 	addi	r4,r4,-1
   4c09c:	200f883a 	mov	r7,r4
   4c0a0:	180d883a 	mov	r6,r3
   4c0a4:	8009883a 	mov	r4,r16
   4c0a8:	880b883a 	mov	r5,r17
   4c0ac:	00800f16 	blt	zero,r2,4c0ec <strtof+0x118>
   4c0b0:	9009883a 	mov	r4,r18
   4c0b4:	017fe034 	movhi	r5,65408
   4c0b8:	297fffc4 	addi	r5,r5,-1
   4c0bc:	004e9500 	call	4e950 <__ltsf2>
   4c0c0:	023fffc4 	movi	r8,-1
   4c0c4:	027ffc34 	movhi	r9,65520
   4c0c8:	4a7fffc4 	addi	r9,r9,-1
   4c0cc:	880b883a 	mov	r5,r17
   4c0d0:	480f883a 	mov	r7,r9
   4c0d4:	8009883a 	mov	r4,r16
   4c0d8:	400d883a 	mov	r6,r8
   4c0dc:	103fdf0e 	bge	r2,zero,4c05c <strtof+0x88>
   4c0e0:	004f7080 	call	4f708 <__ltdf2>
   4c0e4:	103fda0e 	bge	r2,zero,4c050 <strtof+0x7c>
   4c0e8:	003fdc06 	br	4c05c <strtof+0x88>
   4c0ec:	004f5f80 	call	4f5f8 <__gtdf2>
   4c0f0:	00bfd70e 	bge	zero,r2,4c050 <strtof+0x7c>
   4c0f4:	003fee06 	br	4c0b0 <strtof+0xdc>

0004c0f8 <strtod>:
   4c0f8:	01800174 	movhi	r6,5
   4c0fc:	3195cf04 	addi	r6,r6,22332
   4c100:	2007883a 	mov	r3,r4
   4c104:	31000017 	ldw	r4,0(r6)
   4c108:	280d883a 	mov	r6,r5
   4c10c:	180b883a 	mov	r5,r3
   4c110:	004aa081 	jmpi	4aa08 <_strtod_r>

0004c114 <_strtoll_r>:
   4c114:	defff004 	addi	sp,sp,-64
   4c118:	00800174 	movhi	r2,5
   4c11c:	1095d304 	addi	r2,r2,22348
   4c120:	df000e15 	stw	fp,56(sp)
   4c124:	17000017 	ldw	fp,0(r2)
   4c128:	ddc00d15 	stw	r23,52(sp)
   4c12c:	dd000a15 	stw	r20,40(sp)
   4c130:	dfc00f15 	stw	ra,60(sp)
   4c134:	dd800c15 	stw	r22,48(sp)
   4c138:	dd400b15 	stw	r21,44(sp)
   4c13c:	dcc00915 	stw	r19,36(sp)
   4c140:	dc800815 	stw	r18,32(sp)
   4c144:	dc400715 	stw	r17,28(sp)
   4c148:	dc000615 	stw	r16,24(sp)
   4c14c:	d9400315 	stw	r5,12(sp)
   4c150:	d9000215 	stw	r4,8(sp)
   4c154:	d9800415 	stw	r6,16(sp)
   4c158:	382f883a 	mov	r23,r7
   4c15c:	2829883a 	mov	r20,r5
   4c160:	a4c00007 	ldb	r19,0(r20)
   4c164:	a5000044 	addi	r20,r20,1
   4c168:	e4c7883a 	add	r3,fp,r19
   4c16c:	18800003 	ldbu	r2,0(r3)
   4c170:	1080020c 	andi	r2,r2,8
   4c174:	103ffa1e 	bne	r2,zero,4c160 <_strtoll_r+0x4c>
   4c178:	00800b44 	movi	r2,45
   4c17c:	98808826 	beq	r19,r2,4c3a0 <_strtoll_r+0x28c>
   4c180:	00800ac4 	movi	r2,43
   4c184:	98808326 	beq	r19,r2,4c394 <_strtoll_r+0x280>
   4c188:	d8000115 	stw	zero,4(sp)
   4c18c:	b807003a 	cmpeq	r3,r23,zero
   4c190:	18005f1e 	bne	r3,zero,4c310 <_strtoll_r+0x1fc>
   4c194:	00800404 	movi	r2,16
   4c198:	b8805d26 	beq	r23,r2,4c310 <_strtoll_r+0x1fc>
   4c19c:	b82dd7fa 	srai	r22,r23,31
   4c1a0:	b82b883a 	mov	r21,r23
   4c1a4:	d8c00117 	ldw	r3,4(sp)
   4c1a8:	1806c03a 	cmpne	r3,r3,zero
   4c1ac:	d8c00515 	stw	r3,20(sp)
   4c1b0:	1800631e 	bne	r3,zero,4c340 <_strtoll_r+0x22c>
   4c1b4:	043fffc4 	movi	r16,-1
   4c1b8:	04600034 	movhi	r17,32768
   4c1bc:	8c7fffc4 	addi	r17,r17,-1
   4c1c0:	880b883a 	mov	r5,r17
   4c1c4:	8009883a 	mov	r4,r16
   4c1c8:	a80d883a 	mov	r6,r21
   4c1cc:	b00f883a 	mov	r7,r22
   4c1d0:	004e2000 	call	4e200 <__umoddi3>
   4c1d4:	880b883a 	mov	r5,r17
   4c1d8:	8009883a 	mov	r4,r16
   4c1dc:	b00f883a 	mov	r7,r22
   4c1e0:	a80d883a 	mov	r6,r21
   4c1e4:	d8800015 	stw	r2,0(sp)
   4c1e8:	004db940 	call	4db94 <__udivdi3>
   4c1ec:	1023883a 	mov	r17,r2
   4c1f0:	e4c5883a 	add	r2,fp,r19
   4c1f4:	11000003 	ldbu	r4,0(r2)
   4c1f8:	1825883a 	mov	r18,r3
   4c1fc:	0015883a 	mov	r10,zero
   4c200:	20c0010c 	andi	r3,r4,4
   4c204:	0017883a 	mov	r11,zero
   4c208:	000f883a 	mov	r7,zero
   4c20c:	18001a26 	beq	r3,zero,4c278 <_strtoll_r+0x164>
   4c210:	9c3ff404 	addi	r16,r19,-48
   4c214:	85c0200e 	bge	r16,r23,4c298 <_strtoll_r+0x184>
   4c218:	38003b16 	blt	r7,zero,4c308 <_strtoll_r+0x1f4>
   4c21c:	92c03a36 	bltu	r18,r11,4c308 <_strtoll_r+0x1f4>
   4c220:	5c803826 	beq	r11,r18,4c304 <_strtoll_r+0x1f0>
   4c224:	54404c26 	beq	r10,r17,4c358 <_strtoll_r+0x244>
   4c228:	580b883a 	mov	r5,r11
   4c22c:	5009883a 	mov	r4,r10
   4c230:	a80d883a 	mov	r6,r21
   4c234:	b00f883a 	mov	r7,r22
   4c238:	004d9cc0 	call	4d9cc <__muldi3>
   4c23c:	8013d7fa 	srai	r9,r16,31
   4c240:	100d883a 	mov	r6,r2
   4c244:	1405883a 	add	r2,r2,r16
   4c248:	118d803a 	cmpltu	r6,r2,r6
   4c24c:	1a47883a 	add	r3,r3,r9
   4c250:	30cd883a 	add	r6,r6,r3
   4c254:	1015883a 	mov	r10,r2
   4c258:	3017883a 	mov	r11,r6
   4c25c:	01c00044 	movi	r7,1
   4c260:	a4c00007 	ldb	r19,0(r20)
   4c264:	a5000044 	addi	r20,r20,1
   4c268:	e4c5883a 	add	r2,fp,r19
   4c26c:	11000003 	ldbu	r4,0(r2)
   4c270:	20c0010c 	andi	r3,r4,4
   4c274:	183fe61e 	bne	r3,zero,4c210 <_strtoll_r+0xfc>
   4c278:	208000cc 	andi	r2,r4,3
   4c27c:	10000626 	beq	r2,zero,4c298 <_strtoll_r+0x184>
   4c280:	2080004c 	andi	r2,r4,1
   4c284:	1005003a 	cmpeq	r2,r2,zero
   4c288:	1000301e 	bne	r2,zero,4c34c <_strtoll_r+0x238>
   4c28c:	02000dc4 	movi	r8,55
   4c290:	9a21c83a 	sub	r16,r19,r8
   4c294:	85ffe016 	blt	r16,r23,4c218 <_strtoll_r+0x104>
   4c298:	38004616 	blt	r7,zero,4c3b4 <_strtoll_r+0x2a0>
   4c29c:	d8800517 	ldw	r2,20(sp)
   4c2a0:	1000341e 	bne	r2,zero,4c374 <_strtoll_r+0x260>
   4c2a4:	500b883a 	mov	r5,r10
   4c2a8:	580d883a 	mov	r6,r11
   4c2ac:	d8c00417 	ldw	r3,16(sp)
   4c2b0:	18000626 	beq	r3,zero,4c2cc <_strtoll_r+0x1b8>
   4c2b4:	38000226 	beq	r7,zero,4c2c0 <_strtoll_r+0x1ac>
   4c2b8:	a53fffc4 	addi	r20,r20,-1
   4c2bc:	dd000315 	stw	r20,12(sp)
   4c2c0:	d8c00317 	ldw	r3,12(sp)
   4c2c4:	d8800417 	ldw	r2,16(sp)
   4c2c8:	10c00015 	stw	r3,0(r2)
   4c2cc:	2805883a 	mov	r2,r5
   4c2d0:	3007883a 	mov	r3,r6
   4c2d4:	dfc00f17 	ldw	ra,60(sp)
   4c2d8:	df000e17 	ldw	fp,56(sp)
   4c2dc:	ddc00d17 	ldw	r23,52(sp)
   4c2e0:	dd800c17 	ldw	r22,48(sp)
   4c2e4:	dd400b17 	ldw	r21,44(sp)
   4c2e8:	dd000a17 	ldw	r20,40(sp)
   4c2ec:	dcc00917 	ldw	r19,36(sp)
   4c2f0:	dc800817 	ldw	r18,32(sp)
   4c2f4:	dc400717 	ldw	r17,28(sp)
   4c2f8:	dc000617 	ldw	r16,24(sp)
   4c2fc:	dec01004 	addi	sp,sp,64
   4c300:	f800283a 	ret
   4c304:	8abfc72e 	bgeu	r17,r10,4c224 <_strtoll_r+0x110>
   4c308:	01ffffc4 	movi	r7,-1
   4c30c:	003fd406 	br	4c260 <_strtoll_r+0x14c>
   4c310:	00800c04 	movi	r2,48
   4c314:	98803226 	beq	r19,r2,4c3e0 <_strtoll_r+0x2cc>
   4c318:	183fa026 	beq	r3,zero,4c19c <_strtoll_r+0x88>
   4c31c:	00800c04 	movi	r2,48
   4c320:	98803e26 	beq	r19,r2,4c41c <_strtoll_r+0x308>
   4c324:	d8c00117 	ldw	r3,4(sp)
   4c328:	05c00284 	movi	r23,10
   4c32c:	b82b883a 	mov	r21,r23
   4c330:	1806c03a 	cmpne	r3,r3,zero
   4c334:	002d883a 	mov	r22,zero
   4c338:	d8c00515 	stw	r3,20(sp)
   4c33c:	183f9d26 	beq	r3,zero,4c1b4 <_strtoll_r+0xa0>
   4c340:	0021883a 	mov	r16,zero
   4c344:	04600034 	movhi	r17,32768
   4c348:	003f9d06 	br	4c1c0 <_strtoll_r+0xac>
   4c34c:	020015c4 	movi	r8,87
   4c350:	9a21c83a 	sub	r16,r19,r8
   4c354:	003fcf06 	br	4c294 <_strtoll_r+0x180>
   4c358:	5cbfb31e 	bne	r11,r18,4c228 <_strtoll_r+0x114>
   4c35c:	d8800017 	ldw	r2,0(sp)
   4c360:	143fb10e 	bge	r2,r16,4c228 <_strtoll_r+0x114>
   4c364:	8815883a 	mov	r10,r17
   4c368:	9017883a 	mov	r11,r18
   4c36c:	01ffffc4 	movi	r7,-1
   4c370:	003fbb06 	br	4c260 <_strtoll_r+0x14c>
   4c374:	0009883a 	mov	r4,zero
   4c378:	2285c83a 	sub	r2,r4,r10
   4c37c:	2089803a 	cmpltu	r4,r4,r2
   4c380:	02c7c83a 	sub	r3,zero,r11
   4c384:	1909c83a 	sub	r4,r3,r4
   4c388:	100b883a 	mov	r5,r2
   4c38c:	200d883a 	mov	r6,r4
   4c390:	003fc606 	br	4c2ac <_strtoll_r+0x198>
   4c394:	a4c00007 	ldb	r19,0(r20)
   4c398:	a5000044 	addi	r20,r20,1
   4c39c:	003f7a06 	br	4c188 <_strtoll_r+0x74>
   4c3a0:	a4c00007 	ldb	r19,0(r20)
   4c3a4:	00800044 	movi	r2,1
   4c3a8:	a5000044 	addi	r20,r20,1
   4c3ac:	d8800115 	stw	r2,4(sp)
   4c3b0:	003f7606 	br	4c18c <_strtoll_r+0x78>
   4c3b4:	d8c00117 	ldw	r3,4(sp)
   4c3b8:	1805003a 	cmpeq	r2,r3,zero
   4c3bc:	1000131e 	bne	r2,zero,4c40c <_strtoll_r+0x2f8>
   4c3c0:	0005883a 	mov	r2,zero
   4c3c4:	00e00034 	movhi	r3,32768
   4c3c8:	100b883a 	mov	r5,r2
   4c3cc:	180d883a 	mov	r6,r3
   4c3d0:	d8c00217 	ldw	r3,8(sp)
   4c3d4:	00800884 	movi	r2,34
   4c3d8:	18800015 	stw	r2,0(r3)
   4c3dc:	003fb306 	br	4c2ac <_strtoll_r+0x198>
   4c3e0:	a1000007 	ldb	r4,0(r20)
   4c3e4:	00801e04 	movi	r2,120
   4c3e8:	20800226 	beq	r4,r2,4c3f4 <_strtoll_r+0x2e0>
   4c3ec:	00801604 	movi	r2,88
   4c3f0:	20bfc91e 	bne	r4,r2,4c318 <_strtoll_r+0x204>
   4c3f4:	a4c00047 	ldb	r19,1(r20)
   4c3f8:	05c00404 	movi	r23,16
   4c3fc:	b82b883a 	mov	r21,r23
   4c400:	a5000084 	addi	r20,r20,2
   4c404:	002d883a 	mov	r22,zero
   4c408:	003f6606 	br	4c1a4 <_strtoll_r+0x90>
   4c40c:	017fffc4 	movi	r5,-1
   4c410:	01a00034 	movhi	r6,32768
   4c414:	31bfffc4 	addi	r6,r6,-1
   4c418:	003fed06 	br	4c3d0 <_strtoll_r+0x2bc>
   4c41c:	05c00204 	movi	r23,8
   4c420:	b82b883a 	mov	r21,r23
   4c424:	002d883a 	mov	r22,zero
   4c428:	003f5e06 	br	4c1a4 <_strtoll_r+0x90>

0004c42c <_strtoul_r>:
   4c42c:	defff404 	addi	sp,sp,-48
   4c430:	00800174 	movhi	r2,5
   4c434:	1095d304 	addi	r2,r2,22348
   4c438:	dd000615 	stw	r20,24(sp)
   4c43c:	15000017 	ldw	r20,0(r2)
   4c440:	df000a15 	stw	fp,40(sp)
   4c444:	ddc00915 	stw	r23,36(sp)
   4c448:	dc800415 	stw	r18,16(sp)
   4c44c:	dc400315 	stw	r17,12(sp)
   4c450:	dfc00b15 	stw	ra,44(sp)
   4c454:	dd800815 	stw	r22,32(sp)
   4c458:	dd400715 	stw	r21,28(sp)
   4c45c:	dcc00515 	stw	r19,20(sp)
   4c460:	dc000215 	stw	r16,8(sp)
   4c464:	282f883a 	mov	r23,r5
   4c468:	d9000115 	stw	r4,4(sp)
   4c46c:	3039883a 	mov	fp,r6
   4c470:	3825883a 	mov	r18,r7
   4c474:	2823883a 	mov	r17,r5
   4c478:	8c000007 	ldb	r16,0(r17)
   4c47c:	8c400044 	addi	r17,r17,1
   4c480:	a407883a 	add	r3,r20,r16
   4c484:	18800003 	ldbu	r2,0(r3)
   4c488:	1080020c 	andi	r2,r2,8
   4c48c:	103ffa1e 	bne	r2,zero,4c478 <_strtoul_r+0x4c>
   4c490:	00800b44 	movi	r2,45
   4c494:	80805826 	beq	r16,r2,4c5f8 <_strtoul_r+0x1cc>
   4c498:	00800ac4 	movi	r2,43
   4c49c:	80805326 	beq	r16,r2,4c5ec <_strtoul_r+0x1c0>
   4c4a0:	d8000015 	stw	zero,0(sp)
   4c4a4:	9007003a 	cmpeq	r3,r18,zero
   4c4a8:	18003d1e 	bne	r3,zero,4c5a0 <_strtoul_r+0x174>
   4c4ac:	00800404 	movi	r2,16
   4c4b0:	90803b26 	beq	r18,r2,4c5a0 <_strtoul_r+0x174>
   4c4b4:	013fffc4 	movi	r4,-1
   4c4b8:	900b883a 	mov	r5,r18
   4c4bc:	004fd2c0 	call	4fd2c <__udivsi3>
   4c4c0:	013fffc4 	movi	r4,-1
   4c4c4:	900b883a 	mov	r5,r18
   4c4c8:	1027883a 	mov	r19,r2
   4c4cc:	004fd340 	call	4fd34 <__umodsi3>
   4c4d0:	102d883a 	mov	r22,r2
   4c4d4:	902b883a 	mov	r21,r18
   4c4d8:	a405883a 	add	r2,r20,r16
   4c4dc:	11400003 	ldbu	r5,0(r2)
   4c4e0:	0009883a 	mov	r4,zero
   4c4e4:	000d883a 	mov	r6,zero
   4c4e8:	28c0010c 	andi	r3,r5,4
   4c4ec:	18000f26 	beq	r3,zero,4c52c <_strtoul_r+0x100>
   4c4f0:	843ff404 	addi	r16,r16,-48
   4c4f4:	8480150e 	bge	r16,r18,4c54c <_strtoul_r+0x120>
   4c4f8:	30003516 	blt	r6,zero,4c5d0 <_strtoul_r+0x1a4>
   4c4fc:	99003436 	bltu	r19,r4,4c5d0 <_strtoul_r+0x1a4>
   4c500:	24c03226 	beq	r4,r19,4c5cc <_strtoul_r+0x1a0>
   4c504:	a80b883a 	mov	r5,r21
   4c508:	004fd3c0 	call	4fd3c <__mulsi3>
   4c50c:	1409883a 	add	r4,r2,r16
   4c510:	01800044 	movi	r6,1
   4c514:	8c000007 	ldb	r16,0(r17)
   4c518:	8c400044 	addi	r17,r17,1
   4c51c:	a405883a 	add	r2,r20,r16
   4c520:	11400003 	ldbu	r5,0(r2)
   4c524:	28c0010c 	andi	r3,r5,4
   4c528:	183ff11e 	bne	r3,zero,4c4f0 <_strtoul_r+0xc4>
   4c52c:	288000cc 	andi	r2,r5,3
   4c530:	10000626 	beq	r2,zero,4c54c <_strtoul_r+0x120>
   4c534:	2880004c 	andi	r2,r5,1
   4c538:	1005003a 	cmpeq	r2,r2,zero
   4c53c:	1000261e 	bne	r2,zero,4c5d8 <_strtoul_r+0x1ac>
   4c540:	00800dc4 	movi	r2,55
   4c544:	80a1c83a 	sub	r16,r16,r2
   4c548:	84bfeb16 	blt	r16,r18,4c4f8 <_strtoul_r+0xcc>
   4c54c:	3000420e 	bge	r6,zero,4c658 <_strtoul_r+0x22c>
   4c550:	d8c00117 	ldw	r3,4(sp)
   4c554:	00800884 	movi	r2,34
   4c558:	013fffc4 	movi	r4,-1
   4c55c:	18800015 	stw	r2,0(r3)
   4c560:	e0000226 	beq	fp,zero,4c56c <_strtoul_r+0x140>
   4c564:	30001f1e 	bne	r6,zero,4c5e4 <_strtoul_r+0x1b8>
   4c568:	e5c00015 	stw	r23,0(fp)
   4c56c:	2005883a 	mov	r2,r4
   4c570:	dfc00b17 	ldw	ra,44(sp)
   4c574:	df000a17 	ldw	fp,40(sp)
   4c578:	ddc00917 	ldw	r23,36(sp)
   4c57c:	dd800817 	ldw	r22,32(sp)
   4c580:	dd400717 	ldw	r21,28(sp)
   4c584:	dd000617 	ldw	r20,24(sp)
   4c588:	dcc00517 	ldw	r19,20(sp)
   4c58c:	dc800417 	ldw	r18,16(sp)
   4c590:	dc400317 	ldw	r17,12(sp)
   4c594:	dc000217 	ldw	r16,8(sp)
   4c598:	dec00c04 	addi	sp,sp,48
   4c59c:	f800283a 	ret
   4c5a0:	00800c04 	movi	r2,48
   4c5a4:	80801926 	beq	r16,r2,4c60c <_strtoul_r+0x1e0>
   4c5a8:	183fc226 	beq	r3,zero,4c4b4 <_strtoul_r+0x88>
   4c5ac:	00800c04 	movi	r2,48
   4c5b0:	80802326 	beq	r16,r2,4c640 <_strtoul_r+0x214>
   4c5b4:	04800284 	movi	r18,10
   4c5b8:	902b883a 	mov	r21,r18
   4c5bc:	04c666b4 	movhi	r19,6554
   4c5c0:	9ce66644 	addi	r19,r19,-26215
   4c5c4:	05800144 	movi	r22,5
   4c5c8:	003fc306 	br	4c4d8 <_strtoul_r+0xac>
   4c5cc:	b43fcd0e 	bge	r22,r16,4c504 <_strtoul_r+0xd8>
   4c5d0:	01bfffc4 	movi	r6,-1
   4c5d4:	003fcf06 	br	4c514 <_strtoul_r+0xe8>
   4c5d8:	008015c4 	movi	r2,87
   4c5dc:	80a1c83a 	sub	r16,r16,r2
   4c5e0:	003fd906 	br	4c548 <_strtoul_r+0x11c>
   4c5e4:	8dffffc4 	addi	r23,r17,-1
   4c5e8:	003fdf06 	br	4c568 <_strtoul_r+0x13c>
   4c5ec:	8c000007 	ldb	r16,0(r17)
   4c5f0:	8c400044 	addi	r17,r17,1
   4c5f4:	003faa06 	br	4c4a0 <_strtoul_r+0x74>
   4c5f8:	8c000007 	ldb	r16,0(r17)
   4c5fc:	00800044 	movi	r2,1
   4c600:	8c400044 	addi	r17,r17,1
   4c604:	d8800015 	stw	r2,0(sp)
   4c608:	003fa606 	br	4c4a4 <_strtoul_r+0x78>
   4c60c:	89000007 	ldb	r4,0(r17)
   4c610:	00801e04 	movi	r2,120
   4c614:	20800226 	beq	r4,r2,4c620 <_strtoul_r+0x1f4>
   4c618:	00801604 	movi	r2,88
   4c61c:	20bfe21e 	bne	r4,r2,4c5a8 <_strtoul_r+0x17c>
   4c620:	8c000047 	ldb	r16,1(r17)
   4c624:	04800404 	movi	r18,16
   4c628:	8c400084 	addi	r17,r17,2
   4c62c:	902b883a 	mov	r21,r18
   4c630:	04c40034 	movhi	r19,4096
   4c634:	9cffffc4 	addi	r19,r19,-1
   4c638:	058003c4 	movi	r22,15
   4c63c:	003fa606 	br	4c4d8 <_strtoul_r+0xac>
   4c640:	04800204 	movi	r18,8
   4c644:	902b883a 	mov	r21,r18
   4c648:	04c80034 	movhi	r19,8192
   4c64c:	9cffffc4 	addi	r19,r19,-1
   4c650:	058001c4 	movi	r22,7
   4c654:	003fa006 	br	4c4d8 <_strtoul_r+0xac>
   4c658:	d8c00017 	ldw	r3,0(sp)
   4c65c:	1805003a 	cmpeq	r2,r3,zero
   4c660:	103fbf1e 	bne	r2,zero,4c560 <_strtoul_r+0x134>
   4c664:	0109c83a 	sub	r4,zero,r4
   4c668:	003fbd06 	br	4c560 <_strtoul_r+0x134>

0004c66c <strtoul>:
   4c66c:	00800174 	movhi	r2,5
   4c670:	1095cf04 	addi	r2,r2,22332
   4c674:	2013883a 	mov	r9,r4
   4c678:	11000017 	ldw	r4,0(r2)
   4c67c:	2805883a 	mov	r2,r5
   4c680:	300f883a 	mov	r7,r6
   4c684:	480b883a 	mov	r5,r9
   4c688:	100d883a 	mov	r6,r2
   4c68c:	004c42c1 	jmpi	4c42c <_strtoul_r>

0004c690 <_strtoull_r>:
   4c690:	defff104 	addi	sp,sp,-60
   4c694:	00800174 	movhi	r2,5
   4c698:	1095d304 	addi	r2,r2,22348
   4c69c:	df000d15 	stw	fp,52(sp)
   4c6a0:	17000017 	ldw	fp,0(r2)
   4c6a4:	ddc00c15 	stw	r23,48(sp)
   4c6a8:	dcc00815 	stw	r19,32(sp)
   4c6ac:	dfc00e15 	stw	ra,56(sp)
   4c6b0:	dd800b15 	stw	r22,44(sp)
   4c6b4:	dd400a15 	stw	r21,40(sp)
   4c6b8:	dd000915 	stw	r20,36(sp)
   4c6bc:	dc800715 	stw	r18,28(sp)
   4c6c0:	dc400615 	stw	r17,24(sp)
   4c6c4:	dc000515 	stw	r16,20(sp)
   4c6c8:	d9400215 	stw	r5,8(sp)
   4c6cc:	d9000115 	stw	r4,4(sp)
   4c6d0:	d9800315 	stw	r6,12(sp)
   4c6d4:	382f883a 	mov	r23,r7
   4c6d8:	2827883a 	mov	r19,r5
   4c6dc:	9d000007 	ldb	r20,0(r19)
   4c6e0:	9cc00044 	addi	r19,r19,1
   4c6e4:	e507883a 	add	r3,fp,r20
   4c6e8:	18800003 	ldbu	r2,0(r3)
   4c6ec:	1080020c 	andi	r2,r2,8
   4c6f0:	103ffa1e 	bne	r2,zero,4c6dc <_strtoull_r+0x4c>
   4c6f4:	00800b44 	movi	r2,45
   4c6f8:	a0807a26 	beq	r20,r2,4c8e4 <_strtoull_r+0x254>
   4c6fc:	00800ac4 	movi	r2,43
   4c700:	a0807526 	beq	r20,r2,4c8d8 <_strtoull_r+0x248>
   4c704:	d8000015 	stw	zero,0(sp)
   4c708:	b807003a 	cmpeq	r3,r23,zero
   4c70c:	18005a1e 	bne	r3,zero,4c878 <_strtoull_r+0x1e8>
   4c710:	00800404 	movi	r2,16
   4c714:	b8805826 	beq	r23,r2,4c878 <_strtoull_r+0x1e8>
   4c718:	b82dd7fa 	srai	r22,r23,31
   4c71c:	043fffc4 	movi	r16,-1
   4c720:	8009883a 	mov	r4,r16
   4c724:	800b883a 	mov	r5,r16
   4c728:	b80d883a 	mov	r6,r23
   4c72c:	b00f883a 	mov	r7,r22
   4c730:	004db940 	call	4db94 <__udivdi3>
   4c734:	8009883a 	mov	r4,r16
   4c738:	800b883a 	mov	r5,r16
   4c73c:	b80d883a 	mov	r6,r23
   4c740:	b00f883a 	mov	r7,r22
   4c744:	1023883a 	mov	r17,r2
   4c748:	1825883a 	mov	r18,r3
   4c74c:	004e2000 	call	4e200 <__umoddi3>
   4c750:	b82b883a 	mov	r21,r23
   4c754:	1019883a 	mov	r12,r2
   4c758:	e505883a 	add	r2,fp,r20
   4c75c:	11000003 	ldbu	r4,0(r2)
   4c760:	0015883a 	mov	r10,zero
   4c764:	0017883a 	mov	r11,zero
   4c768:	20c0010c 	andi	r3,r4,4
   4c76c:	000d883a 	mov	r6,zero
   4c770:	18001c26 	beq	r3,zero,4c7e4 <_strtoull_r+0x154>
   4c774:	a43ff404 	addi	r16,r20,-48
   4c778:	85c0220e 	bge	r16,r23,4c804 <_strtoull_r+0x174>
   4c77c:	30003c16 	blt	r6,zero,4c870 <_strtoull_r+0x1e0>
   4c780:	92c03b36 	bltu	r18,r11,4c870 <_strtoull_r+0x1e0>
   4c784:	5c803926 	beq	r11,r18,4c86c <_strtoull_r+0x1dc>
   4c788:	54404c26 	beq	r10,r17,4c8bc <_strtoull_r+0x22c>
   4c78c:	580b883a 	mov	r5,r11
   4c790:	5009883a 	mov	r4,r10
   4c794:	a80d883a 	mov	r6,r21
   4c798:	b00f883a 	mov	r7,r22
   4c79c:	db000415 	stw	r12,16(sp)
   4c7a0:	004d9cc0 	call	4d9cc <__muldi3>
   4c7a4:	8013d7fa 	srai	r9,r16,31
   4c7a8:	100d883a 	mov	r6,r2
   4c7ac:	1405883a 	add	r2,r2,r16
   4c7b0:	118d803a 	cmpltu	r6,r2,r6
   4c7b4:	1a47883a 	add	r3,r3,r9
   4c7b8:	db000417 	ldw	r12,16(sp)
   4c7bc:	30cd883a 	add	r6,r6,r3
   4c7c0:	3017883a 	mov	r11,r6
   4c7c4:	1015883a 	mov	r10,r2
   4c7c8:	01800044 	movi	r6,1
   4c7cc:	9d000007 	ldb	r20,0(r19)
   4c7d0:	9cc00044 	addi	r19,r19,1
   4c7d4:	e505883a 	add	r2,fp,r20
   4c7d8:	11000003 	ldbu	r4,0(r2)
   4c7dc:	20c0010c 	andi	r3,r4,4
   4c7e0:	183fe41e 	bne	r3,zero,4c774 <_strtoull_r+0xe4>
   4c7e4:	208000cc 	andi	r2,r4,3
   4c7e8:	10000626 	beq	r2,zero,4c804 <_strtoull_r+0x174>
   4c7ec:	2080004c 	andi	r2,r4,1
   4c7f0:	1005003a 	cmpeq	r2,r2,zero
   4c7f4:	10002e1e 	bne	r2,zero,4c8b0 <_strtoull_r+0x220>
   4c7f8:	02000dc4 	movi	r8,55
   4c7fc:	a221c83a 	sub	r16,r20,r8
   4c800:	85ffde16 	blt	r16,r23,4c77c <_strtoull_r+0xec>
   4c804:	3000530e 	bge	r6,zero,4c954 <_strtoull_r+0x2c4>
   4c808:	d8c00117 	ldw	r3,4(sp)
   4c80c:	02bfffc4 	movi	r10,-1
   4c810:	00800884 	movi	r2,34
   4c814:	5017883a 	mov	r11,r10
   4c818:	18800015 	stw	r2,0(r3)
   4c81c:	d8800317 	ldw	r2,12(sp)
   4c820:	10000426 	beq	r2,zero,4c834 <_strtoull_r+0x1a4>
   4c824:	3000291e 	bne	r6,zero,4c8cc <_strtoull_r+0x23c>
   4c828:	d8800217 	ldw	r2,8(sp)
   4c82c:	d8c00317 	ldw	r3,12(sp)
   4c830:	18800015 	stw	r2,0(r3)
   4c834:	5005883a 	mov	r2,r10
   4c838:	5807883a 	mov	r3,r11
   4c83c:	dfc00e17 	ldw	ra,56(sp)
   4c840:	df000d17 	ldw	fp,52(sp)
   4c844:	ddc00c17 	ldw	r23,48(sp)
   4c848:	dd800b17 	ldw	r22,44(sp)
   4c84c:	dd400a17 	ldw	r21,40(sp)
   4c850:	dd000917 	ldw	r20,36(sp)
   4c854:	dcc00817 	ldw	r19,32(sp)
   4c858:	dc800717 	ldw	r18,28(sp)
   4c85c:	dc400617 	ldw	r17,24(sp)
   4c860:	dc000517 	ldw	r16,20(sp)
   4c864:	dec00f04 	addi	sp,sp,60
   4c868:	f800283a 	ret
   4c86c:	8abfc62e 	bgeu	r17,r10,4c788 <_strtoull_r+0xf8>
   4c870:	01bfffc4 	movi	r6,-1
   4c874:	003fd506 	br	4c7cc <_strtoull_r+0x13c>
   4c878:	00800c04 	movi	r2,48
   4c87c:	a0801e26 	beq	r20,r2,4c8f8 <_strtoull_r+0x268>
   4c880:	183fa526 	beq	r3,zero,4c718 <_strtoull_r+0x88>
   4c884:	00800c04 	movi	r2,48
   4c888:	a0802a26 	beq	r20,r2,4c934 <_strtoull_r+0x2a4>
   4c88c:	05c00284 	movi	r23,10
   4c890:	b82b883a 	mov	r21,r23
   4c894:	046666b4 	movhi	r17,39322
   4c898:	8c666644 	addi	r17,r17,-26215
   4c89c:	002d883a 	mov	r22,zero
   4c8a0:	048666b4 	movhi	r18,6554
   4c8a4:	94a66644 	addi	r18,r18,-26215
   4c8a8:	03000144 	movi	r12,5
   4c8ac:	003faa06 	br	4c758 <_strtoull_r+0xc8>
   4c8b0:	020015c4 	movi	r8,87
   4c8b4:	a221c83a 	sub	r16,r20,r8
   4c8b8:	003fd106 	br	4c800 <_strtoull_r+0x170>
   4c8bc:	5cbfb31e 	bne	r11,r18,4c78c <_strtoull_r+0xfc>
   4c8c0:	643fb20e 	bge	r12,r16,4c78c <_strtoull_r+0xfc>
   4c8c4:	01bfffc4 	movi	r6,-1
   4c8c8:	003fc006 	br	4c7cc <_strtoull_r+0x13c>
   4c8cc:	9cffffc4 	addi	r19,r19,-1
   4c8d0:	dcc00215 	stw	r19,8(sp)
   4c8d4:	003fd406 	br	4c828 <_strtoull_r+0x198>
   4c8d8:	9d000007 	ldb	r20,0(r19)
   4c8dc:	9cc00044 	addi	r19,r19,1
   4c8e0:	003f8806 	br	4c704 <_strtoull_r+0x74>
   4c8e4:	9d000007 	ldb	r20,0(r19)
   4c8e8:	00800044 	movi	r2,1
   4c8ec:	9cc00044 	addi	r19,r19,1
   4c8f0:	d8800015 	stw	r2,0(sp)
   4c8f4:	003f8406 	br	4c708 <_strtoull_r+0x78>
   4c8f8:	99000007 	ldb	r4,0(r19)
   4c8fc:	00801e04 	movi	r2,120
   4c900:	20800226 	beq	r4,r2,4c90c <_strtoull_r+0x27c>
   4c904:	00801604 	movi	r2,88
   4c908:	20bfdd1e 	bne	r4,r2,4c880 <_strtoull_r+0x1f0>
   4c90c:	9d000047 	ldb	r20,1(r19)
   4c910:	05c00404 	movi	r23,16
   4c914:	b82b883a 	mov	r21,r23
   4c918:	047fffc4 	movi	r17,-1
   4c91c:	9cc00084 	addi	r19,r19,2
   4c920:	002d883a 	mov	r22,zero
   4c924:	04840034 	movhi	r18,4096
   4c928:	94bfffc4 	addi	r18,r18,-1
   4c92c:	030003c4 	movi	r12,15
   4c930:	003f8906 	br	4c758 <_strtoull_r+0xc8>
   4c934:	05c00204 	movi	r23,8
   4c938:	b82b883a 	mov	r21,r23
   4c93c:	047fffc4 	movi	r17,-1
   4c940:	002d883a 	mov	r22,zero
   4c944:	04880034 	movhi	r18,8192
   4c948:	94bfffc4 	addi	r18,r18,-1
   4c94c:	030001c4 	movi	r12,7
   4c950:	003f8106 	br	4c758 <_strtoull_r+0xc8>
   4c954:	d8c00017 	ldw	r3,0(sp)
   4c958:	1805003a 	cmpeq	r2,r3,zero
   4c95c:	103faf1e 	bne	r2,zero,4c81c <_strtoull_r+0x18c>
   4c960:	0009883a 	mov	r4,zero
   4c964:	2285c83a 	sub	r2,r4,r10
   4c968:	02c7c83a 	sub	r3,zero,r11
   4c96c:	2089803a 	cmpltu	r4,r4,r2
   4c970:	1909c83a 	sub	r4,r3,r4
   4c974:	1015883a 	mov	r10,r2
   4c978:	2017883a 	mov	r11,r4
   4c97c:	003fa706 	br	4c81c <_strtoull_r+0x18c>

0004c980 <__submore>:
   4c980:	defffa04 	addi	sp,sp,-24
   4c984:	28c00c17 	ldw	r3,48(r5)
   4c988:	dc800215 	stw	r18,8(sp)
   4c98c:	2825883a 	mov	r18,r5
   4c990:	dc000015 	stw	r16,0(sp)
   4c994:	90801004 	addi	r2,r18,64
   4c998:	04010004 	movi	r16,1024
   4c99c:	dfc00515 	stw	ra,20(sp)
   4c9a0:	dd000415 	stw	r20,16(sp)
   4c9a4:	dcc00315 	stw	r19,12(sp)
   4c9a8:	dc400115 	stw	r17,4(sp)
   4c9ac:	800b883a 	mov	r5,r16
   4c9b0:	18801b26 	beq	r3,r2,4ca20 <__submore+0xa0>
   4c9b4:	94400d17 	ldw	r17,52(r18)
   4c9b8:	180b883a 	mov	r5,r3
   4c9bc:	8c69883a 	add	r20,r17,r17
   4c9c0:	a00d883a 	mov	r6,r20
   4c9c4:	004a1040 	call	4a104 <_realloc_r>
   4c9c8:	1467883a 	add	r19,r2,r17
   4c9cc:	1021883a 	mov	r16,r2
   4c9d0:	880d883a 	mov	r6,r17
   4c9d4:	9809883a 	mov	r4,r19
   4c9d8:	100b883a 	mov	r5,r2
   4c9dc:	10000e26 	beq	r2,zero,4ca18 <__submore+0x98>
   4c9e0:	0048de80 	call	48de8 <memcpy>
   4c9e4:	000d883a 	mov	r6,zero
   4c9e8:	95000d15 	stw	r20,52(r18)
   4c9ec:	94c00015 	stw	r19,0(r18)
   4c9f0:	94000c15 	stw	r16,48(r18)
   4c9f4:	3005883a 	mov	r2,r6
   4c9f8:	dfc00517 	ldw	ra,20(sp)
   4c9fc:	dd000417 	ldw	r20,16(sp)
   4ca00:	dcc00317 	ldw	r19,12(sp)
   4ca04:	dc800217 	ldw	r18,8(sp)
   4ca08:	dc400117 	ldw	r17,4(sp)
   4ca0c:	dc000017 	ldw	r16,0(sp)
   4ca10:	dec00604 	addi	sp,sp,24
   4ca14:	f800283a 	ret
   4ca18:	01bfffc4 	movi	r6,-1
   4ca1c:	003ff506 	br	4c9f4 <__submore+0x74>
   4ca20:	00416980 	call	41698 <_malloc_r>
   4ca24:	1009883a 	mov	r4,r2
   4ca28:	1140ff44 	addi	r5,r2,1021
   4ca2c:	000d883a 	mov	r6,zero
   4ca30:	103ff926 	beq	r2,zero,4ca18 <__submore+0x98>
   4ca34:	90801083 	ldbu	r2,66(r18)
   4ca38:	94000d15 	stw	r16,52(r18)
   4ca3c:	91000c15 	stw	r4,48(r18)
   4ca40:	28800085 	stb	r2,2(r5)
   4ca44:	90c01043 	ldbu	r3,65(r18)
   4ca48:	28c00045 	stb	r3,1(r5)
   4ca4c:	90801003 	ldbu	r2,64(r18)
   4ca50:	2080ff45 	stb	r2,1021(r4)
   4ca54:	91400015 	stw	r5,0(r18)
   4ca58:	003fe606 	br	4c9f4 <__submore+0x74>

0004ca5c <_ungetc_r>:
   4ca5c:	defffc04 	addi	sp,sp,-16
   4ca60:	00bfffc4 	movi	r2,-1
   4ca64:	dc400215 	stw	r17,8(sp)
   4ca68:	dc000115 	stw	r16,4(sp)
   4ca6c:	dfc00315 	stw	ra,12(sp)
   4ca70:	2821883a 	mov	r16,r5
   4ca74:	2023883a 	mov	r17,r4
   4ca78:	28801826 	beq	r5,r2,4cadc <_ungetc_r+0x80>
   4ca7c:	20000226 	beq	r4,zero,4ca88 <_ungetc_r+0x2c>
   4ca80:	20800e17 	ldw	r2,56(r4)
   4ca84:	10001b26 	beq	r2,zero,4caf4 <_ungetc_r+0x98>
   4ca88:	3100030b 	ldhu	r4,12(r6)
   4ca8c:	00bff7c4 	movi	r2,-33
   4ca90:	2084703a 	and	r2,r4,r2
   4ca94:	117fffcc 	andi	r5,r2,65535
   4ca98:	28c0010c 	andi	r3,r5,4
   4ca9c:	1009883a 	mov	r4,r2
   4caa0:	3080030d 	sth	r2,12(r6)
   4caa4:	18003526 	beq	r3,zero,4cb7c <_ungetc_r+0x120>
   4caa8:	30800c17 	ldw	r2,48(r6)
   4caac:	84003fcc 	andi	r16,r16,255
   4cab0:	10001426 	beq	r2,zero,4cb04 <_ungetc_r+0xa8>
   4cab4:	30c00117 	ldw	r3,4(r6)
   4cab8:	30800d17 	ldw	r2,52(r6)
   4cabc:	1880380e 	bge	r3,r2,4cba0 <_ungetc_r+0x144>
   4cac0:	30c00017 	ldw	r3,0(r6)
   4cac4:	19ffffc4 	addi	r7,r3,-1
   4cac8:	31c00015 	stw	r7,0(r6)
   4cacc:	1c3fffc5 	stb	r16,-1(r3)
   4cad0:	30800117 	ldw	r2,4(r6)
   4cad4:	10800044 	addi	r2,r2,1
   4cad8:	30800115 	stw	r2,4(r6)
   4cadc:	8005883a 	mov	r2,r16
   4cae0:	dfc00317 	ldw	ra,12(sp)
   4cae4:	dc400217 	ldw	r17,8(sp)
   4cae8:	dc000117 	ldw	r16,4(sp)
   4caec:	dec00404 	addi	sp,sp,16
   4caf0:	f800283a 	ret
   4caf4:	d9800015 	stw	r6,0(sp)
   4caf8:	0047a580 	call	47a58 <__sinit>
   4cafc:	d9800017 	ldw	r6,0(sp)
   4cb00:	003fe106 	br	4ca88 <_ungetc_r+0x2c>
   4cb04:	30800417 	ldw	r2,16(r6)
   4cb08:	10002326 	beq	r2,zero,4cb98 <_ungetc_r+0x13c>
   4cb0c:	31c00017 	ldw	r7,0(r6)
   4cb10:	11c0022e 	bgeu	r2,r7,4cb1c <_ungetc_r+0xc0>
   4cb14:	38bfffc3 	ldbu	r2,-1(r7)
   4cb18:	80801226 	beq	r16,r2,4cb64 <_ungetc_r+0x108>
   4cb1c:	30c00117 	ldw	r3,4(r6)
   4cb20:	00800044 	movi	r2,1
   4cb24:	30800115 	stw	r2,4(r6)
   4cb28:	008000c4 	movi	r2,3
   4cb2c:	31001004 	addi	r4,r6,64
   4cb30:	31401084 	addi	r5,r6,66
   4cb34:	30800d15 	stw	r2,52(r6)
   4cb38:	8005883a 	mov	r2,r16
   4cb3c:	30c00f15 	stw	r3,60(r6)
   4cb40:	31c00e15 	stw	r7,56(r6)
   4cb44:	31000c15 	stw	r4,48(r6)
   4cb48:	31400015 	stw	r5,0(r6)
   4cb4c:	34001085 	stb	r16,66(r6)
   4cb50:	dfc00317 	ldw	ra,12(sp)
   4cb54:	dc400217 	ldw	r17,8(sp)
   4cb58:	dc000117 	ldw	r16,4(sp)
   4cb5c:	dec00404 	addi	sp,sp,16
   4cb60:	f800283a 	ret
   4cb64:	30800117 	ldw	r2,4(r6)
   4cb68:	39ffffc4 	addi	r7,r7,-1
   4cb6c:	31c00015 	stw	r7,0(r6)
   4cb70:	10800044 	addi	r2,r2,1
   4cb74:	30800115 	stw	r2,4(r6)
   4cb78:	003fd806 	br	4cadc <_ungetc_r+0x80>
   4cb7c:	2880040c 	andi	r2,r5,16
   4cb80:	10000d26 	beq	r2,zero,4cbb8 <_ungetc_r+0x15c>
   4cb84:	2880020c 	andi	r2,r5,8
   4cb88:	10000d1e 	bne	r2,zero,4cbc0 <_ungetc_r+0x164>
   4cb8c:	20800114 	ori	r2,r4,4
   4cb90:	3080030d 	sth	r2,12(r6)
   4cb94:	003fc406 	br	4caa8 <_ungetc_r+0x4c>
   4cb98:	31c00017 	ldw	r7,0(r6)
   4cb9c:	003fdf06 	br	4cb1c <_ungetc_r+0xc0>
   4cba0:	300b883a 	mov	r5,r6
   4cba4:	8809883a 	mov	r4,r17
   4cba8:	d9800015 	stw	r6,0(sp)
   4cbac:	004c9800 	call	4c980 <__submore>
   4cbb0:	d9800017 	ldw	r6,0(sp)
   4cbb4:	103fc226 	beq	r2,zero,4cac0 <_ungetc_r+0x64>
   4cbb8:	043fffc4 	movi	r16,-1
   4cbbc:	003fc706 	br	4cadc <_ungetc_r+0x80>
   4cbc0:	300b883a 	mov	r5,r6
   4cbc4:	8809883a 	mov	r4,r17
   4cbc8:	d9800015 	stw	r6,0(sp)
   4cbcc:	00477c00 	call	477c0 <_fflush_r>
   4cbd0:	d9800017 	ldw	r6,0(sp)
   4cbd4:	103ff81e 	bne	r2,zero,4cbb8 <_ungetc_r+0x15c>
   4cbd8:	3100030b 	ldhu	r4,12(r6)
   4cbdc:	00bffdc4 	movi	r2,-9
   4cbe0:	30000215 	stw	zero,8(r6)
   4cbe4:	2084703a 	and	r2,r4,r2
   4cbe8:	1009883a 	mov	r4,r2
   4cbec:	3080030d 	sth	r2,12(r6)
   4cbf0:	30000615 	stw	zero,24(r6)
   4cbf4:	003fe506 	br	4cb8c <_ungetc_r+0x130>

0004cbf8 <ungetc>:
   4cbf8:	01800174 	movhi	r6,5
   4cbfc:	3195cf04 	addi	r6,r6,22332
   4cc00:	2007883a 	mov	r3,r4
   4cc04:	31000017 	ldw	r4,0(r6)
   4cc08:	280d883a 	mov	r6,r5
   4cc0c:	180b883a 	mov	r5,r3
   4cc10:	004ca5c1 	jmpi	4ca5c <_ungetc_r>

0004cc14 <_calloc_r>:
   4cc14:	defffe04 	addi	sp,sp,-8
   4cc18:	dc400015 	stw	r17,0(sp)
   4cc1c:	2023883a 	mov	r17,r4
   4cc20:	2809883a 	mov	r4,r5
   4cc24:	300b883a 	mov	r5,r6
   4cc28:	dfc00115 	stw	ra,4(sp)
   4cc2c:	004fd3c0 	call	4fd3c <__mulsi3>
   4cc30:	100b883a 	mov	r5,r2
   4cc34:	8809883a 	mov	r4,r17
   4cc38:	00416980 	call	41698 <_malloc_r>
   4cc3c:	1023883a 	mov	r17,r2
   4cc40:	01c00904 	movi	r7,36
   4cc44:	10000d26 	beq	r2,zero,4cc7c <_calloc_r+0x68>
   4cc48:	10ffff17 	ldw	r3,-4(r2)
   4cc4c:	1009883a 	mov	r4,r2
   4cc50:	00bfff04 	movi	r2,-4
   4cc54:	1886703a 	and	r3,r3,r2
   4cc58:	1887883a 	add	r3,r3,r2
   4cc5c:	180d883a 	mov	r6,r3
   4cc60:	000b883a 	mov	r5,zero
   4cc64:	38c01736 	bltu	r7,r3,4ccc4 <_calloc_r+0xb0>
   4cc68:	008004c4 	movi	r2,19
   4cc6c:	10c00836 	bltu	r2,r3,4cc90 <_calloc_r+0x7c>
   4cc70:	20000215 	stw	zero,8(r4)
   4cc74:	20000015 	stw	zero,0(r4)
   4cc78:	20000115 	stw	zero,4(r4)
   4cc7c:	8805883a 	mov	r2,r17
   4cc80:	dfc00117 	ldw	ra,4(sp)
   4cc84:	dc400017 	ldw	r17,0(sp)
   4cc88:	dec00204 	addi	sp,sp,8
   4cc8c:	f800283a 	ret
   4cc90:	008006c4 	movi	r2,27
   4cc94:	88000015 	stw	zero,0(r17)
   4cc98:	88000115 	stw	zero,4(r17)
   4cc9c:	89000204 	addi	r4,r17,8
   4cca0:	10fff32e 	bgeu	r2,r3,4cc70 <_calloc_r+0x5c>
   4cca4:	88000215 	stw	zero,8(r17)
   4cca8:	88000315 	stw	zero,12(r17)
   4ccac:	89000404 	addi	r4,r17,16
   4ccb0:	19ffef1e 	bne	r3,r7,4cc70 <_calloc_r+0x5c>
   4ccb4:	89000604 	addi	r4,r17,24
   4ccb8:	88000415 	stw	zero,16(r17)
   4ccbc:	88000515 	stw	zero,20(r17)
   4ccc0:	003feb06 	br	4cc70 <_calloc_r+0x5c>
   4ccc4:	0048f680 	call	48f68 <memset>
   4ccc8:	8805883a 	mov	r2,r17
   4cccc:	dfc00117 	ldw	ra,4(sp)
   4ccd0:	dc400017 	ldw	r17,0(sp)
   4ccd4:	dec00204 	addi	sp,sp,8
   4ccd8:	f800283a 	ret

0004ccdc <_fclose_r>:
   4ccdc:	defffc04 	addi	sp,sp,-16
   4cce0:	dc400115 	stw	r17,4(sp)
   4cce4:	dc000015 	stw	r16,0(sp)
   4cce8:	dfc00315 	stw	ra,12(sp)
   4ccec:	dc800215 	stw	r18,8(sp)
   4ccf0:	2821883a 	mov	r16,r5
   4ccf4:	2023883a 	mov	r17,r4
   4ccf8:	28002926 	beq	r5,zero,4cda0 <_fclose_r+0xc4>
   4ccfc:	0047a480 	call	47a48 <__sfp_lock_acquire>
   4cd00:	88000226 	beq	r17,zero,4cd0c <_fclose_r+0x30>
   4cd04:	88800e17 	ldw	r2,56(r17)
   4cd08:	10002d26 	beq	r2,zero,4cdc0 <_fclose_r+0xe4>
   4cd0c:	8080030f 	ldh	r2,12(r16)
   4cd10:	10002226 	beq	r2,zero,4cd9c <_fclose_r+0xc0>
   4cd14:	8809883a 	mov	r4,r17
   4cd18:	800b883a 	mov	r5,r16
   4cd1c:	00477c00 	call	477c0 <_fflush_r>
   4cd20:	1025883a 	mov	r18,r2
   4cd24:	80800b17 	ldw	r2,44(r16)
   4cd28:	10000426 	beq	r2,zero,4cd3c <_fclose_r+0x60>
   4cd2c:	81400717 	ldw	r5,28(r16)
   4cd30:	8809883a 	mov	r4,r17
   4cd34:	103ee83a 	callr	r2
   4cd38:	10002a16 	blt	r2,zero,4cde4 <_fclose_r+0x108>
   4cd3c:	8080030b 	ldhu	r2,12(r16)
   4cd40:	1080200c 	andi	r2,r2,128
   4cd44:	1000231e 	bne	r2,zero,4cdd4 <_fclose_r+0xf8>
   4cd48:	81400c17 	ldw	r5,48(r16)
   4cd4c:	28000526 	beq	r5,zero,4cd64 <_fclose_r+0x88>
   4cd50:	80801004 	addi	r2,r16,64
   4cd54:	28800226 	beq	r5,r2,4cd60 <_fclose_r+0x84>
   4cd58:	8809883a 	mov	r4,r17
   4cd5c:	00480fc0 	call	480fc <_free_r>
   4cd60:	80000c15 	stw	zero,48(r16)
   4cd64:	81401117 	ldw	r5,68(r16)
   4cd68:	28000326 	beq	r5,zero,4cd78 <_fclose_r+0x9c>
   4cd6c:	8809883a 	mov	r4,r17
   4cd70:	00480fc0 	call	480fc <_free_r>
   4cd74:	80001115 	stw	zero,68(r16)
   4cd78:	8000030d 	sth	zero,12(r16)
   4cd7c:	0047a4c0 	call	47a4c <__sfp_lock_release>
   4cd80:	9005883a 	mov	r2,r18
   4cd84:	dfc00317 	ldw	ra,12(sp)
   4cd88:	dc800217 	ldw	r18,8(sp)
   4cd8c:	dc400117 	ldw	r17,4(sp)
   4cd90:	dc000017 	ldw	r16,0(sp)
   4cd94:	dec00404 	addi	sp,sp,16
   4cd98:	f800283a 	ret
   4cd9c:	0047a4c0 	call	47a4c <__sfp_lock_release>
   4cda0:	0025883a 	mov	r18,zero
   4cda4:	9005883a 	mov	r2,r18
   4cda8:	dfc00317 	ldw	ra,12(sp)
   4cdac:	dc800217 	ldw	r18,8(sp)
   4cdb0:	dc400117 	ldw	r17,4(sp)
   4cdb4:	dc000017 	ldw	r16,0(sp)
   4cdb8:	dec00404 	addi	sp,sp,16
   4cdbc:	f800283a 	ret
   4cdc0:	8809883a 	mov	r4,r17
   4cdc4:	0047a580 	call	47a58 <__sinit>
   4cdc8:	8080030f 	ldh	r2,12(r16)
   4cdcc:	103fd11e 	bne	r2,zero,4cd14 <_fclose_r+0x38>
   4cdd0:	003ff206 	br	4cd9c <_fclose_r+0xc0>
   4cdd4:	81400417 	ldw	r5,16(r16)
   4cdd8:	8809883a 	mov	r4,r17
   4cddc:	00480fc0 	call	480fc <_free_r>
   4cde0:	003fd906 	br	4cd48 <_fclose_r+0x6c>
   4cde4:	04bfffc4 	movi	r18,-1
   4cde8:	003fd406 	br	4cd3c <_fclose_r+0x60>

0004cdec <fclose>:
   4cdec:	00800174 	movhi	r2,5
   4cdf0:	1095cf04 	addi	r2,r2,22332
   4cdf4:	200b883a 	mov	r5,r4
   4cdf8:	11000017 	ldw	r4,0(r2)
   4cdfc:	004ccdc1 	jmpi	4ccdc <_fclose_r>

0004ce00 <htinit>:
   4ce00:	28800003 	ldbu	r2,0(r5)
   4ce04:	10000626 	beq	r2,zero,4ce20 <htinit+0x20>
   4ce08:	1105883a 	add	r2,r2,r4
   4ce0c:	11800005 	stb	r6,0(r2)
   4ce10:	28800043 	ldbu	r2,1(r5)
   4ce14:	31800044 	addi	r6,r6,1
   4ce18:	29400044 	addi	r5,r5,1
   4ce1c:	103ffa1e 	bne	r2,zero,4ce08 <htinit+0x8>
   4ce20:	f800283a 	ret

0004ce24 <__hexdig_init>:
   4ce24:	defffd04 	addi	sp,sp,-12
   4ce28:	dc400015 	stw	r17,0(sp)
   4ce2c:	04400174 	movhi	r17,5
   4ce30:	8c5cce04 	addi	r17,r17,29496
   4ce34:	dcc00115 	stw	r19,4(sp)
   4ce38:	8809883a 	mov	r4,r17
   4ce3c:	04c00684 	movi	r19,26
   4ce40:	01400174 	movhi	r5,5
   4ce44:	294ed804 	addi	r5,r5,15200
   4ce48:	01800404 	movi	r6,16
   4ce4c:	dfc00215 	stw	ra,8(sp)
   4ce50:	004ce000 	call	4ce00 <htinit>
   4ce54:	980d883a 	mov	r6,r19
   4ce58:	8809883a 	mov	r4,r17
   4ce5c:	01400174 	movhi	r5,5
   4ce60:	294edb04 	addi	r5,r5,15212
   4ce64:	004ce000 	call	4ce00 <htinit>
   4ce68:	8809883a 	mov	r4,r17
   4ce6c:	980d883a 	mov	r6,r19
   4ce70:	01400174 	movhi	r5,5
   4ce74:	294edd04 	addi	r5,r5,15220
   4ce78:	dfc00217 	ldw	ra,8(sp)
   4ce7c:	dcc00117 	ldw	r19,4(sp)
   4ce80:	dc400017 	ldw	r17,0(sp)
   4ce84:	dec00304 	addi	sp,sp,12
   4ce88:	004ce001 	jmpi	4ce00 <htinit>

0004ce8c <rshift>:
   4ce8c:	2807d17a 	srai	r3,r5,5
   4ce90:	20800417 	ldw	r2,16(r4)
   4ce94:	22400504 	addi	r9,r4,20
   4ce98:	480f883a 	mov	r7,r9
   4ce9c:	1880190e 	bge	r3,r2,4cf04 <rshift+0x78>
   4cea0:	1085883a 	add	r2,r2,r2
   4cea4:	18c7883a 	add	r3,r3,r3
   4cea8:	1085883a 	add	r2,r2,r2
   4ceac:	18c7883a 	add	r3,r3,r3
   4ceb0:	294007cc 	andi	r5,r5,31
   4ceb4:	4891883a 	add	r8,r9,r2
   4ceb8:	48cd883a 	add	r6,r9,r3
   4cebc:	28001726 	beq	r5,zero,4cf1c <rshift+0x90>
   4cec0:	30c00017 	ldw	r3,0(r6)
   4cec4:	00800804 	movi	r2,32
   4cec8:	31800104 	addi	r6,r6,4
   4cecc:	1155c83a 	sub	r10,r2,r5
   4ced0:	1946d83a 	srl	r3,r3,r5
   4ced4:	3200092e 	bgeu	r6,r8,4cefc <rshift+0x70>
   4ced8:	30800017 	ldw	r2,0(r6)
   4cedc:	1284983a 	sll	r2,r2,r10
   4cee0:	10c4b03a 	or	r2,r2,r3
   4cee4:	38800015 	stw	r2,0(r7)
   4cee8:	30c00017 	ldw	r3,0(r6)
   4ceec:	31800104 	addi	r6,r6,4
   4cef0:	39c00104 	addi	r7,r7,4
   4cef4:	1946d83a 	srl	r3,r3,r5
   4cef8:	323ff736 	bltu	r6,r8,4ced8 <rshift+0x4c>
   4cefc:	38c00015 	stw	r3,0(r7)
   4cf00:	18000c1e 	bne	r3,zero,4cf34 <rshift+0xa8>
   4cf04:	3a45c83a 	sub	r2,r7,r9
   4cf08:	1005d0ba 	srai	r2,r2,2
   4cf0c:	20800415 	stw	r2,16(r4)
   4cf10:	1000011e 	bne	r2,zero,4cf18 <rshift+0x8c>
   4cf14:	20000515 	stw	zero,20(r4)
   4cf18:	f800283a 	ret
   4cf1c:	323ff92e 	bgeu	r6,r8,4cf04 <rshift+0x78>
   4cf20:	30800017 	ldw	r2,0(r6)
   4cf24:	31800104 	addi	r6,r6,4
   4cf28:	38800015 	stw	r2,0(r7)
   4cf2c:	39c00104 	addi	r7,r7,4
   4cf30:	003ffa06 	br	4cf1c <rshift+0x90>
   4cf34:	39c00104 	addi	r7,r7,4
   4cf38:	003ff206 	br	4cf04 <rshift+0x78>

0004cf3c <__gethex>:
   4cf3c:	defff104 	addi	sp,sp,-60
   4cf40:	df000d15 	stw	fp,52(sp)
   4cf44:	dcc00815 	stw	r19,32(sp)
   4cf48:	dfc00e15 	stw	ra,56(sp)
   4cf4c:	ddc00c15 	stw	r23,48(sp)
   4cf50:	dd800b15 	stw	r22,44(sp)
   4cf54:	dd400a15 	stw	r21,40(sp)
   4cf58:	dd000915 	stw	r20,36(sp)
   4cf5c:	dc800715 	stw	r18,28(sp)
   4cf60:	dc400615 	stw	r17,24(sp)
   4cf64:	dc000515 	stw	r16,20(sp)
   4cf68:	04c00174 	movhi	r19,5
   4cf6c:	9cdcce04 	addi	r19,r19,29496
   4cf70:	98800c03 	ldbu	r2,48(r19)
   4cf74:	d9000115 	stw	r4,4(sp)
   4cf78:	2839883a 	mov	fp,r5
   4cf7c:	d9800215 	stw	r6,8(sp)
   4cf80:	d9c00315 	stw	r7,12(sp)
   4cf84:	10007526 	beq	r2,zero,4d15c <__gethex+0x220>
   4cf88:	e1800017 	ldw	r6,0(fp)
   4cf8c:	00800c04 	movi	r2,48
   4cf90:	31000083 	ldbu	r4,2(r6)
   4cf94:	30c00084 	addi	r3,r6,2
   4cf98:	2080761e 	bne	r4,r2,4d174 <__gethex+0x238>
   4cf9c:	200b883a 	mov	r5,r4
   4cfa0:	3007883a 	mov	r3,r6
   4cfa4:	188000c3 	ldbu	r2,3(r3)
   4cfa8:	18c00044 	addi	r3,r3,1
   4cfac:	1009883a 	mov	r4,r2
   4cfb0:	117ffc26 	beq	r2,r5,4cfa4 <__gethex+0x68>
   4cfb4:	198fc83a 	sub	r7,r3,r6
   4cfb8:	19400084 	addi	r5,r3,2
   4cfbc:	24c5883a 	add	r2,r4,r19
   4cfc0:	10c00003 	ldbu	r3,0(r2)
   4cfc4:	18002e26 	beq	r3,zero,4d080 <__gethex+0x144>
   4cfc8:	29000003 	ldbu	r4,0(r5)
   4cfcc:	282b883a 	mov	r21,r5
   4cfd0:	000d883a 	mov	r6,zero
   4cfd4:	002d883a 	mov	r22,zero
   4cfd8:	21003fcc 	andi	r4,r4,255
   4cfdc:	24c5883a 	add	r2,r4,r19
   4cfe0:	10c00003 	ldbu	r3,0(r2)
   4cfe4:	18000526 	beq	r3,zero,4cffc <__gethex+0xc0>
   4cfe8:	29400044 	addi	r5,r5,1
   4cfec:	29000003 	ldbu	r4,0(r5)
   4cff0:	24c5883a 	add	r2,r4,r19
   4cff4:	10c00003 	ldbu	r3,0(r2)
   4cff8:	183ffb1e 	bne	r3,zero,4cfe8 <__gethex+0xac>
   4cffc:	00800b84 	movi	r2,46
   4d000:	20805f26 	beq	r4,r2,4d180 <__gethex+0x244>
   4d004:	30008226 	beq	r6,zero,4d210 <__gethex+0x2d4>
   4d008:	2985c83a 	sub	r2,r5,r6
   4d00c:	1085883a 	add	r2,r2,r2
   4d010:	1085883a 	add	r2,r2,r2
   4d014:	0085c83a 	sub	r2,zero,r2
   4d018:	d8800015 	stw	r2,0(sp)
   4d01c:	2825883a 	mov	r18,r5
   4d020:	90c00003 	ldbu	r3,0(r18)
   4d024:	00801404 	movi	r2,80
   4d028:	18801e26 	beq	r3,r2,4d0a4 <__gethex+0x168>
   4d02c:	00801c04 	movi	r2,112
   4d030:	18801c26 	beq	r3,r2,4d0a4 <__gethex+0x168>
   4d034:	9023883a 	mov	r17,r18
   4d038:	b005003a 	cmpeq	r2,r22,zero
   4d03c:	e4400015 	stw	r17,0(fp)
   4d040:	10008d1e 	bne	r2,zero,4d278 <__gethex+0x33c>
   4d044:	38004326 	beq	r7,zero,4d154 <__gethex+0x218>
   4d048:	0025883a 	mov	r18,zero
   4d04c:	9005883a 	mov	r2,r18
   4d050:	dfc00e17 	ldw	ra,56(sp)
   4d054:	df000d17 	ldw	fp,52(sp)
   4d058:	ddc00c17 	ldw	r23,48(sp)
   4d05c:	dd800b17 	ldw	r22,44(sp)
   4d060:	dd400a17 	ldw	r21,40(sp)
   4d064:	dd000917 	ldw	r20,36(sp)
   4d068:	dcc00817 	ldw	r19,32(sp)
   4d06c:	dc800717 	ldw	r18,28(sp)
   4d070:	dc400617 	ldw	r17,24(sp)
   4d074:	dc000517 	ldw	r16,20(sp)
   4d078:	dec00f04 	addi	sp,sp,60
   4d07c:	f800283a 	ret
   4d080:	00800b84 	movi	r2,46
   4d084:	20805126 	beq	r4,r2,4d1cc <__gethex+0x290>
   4d088:	2825883a 	mov	r18,r5
   4d08c:	d8000015 	stw	zero,0(sp)
   4d090:	90c00003 	ldbu	r3,0(r18)
   4d094:	00801404 	movi	r2,80
   4d098:	282b883a 	mov	r21,r5
   4d09c:	05800044 	movi	r22,1
   4d0a0:	18bfe21e 	bne	r3,r2,4d02c <__gethex+0xf0>
   4d0a4:	90c00043 	ldbu	r3,1(r18)
   4d0a8:	00800ac4 	movi	r2,43
   4d0ac:	91400044 	addi	r5,r18,1
   4d0b0:	18805126 	beq	r3,r2,4d1f8 <__gethex+0x2bc>
   4d0b4:	00800b44 	movi	r2,45
   4d0b8:	18805326 	beq	r3,r2,4d208 <__gethex+0x2cc>
   4d0bc:	002f883a 	mov	r23,zero
   4d0c0:	1cc5883a 	add	r2,r3,r19
   4d0c4:	10800003 	ldbu	r2,0(r2)
   4d0c8:	103fda26 	beq	r2,zero,4d034 <__gethex+0xf8>
   4d0cc:	01800644 	movi	r6,25
   4d0d0:	30bfd816 	blt	r6,r2,4d034 <__gethex+0xf8>
   4d0d4:	28c00043 	ldbu	r3,1(r5)
   4d0d8:	113ffc04 	addi	r4,r2,-16
   4d0dc:	00800174 	movhi	r2,5
   4d0e0:	109cce04 	addi	r2,r2,29496
   4d0e4:	1887883a 	add	r3,r3,r2
   4d0e8:	18800003 	ldbu	r2,0(r3)
   4d0ec:	2c400044 	addi	r17,r5,1
   4d0f0:	10001126 	beq	r2,zero,4d138 <__gethex+0x1fc>
   4d0f4:	1021883a 	mov	r16,r2
   4d0f8:	30800f16 	blt	r6,r2,4d138 <__gethex+0x1fc>
   4d0fc:	3029883a 	mov	r20,r6
   4d100:	00000106 	br	4d108 <__gethex+0x1cc>
   4d104:	a0800c16 	blt	r20,r2,4d138 <__gethex+0x1fc>
   4d108:	8c400044 	addi	r17,r17,1
   4d10c:	01400284 	movi	r5,10
   4d110:	d9c00415 	stw	r7,16(sp)
   4d114:	004fd3c0 	call	4fd3c <__mulsi3>
   4d118:	88c00003 	ldbu	r3,0(r17)
   4d11c:	1405883a 	add	r2,r2,r16
   4d120:	113ffc04 	addi	r4,r2,-16
   4d124:	1cc7883a 	add	r3,r3,r19
   4d128:	18800003 	ldbu	r2,0(r3)
   4d12c:	d9c00417 	ldw	r7,16(sp)
   4d130:	1021883a 	mov	r16,r2
   4d134:	103ff31e 	bne	r2,zero,4d104 <__gethex+0x1c8>
   4d138:	b805003a 	cmpeq	r2,r23,zero
   4d13c:	1000011e 	bne	r2,zero,4d144 <__gethex+0x208>
   4d140:	0109c83a 	sub	r4,zero,r4
   4d144:	d8800017 	ldw	r2,0(sp)
   4d148:	1105883a 	add	r2,r2,r4
   4d14c:	d8800015 	stw	r2,0(sp)
   4d150:	003fb906 	br	4d038 <__gethex+0xfc>
   4d154:	04800184 	movi	r18,6
   4d158:	003fbc06 	br	4d04c <__gethex+0x110>
   4d15c:	004ce240 	call	4ce24 <__hexdig_init>
   4d160:	e1800017 	ldw	r6,0(fp)
   4d164:	00800c04 	movi	r2,48
   4d168:	31000083 	ldbu	r4,2(r6)
   4d16c:	30c00084 	addi	r3,r6,2
   4d170:	20bf8a26 	beq	r4,r2,4cf9c <__gethex+0x60>
   4d174:	180b883a 	mov	r5,r3
   4d178:	000f883a 	mov	r7,zero
   4d17c:	003f8f06 	br	4cfbc <__gethex+0x80>
   4d180:	303fa11e 	bne	r6,zero,4d008 <__gethex+0xcc>
   4d184:	29400044 	addi	r5,r5,1
   4d188:	28800003 	ldbu	r2,0(r5)
   4d18c:	14c5883a 	add	r2,r2,r19
   4d190:	10c00003 	ldbu	r3,0(r2)
   4d194:	1800b526 	beq	r3,zero,4d46c <__gethex+0x530>
   4d198:	2809883a 	mov	r4,r5
   4d19c:	21000044 	addi	r4,r4,1
   4d1a0:	20800003 	ldbu	r2,0(r4)
   4d1a4:	14c5883a 	add	r2,r2,r19
   4d1a8:	10c00003 	ldbu	r3,0(r2)
   4d1ac:	183ffb1e 	bne	r3,zero,4d19c <__gethex+0x260>
   4d1b0:	2145c83a 	sub	r2,r4,r5
   4d1b4:	1085883a 	add	r2,r2,r2
   4d1b8:	1085883a 	add	r2,r2,r2
   4d1bc:	0085c83a 	sub	r2,zero,r2
   4d1c0:	200b883a 	mov	r5,r4
   4d1c4:	d8800015 	stw	r2,0(sp)
   4d1c8:	003f9406 	br	4d01c <__gethex+0xe0>
   4d1cc:	29000043 	ldbu	r4,1(r5)
   4d1d0:	00800174 	movhi	r2,5
   4d1d4:	109cce04 	addi	r2,r2,29496
   4d1d8:	2c800044 	addi	r18,r5,1
   4d1dc:	2085883a 	add	r2,r4,r2
   4d1e0:	10c00003 	ldbu	r3,0(r2)
   4d1e4:	18000d1e 	bne	r3,zero,4d21c <__gethex+0x2e0>
   4d1e8:	282b883a 	mov	r21,r5
   4d1ec:	05800044 	movi	r22,1
   4d1f0:	d8000015 	stw	zero,0(sp)
   4d1f4:	003f8a06 	br	4d020 <__gethex+0xe4>
   4d1f8:	002f883a 	mov	r23,zero
   4d1fc:	29400044 	addi	r5,r5,1
   4d200:	28c00003 	ldbu	r3,0(r5)
   4d204:	003fae06 	br	4d0c0 <__gethex+0x184>
   4d208:	05c00044 	movi	r23,1
   4d20c:	003ffb06 	br	4d1fc <__gethex+0x2c0>
   4d210:	2825883a 	mov	r18,r5
   4d214:	d8000015 	stw	zero,0(sp)
   4d218:	003f8106 	br	4d020 <__gethex+0xe4>
   4d21c:	00800c04 	movi	r2,48
   4d220:	20800e1e 	bne	r4,r2,4d25c <__gethex+0x320>
   4d224:	2007883a 	mov	r3,r4
   4d228:	900b883a 	mov	r5,r18
   4d22c:	29400044 	addi	r5,r5,1
   4d230:	29000003 	ldbu	r4,0(r5)
   4d234:	20803fcc 	andi	r2,r4,255
   4d238:	10fffc26 	beq	r2,r3,4d22c <__gethex+0x2f0>
   4d23c:	14c5883a 	add	r2,r2,r19
   4d240:	10c00003 	ldbu	r3,0(r2)
   4d244:	1800071e 	bne	r3,zero,4d264 <__gethex+0x328>
   4d248:	01c00044 	movi	r7,1
   4d24c:	900d883a 	mov	r6,r18
   4d250:	282b883a 	mov	r21,r5
   4d254:	382d883a 	mov	r22,r7
   4d258:	003f5f06 	br	4cfd8 <__gethex+0x9c>
   4d25c:	91000003 	ldbu	r4,0(r18)
   4d260:	900b883a 	mov	r5,r18
   4d264:	900d883a 	mov	r6,r18
   4d268:	282b883a 	mov	r21,r5
   4d26c:	01c00044 	movi	r7,1
   4d270:	002d883a 	mov	r22,zero
   4d274:	003f5806 	br	4cfd8 <__gethex+0x9c>
   4d278:	9545c83a 	sub	r2,r18,r21
   4d27c:	10bfffc4 	addi	r2,r2,-1
   4d280:	00c001c4 	movi	r3,7
   4d284:	1880770e 	bge	r3,r2,4d464 <__gethex+0x528>
   4d288:	000b883a 	mov	r5,zero
   4d28c:	1005d07a 	srai	r2,r2,1
   4d290:	29400044 	addi	r5,r5,1
   4d294:	18bffd16 	blt	r3,r2,4d28c <__gethex+0x350>
   4d298:	d9000117 	ldw	r4,4(sp)
   4d29c:	00495800 	call	49580 <_Balloc>
   4d2a0:	1029883a 	mov	r20,r2
   4d2a4:	15800504 	addi	r22,r2,20
   4d2a8:	ac80562e 	bgeu	r21,r18,4d404 <__gethex+0x4c8>
   4d2ac:	900b883a 	mov	r5,r18
   4d2b0:	b011883a 	mov	r8,r22
   4d2b4:	000f883a 	mov	r7,zero
   4d2b8:	0009883a 	mov	r4,zero
   4d2bc:	02400b84 	movi	r9,46
   4d2c0:	02800804 	movi	r10,32
   4d2c4:	297fffc4 	addi	r5,r5,-1
   4d2c8:	28c00003 	ldbu	r3,0(r5)
   4d2cc:	1a400826 	beq	r3,r9,4d2f0 <__gethex+0x3b4>
   4d2d0:	380d883a 	mov	r6,r7
   4d2d4:	3a802a26 	beq	r7,r10,4d380 <__gethex+0x444>
   4d2d8:	39c00104 	addi	r7,r7,4
   4d2dc:	1cc7883a 	add	r3,r3,r19
   4d2e0:	18800003 	ldbu	r2,0(r3)
   4d2e4:	108003cc 	andi	r2,r2,15
   4d2e8:	1184983a 	sll	r2,r2,r6
   4d2ec:	2088b03a 	or	r4,r4,r2
   4d2f0:	a97ff436 	bltu	r21,r5,4d2c4 <__gethex+0x388>
   4d2f4:	40800104 	addi	r2,r8,4
   4d2f8:	1585c83a 	sub	r2,r2,r22
   4d2fc:	1021d0ba 	srai	r16,r2,2
   4d300:	41000015 	stw	r4,0(r8)
   4d304:	a4000415 	stw	r16,16(r20)
   4d308:	00490280 	call	49028 <__hi0bits>
   4d30c:	d9000217 	ldw	r4,8(sp)
   4d310:	8006917a 	slli	r3,r16,5
   4d314:	24c00017 	ldw	r19,0(r4)
   4d318:	1885c83a 	sub	r2,r3,r2
   4d31c:	98801f16 	blt	r19,r2,4d39c <__gethex+0x460>
   4d320:	14c00c16 	blt	r2,r19,4d354 <__gethex+0x418>
   4d324:	002b883a 	mov	r21,zero
   4d328:	d9000217 	ldw	r4,8(sp)
   4d32c:	d8c00017 	ldw	r3,0(sp)
   4d330:	20800217 	ldw	r2,8(r4)
   4d334:	10c0360e 	bge	r2,r3,4d410 <__gethex+0x4d4>
   4d338:	d9000117 	ldw	r4,4(sp)
   4d33c:	a00b883a 	mov	r5,r20
   4d340:	048028c4 	movi	r18,163
   4d344:	00490000 	call	49000 <_Bfree>
   4d348:	d9000f17 	ldw	r4,60(sp)
   4d34c:	20000015 	stw	zero,0(r4)
   4d350:	003f3e06 	br	4d04c <__gethex+0x110>
   4d354:	d9000117 	ldw	r4,4(sp)
   4d358:	98a1c83a 	sub	r16,r19,r2
   4d35c:	a00b883a 	mov	r5,r20
   4d360:	800d883a 	mov	r6,r16
   4d364:	00499440 	call	49944 <__lshift>
   4d368:	d8c00017 	ldw	r3,0(sp)
   4d36c:	1029883a 	mov	r20,r2
   4d370:	15800504 	addi	r22,r2,20
   4d374:	1c07c83a 	sub	r3,r3,r16
   4d378:	d8c00015 	stw	r3,0(sp)
   4d37c:	003fe906 	br	4d324 <__gethex+0x3e8>
   4d380:	41000015 	stw	r4,0(r8)
   4d384:	28c00003 	ldbu	r3,0(r5)
   4d388:	01c00104 	movi	r7,4
   4d38c:	000d883a 	mov	r6,zero
   4d390:	41d1883a 	add	r8,r8,r7
   4d394:	0009883a 	mov	r4,zero
   4d398:	003fd006 	br	4d2dc <__gethex+0x3a0>
   4d39c:	14e1c83a 	sub	r16,r2,r19
   4d3a0:	a009883a 	mov	r4,r20
   4d3a4:	800b883a 	mov	r5,r16
   4d3a8:	00494f80 	call	494f8 <__any_on>
   4d3ac:	1000081e 	bne	r2,zero,4d3d0 <__gethex+0x494>
   4d3b0:	002b883a 	mov	r21,zero
   4d3b4:	a009883a 	mov	r4,r20
   4d3b8:	800b883a 	mov	r5,r16
   4d3bc:	004ce8c0 	call	4ce8c <rshift>
   4d3c0:	d8800017 	ldw	r2,0(sp)
   4d3c4:	1405883a 	add	r2,r2,r16
   4d3c8:	d8800015 	stw	r2,0(sp)
   4d3cc:	003fd606 	br	4d328 <__gethex+0x3ec>
   4d3d0:	817fffc4 	addi	r5,r16,-1
   4d3d4:	2805d17a 	srai	r2,r5,5
   4d3d8:	290007cc 	andi	r4,r5,31
   4d3dc:	01800044 	movi	r6,1
   4d3e0:	1085883a 	add	r2,r2,r2
   4d3e4:	1085883a 	add	r2,r2,r2
   4d3e8:	1585883a 	add	r2,r2,r22
   4d3ec:	3108983a 	sll	r4,r6,r4
   4d3f0:	10c00017 	ldw	r3,0(r2)
   4d3f4:	20c8703a 	and	r4,r4,r3
   4d3f8:	20001e1e 	bne	r4,zero,4d474 <__gethex+0x538>
   4d3fc:	302b883a 	mov	r21,r6
   4d400:	003fec06 	br	4d3b4 <__gethex+0x478>
   4d404:	b011883a 	mov	r8,r22
   4d408:	0009883a 	mov	r4,zero
   4d40c:	003fb906 	br	4d2f4 <__gethex+0x3b8>
   4d410:	d8800217 	ldw	r2,8(sp)
   4d414:	d8c00017 	ldw	r3,0(sp)
   4d418:	11000117 	ldw	r4,4(r2)
   4d41c:	19001c16 	blt	r3,r4,4d490 <__gethex+0x554>
   4d420:	04800044 	movi	r18,1
   4d424:	a8000926 	beq	r21,zero,4d44c <__gethex+0x510>
   4d428:	d8c00217 	ldw	r3,8(sp)
   4d42c:	00800084 	movi	r2,2
   4d430:	19000317 	ldw	r4,12(r3)
   4d434:	20809826 	beq	r4,r2,4d698 <__gethex+0x75c>
   4d438:	008000c4 	movi	r2,3
   4d43c:	20805b26 	beq	r4,r2,4d5ac <__gethex+0x670>
   4d440:	00800044 	movi	r2,1
   4d444:	20804326 	beq	r4,r2,4d554 <__gethex+0x618>
   4d448:	94800414 	ori	r18,r18,16
   4d44c:	d9000f17 	ldw	r4,60(sp)
   4d450:	d8800017 	ldw	r2,0(sp)
   4d454:	d8c00317 	ldw	r3,12(sp)
   4d458:	25000015 	stw	r20,0(r4)
   4d45c:	18800015 	stw	r2,0(r3)
   4d460:	003efa06 	br	4d04c <__gethex+0x110>
   4d464:	000b883a 	mov	r5,zero
   4d468:	003f8b06 	br	4d298 <__gethex+0x35c>
   4d46c:	d8000015 	stw	zero,0(sp)
   4d470:	003eea06 	br	4d01c <__gethex+0xe0>
   4d474:	3140180e 	bge	r6,r5,4d4d8 <__gethex+0x59c>
   4d478:	a009883a 	mov	r4,r20
   4d47c:	817fff84 	addi	r5,r16,-2
   4d480:	00494f80 	call	494f8 <__any_on>
   4d484:	10001426 	beq	r2,zero,4d4d8 <__gethex+0x59c>
   4d488:	054000c4 	movi	r21,3
   4d48c:	003fc906 	br	4d3b4 <__gethex+0x478>
   4d490:	d8800017 	ldw	r2,0(sp)
   4d494:	20a3c83a 	sub	r17,r4,r2
   4d498:	8cc01116 	blt	r17,r19,4d4e0 <__gethex+0x5a4>
   4d49c:	d8800217 	ldw	r2,8(sp)
   4d4a0:	10c00317 	ldw	r3,12(r2)
   4d4a4:	00800084 	movi	r2,2
   4d4a8:	18809426 	beq	r3,r2,4d6fc <__gethex+0x7c0>
   4d4ac:	008000c4 	movi	r2,3
   4d4b0:	18808f26 	beq	r3,r2,4d6f0 <__gethex+0x7b4>
   4d4b4:	00800044 	movi	r2,1
   4d4b8:	18807c26 	beq	r3,r2,4d6ac <__gethex+0x770>
   4d4bc:	d9000117 	ldw	r4,4(sp)
   4d4c0:	a00b883a 	mov	r5,r20
   4d4c4:	04801404 	movi	r18,80
   4d4c8:	00490000 	call	49000 <_Bfree>
   4d4cc:	d9000f17 	ldw	r4,60(sp)
   4d4d0:	20000015 	stw	zero,0(r4)
   4d4d4:	003edd06 	br	4d04c <__gethex+0x110>
   4d4d8:	05400084 	movi	r21,2
   4d4dc:	003fb506 	br	4d3b4 <__gethex+0x478>
   4d4e0:	8c3fffc4 	addi	r16,r17,-1
   4d4e4:	a8001526 	beq	r21,zero,4d53c <__gethex+0x600>
   4d4e8:	05400044 	movi	r21,1
   4d4ec:	8005d17a 	srai	r2,r16,5
   4d4f0:	814007cc 	andi	r5,r16,31
   4d4f4:	00c00044 	movi	r3,1
   4d4f8:	1085883a 	add	r2,r2,r2
   4d4fc:	1085883a 	add	r2,r2,r2
   4d500:	1585883a 	add	r2,r2,r22
   4d504:	1946983a 	sll	r3,r3,r5
   4d508:	11000017 	ldw	r4,0(r2)
   4d50c:	1906703a 	and	r3,r3,r4
   4d510:	18000126 	beq	r3,zero,4d518 <__gethex+0x5dc>
   4d514:	ad400094 	ori	r21,r21,2
   4d518:	880b883a 	mov	r5,r17
   4d51c:	a009883a 	mov	r4,r20
   4d520:	004ce8c0 	call	4ce8c <rshift>
   4d524:	d8800217 	ldw	r2,8(sp)
   4d528:	9c67c83a 	sub	r19,r19,r17
   4d52c:	04800084 	movi	r18,2
   4d530:	10800117 	ldw	r2,4(r2)
   4d534:	d8800015 	stw	r2,0(sp)
   4d538:	003fba06 	br	4d424 <__gethex+0x4e8>
   4d53c:	043feb0e 	bge	zero,r16,4d4ec <__gethex+0x5b0>
   4d540:	a009883a 	mov	r4,r20
   4d544:	800b883a 	mov	r5,r16
   4d548:	00494f80 	call	494f8 <__any_on>
   4d54c:	102b883a 	mov	r21,r2
   4d550:	003fe606 	br	4d4ec <__gethex+0x5b0>
   4d554:	a880008c 	andi	r2,r21,2
   4d558:	103fbb26 	beq	r2,zero,4d448 <__gethex+0x50c>
   4d55c:	b0800017 	ldw	r2,0(r22)
   4d560:	a884b03a 	or	r2,r21,r2
   4d564:	1104703a 	and	r2,r2,r4
   4d568:	103fb726 	beq	r2,zero,4d448 <__gethex+0x50c>
   4d56c:	a4000417 	ldw	r16,16(r20)
   4d570:	b007883a 	mov	r3,r22
   4d574:	017fffc4 	movi	r5,-1
   4d578:	8405883a 	add	r2,r16,r16
   4d57c:	10ab883a 	add	r21,r2,r2
   4d580:	802f883a 	mov	r23,r16
   4d584:	b549883a 	add	r4,r22,r21
   4d588:	00000306 	br	4d598 <__gethex+0x65c>
   4d58c:	18000015 	stw	zero,0(r3)
   4d590:	18c00104 	addi	r3,r3,4
   4d594:	1900082e 	bgeu	r3,r4,4d5b8 <__gethex+0x67c>
   4d598:	18800017 	ldw	r2,0(r3)
   4d59c:	117ffb26 	beq	r2,r5,4d58c <__gethex+0x650>
   4d5a0:	10800044 	addi	r2,r2,1
   4d5a4:	18800015 	stw	r2,0(r3)
   4d5a8:	00001e06 	br	4d624 <__gethex+0x6e8>
   4d5ac:	d8801017 	ldw	r2,64(sp)
   4d5b0:	103fa526 	beq	r2,zero,4d448 <__gethex+0x50c>
   4d5b4:	003fed06 	br	4d56c <__gethex+0x630>
   4d5b8:	a0800217 	ldw	r2,8(r20)
   4d5bc:	80801216 	blt	r16,r2,4d608 <__gethex+0x6cc>
   4d5c0:	a1400117 	ldw	r5,4(r20)
   4d5c4:	d9000117 	ldw	r4,4(sp)
   4d5c8:	29400044 	addi	r5,r5,1
   4d5cc:	00495800 	call	49580 <_Balloc>
   4d5d0:	a1800417 	ldw	r6,16(r20)
   4d5d4:	a1400304 	addi	r5,r20,12
   4d5d8:	11000304 	addi	r4,r2,12
   4d5dc:	318d883a 	add	r6,r6,r6
   4d5e0:	318d883a 	add	r6,r6,r6
   4d5e4:	31800204 	addi	r6,r6,8
   4d5e8:	1023883a 	mov	r17,r2
   4d5ec:	0048de80 	call	48de8 <memcpy>
   4d5f0:	d9000117 	ldw	r4,4(sp)
   4d5f4:	a00b883a 	mov	r5,r20
   4d5f8:	8d800504 	addi	r22,r17,20
   4d5fc:	00490000 	call	49000 <_Bfree>
   4d600:	8c000417 	ldw	r16,16(r17)
   4d604:	8829883a 	mov	r20,r17
   4d608:	8405883a 	add	r2,r16,r16
   4d60c:	1085883a 	add	r2,r2,r2
   4d610:	1505883a 	add	r2,r2,r20
   4d614:	84000044 	addi	r16,r16,1
   4d618:	00c00044 	movi	r3,1
   4d61c:	10c00515 	stw	r3,20(r2)
   4d620:	a4000415 	stw	r16,16(r20)
   4d624:	00800084 	movi	r2,2
   4d628:	90801526 	beq	r18,r2,4d680 <__gethex+0x744>
   4d62c:	bc000a16 	blt	r23,r16,4d658 <__gethex+0x71c>
   4d630:	9c0007cc 	andi	r16,r19,31
   4d634:	8000021e 	bne	r16,zero,4d640 <__gethex+0x704>
   4d638:	94800814 	ori	r18,r18,32
   4d63c:	003f8306 	br	4d44c <__gethex+0x510>
   4d640:	b545883a 	add	r2,r22,r21
   4d644:	113fff17 	ldw	r4,-4(r2)
   4d648:	00490280 	call	49028 <__hi0bits>
   4d64c:	00c00804 	movi	r3,32
   4d650:	1c07c83a 	sub	r3,r3,r16
   4d654:	10fff80e 	bge	r2,r3,4d638 <__gethex+0x6fc>
   4d658:	a009883a 	mov	r4,r20
   4d65c:	01400044 	movi	r5,1
   4d660:	004ce8c0 	call	4ce8c <rshift>
   4d664:	d9000217 	ldw	r4,8(sp)
   4d668:	d8c00017 	ldw	r3,0(sp)
   4d66c:	20800217 	ldw	r2,8(r4)
   4d670:	18c00044 	addi	r3,r3,1
   4d674:	d8c00015 	stw	r3,0(sp)
   4d678:	10ff2f16 	blt	r2,r3,4d338 <__gethex+0x3fc>
   4d67c:	003fee06 	br	4d638 <__gethex+0x6fc>
   4d680:	d8c00217 	ldw	r3,8(sp)
   4d684:	18800017 	ldw	r2,0(r3)
   4d688:	10bfffc4 	addi	r2,r2,-1
   4d68c:	98801e26 	beq	r19,r2,4d708 <__gethex+0x7cc>
   4d690:	04800884 	movi	r18,34
   4d694:	003f6d06 	br	4d44c <__gethex+0x510>
   4d698:	d9001017 	ldw	r4,64(sp)
   4d69c:	00800044 	movi	r2,1
   4d6a0:	1105c83a 	sub	r2,r2,r4
   4d6a4:	103f6826 	beq	r2,zero,4d448 <__gethex+0x50c>
   4d6a8:	003fb006 	br	4d56c <__gethex+0x630>
   4d6ac:	9c7f831e 	bne	r19,r17,4d4bc <__gethex+0x580>
   4d6b0:	1cc0060e 	bge	r3,r19,4d6cc <__gethex+0x790>
   4d6b4:	98cbc83a 	sub	r5,r19,r3
   4d6b8:	a009883a 	mov	r4,r20
   4d6bc:	00494f80 	call	494f8 <__any_on>
   4d6c0:	103f7e26 	beq	r2,zero,4d4bc <__gethex+0x580>
   4d6c4:	d8c00217 	ldw	r3,8(sp)
   4d6c8:	19000117 	ldw	r4,4(r3)
   4d6cc:	d8800317 	ldw	r2,12(sp)
   4d6d0:	d8c00f17 	ldw	r3,60(sp)
   4d6d4:	04000044 	movi	r16,1
   4d6d8:	11000015 	stw	r4,0(r2)
   4d6dc:	04801884 	movi	r18,98
   4d6e0:	b4000015 	stw	r16,0(r22)
   4d6e4:	1d000015 	stw	r20,0(r3)
   4d6e8:	a4000415 	stw	r16,16(r20)
   4d6ec:	003e5706 	br	4d04c <__gethex+0x110>
   4d6f0:	d8801017 	ldw	r2,64(sp)
   4d6f4:	103f7126 	beq	r2,zero,4d4bc <__gethex+0x580>
   4d6f8:	003ff406 	br	4d6cc <__gethex+0x790>
   4d6fc:	d8c01017 	ldw	r3,64(sp)
   4d700:	183ff226 	beq	r3,zero,4d6cc <__gethex+0x790>
   4d704:	003f6d06 	br	4d4bc <__gethex+0x580>
   4d708:	9805d17a 	srai	r2,r19,5
   4d70c:	994007cc 	andi	r5,r19,31
   4d710:	00c00044 	movi	r3,1
   4d714:	1085883a 	add	r2,r2,r2
   4d718:	1085883a 	add	r2,r2,r2
   4d71c:	1585883a 	add	r2,r2,r22
   4d720:	1946983a 	sll	r3,r3,r5
   4d724:	11000017 	ldw	r4,0(r2)
   4d728:	1906703a 	and	r3,r3,r4
   4d72c:	183fd826 	beq	r3,zero,4d690 <__gethex+0x754>
   4d730:	04800844 	movi	r18,33
   4d734:	003f4506 	br	4d44c <__gethex+0x510>

0004d738 <L_shift>:
   4d738:	00800204 	movi	r2,8
   4d73c:	1185c83a 	sub	r2,r2,r6
   4d740:	1085883a 	add	r2,r2,r2
   4d744:	21c00017 	ldw	r7,0(r4)
   4d748:	1093883a 	add	r9,r2,r2
   4d74c:	00800804 	movi	r2,32
   4d750:	200d883a 	mov	r6,r4
   4d754:	1251c83a 	sub	r8,r2,r9
   4d758:	31800104 	addi	r6,r6,4
   4d75c:	3805883a 	mov	r2,r7
   4d760:	31c00017 	ldw	r7,0(r6)
   4d764:	3a08983a 	sll	r4,r7,r8
   4d768:	3a46d83a 	srl	r3,r7,r9
   4d76c:	1104b03a 	or	r2,r2,r4
   4d770:	180f883a 	mov	r7,r3
   4d774:	30bfff15 	stw	r2,-4(r6)
   4d778:	30c00015 	stw	r3,0(r6)
   4d77c:	317ff636 	bltu	r6,r5,4d758 <L_shift+0x20>
   4d780:	f800283a 	ret

0004d784 <__hexnan>:
   4d784:	defff404 	addi	sp,sp,-48
   4d788:	dd800815 	stw	r22,32(sp)
   4d78c:	05800174 	movhi	r22,5
   4d790:	b59cce04 	addi	r22,r22,29496
   4d794:	b0800c03 	ldbu	r2,48(r22)
   4d798:	dcc00515 	stw	r19,20(sp)
   4d79c:	dc000215 	stw	r16,8(sp)
   4d7a0:	dfc00b15 	stw	ra,44(sp)
   4d7a4:	df000a15 	stw	fp,40(sp)
   4d7a8:	ddc00915 	stw	r23,36(sp)
   4d7ac:	dd400715 	stw	r21,28(sp)
   4d7b0:	dd000615 	stw	r20,24(sp)
   4d7b4:	dc800415 	stw	r18,16(sp)
   4d7b8:	dc400315 	stw	r17,12(sp)
   4d7bc:	d9000115 	stw	r4,4(sp)
   4d7c0:	2821883a 	mov	r16,r5
   4d7c4:	3027883a 	mov	r19,r6
   4d7c8:	10007426 	beq	r2,zero,4d99c <__hexnan+0x218>
   4d7cc:	80c00017 	ldw	r3,0(r16)
   4d7d0:	1805d17a 	srai	r2,r3,5
   4d7d4:	18c007cc 	andi	r3,r3,31
   4d7d8:	1839003a 	cmpeq	fp,r3,zero
   4d7dc:	1085883a 	add	r2,r2,r2
   4d7e0:	1085883a 	add	r2,r2,r2
   4d7e4:	d8c00015 	stw	r3,0(sp)
   4d7e8:	14c5883a 	add	r2,r2,r19
   4d7ec:	e000011e 	bne	fp,zero,4d7f4 <__hexnan+0x70>
   4d7f0:	10800104 	addi	r2,r2,4
   4d7f4:	d8c00117 	ldw	r3,4(sp)
   4d7f8:	153fff04 	addi	r20,r2,-4
   4d7fc:	a021883a 	mov	r16,r20
   4d800:	1c400017 	ldw	r17,0(r3)
   4d804:	a02b883a 	mov	r21,r20
   4d808:	0025883a 	mov	r18,zero
   4d80c:	002f883a 	mov	r23,zero
   4d810:	000d883a 	mov	r6,zero
   4d814:	103fff15 	stw	zero,-4(r2)
   4d818:	8c400044 	addi	r17,r17,1
   4d81c:	89000003 	ldbu	r4,0(r17)
   4d820:	20000e26 	beq	r4,zero,4d85c <__hexnan+0xd8>
   4d824:	2585883a 	add	r2,r4,r22
   4d828:	10c00003 	ldbu	r3,0(r2)
   4d82c:	18002e1e 	bne	r3,zero,4d8e8 <__hexnan+0x164>
   4d830:	00800804 	movi	r2,32
   4d834:	11005536 	bltu	r2,r4,4d98c <__hexnan+0x208>
   4d838:	bcbff70e 	bge	r23,r18,4d818 <__hexnan+0x94>
   4d83c:	8540022e 	bgeu	r16,r21,4d848 <__hexnan+0xc4>
   4d840:	008001c4 	movi	r2,7
   4d844:	11803c0e 	bge	r2,r6,4d938 <__hexnan+0x1b4>
   4d848:	9c003536 	bltu	r19,r16,4d920 <__hexnan+0x19c>
   4d84c:	8c400044 	addi	r17,r17,1
   4d850:	89000003 	ldbu	r4,0(r17)
   4d854:	01800204 	movi	r6,8
   4d858:	203ff21e 	bne	r4,zero,4d824 <__hexnan+0xa0>
   4d85c:	90004d26 	beq	r18,zero,4d994 <__hexnan+0x210>
   4d860:	85404336 	bltu	r16,r21,4d970 <__hexnan+0x1ec>
   4d864:	9c00382e 	bgeu	r19,r16,4d948 <__hexnan+0x1c4>
   4d868:	9807883a 	mov	r3,r19
   4d86c:	80800017 	ldw	r2,0(r16)
   4d870:	84000104 	addi	r16,r16,4
   4d874:	18800015 	stw	r2,0(r3)
   4d878:	18c00104 	addi	r3,r3,4
   4d87c:	a43ffb2e 	bgeu	r20,r16,4d86c <__hexnan+0xe8>
   4d880:	18000015 	stw	zero,0(r3)
   4d884:	18c00104 	addi	r3,r3,4
   4d888:	a0fffd2e 	bgeu	r20,r3,4d880 <__hexnan+0xfc>
   4d88c:	a0800017 	ldw	r2,0(r20)
   4d890:	1000071e 	bne	r2,zero,4d8b0 <__hexnan+0x12c>
   4d894:	9d004326 	beq	r19,r20,4d9a4 <__hexnan+0x220>
   4d898:	a007883a 	mov	r3,r20
   4d89c:	00000106 	br	4d8a4 <__hexnan+0x120>
   4d8a0:	98c04026 	beq	r19,r3,4d9a4 <__hexnan+0x220>
   4d8a4:	18ffff04 	addi	r3,r3,-4
   4d8a8:	18800017 	ldw	r2,0(r3)
   4d8ac:	103ffc26 	beq	r2,zero,4d8a0 <__hexnan+0x11c>
   4d8b0:	00c00144 	movi	r3,5
   4d8b4:	1805883a 	mov	r2,r3
   4d8b8:	dfc00b17 	ldw	ra,44(sp)
   4d8bc:	df000a17 	ldw	fp,40(sp)
   4d8c0:	ddc00917 	ldw	r23,36(sp)
   4d8c4:	dd800817 	ldw	r22,32(sp)
   4d8c8:	dd400717 	ldw	r21,28(sp)
   4d8cc:	dd000617 	ldw	r20,24(sp)
   4d8d0:	dcc00517 	ldw	r19,20(sp)
   4d8d4:	dc800417 	ldw	r18,16(sp)
   4d8d8:	dc400317 	ldw	r17,12(sp)
   4d8dc:	dc000217 	ldw	r16,8(sp)
   4d8e0:	dec00c04 	addi	sp,sp,48
   4d8e4:	f800283a 	ret
   4d8e8:	31800044 	addi	r6,r6,1
   4d8ec:	00800204 	movi	r2,8
   4d8f0:	94800044 	addi	r18,r18,1
   4d8f4:	1180040e 	bge	r2,r6,4d908 <__hexnan+0x184>
   4d8f8:	9c3fc72e 	bgeu	r19,r16,4d818 <__hexnan+0x94>
   4d8fc:	843fff04 	addi	r16,r16,-4
   4d900:	80000015 	stw	zero,0(r16)
   4d904:	01800044 	movi	r6,1
   4d908:	80800017 	ldw	r2,0(r16)
   4d90c:	18c003cc 	andi	r3,r3,15
   4d910:	1004913a 	slli	r2,r2,4
   4d914:	10c4b03a 	or	r2,r2,r3
   4d918:	80800015 	stw	r2,0(r16)
   4d91c:	003fbe06 	br	4d818 <__hexnan+0x94>
   4d920:	843fff04 	addi	r16,r16,-4
   4d924:	802b883a 	mov	r21,r16
   4d928:	902f883a 	mov	r23,r18
   4d92c:	000d883a 	mov	r6,zero
   4d930:	80000015 	stw	zero,0(r16)
   4d934:	003fb806 	br	4d818 <__hexnan+0x94>
   4d938:	8009883a 	mov	r4,r16
   4d93c:	a80b883a 	mov	r5,r21
   4d940:	004d7380 	call	4d738 <L_shift>
   4d944:	003fc006 	br	4d848 <__hexnan+0xc4>
   4d948:	e03fd01e 	bne	fp,zero,4d88c <__hexnan+0x108>
   4d94c:	d8c00017 	ldw	r3,0(sp)
   4d950:	00800804 	movi	r2,32
   4d954:	10c5c83a 	sub	r2,r2,r3
   4d958:	00ffffc4 	movi	r3,-1
   4d95c:	1886d83a 	srl	r3,r3,r2
   4d960:	a0800017 	ldw	r2,0(r20)
   4d964:	10c4703a 	and	r2,r2,r3
   4d968:	a0800015 	stw	r2,0(r20)
   4d96c:	003fc806 	br	4d890 <__hexnan+0x10c>
   4d970:	008001c4 	movi	r2,7
   4d974:	11bfbb16 	blt	r2,r6,4d864 <__hexnan+0xe0>
   4d978:	a80b883a 	mov	r5,r21
   4d97c:	8009883a 	mov	r4,r16
   4d980:	004d7380 	call	4d738 <L_shift>
   4d984:	9c3ff02e 	bgeu	r19,r16,4d948 <__hexnan+0x1c4>
   4d988:	003fb706 	br	4d868 <__hexnan+0xe4>
   4d98c:	00800a44 	movi	r2,41
   4d990:	20800826 	beq	r4,r2,4d9b4 <__hexnan+0x230>
   4d994:	00c00104 	movi	r3,4
   4d998:	003fc606 	br	4d8b4 <__hexnan+0x130>
   4d99c:	004ce240 	call	4ce24 <__hexdig_init>
   4d9a0:	003f8a06 	br	4d7cc <__hexnan+0x48>
   4d9a4:	00800044 	movi	r2,1
   4d9a8:	00c00144 	movi	r3,5
   4d9ac:	98800015 	stw	r2,0(r19)
   4d9b0:	003fc006 	br	4d8b4 <__hexnan+0x130>
   4d9b4:	903ff726 	beq	r18,zero,4d994 <__hexnan+0x210>
   4d9b8:	d8c00117 	ldw	r3,4(sp)
   4d9bc:	88800044 	addi	r2,r17,1
   4d9c0:	18800015 	stw	r2,0(r3)
   4d9c4:	857fa72e 	bgeu	r16,r21,4d864 <__hexnan+0xe0>
   4d9c8:	003fe906 	br	4d970 <__hexnan+0x1ec>

0004d9cc <__muldi3>:
   4d9cc:	defff204 	addi	sp,sp,-56
   4d9d0:	df000c15 	stw	fp,48(sp)
   4d9d4:	3038d43a 	srli	fp,r6,16
   4d9d8:	dd000815 	stw	r20,32(sp)
   4d9dc:	dc400515 	stw	r17,20(sp)
   4d9e0:	2028d43a 	srli	r20,r4,16
   4d9e4:	247fffcc 	andi	r17,r4,65535
   4d9e8:	dc000415 	stw	r16,16(sp)
   4d9ec:	343fffcc 	andi	r16,r6,65535
   4d9f0:	dcc00715 	stw	r19,28(sp)
   4d9f4:	d9000015 	stw	r4,0(sp)
   4d9f8:	2827883a 	mov	r19,r5
   4d9fc:	8809883a 	mov	r4,r17
   4da00:	d9400115 	stw	r5,4(sp)
   4da04:	800b883a 	mov	r5,r16
   4da08:	d9800215 	stw	r6,8(sp)
   4da0c:	dfc00d15 	stw	ra,52(sp)
   4da10:	d9c00315 	stw	r7,12(sp)
   4da14:	dd800a15 	stw	r22,40(sp)
   4da18:	dd400915 	stw	r21,36(sp)
   4da1c:	302d883a 	mov	r22,r6
   4da20:	ddc00b15 	stw	r23,44(sp)
   4da24:	dc800615 	stw	r18,24(sp)
   4da28:	004fd3c0 	call	4fd3c <__mulsi3>
   4da2c:	8809883a 	mov	r4,r17
   4da30:	e00b883a 	mov	r5,fp
   4da34:	102b883a 	mov	r21,r2
   4da38:	004fd3c0 	call	4fd3c <__mulsi3>
   4da3c:	800b883a 	mov	r5,r16
   4da40:	a009883a 	mov	r4,r20
   4da44:	1023883a 	mov	r17,r2
   4da48:	004fd3c0 	call	4fd3c <__mulsi3>
   4da4c:	a009883a 	mov	r4,r20
   4da50:	e00b883a 	mov	r5,fp
   4da54:	1021883a 	mov	r16,r2
   4da58:	004fd3c0 	call	4fd3c <__mulsi3>
   4da5c:	a8ffffcc 	andi	r3,r21,65535
   4da60:	a82ad43a 	srli	r21,r21,16
   4da64:	8c23883a 	add	r17,r17,r16
   4da68:	1011883a 	mov	r8,r2
   4da6c:	ac6b883a 	add	r21,r21,r17
   4da70:	a804943a 	slli	r2,r21,16
   4da74:	b009883a 	mov	r4,r22
   4da78:	980b883a 	mov	r5,r19
   4da7c:	10c7883a 	add	r3,r2,r3
   4da80:	a812d43a 	srli	r9,r21,16
   4da84:	180d883a 	mov	r6,r3
   4da88:	ac00022e 	bgeu	r21,r16,4da94 <__muldi3+0xc8>
   4da8c:	00800074 	movhi	r2,1
   4da90:	4091883a 	add	r8,r8,r2
   4da94:	4267883a 	add	r19,r8,r9
   4da98:	302d883a 	mov	r22,r6
   4da9c:	004fd3c0 	call	4fd3c <__mulsi3>
   4daa0:	d9400317 	ldw	r5,12(sp)
   4daa4:	d9000017 	ldw	r4,0(sp)
   4daa8:	1023883a 	mov	r17,r2
   4daac:	004fd3c0 	call	4fd3c <__mulsi3>
   4dab0:	14cb883a 	add	r5,r2,r19
   4dab4:	894b883a 	add	r5,r17,r5
   4dab8:	b005883a 	mov	r2,r22
   4dabc:	2807883a 	mov	r3,r5
   4dac0:	dfc00d17 	ldw	ra,52(sp)
   4dac4:	df000c17 	ldw	fp,48(sp)
   4dac8:	ddc00b17 	ldw	r23,44(sp)
   4dacc:	dd800a17 	ldw	r22,40(sp)
   4dad0:	dd400917 	ldw	r21,36(sp)
   4dad4:	dd000817 	ldw	r20,32(sp)
   4dad8:	dcc00717 	ldw	r19,28(sp)
   4dadc:	dc800617 	ldw	r18,24(sp)
   4dae0:	dc400517 	ldw	r17,20(sp)
   4dae4:	dc000417 	ldw	r16,16(sp)
   4dae8:	dec00e04 	addi	sp,sp,56
   4daec:	f800283a 	ret

0004daf0 <__fixunsdfsi>:
   4daf0:	defffb04 	addi	sp,sp,-20
   4daf4:	dc400115 	stw	r17,4(sp)
   4daf8:	dc000015 	stw	r16,0(sp)
   4dafc:	04507834 	movhi	r17,16864
   4db00:	0021883a 	mov	r16,zero
   4db04:	800d883a 	mov	r6,r16
   4db08:	880f883a 	mov	r7,r17
   4db0c:	dcc00315 	stw	r19,12(sp)
   4db10:	dc800215 	stw	r18,8(sp)
   4db14:	2827883a 	mov	r19,r5
   4db18:	2025883a 	mov	r18,r4
   4db1c:	dfc00415 	stw	ra,16(sp)
   4db20:	004f6800 	call	4f680 <__gedf2>
   4db24:	000d883a 	mov	r6,zero
   4db28:	880f883a 	mov	r7,r17
   4db2c:	980b883a 	mov	r5,r19
   4db30:	9009883a 	mov	r4,r18
   4db34:	10000d16 	blt	r2,zero,4db6c <__fixunsdfsi+0x7c>
   4db38:	004edd80 	call	4edd8 <__subdf3>
   4db3c:	180b883a 	mov	r5,r3
   4db40:	1009883a 	mov	r4,r2
   4db44:	004f9100 	call	4f910 <__fixdfsi>
   4db48:	00e00034 	movhi	r3,32768
   4db4c:	10c5883a 	add	r2,r2,r3
   4db50:	dfc00417 	ldw	ra,16(sp)
   4db54:	dcc00317 	ldw	r19,12(sp)
   4db58:	dc800217 	ldw	r18,8(sp)
   4db5c:	dc400117 	ldw	r17,4(sp)
   4db60:	dc000017 	ldw	r16,0(sp)
   4db64:	dec00504 	addi	sp,sp,20
   4db68:	f800283a 	ret
   4db6c:	980b883a 	mov	r5,r19
   4db70:	9009883a 	mov	r4,r18
   4db74:	004f9100 	call	4f910 <__fixdfsi>
   4db78:	dfc00417 	ldw	ra,16(sp)
   4db7c:	dcc00317 	ldw	r19,12(sp)
   4db80:	dc800217 	ldw	r18,8(sp)
   4db84:	dc400117 	ldw	r17,4(sp)
   4db88:	dc000017 	ldw	r16,0(sp)
   4db8c:	dec00504 	addi	sp,sp,20
   4db90:	f800283a 	ret

0004db94 <__udivdi3>:
   4db94:	defff104 	addi	sp,sp,-60
   4db98:	0015883a 	mov	r10,zero
   4db9c:	2005883a 	mov	r2,r4
   4dba0:	3011883a 	mov	r8,r6
   4dba4:	df000d15 	stw	fp,52(sp)
   4dba8:	dd400a15 	stw	r21,40(sp)
   4dbac:	dcc00815 	stw	r19,32(sp)
   4dbb0:	dfc00e15 	stw	ra,56(sp)
   4dbb4:	ddc00c15 	stw	r23,48(sp)
   4dbb8:	dd800b15 	stw	r22,44(sp)
   4dbbc:	dd000915 	stw	r20,36(sp)
   4dbc0:	dc800715 	stw	r18,28(sp)
   4dbc4:	dc400615 	stw	r17,24(sp)
   4dbc8:	dc000515 	stw	r16,20(sp)
   4dbcc:	da800315 	stw	r10,12(sp)
   4dbd0:	4027883a 	mov	r19,r8
   4dbd4:	1039883a 	mov	fp,r2
   4dbd8:	282b883a 	mov	r21,r5
   4dbdc:	da800415 	stw	r10,16(sp)
   4dbe0:	3800401e 	bne	r7,zero,4dce4 <__udivdi3+0x150>
   4dbe4:	2a006536 	bltu	r5,r8,4dd7c <__udivdi3+0x1e8>
   4dbe8:	4000b526 	beq	r8,zero,4dec0 <__udivdi3+0x32c>
   4dbec:	00bfffd4 	movui	r2,65535
   4dbf0:	14c0ad36 	bltu	r2,r19,4dea8 <__udivdi3+0x314>
   4dbf4:	00803fc4 	movi	r2,255
   4dbf8:	14c15e36 	bltu	r2,r19,4e174 <__udivdi3+0x5e0>
   4dbfc:	000b883a 	mov	r5,zero
   4dc00:	0005883a 	mov	r2,zero
   4dc04:	9884d83a 	srl	r2,r19,r2
   4dc08:	01000174 	movhi	r4,5
   4dc0c:	210ee404 	addi	r4,r4,15248
   4dc10:	01800804 	movi	r6,32
   4dc14:	1105883a 	add	r2,r2,r4
   4dc18:	10c00003 	ldbu	r3,0(r2)
   4dc1c:	28c7883a 	add	r3,r5,r3
   4dc20:	30e9c83a 	sub	r20,r6,r3
   4dc24:	a0010a1e 	bne	r20,zero,4e050 <__udivdi3+0x4bc>
   4dc28:	982ed43a 	srli	r23,r19,16
   4dc2c:	acebc83a 	sub	r21,r21,r19
   4dc30:	9dbfffcc 	andi	r22,r19,65535
   4dc34:	05000044 	movi	r20,1
   4dc38:	a809883a 	mov	r4,r21
   4dc3c:	b80b883a 	mov	r5,r23
   4dc40:	004fd2c0 	call	4fd2c <__udivsi3>
   4dc44:	100b883a 	mov	r5,r2
   4dc48:	b009883a 	mov	r4,r22
   4dc4c:	1021883a 	mov	r16,r2
   4dc50:	004fd3c0 	call	4fd3c <__mulsi3>
   4dc54:	a809883a 	mov	r4,r21
   4dc58:	b80b883a 	mov	r5,r23
   4dc5c:	1023883a 	mov	r17,r2
   4dc60:	004fd340 	call	4fd34 <__umodsi3>
   4dc64:	1004943a 	slli	r2,r2,16
   4dc68:	e006d43a 	srli	r3,fp,16
   4dc6c:	10c4b03a 	or	r2,r2,r3
   4dc70:	1440042e 	bgeu	r2,r17,4dc84 <__udivdi3+0xf0>
   4dc74:	14c5883a 	add	r2,r2,r19
   4dc78:	843fffc4 	addi	r16,r16,-1
   4dc7c:	14c00136 	bltu	r2,r19,4dc84 <__udivdi3+0xf0>
   4dc80:	14415c36 	bltu	r2,r17,4e1f4 <__udivdi3+0x660>
   4dc84:	1463c83a 	sub	r17,r2,r17
   4dc88:	8809883a 	mov	r4,r17
   4dc8c:	b80b883a 	mov	r5,r23
   4dc90:	004fd2c0 	call	4fd2c <__udivsi3>
   4dc94:	100b883a 	mov	r5,r2
   4dc98:	b009883a 	mov	r4,r22
   4dc9c:	102b883a 	mov	r21,r2
   4dca0:	004fd3c0 	call	4fd3c <__mulsi3>
   4dca4:	8809883a 	mov	r4,r17
   4dca8:	b80b883a 	mov	r5,r23
   4dcac:	1025883a 	mov	r18,r2
   4dcb0:	004fd340 	call	4fd34 <__umodsi3>
   4dcb4:	1004943a 	slli	r2,r2,16
   4dcb8:	e0ffffcc 	andi	r3,fp,65535
   4dcbc:	10c4b03a 	or	r2,r2,r3
   4dcc0:	1480042e 	bgeu	r2,r18,4dcd4 <__udivdi3+0x140>
   4dcc4:	9885883a 	add	r2,r19,r2
   4dcc8:	ad7fffc4 	addi	r21,r21,-1
   4dccc:	14c00136 	bltu	r2,r19,4dcd4 <__udivdi3+0x140>
   4dcd0:	14813c36 	bltu	r2,r18,4e1c4 <__udivdi3+0x630>
   4dcd4:	8004943a 	slli	r2,r16,16
   4dcd8:	a009883a 	mov	r4,r20
   4dcdc:	a884b03a 	or	r2,r21,r2
   4dce0:	00001506 	br	4dd38 <__udivdi3+0x1a4>
   4dce4:	380d883a 	mov	r6,r7
   4dce8:	29c06c36 	bltu	r5,r7,4de9c <__udivdi3+0x308>
   4dcec:	00bfffd4 	movui	r2,65535
   4dcf0:	11c06436 	bltu	r2,r7,4de84 <__udivdi3+0x2f0>
   4dcf4:	00803fc4 	movi	r2,255
   4dcf8:	11c11836 	bltu	r2,r7,4e15c <__udivdi3+0x5c8>
   4dcfc:	000b883a 	mov	r5,zero
   4dd00:	0005883a 	mov	r2,zero
   4dd04:	3084d83a 	srl	r2,r6,r2
   4dd08:	01000174 	movhi	r4,5
   4dd0c:	210ee404 	addi	r4,r4,15248
   4dd10:	01c00804 	movi	r7,32
   4dd14:	1105883a 	add	r2,r2,r4
   4dd18:	10c00003 	ldbu	r3,0(r2)
   4dd1c:	28c7883a 	add	r3,r5,r3
   4dd20:	38edc83a 	sub	r22,r7,r3
   4dd24:	b000731e 	bne	r22,zero,4def4 <__udivdi3+0x360>
   4dd28:	35400136 	bltu	r6,r21,4dd30 <__udivdi3+0x19c>
   4dd2c:	e4c05b36 	bltu	fp,r19,4de9c <__udivdi3+0x308>
   4dd30:	00800044 	movi	r2,1
   4dd34:	0009883a 	mov	r4,zero
   4dd38:	d8800315 	stw	r2,12(sp)
   4dd3c:	d9400317 	ldw	r5,12(sp)
   4dd40:	2007883a 	mov	r3,r4
   4dd44:	d9000415 	stw	r4,16(sp)
   4dd48:	2805883a 	mov	r2,r5
   4dd4c:	dfc00e17 	ldw	ra,56(sp)
   4dd50:	df000d17 	ldw	fp,52(sp)
   4dd54:	ddc00c17 	ldw	r23,48(sp)
   4dd58:	dd800b17 	ldw	r22,44(sp)
   4dd5c:	dd400a17 	ldw	r21,40(sp)
   4dd60:	dd000917 	ldw	r20,36(sp)
   4dd64:	dcc00817 	ldw	r19,32(sp)
   4dd68:	dc800717 	ldw	r18,28(sp)
   4dd6c:	dc400617 	ldw	r17,24(sp)
   4dd70:	dc000517 	ldw	r16,20(sp)
   4dd74:	dec00f04 	addi	sp,sp,60
   4dd78:	f800283a 	ret
   4dd7c:	00bfffd4 	movui	r2,65535
   4dd80:	12005636 	bltu	r2,r8,4dedc <__udivdi3+0x348>
   4dd84:	00803fc4 	movi	r2,255
   4dd88:	12010036 	bltu	r2,r8,4e18c <__udivdi3+0x5f8>
   4dd8c:	000b883a 	mov	r5,zero
   4dd90:	0005883a 	mov	r2,zero
   4dd94:	9884d83a 	srl	r2,r19,r2
   4dd98:	01000174 	movhi	r4,5
   4dd9c:	210ee404 	addi	r4,r4,15248
   4dda0:	01800804 	movi	r6,32
   4dda4:	1105883a 	add	r2,r2,r4
   4dda8:	10c00003 	ldbu	r3,0(r2)
   4ddac:	28c7883a 	add	r3,r5,r3
   4ddb0:	30cbc83a 	sub	r5,r6,r3
   4ddb4:	28000626 	beq	r5,zero,4ddd0 <__udivdi3+0x23c>
   4ddb8:	3145c83a 	sub	r2,r6,r5
   4ddbc:	e084d83a 	srl	r2,fp,r2
   4ddc0:	a946983a 	sll	r3,r21,r5
   4ddc4:	e178983a 	sll	fp,fp,r5
   4ddc8:	9966983a 	sll	r19,r19,r5
   4ddcc:	18aab03a 	or	r21,r3,r2
   4ddd0:	982ed43a 	srli	r23,r19,16
   4ddd4:	a809883a 	mov	r4,r21
   4ddd8:	9cbfffcc 	andi	r18,r19,65535
   4dddc:	b80b883a 	mov	r5,r23
   4dde0:	004fd2c0 	call	4fd2c <__udivsi3>
   4dde4:	100b883a 	mov	r5,r2
   4dde8:	9009883a 	mov	r4,r18
   4ddec:	1021883a 	mov	r16,r2
   4ddf0:	004fd3c0 	call	4fd3c <__mulsi3>
   4ddf4:	a809883a 	mov	r4,r21
   4ddf8:	b80b883a 	mov	r5,r23
   4ddfc:	1023883a 	mov	r17,r2
   4de00:	004fd340 	call	4fd34 <__umodsi3>
   4de04:	1004943a 	slli	r2,r2,16
   4de08:	e006d43a 	srli	r3,fp,16
   4de0c:	10c4b03a 	or	r2,r2,r3
   4de10:	1440042e 	bgeu	r2,r17,4de24 <__udivdi3+0x290>
   4de14:	14c5883a 	add	r2,r2,r19
   4de18:	843fffc4 	addi	r16,r16,-1
   4de1c:	14c00136 	bltu	r2,r19,4de24 <__udivdi3+0x290>
   4de20:	1440ea36 	bltu	r2,r17,4e1cc <__udivdi3+0x638>
   4de24:	1463c83a 	sub	r17,r2,r17
   4de28:	8809883a 	mov	r4,r17
   4de2c:	b80b883a 	mov	r5,r23
   4de30:	004fd2c0 	call	4fd2c <__udivsi3>
   4de34:	100b883a 	mov	r5,r2
   4de38:	9009883a 	mov	r4,r18
   4de3c:	102b883a 	mov	r21,r2
   4de40:	004fd3c0 	call	4fd3c <__mulsi3>
   4de44:	8809883a 	mov	r4,r17
   4de48:	b80b883a 	mov	r5,r23
   4de4c:	1025883a 	mov	r18,r2
   4de50:	004fd340 	call	4fd34 <__umodsi3>
   4de54:	1004943a 	slli	r2,r2,16
   4de58:	e0ffffcc 	andi	r3,fp,65535
   4de5c:	10c4b03a 	or	r2,r2,r3
   4de60:	1480042e 	bgeu	r2,r18,4de74 <__udivdi3+0x2e0>
   4de64:	9885883a 	add	r2,r19,r2
   4de68:	ad7fffc4 	addi	r21,r21,-1
   4de6c:	14c00136 	bltu	r2,r19,4de74 <__udivdi3+0x2e0>
   4de70:	1480d936 	bltu	r2,r18,4e1d8 <__udivdi3+0x644>
   4de74:	8004943a 	slli	r2,r16,16
   4de78:	0009883a 	mov	r4,zero
   4de7c:	a884b03a 	or	r2,r21,r2
   4de80:	003fad06 	br	4dd38 <__udivdi3+0x1a4>
   4de84:	00804034 	movhi	r2,256
   4de88:	10bfffc4 	addi	r2,r2,-1
   4de8c:	11c0b636 	bltu	r2,r7,4e168 <__udivdi3+0x5d4>
   4de90:	01400404 	movi	r5,16
   4de94:	2805883a 	mov	r2,r5
   4de98:	003f9a06 	br	4dd04 <__udivdi3+0x170>
   4de9c:	0005883a 	mov	r2,zero
   4dea0:	0009883a 	mov	r4,zero
   4dea4:	003fa406 	br	4dd38 <__udivdi3+0x1a4>
   4dea8:	00804034 	movhi	r2,256
   4deac:	10bfffc4 	addi	r2,r2,-1
   4deb0:	14c0b336 	bltu	r2,r19,4e180 <__udivdi3+0x5ec>
   4deb4:	01400404 	movi	r5,16
   4deb8:	2805883a 	mov	r2,r5
   4debc:	003f5106 	br	4dc04 <__udivdi3+0x70>
   4dec0:	01000044 	movi	r4,1
   4dec4:	000b883a 	mov	r5,zero
   4dec8:	004fd2c0 	call	4fd2c <__udivsi3>
   4decc:	1027883a 	mov	r19,r2
   4ded0:	00bfffd4 	movui	r2,65535
   4ded4:	14fff436 	bltu	r2,r19,4dea8 <__udivdi3+0x314>
   4ded8:	003f4606 	br	4dbf4 <__udivdi3+0x60>
   4dedc:	00804034 	movhi	r2,256
   4dee0:	10bfffc4 	addi	r2,r2,-1
   4dee4:	1200ac36 	bltu	r2,r8,4e198 <__udivdi3+0x604>
   4dee8:	01400404 	movi	r5,16
   4deec:	2805883a 	mov	r2,r5
   4def0:	003fa806 	br	4dd94 <__udivdi3+0x200>
   4def4:	3d85c83a 	sub	r2,r7,r22
   4def8:	3588983a 	sll	r4,r6,r22
   4defc:	9886d83a 	srl	r3,r19,r2
   4df00:	a8a2d83a 	srl	r17,r21,r2
   4df04:	e084d83a 	srl	r2,fp,r2
   4df08:	20eeb03a 	or	r23,r4,r3
   4df0c:	b824d43a 	srli	r18,r23,16
   4df10:	ad86983a 	sll	r3,r21,r22
   4df14:	8809883a 	mov	r4,r17
   4df18:	900b883a 	mov	r5,r18
   4df1c:	1886b03a 	or	r3,r3,r2
   4df20:	d8c00115 	stw	r3,4(sp)
   4df24:	bc3fffcc 	andi	r16,r23,65535
   4df28:	004fd2c0 	call	4fd2c <__udivsi3>
   4df2c:	100b883a 	mov	r5,r2
   4df30:	8009883a 	mov	r4,r16
   4df34:	1029883a 	mov	r20,r2
   4df38:	004fd3c0 	call	4fd3c <__mulsi3>
   4df3c:	900b883a 	mov	r5,r18
   4df40:	8809883a 	mov	r4,r17
   4df44:	102b883a 	mov	r21,r2
   4df48:	004fd340 	call	4fd34 <__umodsi3>
   4df4c:	d9400117 	ldw	r5,4(sp)
   4df50:	1004943a 	slli	r2,r2,16
   4df54:	9da6983a 	sll	r19,r19,r22
   4df58:	2806d43a 	srli	r3,r5,16
   4df5c:	10c4b03a 	or	r2,r2,r3
   4df60:	1540032e 	bgeu	r2,r21,4df70 <__udivdi3+0x3dc>
   4df64:	15c5883a 	add	r2,r2,r23
   4df68:	a53fffc4 	addi	r20,r20,-1
   4df6c:	15c0912e 	bgeu	r2,r23,4e1b4 <__udivdi3+0x620>
   4df70:	1563c83a 	sub	r17,r2,r21
   4df74:	8809883a 	mov	r4,r17
   4df78:	900b883a 	mov	r5,r18
   4df7c:	004fd2c0 	call	4fd2c <__udivsi3>
   4df80:	100b883a 	mov	r5,r2
   4df84:	8009883a 	mov	r4,r16
   4df88:	102b883a 	mov	r21,r2
   4df8c:	004fd3c0 	call	4fd3c <__mulsi3>
   4df90:	8809883a 	mov	r4,r17
   4df94:	900b883a 	mov	r5,r18
   4df98:	1021883a 	mov	r16,r2
   4df9c:	004fd340 	call	4fd34 <__umodsi3>
   4dfa0:	da800117 	ldw	r10,4(sp)
   4dfa4:	1004943a 	slli	r2,r2,16
   4dfa8:	50ffffcc 	andi	r3,r10,65535
   4dfac:	10c6b03a 	or	r3,r2,r3
   4dfb0:	1c00032e 	bgeu	r3,r16,4dfc0 <__udivdi3+0x42c>
   4dfb4:	1dc7883a 	add	r3,r3,r23
   4dfb8:	ad7fffc4 	addi	r21,r21,-1
   4dfbc:	1dc0792e 	bgeu	r3,r23,4e1a4 <__udivdi3+0x610>
   4dfc0:	a004943a 	slli	r2,r20,16
   4dfc4:	982ed43a 	srli	r23,r19,16
   4dfc8:	9cffffcc 	andi	r19,r19,65535
   4dfcc:	a8a4b03a 	or	r18,r21,r2
   4dfd0:	947fffcc 	andi	r17,r18,65535
   4dfd4:	902ad43a 	srli	r21,r18,16
   4dfd8:	8809883a 	mov	r4,r17
   4dfdc:	980b883a 	mov	r5,r19
   4dfe0:	1c21c83a 	sub	r16,r3,r16
   4dfe4:	004fd3c0 	call	4fd3c <__mulsi3>
   4dfe8:	8809883a 	mov	r4,r17
   4dfec:	b80b883a 	mov	r5,r23
   4dff0:	1029883a 	mov	r20,r2
   4dff4:	004fd3c0 	call	4fd3c <__mulsi3>
   4dff8:	980b883a 	mov	r5,r19
   4dffc:	a809883a 	mov	r4,r21
   4e000:	1023883a 	mov	r17,r2
   4e004:	004fd3c0 	call	4fd3c <__mulsi3>
   4e008:	a809883a 	mov	r4,r21
   4e00c:	b80b883a 	mov	r5,r23
   4e010:	1027883a 	mov	r19,r2
   4e014:	004fd3c0 	call	4fd3c <__mulsi3>
   4e018:	1009883a 	mov	r4,r2
   4e01c:	a004d43a 	srli	r2,r20,16
   4e020:	8ce3883a 	add	r17,r17,r19
   4e024:	1447883a 	add	r3,r2,r17
   4e028:	1cc0022e 	bgeu	r3,r19,4e034 <__udivdi3+0x4a0>
   4e02c:	00800074 	movhi	r2,1
   4e030:	2089883a 	add	r4,r4,r2
   4e034:	1804d43a 	srli	r2,r3,16
   4e038:	2085883a 	add	r2,r4,r2
   4e03c:	80804436 	bltu	r16,r2,4e150 <__udivdi3+0x5bc>
   4e040:	80803e26 	beq	r16,r2,4e13c <__udivdi3+0x5a8>
   4e044:	9005883a 	mov	r2,r18
   4e048:	0009883a 	mov	r4,zero
   4e04c:	003f3a06 	br	4dd38 <__udivdi3+0x1a4>
   4e050:	9d26983a 	sll	r19,r19,r20
   4e054:	3505c83a 	sub	r2,r6,r20
   4e058:	a8a2d83a 	srl	r17,r21,r2
   4e05c:	982ed43a 	srli	r23,r19,16
   4e060:	e084d83a 	srl	r2,fp,r2
   4e064:	ad06983a 	sll	r3,r21,r20
   4e068:	8809883a 	mov	r4,r17
   4e06c:	b80b883a 	mov	r5,r23
   4e070:	1886b03a 	or	r3,r3,r2
   4e074:	d8c00015 	stw	r3,0(sp)
   4e078:	9dbfffcc 	andi	r22,r19,65535
   4e07c:	004fd2c0 	call	4fd2c <__udivsi3>
   4e080:	100b883a 	mov	r5,r2
   4e084:	b009883a 	mov	r4,r22
   4e088:	d8800215 	stw	r2,8(sp)
   4e08c:	004fd3c0 	call	4fd3c <__mulsi3>
   4e090:	8809883a 	mov	r4,r17
   4e094:	b80b883a 	mov	r5,r23
   4e098:	102b883a 	mov	r21,r2
   4e09c:	004fd340 	call	4fd34 <__umodsi3>
   4e0a0:	d9000017 	ldw	r4,0(sp)
   4e0a4:	1004943a 	slli	r2,r2,16
   4e0a8:	2006d43a 	srli	r3,r4,16
   4e0ac:	10c4b03a 	or	r2,r2,r3
   4e0b0:	1540052e 	bgeu	r2,r21,4e0c8 <__udivdi3+0x534>
   4e0b4:	d9400217 	ldw	r5,8(sp)
   4e0b8:	14c5883a 	add	r2,r2,r19
   4e0bc:	297fffc4 	addi	r5,r5,-1
   4e0c0:	d9400215 	stw	r5,8(sp)
   4e0c4:	14c0462e 	bgeu	r2,r19,4e1e0 <__udivdi3+0x64c>
   4e0c8:	1563c83a 	sub	r17,r2,r21
   4e0cc:	8809883a 	mov	r4,r17
   4e0d0:	b80b883a 	mov	r5,r23
   4e0d4:	004fd2c0 	call	4fd2c <__udivsi3>
   4e0d8:	100b883a 	mov	r5,r2
   4e0dc:	b009883a 	mov	r4,r22
   4e0e0:	1025883a 	mov	r18,r2
   4e0e4:	004fd3c0 	call	4fd3c <__mulsi3>
   4e0e8:	8809883a 	mov	r4,r17
   4e0ec:	b80b883a 	mov	r5,r23
   4e0f0:	1021883a 	mov	r16,r2
   4e0f4:	004fd340 	call	4fd34 <__umodsi3>
   4e0f8:	da800017 	ldw	r10,0(sp)
   4e0fc:	1004943a 	slli	r2,r2,16
   4e100:	50ffffcc 	andi	r3,r10,65535
   4e104:	10c6b03a 	or	r3,r2,r3
   4e108:	1c00062e 	bgeu	r3,r16,4e124 <__udivdi3+0x590>
   4e10c:	1cc7883a 	add	r3,r3,r19
   4e110:	94bfffc4 	addi	r18,r18,-1
   4e114:	1cc00336 	bltu	r3,r19,4e124 <__udivdi3+0x590>
   4e118:	1c00022e 	bgeu	r3,r16,4e124 <__udivdi3+0x590>
   4e11c:	94bfffc4 	addi	r18,r18,-1
   4e120:	1cc7883a 	add	r3,r3,r19
   4e124:	d9000217 	ldw	r4,8(sp)
   4e128:	e538983a 	sll	fp,fp,r20
   4e12c:	1c2bc83a 	sub	r21,r3,r16
   4e130:	2004943a 	slli	r2,r4,16
   4e134:	90a8b03a 	or	r20,r18,r2
   4e138:	003ebf06 	br	4dc38 <__udivdi3+0xa4>
   4e13c:	1804943a 	slli	r2,r3,16
   4e140:	e588983a 	sll	r4,fp,r22
   4e144:	a0ffffcc 	andi	r3,r20,65535
   4e148:	10c5883a 	add	r2,r2,r3
   4e14c:	20bfbd2e 	bgeu	r4,r2,4e044 <__udivdi3+0x4b0>
   4e150:	90bfffc4 	addi	r2,r18,-1
   4e154:	0009883a 	mov	r4,zero
   4e158:	003ef706 	br	4dd38 <__udivdi3+0x1a4>
   4e15c:	01400204 	movi	r5,8
   4e160:	2805883a 	mov	r2,r5
   4e164:	003ee706 	br	4dd04 <__udivdi3+0x170>
   4e168:	01400604 	movi	r5,24
   4e16c:	2805883a 	mov	r2,r5
   4e170:	003ee406 	br	4dd04 <__udivdi3+0x170>
   4e174:	01400204 	movi	r5,8
   4e178:	2805883a 	mov	r2,r5
   4e17c:	003ea106 	br	4dc04 <__udivdi3+0x70>
   4e180:	01400604 	movi	r5,24
   4e184:	2805883a 	mov	r2,r5
   4e188:	003e9e06 	br	4dc04 <__udivdi3+0x70>
   4e18c:	01400204 	movi	r5,8
   4e190:	2805883a 	mov	r2,r5
   4e194:	003eff06 	br	4dd94 <__udivdi3+0x200>
   4e198:	01400604 	movi	r5,24
   4e19c:	2805883a 	mov	r2,r5
   4e1a0:	003efc06 	br	4dd94 <__udivdi3+0x200>
   4e1a4:	1c3f862e 	bgeu	r3,r16,4dfc0 <__udivdi3+0x42c>
   4e1a8:	1dc7883a 	add	r3,r3,r23
   4e1ac:	ad7fffc4 	addi	r21,r21,-1
   4e1b0:	003f8306 	br	4dfc0 <__udivdi3+0x42c>
   4e1b4:	157f6e2e 	bgeu	r2,r21,4df70 <__udivdi3+0x3dc>
   4e1b8:	a53fffc4 	addi	r20,r20,-1
   4e1bc:	15c5883a 	add	r2,r2,r23
   4e1c0:	003f6b06 	br	4df70 <__udivdi3+0x3dc>
   4e1c4:	ad7fffc4 	addi	r21,r21,-1
   4e1c8:	003ec206 	br	4dcd4 <__udivdi3+0x140>
   4e1cc:	843fffc4 	addi	r16,r16,-1
   4e1d0:	14c5883a 	add	r2,r2,r19
   4e1d4:	003f1306 	br	4de24 <__udivdi3+0x290>
   4e1d8:	ad7fffc4 	addi	r21,r21,-1
   4e1dc:	003f2506 	br	4de74 <__udivdi3+0x2e0>
   4e1e0:	157fb92e 	bgeu	r2,r21,4e0c8 <__udivdi3+0x534>
   4e1e4:	297fffc4 	addi	r5,r5,-1
   4e1e8:	14c5883a 	add	r2,r2,r19
   4e1ec:	d9400215 	stw	r5,8(sp)
   4e1f0:	003fb506 	br	4e0c8 <__udivdi3+0x534>
   4e1f4:	843fffc4 	addi	r16,r16,-1
   4e1f8:	14c5883a 	add	r2,r2,r19
   4e1fc:	003ea106 	br	4dc84 <__udivdi3+0xf0>

0004e200 <__umoddi3>:
   4e200:	defff004 	addi	sp,sp,-64
   4e204:	3011883a 	mov	r8,r6
   4e208:	000d883a 	mov	r6,zero
   4e20c:	dd400b15 	stw	r21,44(sp)
   4e210:	dcc00915 	stw	r19,36(sp)
   4e214:	dc000615 	stw	r16,24(sp)
   4e218:	dfc00f15 	stw	ra,60(sp)
   4e21c:	df000e15 	stw	fp,56(sp)
   4e220:	ddc00d15 	stw	r23,52(sp)
   4e224:	dd800c15 	stw	r22,48(sp)
   4e228:	dd000a15 	stw	r20,40(sp)
   4e22c:	dc800815 	stw	r18,32(sp)
   4e230:	dc400715 	stw	r17,28(sp)
   4e234:	2817883a 	mov	r11,r5
   4e238:	d9800415 	stw	r6,16(sp)
   4e23c:	4027883a 	mov	r19,r8
   4e240:	d9800515 	stw	r6,20(sp)
   4e244:	2021883a 	mov	r16,r4
   4e248:	282b883a 	mov	r21,r5
   4e24c:	38002c1e 	bne	r7,zero,4e300 <__umoddi3+0x100>
   4e250:	2a005636 	bltu	r5,r8,4e3ac <__umoddi3+0x1ac>
   4e254:	40009a26 	beq	r8,zero,4e4c0 <__umoddi3+0x2c0>
   4e258:	00bfffd4 	movui	r2,65535
   4e25c:	14c09236 	bltu	r2,r19,4e4a8 <__umoddi3+0x2a8>
   4e260:	00803fc4 	movi	r2,255
   4e264:	14c15c36 	bltu	r2,r19,4e7d8 <__umoddi3+0x5d8>
   4e268:	000b883a 	mov	r5,zero
   4e26c:	0005883a 	mov	r2,zero
   4e270:	9884d83a 	srl	r2,r19,r2
   4e274:	01000174 	movhi	r4,5
   4e278:	210ee404 	addi	r4,r4,15248
   4e27c:	01800804 	movi	r6,32
   4e280:	1105883a 	add	r2,r2,r4
   4e284:	10c00003 	ldbu	r3,0(r2)
   4e288:	28c7883a 	add	r3,r5,r3
   4e28c:	30e5c83a 	sub	r18,r6,r3
   4e290:	9000a41e 	bne	r18,zero,4e524 <__umoddi3+0x324>
   4e294:	982ed43a 	srli	r23,r19,16
   4e298:	acebc83a 	sub	r21,r21,r19
   4e29c:	9d3fffcc 	andi	r20,r19,65535
   4e2a0:	002d883a 	mov	r22,zero
   4e2a4:	a809883a 	mov	r4,r21
   4e2a8:	b80b883a 	mov	r5,r23
   4e2ac:	004fd2c0 	call	4fd2c <__udivsi3>
   4e2b0:	100b883a 	mov	r5,r2
   4e2b4:	a009883a 	mov	r4,r20
   4e2b8:	004fd3c0 	call	4fd3c <__mulsi3>
   4e2bc:	a809883a 	mov	r4,r21
   4e2c0:	b80b883a 	mov	r5,r23
   4e2c4:	1023883a 	mov	r17,r2
   4e2c8:	004fd340 	call	4fd34 <__umodsi3>
   4e2cc:	1004943a 	slli	r2,r2,16
   4e2d0:	8006d43a 	srli	r3,r16,16
   4e2d4:	10c4b03a 	or	r2,r2,r3
   4e2d8:	1440032e 	bgeu	r2,r17,4e2e8 <__umoddi3+0xe8>
   4e2dc:	14c5883a 	add	r2,r2,r19
   4e2e0:	14c00136 	bltu	r2,r19,4e2e8 <__umoddi3+0xe8>
   4e2e4:	14415836 	bltu	r2,r17,4e848 <__umoddi3+0x648>
   4e2e8:	1463c83a 	sub	r17,r2,r17
   4e2ec:	8809883a 	mov	r4,r17
   4e2f0:	b80b883a 	mov	r5,r23
   4e2f4:	004fd2c0 	call	4fd2c <__udivsi3>
   4e2f8:	a009883a 	mov	r4,r20
   4e2fc:	00005306 	br	4e44c <__umoddi3+0x24c>
   4e300:	380d883a 	mov	r6,r7
   4e304:	29c0132e 	bgeu	r5,r7,4e354 <__umoddi3+0x154>
   4e308:	d9000415 	stw	r4,16(sp)
   4e30c:	d9400515 	stw	r5,20(sp)
   4e310:	d9400417 	ldw	r5,16(sp)
   4e314:	5813883a 	mov	r9,r11
   4e318:	2811883a 	mov	r8,r5
   4e31c:	4005883a 	mov	r2,r8
   4e320:	4807883a 	mov	r3,r9
   4e324:	dfc00f17 	ldw	ra,60(sp)
   4e328:	df000e17 	ldw	fp,56(sp)
   4e32c:	ddc00d17 	ldw	r23,52(sp)
   4e330:	dd800c17 	ldw	r22,48(sp)
   4e334:	dd400b17 	ldw	r21,44(sp)
   4e338:	dd000a17 	ldw	r20,40(sp)
   4e33c:	dcc00917 	ldw	r19,36(sp)
   4e340:	dc800817 	ldw	r18,32(sp)
   4e344:	dc400717 	ldw	r17,28(sp)
   4e348:	dc000617 	ldw	r16,24(sp)
   4e34c:	dec01004 	addi	sp,sp,64
   4e350:	f800283a 	ret
   4e354:	00bfffd4 	movui	r2,65535
   4e358:	11c06636 	bltu	r2,r7,4e4f4 <__umoddi3+0x2f4>
   4e35c:	00803fc4 	movi	r2,255
   4e360:	11c12036 	bltu	r2,r7,4e7e4 <__umoddi3+0x5e4>
   4e364:	000b883a 	mov	r5,zero
   4e368:	0005883a 	mov	r2,zero
   4e36c:	3084d83a 	srl	r2,r6,r2
   4e370:	01000174 	movhi	r4,5
   4e374:	210ee404 	addi	r4,r4,15248
   4e378:	01c00804 	movi	r7,32
   4e37c:	1105883a 	add	r2,r2,r4
   4e380:	10c00003 	ldbu	r3,0(r2)
   4e384:	28c7883a 	add	r3,r5,r3
   4e388:	38e5c83a 	sub	r18,r7,r3
   4e38c:	9000941e 	bne	r18,zero,4e5e0 <__umoddi3+0x3e0>
   4e390:	35405e36 	bltu	r6,r21,4e50c <__umoddi3+0x30c>
   4e394:	84c05d2e 	bgeu	r16,r19,4e50c <__umoddi3+0x30c>
   4e398:	8011883a 	mov	r8,r16
   4e39c:	a813883a 	mov	r9,r21
   4e3a0:	dc000415 	stw	r16,16(sp)
   4e3a4:	dd400515 	stw	r21,20(sp)
   4e3a8:	003fdc06 	br	4e31c <__umoddi3+0x11c>
   4e3ac:	00bfffd4 	movui	r2,65535
   4e3b0:	12004a36 	bltu	r2,r8,4e4dc <__umoddi3+0x2dc>
   4e3b4:	00803fc4 	movi	r2,255
   4e3b8:	12010d36 	bltu	r2,r8,4e7f0 <__umoddi3+0x5f0>
   4e3bc:	000b883a 	mov	r5,zero
   4e3c0:	0005883a 	mov	r2,zero
   4e3c4:	9884d83a 	srl	r2,r19,r2
   4e3c8:	01000174 	movhi	r4,5
   4e3cc:	210ee404 	addi	r4,r4,15248
   4e3d0:	01800804 	movi	r6,32
   4e3d4:	1105883a 	add	r2,r2,r4
   4e3d8:	10c00003 	ldbu	r3,0(r2)
   4e3dc:	28c7883a 	add	r3,r5,r3
   4e3e0:	30c7c83a 	sub	r3,r6,r3
   4e3e4:	1800dc1e 	bne	r3,zero,4e758 <__umoddi3+0x558>
   4e3e8:	002d883a 	mov	r22,zero
   4e3ec:	982ed43a 	srli	r23,r19,16
   4e3f0:	a809883a 	mov	r4,r21
   4e3f4:	9cbfffcc 	andi	r18,r19,65535
   4e3f8:	b80b883a 	mov	r5,r23
   4e3fc:	004fd2c0 	call	4fd2c <__udivsi3>
   4e400:	100b883a 	mov	r5,r2
   4e404:	9009883a 	mov	r4,r18
   4e408:	004fd3c0 	call	4fd3c <__mulsi3>
   4e40c:	a809883a 	mov	r4,r21
   4e410:	b80b883a 	mov	r5,r23
   4e414:	1023883a 	mov	r17,r2
   4e418:	004fd340 	call	4fd34 <__umodsi3>
   4e41c:	1004943a 	slli	r2,r2,16
   4e420:	8006d43a 	srli	r3,r16,16
   4e424:	10c4b03a 	or	r2,r2,r3
   4e428:	1440032e 	bgeu	r2,r17,4e438 <__umoddi3+0x238>
   4e42c:	14c5883a 	add	r2,r2,r19
   4e430:	14c00136 	bltu	r2,r19,4e438 <__umoddi3+0x238>
   4e434:	14410236 	bltu	r2,r17,4e840 <__umoddi3+0x640>
   4e438:	1463c83a 	sub	r17,r2,r17
   4e43c:	8809883a 	mov	r4,r17
   4e440:	b80b883a 	mov	r5,r23
   4e444:	004fd2c0 	call	4fd2c <__udivsi3>
   4e448:	9009883a 	mov	r4,r18
   4e44c:	100b883a 	mov	r5,r2
   4e450:	004fd3c0 	call	4fd3c <__mulsi3>
   4e454:	8809883a 	mov	r4,r17
   4e458:	b80b883a 	mov	r5,r23
   4e45c:	102b883a 	mov	r21,r2
   4e460:	004fd340 	call	4fd34 <__umodsi3>
   4e464:	1004943a 	slli	r2,r2,16
   4e468:	80ffffcc 	andi	r3,r16,65535
   4e46c:	10c4b03a 	or	r2,r2,r3
   4e470:	1540042e 	bgeu	r2,r21,4e484 <__umoddi3+0x284>
   4e474:	14c5883a 	add	r2,r2,r19
   4e478:	14c00236 	bltu	r2,r19,4e484 <__umoddi3+0x284>
   4e47c:	1540012e 	bgeu	r2,r21,4e484 <__umoddi3+0x284>
   4e480:	14c5883a 	add	r2,r2,r19
   4e484:	1545c83a 	sub	r2,r2,r21
   4e488:	1584d83a 	srl	r2,r2,r22
   4e48c:	0013883a 	mov	r9,zero
   4e490:	d8800415 	stw	r2,16(sp)
   4e494:	d8c00417 	ldw	r3,16(sp)
   4e498:	0005883a 	mov	r2,zero
   4e49c:	d8800515 	stw	r2,20(sp)
   4e4a0:	1811883a 	mov	r8,r3
   4e4a4:	003f9d06 	br	4e31c <__umoddi3+0x11c>
   4e4a8:	00804034 	movhi	r2,256
   4e4ac:	10bfffc4 	addi	r2,r2,-1
   4e4b0:	14c0c636 	bltu	r2,r19,4e7cc <__umoddi3+0x5cc>
   4e4b4:	01400404 	movi	r5,16
   4e4b8:	2805883a 	mov	r2,r5
   4e4bc:	003f6c06 	br	4e270 <__umoddi3+0x70>
   4e4c0:	01000044 	movi	r4,1
   4e4c4:	000b883a 	mov	r5,zero
   4e4c8:	004fd2c0 	call	4fd2c <__udivsi3>
   4e4cc:	1027883a 	mov	r19,r2
   4e4d0:	00bfffd4 	movui	r2,65535
   4e4d4:	14fff436 	bltu	r2,r19,4e4a8 <__umoddi3+0x2a8>
   4e4d8:	003f6106 	br	4e260 <__umoddi3+0x60>
   4e4dc:	00804034 	movhi	r2,256
   4e4e0:	10bfffc4 	addi	r2,r2,-1
   4e4e4:	1200c536 	bltu	r2,r8,4e7fc <__umoddi3+0x5fc>
   4e4e8:	01400404 	movi	r5,16
   4e4ec:	2805883a 	mov	r2,r5
   4e4f0:	003fb406 	br	4e3c4 <__umoddi3+0x1c4>
   4e4f4:	00804034 	movhi	r2,256
   4e4f8:	10bfffc4 	addi	r2,r2,-1
   4e4fc:	11c0c236 	bltu	r2,r7,4e808 <__umoddi3+0x608>
   4e500:	01400404 	movi	r5,16
   4e504:	2805883a 	mov	r2,r5
   4e508:	003f9806 	br	4e36c <__umoddi3+0x16c>
   4e50c:	84c9c83a 	sub	r4,r16,r19
   4e510:	8105803a 	cmpltu	r2,r16,r4
   4e514:	a987c83a 	sub	r3,r21,r6
   4e518:	18abc83a 	sub	r21,r3,r2
   4e51c:	2021883a 	mov	r16,r4
   4e520:	003f9d06 	br	4e398 <__umoddi3+0x198>
   4e524:	9ca6983a 	sll	r19,r19,r18
   4e528:	3485c83a 	sub	r2,r6,r18
   4e52c:	a8a2d83a 	srl	r17,r21,r2
   4e530:	982ed43a 	srli	r23,r19,16
   4e534:	ac86983a 	sll	r3,r21,r18
   4e538:	8084d83a 	srl	r2,r16,r2
   4e53c:	8809883a 	mov	r4,r17
   4e540:	b80b883a 	mov	r5,r23
   4e544:	18b8b03a 	or	fp,r3,r2
   4e548:	9d3fffcc 	andi	r20,r19,65535
   4e54c:	004fd2c0 	call	4fd2c <__udivsi3>
   4e550:	100b883a 	mov	r5,r2
   4e554:	a009883a 	mov	r4,r20
   4e558:	004fd3c0 	call	4fd3c <__mulsi3>
   4e55c:	8809883a 	mov	r4,r17
   4e560:	b80b883a 	mov	r5,r23
   4e564:	102b883a 	mov	r21,r2
   4e568:	004fd340 	call	4fd34 <__umodsi3>
   4e56c:	1004943a 	slli	r2,r2,16
   4e570:	e006d43a 	srli	r3,fp,16
   4e574:	902d883a 	mov	r22,r18
   4e578:	10c4b03a 	or	r2,r2,r3
   4e57c:	1540022e 	bgeu	r2,r21,4e588 <__umoddi3+0x388>
   4e580:	14c5883a 	add	r2,r2,r19
   4e584:	14c0ab2e 	bgeu	r2,r19,4e834 <__umoddi3+0x634>
   4e588:	1563c83a 	sub	r17,r2,r21
   4e58c:	8809883a 	mov	r4,r17
   4e590:	b80b883a 	mov	r5,r23
   4e594:	004fd2c0 	call	4fd2c <__udivsi3>
   4e598:	100b883a 	mov	r5,r2
   4e59c:	a009883a 	mov	r4,r20
   4e5a0:	004fd3c0 	call	4fd3c <__mulsi3>
   4e5a4:	8809883a 	mov	r4,r17
   4e5a8:	b80b883a 	mov	r5,r23
   4e5ac:	102b883a 	mov	r21,r2
   4e5b0:	004fd340 	call	4fd34 <__umodsi3>
   4e5b4:	1004943a 	slli	r2,r2,16
   4e5b8:	e0ffffcc 	andi	r3,fp,65535
   4e5bc:	10c4b03a 	or	r2,r2,r3
   4e5c0:	1540042e 	bgeu	r2,r21,4e5d4 <__umoddi3+0x3d4>
   4e5c4:	14c5883a 	add	r2,r2,r19
   4e5c8:	14c00236 	bltu	r2,r19,4e5d4 <__umoddi3+0x3d4>
   4e5cc:	1540012e 	bgeu	r2,r21,4e5d4 <__umoddi3+0x3d4>
   4e5d0:	14c5883a 	add	r2,r2,r19
   4e5d4:	84a0983a 	sll	r16,r16,r18
   4e5d8:	156bc83a 	sub	r21,r2,r21
   4e5dc:	003f3106 	br	4e2a4 <__umoddi3+0xa4>
   4e5e0:	3c8fc83a 	sub	r7,r7,r18
   4e5e4:	3486983a 	sll	r3,r6,r18
   4e5e8:	99c4d83a 	srl	r2,r19,r7
   4e5ec:	a9e2d83a 	srl	r17,r21,r7
   4e5f0:	ac8c983a 	sll	r6,r21,r18
   4e5f4:	18acb03a 	or	r22,r3,r2
   4e5f8:	b02ed43a 	srli	r23,r22,16
   4e5fc:	81c4d83a 	srl	r2,r16,r7
   4e600:	8809883a 	mov	r4,r17
   4e604:	b80b883a 	mov	r5,r23
   4e608:	308cb03a 	or	r6,r6,r2
   4e60c:	d9c00315 	stw	r7,12(sp)
   4e610:	d9800215 	stw	r6,8(sp)
   4e614:	b53fffcc 	andi	r20,r22,65535
   4e618:	004fd2c0 	call	4fd2c <__udivsi3>
   4e61c:	100b883a 	mov	r5,r2
   4e620:	a009883a 	mov	r4,r20
   4e624:	1039883a 	mov	fp,r2
   4e628:	004fd3c0 	call	4fd3c <__mulsi3>
   4e62c:	8809883a 	mov	r4,r17
   4e630:	b80b883a 	mov	r5,r23
   4e634:	102b883a 	mov	r21,r2
   4e638:	004fd340 	call	4fd34 <__umodsi3>
   4e63c:	d9000217 	ldw	r4,8(sp)
   4e640:	1004943a 	slli	r2,r2,16
   4e644:	9ca6983a 	sll	r19,r19,r18
   4e648:	2006d43a 	srli	r3,r4,16
   4e64c:	84a0983a 	sll	r16,r16,r18
   4e650:	dcc00015 	stw	r19,0(sp)
   4e654:	10c4b03a 	or	r2,r2,r3
   4e658:	dc000115 	stw	r16,4(sp)
   4e65c:	1540032e 	bgeu	r2,r21,4e66c <__umoddi3+0x46c>
   4e660:	1585883a 	add	r2,r2,r22
   4e664:	e73fffc4 	addi	fp,fp,-1
   4e668:	15806e2e 	bgeu	r2,r22,4e824 <__umoddi3+0x624>
   4e66c:	1563c83a 	sub	r17,r2,r21
   4e670:	8809883a 	mov	r4,r17
   4e674:	b80b883a 	mov	r5,r23
   4e678:	004fd2c0 	call	4fd2c <__udivsi3>
   4e67c:	100b883a 	mov	r5,r2
   4e680:	a009883a 	mov	r4,r20
   4e684:	1021883a 	mov	r16,r2
   4e688:	004fd3c0 	call	4fd3c <__mulsi3>
   4e68c:	b80b883a 	mov	r5,r23
   4e690:	8809883a 	mov	r4,r17
   4e694:	1029883a 	mov	r20,r2
   4e698:	004fd340 	call	4fd34 <__umodsi3>
   4e69c:	d9400217 	ldw	r5,8(sp)
   4e6a0:	1004943a 	slli	r2,r2,16
   4e6a4:	28ffffcc 	andi	r3,r5,65535
   4e6a8:	10c4b03a 	or	r2,r2,r3
   4e6ac:	1500032e 	bgeu	r2,r20,4e6bc <__umoddi3+0x4bc>
   4e6b0:	1585883a 	add	r2,r2,r22
   4e6b4:	843fffc4 	addi	r16,r16,-1
   4e6b8:	1580562e 	bgeu	r2,r22,4e814 <__umoddi3+0x614>
   4e6bc:	d9800017 	ldw	r6,0(sp)
   4e6c0:	e022943a 	slli	r17,fp,16
   4e6c4:	302ed43a 	srli	r23,r6,16
   4e6c8:	8462b03a 	or	r17,r16,r17
   4e6cc:	34ffffcc 	andi	r19,r6,65535
   4e6d0:	882ad43a 	srli	r21,r17,16
   4e6d4:	8c7fffcc 	andi	r17,r17,65535
   4e6d8:	8809883a 	mov	r4,r17
   4e6dc:	980b883a 	mov	r5,r19
   4e6e0:	1521c83a 	sub	r16,r2,r20
   4e6e4:	004fd3c0 	call	4fd3c <__mulsi3>
   4e6e8:	8809883a 	mov	r4,r17
   4e6ec:	b80b883a 	mov	r5,r23
   4e6f0:	1029883a 	mov	r20,r2
   4e6f4:	004fd3c0 	call	4fd3c <__mulsi3>
   4e6f8:	980b883a 	mov	r5,r19
   4e6fc:	a809883a 	mov	r4,r21
   4e700:	1023883a 	mov	r17,r2
   4e704:	004fd3c0 	call	4fd3c <__mulsi3>
   4e708:	a809883a 	mov	r4,r21
   4e70c:	b80b883a 	mov	r5,r23
   4e710:	1027883a 	mov	r19,r2
   4e714:	004fd3c0 	call	4fd3c <__mulsi3>
   4e718:	100b883a 	mov	r5,r2
   4e71c:	a004d43a 	srli	r2,r20,16
   4e720:	8ce3883a 	add	r17,r17,r19
   4e724:	1449883a 	add	r4,r2,r17
   4e728:	24c0022e 	bgeu	r4,r19,4e734 <__umoddi3+0x534>
   4e72c:	00800074 	movhi	r2,1
   4e730:	288b883a 	add	r5,r5,r2
   4e734:	2004d43a 	srli	r2,r4,16
   4e738:	2008943a 	slli	r4,r4,16
   4e73c:	a0ffffcc 	andi	r3,r20,65535
   4e740:	288d883a 	add	r6,r5,r2
   4e744:	20c9883a 	add	r4,r4,r3
   4e748:	81800b36 	bltu	r16,r6,4e778 <__umoddi3+0x578>
   4e74c:	81804026 	beq	r16,r6,4e850 <__umoddi3+0x650>
   4e750:	818dc83a 	sub	r6,r16,r6
   4e754:	00000f06 	br	4e794 <__umoddi3+0x594>
   4e758:	30c5c83a 	sub	r2,r6,r3
   4e75c:	182d883a 	mov	r22,r3
   4e760:	8084d83a 	srl	r2,r16,r2
   4e764:	a8c6983a 	sll	r3,r21,r3
   4e768:	9da6983a 	sll	r19,r19,r22
   4e76c:	85a0983a 	sll	r16,r16,r22
   4e770:	18aab03a 	or	r21,r3,r2
   4e774:	003f1d06 	br	4e3ec <__umoddi3+0x1ec>
   4e778:	d8c00017 	ldw	r3,0(sp)
   4e77c:	20c5c83a 	sub	r2,r4,r3
   4e780:	2089803a 	cmpltu	r4,r4,r2
   4e784:	3587c83a 	sub	r3,r6,r22
   4e788:	1907c83a 	sub	r3,r3,r4
   4e78c:	80cdc83a 	sub	r6,r16,r3
   4e790:	1009883a 	mov	r4,r2
   4e794:	d9400117 	ldw	r5,4(sp)
   4e798:	2905c83a 	sub	r2,r5,r4
   4e79c:	2887803a 	cmpltu	r3,r5,r2
   4e7a0:	30c7c83a 	sub	r3,r6,r3
   4e7a4:	d9800317 	ldw	r6,12(sp)
   4e7a8:	1484d83a 	srl	r2,r2,r18
   4e7ac:	1988983a 	sll	r4,r3,r6
   4e7b0:	1c86d83a 	srl	r3,r3,r18
   4e7b4:	2088b03a 	or	r4,r4,r2
   4e7b8:	2011883a 	mov	r8,r4
   4e7bc:	1813883a 	mov	r9,r3
   4e7c0:	d9000415 	stw	r4,16(sp)
   4e7c4:	d8c00515 	stw	r3,20(sp)
   4e7c8:	003ed406 	br	4e31c <__umoddi3+0x11c>
   4e7cc:	01400604 	movi	r5,24
   4e7d0:	2805883a 	mov	r2,r5
   4e7d4:	003ea606 	br	4e270 <__umoddi3+0x70>
   4e7d8:	01400204 	movi	r5,8
   4e7dc:	2805883a 	mov	r2,r5
   4e7e0:	003ea306 	br	4e270 <__umoddi3+0x70>
   4e7e4:	01400204 	movi	r5,8
   4e7e8:	2805883a 	mov	r2,r5
   4e7ec:	003edf06 	br	4e36c <__umoddi3+0x16c>
   4e7f0:	01400204 	movi	r5,8
   4e7f4:	2805883a 	mov	r2,r5
   4e7f8:	003ef206 	br	4e3c4 <__umoddi3+0x1c4>
   4e7fc:	01400604 	movi	r5,24
   4e800:	2805883a 	mov	r2,r5
   4e804:	003eef06 	br	4e3c4 <__umoddi3+0x1c4>
   4e808:	01400604 	movi	r5,24
   4e80c:	2805883a 	mov	r2,r5
   4e810:	003ed606 	br	4e36c <__umoddi3+0x16c>
   4e814:	153fa92e 	bgeu	r2,r20,4e6bc <__umoddi3+0x4bc>
   4e818:	843fffc4 	addi	r16,r16,-1
   4e81c:	1585883a 	add	r2,r2,r22
   4e820:	003fa606 	br	4e6bc <__umoddi3+0x4bc>
   4e824:	157f912e 	bgeu	r2,r21,4e66c <__umoddi3+0x46c>
   4e828:	e73fffc4 	addi	fp,fp,-1
   4e82c:	1585883a 	add	r2,r2,r22
   4e830:	003f8e06 	br	4e66c <__umoddi3+0x46c>
   4e834:	157f542e 	bgeu	r2,r21,4e588 <__umoddi3+0x388>
   4e838:	14c5883a 	add	r2,r2,r19
   4e83c:	003f5206 	br	4e588 <__umoddi3+0x388>
   4e840:	14c5883a 	add	r2,r2,r19
   4e844:	003efc06 	br	4e438 <__umoddi3+0x238>
   4e848:	14c5883a 	add	r2,r2,r19
   4e84c:	003ea606 	br	4e2e8 <__umoddi3+0xe8>
   4e850:	d8800117 	ldw	r2,4(sp)
   4e854:	113fc836 	bltu	r2,r4,4e778 <__umoddi3+0x578>
   4e858:	000d883a 	mov	r6,zero
   4e85c:	003fcd06 	br	4e794 <__umoddi3+0x594>

0004e860 <__nesf2>:
   4e860:	defff304 	addi	sp,sp,-52
   4e864:	dc400b15 	stw	r17,44(sp)
   4e868:	dc400204 	addi	r17,sp,8
   4e86c:	dc000a15 	stw	r16,40(sp)
   4e870:	d9000015 	stw	r4,0(sp)
   4e874:	d9400115 	stw	r5,4(sp)
   4e878:	d809883a 	mov	r4,sp
   4e87c:	880b883a 	mov	r5,r17
   4e880:	dc000604 	addi	r16,sp,24
   4e884:	dfc00c15 	stw	ra,48(sp)
   4e888:	00409b00 	call	409b0 <__unpack_f>
   4e88c:	d9000104 	addi	r4,sp,4
   4e890:	800b883a 	mov	r5,r16
   4e894:	00409b00 	call	409b0 <__unpack_f>
   4e898:	d8800217 	ldw	r2,8(sp)
   4e89c:	00c00044 	movi	r3,1
   4e8a0:	180d883a 	mov	r6,r3
   4e8a4:	1880062e 	bgeu	r3,r2,4e8c0 <__nesf2+0x60>
   4e8a8:	d8800617 	ldw	r2,24(sp)
   4e8ac:	8809883a 	mov	r4,r17
   4e8b0:	800b883a 	mov	r5,r16
   4e8b4:	1880022e 	bgeu	r3,r2,4e8c0 <__nesf2+0x60>
   4e8b8:	004fdf40 	call	4fdf4 <__fpcmp_parts_f>
   4e8bc:	100d883a 	mov	r6,r2
   4e8c0:	3005883a 	mov	r2,r6
   4e8c4:	dfc00c17 	ldw	ra,48(sp)
   4e8c8:	dc400b17 	ldw	r17,44(sp)
   4e8cc:	dc000a17 	ldw	r16,40(sp)
   4e8d0:	dec00d04 	addi	sp,sp,52
   4e8d4:	f800283a 	ret

0004e8d8 <__gtsf2>:
   4e8d8:	defff304 	addi	sp,sp,-52
   4e8dc:	dc400b15 	stw	r17,44(sp)
   4e8e0:	dc400204 	addi	r17,sp,8
   4e8e4:	dc000a15 	stw	r16,40(sp)
   4e8e8:	d9000015 	stw	r4,0(sp)
   4e8ec:	d9400115 	stw	r5,4(sp)
   4e8f0:	d809883a 	mov	r4,sp
   4e8f4:	880b883a 	mov	r5,r17
   4e8f8:	dc000604 	addi	r16,sp,24
   4e8fc:	dfc00c15 	stw	ra,48(sp)
   4e900:	00409b00 	call	409b0 <__unpack_f>
   4e904:	d9000104 	addi	r4,sp,4
   4e908:	800b883a 	mov	r5,r16
   4e90c:	00409b00 	call	409b0 <__unpack_f>
   4e910:	d8800217 	ldw	r2,8(sp)
   4e914:	00c00044 	movi	r3,1
   4e918:	01bfffc4 	movi	r6,-1
   4e91c:	1880062e 	bgeu	r3,r2,4e938 <__gtsf2+0x60>
   4e920:	d8800617 	ldw	r2,24(sp)
   4e924:	8809883a 	mov	r4,r17
   4e928:	800b883a 	mov	r5,r16
   4e92c:	1880022e 	bgeu	r3,r2,4e938 <__gtsf2+0x60>
   4e930:	004fdf40 	call	4fdf4 <__fpcmp_parts_f>
   4e934:	100d883a 	mov	r6,r2
   4e938:	3005883a 	mov	r2,r6
   4e93c:	dfc00c17 	ldw	ra,48(sp)
   4e940:	dc400b17 	ldw	r17,44(sp)
   4e944:	dc000a17 	ldw	r16,40(sp)
   4e948:	dec00d04 	addi	sp,sp,52
   4e94c:	f800283a 	ret

0004e950 <__ltsf2>:
   4e950:	defff304 	addi	sp,sp,-52
   4e954:	dc400b15 	stw	r17,44(sp)
   4e958:	dc400204 	addi	r17,sp,8
   4e95c:	dc000a15 	stw	r16,40(sp)
   4e960:	d9000015 	stw	r4,0(sp)
   4e964:	d9400115 	stw	r5,4(sp)
   4e968:	d809883a 	mov	r4,sp
   4e96c:	880b883a 	mov	r5,r17
   4e970:	dc000604 	addi	r16,sp,24
   4e974:	dfc00c15 	stw	ra,48(sp)
   4e978:	00409b00 	call	409b0 <__unpack_f>
   4e97c:	d9000104 	addi	r4,sp,4
   4e980:	800b883a 	mov	r5,r16
   4e984:	00409b00 	call	409b0 <__unpack_f>
   4e988:	d8800217 	ldw	r2,8(sp)
   4e98c:	00c00044 	movi	r3,1
   4e990:	180d883a 	mov	r6,r3
   4e994:	1880062e 	bgeu	r3,r2,4e9b0 <__ltsf2+0x60>
   4e998:	d8800617 	ldw	r2,24(sp)
   4e99c:	8809883a 	mov	r4,r17
   4e9a0:	800b883a 	mov	r5,r16
   4e9a4:	1880022e 	bgeu	r3,r2,4e9b0 <__ltsf2+0x60>
   4e9a8:	004fdf40 	call	4fdf4 <__fpcmp_parts_f>
   4e9ac:	100d883a 	mov	r6,r2
   4e9b0:	3005883a 	mov	r2,r6
   4e9b4:	dfc00c17 	ldw	ra,48(sp)
   4e9b8:	dc400b17 	ldw	r17,44(sp)
   4e9bc:	dc000a17 	ldw	r16,40(sp)
   4e9c0:	dec00d04 	addi	sp,sp,52
   4e9c4:	f800283a 	ret

0004e9c8 <_fpadd_parts>:
   4e9c8:	defff804 	addi	sp,sp,-32
   4e9cc:	dcc00315 	stw	r19,12(sp)
   4e9d0:	2027883a 	mov	r19,r4
   4e9d4:	21000017 	ldw	r4,0(r4)
   4e9d8:	00c00044 	movi	r3,1
   4e9dc:	dd400515 	stw	r21,20(sp)
   4e9e0:	dd000415 	stw	r20,16(sp)
   4e9e4:	ddc00715 	stw	r23,28(sp)
   4e9e8:	dd800615 	stw	r22,24(sp)
   4e9ec:	dc800215 	stw	r18,8(sp)
   4e9f0:	dc400115 	stw	r17,4(sp)
   4e9f4:	dc000015 	stw	r16,0(sp)
   4e9f8:	282b883a 	mov	r21,r5
   4e9fc:	3029883a 	mov	r20,r6
   4ea00:	1900632e 	bgeu	r3,r4,4eb90 <_fpadd_parts+0x1c8>
   4ea04:	28800017 	ldw	r2,0(r5)
   4ea08:	1880812e 	bgeu	r3,r2,4ec10 <_fpadd_parts+0x248>
   4ea0c:	00c00104 	movi	r3,4
   4ea10:	20c0dc26 	beq	r4,r3,4ed84 <_fpadd_parts+0x3bc>
   4ea14:	10c07e26 	beq	r2,r3,4ec10 <_fpadd_parts+0x248>
   4ea18:	00c00084 	movi	r3,2
   4ea1c:	10c06726 	beq	r2,r3,4ebbc <_fpadd_parts+0x1f4>
   4ea20:	20c07b26 	beq	r4,r3,4ec10 <_fpadd_parts+0x248>
   4ea24:	9dc00217 	ldw	r23,8(r19)
   4ea28:	28c00217 	ldw	r3,8(r5)
   4ea2c:	9c400317 	ldw	r17,12(r19)
   4ea30:	2bc00317 	ldw	r15,12(r5)
   4ea34:	b8cdc83a 	sub	r6,r23,r3
   4ea38:	9c800417 	ldw	r18,16(r19)
   4ea3c:	2c000417 	ldw	r16,16(r5)
   4ea40:	3009883a 	mov	r4,r6
   4ea44:	30009716 	blt	r6,zero,4eca4 <_fpadd_parts+0x2dc>
   4ea48:	00800fc4 	movi	r2,63
   4ea4c:	11806b16 	blt	r2,r6,4ebfc <_fpadd_parts+0x234>
   4ea50:	0100a40e 	bge	zero,r4,4ece4 <_fpadd_parts+0x31c>
   4ea54:	35bff804 	addi	r22,r6,-32
   4ea58:	b000bc16 	blt	r22,zero,4ed4c <_fpadd_parts+0x384>
   4ea5c:	8596d83a 	srl	r11,r16,r22
   4ea60:	0019883a 	mov	r12,zero
   4ea64:	0013883a 	mov	r9,zero
   4ea68:	01000044 	movi	r4,1
   4ea6c:	0015883a 	mov	r10,zero
   4ea70:	b000be16 	blt	r22,zero,4ed6c <_fpadd_parts+0x3a4>
   4ea74:	2590983a 	sll	r8,r4,r22
   4ea78:	000f883a 	mov	r7,zero
   4ea7c:	00bfffc4 	movi	r2,-1
   4ea80:	3889883a 	add	r4,r7,r2
   4ea84:	408b883a 	add	r5,r8,r2
   4ea88:	21cd803a 	cmpltu	r6,r4,r7
   4ea8c:	314b883a 	add	r5,r6,r5
   4ea90:	7904703a 	and	r2,r15,r4
   4ea94:	8146703a 	and	r3,r16,r5
   4ea98:	10c4b03a 	or	r2,r2,r3
   4ea9c:	10000226 	beq	r2,zero,4eaa8 <_fpadd_parts+0xe0>
   4eaa0:	02400044 	movi	r9,1
   4eaa4:	0015883a 	mov	r10,zero
   4eaa8:	5a5eb03a 	or	r15,r11,r9
   4eaac:	62a0b03a 	or	r16,r12,r10
   4eab0:	99400117 	ldw	r5,4(r19)
   4eab4:	a8800117 	ldw	r2,4(r21)
   4eab8:	28806e26 	beq	r5,r2,4ec74 <_fpadd_parts+0x2ac>
   4eabc:	28006626 	beq	r5,zero,4ec58 <_fpadd_parts+0x290>
   4eac0:	7c45c83a 	sub	r2,r15,r17
   4eac4:	7889803a 	cmpltu	r4,r15,r2
   4eac8:	8487c83a 	sub	r3,r16,r18
   4eacc:	1909c83a 	sub	r4,r3,r4
   4ead0:	100d883a 	mov	r6,r2
   4ead4:	200f883a 	mov	r7,r4
   4ead8:	38007716 	blt	r7,zero,4ecb8 <_fpadd_parts+0x2f0>
   4eadc:	a5c00215 	stw	r23,8(r20)
   4eae0:	a1c00415 	stw	r7,16(r20)
   4eae4:	a0000115 	stw	zero,4(r20)
   4eae8:	a1800315 	stw	r6,12(r20)
   4eaec:	a2000317 	ldw	r8,12(r20)
   4eaf0:	a2400417 	ldw	r9,16(r20)
   4eaf4:	00bfffc4 	movi	r2,-1
   4eaf8:	408b883a 	add	r5,r8,r2
   4eafc:	2a09803a 	cmpltu	r4,r5,r8
   4eb00:	488d883a 	add	r6,r9,r2
   4eb04:	01c40034 	movhi	r7,4096
   4eb08:	39ffffc4 	addi	r7,r7,-1
   4eb0c:	218d883a 	add	r6,r4,r6
   4eb10:	39801736 	bltu	r7,r6,4eb70 <_fpadd_parts+0x1a8>
   4eb14:	31c06526 	beq	r6,r7,4ecac <_fpadd_parts+0x2e4>
   4eb18:	a3000217 	ldw	r12,8(r20)
   4eb1c:	4209883a 	add	r4,r8,r8
   4eb20:	00bfffc4 	movi	r2,-1
   4eb24:	220f803a 	cmpltu	r7,r4,r8
   4eb28:	4a4b883a 	add	r5,r9,r9
   4eb2c:	394f883a 	add	r7,r7,r5
   4eb30:	2095883a 	add	r10,r4,r2
   4eb34:	3897883a 	add	r11,r7,r2
   4eb38:	510d803a 	cmpltu	r6,r10,r4
   4eb3c:	6099883a 	add	r12,r12,r2
   4eb40:	32d7883a 	add	r11,r6,r11
   4eb44:	00840034 	movhi	r2,4096
   4eb48:	10bfffc4 	addi	r2,r2,-1
   4eb4c:	2011883a 	mov	r8,r4
   4eb50:	3813883a 	mov	r9,r7
   4eb54:	a1000315 	stw	r4,12(r20)
   4eb58:	a1c00415 	stw	r7,16(r20)
   4eb5c:	a3000215 	stw	r12,8(r20)
   4eb60:	12c00336 	bltu	r2,r11,4eb70 <_fpadd_parts+0x1a8>
   4eb64:	58bfed1e 	bne	r11,r2,4eb1c <_fpadd_parts+0x154>
   4eb68:	00bfff84 	movi	r2,-2
   4eb6c:	12bfeb2e 	bgeu	r2,r10,4eb1c <_fpadd_parts+0x154>
   4eb70:	a2800417 	ldw	r10,16(r20)
   4eb74:	008000c4 	movi	r2,3
   4eb78:	00c80034 	movhi	r3,8192
   4eb7c:	18ffffc4 	addi	r3,r3,-1
   4eb80:	a2400317 	ldw	r9,12(r20)
   4eb84:	a0800015 	stw	r2,0(r20)
   4eb88:	1a802336 	bltu	r3,r10,4ec18 <_fpadd_parts+0x250>
   4eb8c:	a027883a 	mov	r19,r20
   4eb90:	9805883a 	mov	r2,r19
   4eb94:	ddc00717 	ldw	r23,28(sp)
   4eb98:	dd800617 	ldw	r22,24(sp)
   4eb9c:	dd400517 	ldw	r21,20(sp)
   4eba0:	dd000417 	ldw	r20,16(sp)
   4eba4:	dcc00317 	ldw	r19,12(sp)
   4eba8:	dc800217 	ldw	r18,8(sp)
   4ebac:	dc400117 	ldw	r17,4(sp)
   4ebb0:	dc000017 	ldw	r16,0(sp)
   4ebb4:	dec00804 	addi	sp,sp,32
   4ebb8:	f800283a 	ret
   4ebbc:	20fff41e 	bne	r4,r3,4eb90 <_fpadd_parts+0x1c8>
   4ebc0:	31000015 	stw	r4,0(r6)
   4ebc4:	98800117 	ldw	r2,4(r19)
   4ebc8:	30800115 	stw	r2,4(r6)
   4ebcc:	98c00217 	ldw	r3,8(r19)
   4ebd0:	30c00215 	stw	r3,8(r6)
   4ebd4:	98800317 	ldw	r2,12(r19)
   4ebd8:	30800315 	stw	r2,12(r6)
   4ebdc:	98c00417 	ldw	r3,16(r19)
   4ebe0:	30c00415 	stw	r3,16(r6)
   4ebe4:	98800117 	ldw	r2,4(r19)
   4ebe8:	28c00117 	ldw	r3,4(r5)
   4ebec:	3027883a 	mov	r19,r6
   4ebf0:	10c4703a 	and	r2,r2,r3
   4ebf4:	30800115 	stw	r2,4(r6)
   4ebf8:	003fe506 	br	4eb90 <_fpadd_parts+0x1c8>
   4ebfc:	1dc02616 	blt	r3,r23,4ec98 <_fpadd_parts+0x2d0>
   4ec00:	0023883a 	mov	r17,zero
   4ec04:	182f883a 	mov	r23,r3
   4ec08:	0025883a 	mov	r18,zero
   4ec0c:	003fa806 	br	4eab0 <_fpadd_parts+0xe8>
   4ec10:	a827883a 	mov	r19,r21
   4ec14:	003fde06 	br	4eb90 <_fpadd_parts+0x1c8>
   4ec18:	01800044 	movi	r6,1
   4ec1c:	500497fa 	slli	r2,r10,31
   4ec20:	4808d07a 	srli	r4,r9,1
   4ec24:	518ad83a 	srl	r5,r10,r6
   4ec28:	a2000217 	ldw	r8,8(r20)
   4ec2c:	1108b03a 	or	r4,r2,r4
   4ec30:	0007883a 	mov	r3,zero
   4ec34:	4984703a 	and	r2,r9,r6
   4ec38:	208cb03a 	or	r6,r4,r2
   4ec3c:	28ceb03a 	or	r7,r5,r3
   4ec40:	42000044 	addi	r8,r8,1
   4ec44:	a027883a 	mov	r19,r20
   4ec48:	a1c00415 	stw	r7,16(r20)
   4ec4c:	a2000215 	stw	r8,8(r20)
   4ec50:	a1800315 	stw	r6,12(r20)
   4ec54:	003fce06 	br	4eb90 <_fpadd_parts+0x1c8>
   4ec58:	8bc5c83a 	sub	r2,r17,r15
   4ec5c:	8889803a 	cmpltu	r4,r17,r2
   4ec60:	9407c83a 	sub	r3,r18,r16
   4ec64:	1909c83a 	sub	r4,r3,r4
   4ec68:	100d883a 	mov	r6,r2
   4ec6c:	200f883a 	mov	r7,r4
   4ec70:	003f9906 	br	4ead8 <_fpadd_parts+0x110>
   4ec74:	7c45883a 	add	r2,r15,r17
   4ec78:	13c9803a 	cmpltu	r4,r2,r15
   4ec7c:	8487883a 	add	r3,r16,r18
   4ec80:	20c9883a 	add	r4,r4,r3
   4ec84:	a1400115 	stw	r5,4(r20)
   4ec88:	a5c00215 	stw	r23,8(r20)
   4ec8c:	a0800315 	stw	r2,12(r20)
   4ec90:	a1000415 	stw	r4,16(r20)
   4ec94:	003fb606 	br	4eb70 <_fpadd_parts+0x1a8>
   4ec98:	001f883a 	mov	r15,zero
   4ec9c:	0021883a 	mov	r16,zero
   4eca0:	003f8306 	br	4eab0 <_fpadd_parts+0xe8>
   4eca4:	018dc83a 	sub	r6,zero,r6
   4eca8:	003f6706 	br	4ea48 <_fpadd_parts+0x80>
   4ecac:	00bfff84 	movi	r2,-2
   4ecb0:	117faf36 	bltu	r2,r5,4eb70 <_fpadd_parts+0x1a8>
   4ecb4:	003f9806 	br	4eb18 <_fpadd_parts+0x150>
   4ecb8:	0005883a 	mov	r2,zero
   4ecbc:	1189c83a 	sub	r4,r2,r6
   4ecc0:	1105803a 	cmpltu	r2,r2,r4
   4ecc4:	01cbc83a 	sub	r5,zero,r7
   4ecc8:	2885c83a 	sub	r2,r5,r2
   4eccc:	01800044 	movi	r6,1
   4ecd0:	a1800115 	stw	r6,4(r20)
   4ecd4:	a5c00215 	stw	r23,8(r20)
   4ecd8:	a1000315 	stw	r4,12(r20)
   4ecdc:	a0800415 	stw	r2,16(r20)
   4ece0:	003f8206 	br	4eaec <_fpadd_parts+0x124>
   4ece4:	203f7226 	beq	r4,zero,4eab0 <_fpadd_parts+0xe8>
   4ece8:	35bff804 	addi	r22,r6,-32
   4ecec:	b9af883a 	add	r23,r23,r6
   4ecf0:	b0003116 	blt	r22,zero,4edb8 <_fpadd_parts+0x3f0>
   4ecf4:	959ad83a 	srl	r13,r18,r22
   4ecf8:	001d883a 	mov	r14,zero
   4ecfc:	000f883a 	mov	r7,zero
   4ed00:	01000044 	movi	r4,1
   4ed04:	0011883a 	mov	r8,zero
   4ed08:	b0002516 	blt	r22,zero,4eda0 <_fpadd_parts+0x3d8>
   4ed0c:	2594983a 	sll	r10,r4,r22
   4ed10:	0013883a 	mov	r9,zero
   4ed14:	00bfffc4 	movi	r2,-1
   4ed18:	4889883a 	add	r4,r9,r2
   4ed1c:	508b883a 	add	r5,r10,r2
   4ed20:	224d803a 	cmpltu	r6,r4,r9
   4ed24:	314b883a 	add	r5,r6,r5
   4ed28:	8904703a 	and	r2,r17,r4
   4ed2c:	9146703a 	and	r3,r18,r5
   4ed30:	10c4b03a 	or	r2,r2,r3
   4ed34:	10000226 	beq	r2,zero,4ed40 <_fpadd_parts+0x378>
   4ed38:	01c00044 	movi	r7,1
   4ed3c:	0011883a 	mov	r8,zero
   4ed40:	69e2b03a 	or	r17,r13,r7
   4ed44:	7224b03a 	or	r18,r14,r8
   4ed48:	003f5906 	br	4eab0 <_fpadd_parts+0xe8>
   4ed4c:	8407883a 	add	r3,r16,r16
   4ed50:	008007c4 	movi	r2,31
   4ed54:	1185c83a 	sub	r2,r2,r6
   4ed58:	1886983a 	sll	r3,r3,r2
   4ed5c:	7996d83a 	srl	r11,r15,r6
   4ed60:	8198d83a 	srl	r12,r16,r6
   4ed64:	1ad6b03a 	or	r11,r3,r11
   4ed68:	003f3e06 	br	4ea64 <_fpadd_parts+0x9c>
   4ed6c:	2006d07a 	srli	r3,r4,1
   4ed70:	008007c4 	movi	r2,31
   4ed74:	1185c83a 	sub	r2,r2,r6
   4ed78:	1890d83a 	srl	r8,r3,r2
   4ed7c:	218e983a 	sll	r7,r4,r6
   4ed80:	003f3e06 	br	4ea7c <_fpadd_parts+0xb4>
   4ed84:	113f821e 	bne	r2,r4,4eb90 <_fpadd_parts+0x1c8>
   4ed88:	28c00117 	ldw	r3,4(r5)
   4ed8c:	98800117 	ldw	r2,4(r19)
   4ed90:	10ff7f26 	beq	r2,r3,4eb90 <_fpadd_parts+0x1c8>
   4ed94:	04c00174 	movhi	r19,5
   4ed98:	9ccedf04 	addi	r19,r19,15228
   4ed9c:	003f7c06 	br	4eb90 <_fpadd_parts+0x1c8>
   4eda0:	2006d07a 	srli	r3,r4,1
   4eda4:	008007c4 	movi	r2,31
   4eda8:	1185c83a 	sub	r2,r2,r6
   4edac:	1894d83a 	srl	r10,r3,r2
   4edb0:	2192983a 	sll	r9,r4,r6
   4edb4:	003fd706 	br	4ed14 <_fpadd_parts+0x34c>
   4edb8:	9487883a 	add	r3,r18,r18
   4edbc:	008007c4 	movi	r2,31
   4edc0:	1185c83a 	sub	r2,r2,r6
   4edc4:	1886983a 	sll	r3,r3,r2
   4edc8:	899ad83a 	srl	r13,r17,r6
   4edcc:	919cd83a 	srl	r14,r18,r6
   4edd0:	1b5ab03a 	or	r13,r3,r13
   4edd4:	003fc906 	br	4ecfc <_fpadd_parts+0x334>

0004edd8 <__subdf3>:
   4edd8:	deffea04 	addi	sp,sp,-88
   4eddc:	dcc01415 	stw	r19,80(sp)
   4ede0:	dcc00404 	addi	r19,sp,16
   4ede4:	2011883a 	mov	r8,r4
   4ede8:	2813883a 	mov	r9,r5
   4edec:	dc401315 	stw	r17,76(sp)
   4edf0:	d809883a 	mov	r4,sp
   4edf4:	980b883a 	mov	r5,r19
   4edf8:	dc400904 	addi	r17,sp,36
   4edfc:	dfc01515 	stw	ra,84(sp)
   4ee00:	da400115 	stw	r9,4(sp)
   4ee04:	d9c00315 	stw	r7,12(sp)
   4ee08:	da000015 	stw	r8,0(sp)
   4ee0c:	d9800215 	stw	r6,8(sp)
   4ee10:	004fec80 	call	4fec8 <__unpack_d>
   4ee14:	d9000204 	addi	r4,sp,8
   4ee18:	880b883a 	mov	r5,r17
   4ee1c:	004fec80 	call	4fec8 <__unpack_d>
   4ee20:	d8800a17 	ldw	r2,40(sp)
   4ee24:	880b883a 	mov	r5,r17
   4ee28:	9809883a 	mov	r4,r19
   4ee2c:	d9800e04 	addi	r6,sp,56
   4ee30:	1080005c 	xori	r2,r2,1
   4ee34:	d8800a15 	stw	r2,40(sp)
   4ee38:	004e9c80 	call	4e9c8 <_fpadd_parts>
   4ee3c:	1009883a 	mov	r4,r2
   4ee40:	0040a780 	call	40a78 <__pack_d>
   4ee44:	dfc01517 	ldw	ra,84(sp)
   4ee48:	dcc01417 	ldw	r19,80(sp)
   4ee4c:	dc401317 	ldw	r17,76(sp)
   4ee50:	dec01604 	addi	sp,sp,88
   4ee54:	f800283a 	ret

0004ee58 <__adddf3>:
   4ee58:	deffea04 	addi	sp,sp,-88
   4ee5c:	dcc01415 	stw	r19,80(sp)
   4ee60:	dcc00404 	addi	r19,sp,16
   4ee64:	2011883a 	mov	r8,r4
   4ee68:	2813883a 	mov	r9,r5
   4ee6c:	dc401315 	stw	r17,76(sp)
   4ee70:	d809883a 	mov	r4,sp
   4ee74:	980b883a 	mov	r5,r19
   4ee78:	dc400904 	addi	r17,sp,36
   4ee7c:	dfc01515 	stw	ra,84(sp)
   4ee80:	da400115 	stw	r9,4(sp)
   4ee84:	d9c00315 	stw	r7,12(sp)
   4ee88:	da000015 	stw	r8,0(sp)
   4ee8c:	d9800215 	stw	r6,8(sp)
   4ee90:	004fec80 	call	4fec8 <__unpack_d>
   4ee94:	d9000204 	addi	r4,sp,8
   4ee98:	880b883a 	mov	r5,r17
   4ee9c:	004fec80 	call	4fec8 <__unpack_d>
   4eea0:	d9800e04 	addi	r6,sp,56
   4eea4:	9809883a 	mov	r4,r19
   4eea8:	880b883a 	mov	r5,r17
   4eeac:	004e9c80 	call	4e9c8 <_fpadd_parts>
   4eeb0:	1009883a 	mov	r4,r2
   4eeb4:	0040a780 	call	40a78 <__pack_d>
   4eeb8:	dfc01517 	ldw	ra,84(sp)
   4eebc:	dcc01417 	ldw	r19,80(sp)
   4eec0:	dc401317 	ldw	r17,76(sp)
   4eec4:	dec01604 	addi	sp,sp,88
   4eec8:	f800283a 	ret

0004eecc <__muldf3>:
   4eecc:	deffe004 	addi	sp,sp,-128
   4eed0:	dc401815 	stw	r17,96(sp)
   4eed4:	dc400404 	addi	r17,sp,16
   4eed8:	2011883a 	mov	r8,r4
   4eedc:	2813883a 	mov	r9,r5
   4eee0:	dc001715 	stw	r16,92(sp)
   4eee4:	d809883a 	mov	r4,sp
   4eee8:	880b883a 	mov	r5,r17
   4eeec:	dc000904 	addi	r16,sp,36
   4eef0:	dfc01f15 	stw	ra,124(sp)
   4eef4:	da400115 	stw	r9,4(sp)
   4eef8:	d9c00315 	stw	r7,12(sp)
   4eefc:	da000015 	stw	r8,0(sp)
   4ef00:	d9800215 	stw	r6,8(sp)
   4ef04:	ddc01e15 	stw	r23,120(sp)
   4ef08:	dd801d15 	stw	r22,116(sp)
   4ef0c:	dd401c15 	stw	r21,112(sp)
   4ef10:	dd001b15 	stw	r20,108(sp)
   4ef14:	dcc01a15 	stw	r19,104(sp)
   4ef18:	dc801915 	stw	r18,100(sp)
   4ef1c:	004fec80 	call	4fec8 <__unpack_d>
   4ef20:	d9000204 	addi	r4,sp,8
   4ef24:	800b883a 	mov	r5,r16
   4ef28:	004fec80 	call	4fec8 <__unpack_d>
   4ef2c:	d9000417 	ldw	r4,16(sp)
   4ef30:	00800044 	movi	r2,1
   4ef34:	1100102e 	bgeu	r2,r4,4ef78 <__muldf3+0xac>
   4ef38:	d8c00917 	ldw	r3,36(sp)
   4ef3c:	10c0062e 	bgeu	r2,r3,4ef58 <__muldf3+0x8c>
   4ef40:	00800104 	movi	r2,4
   4ef44:	20800a26 	beq	r4,r2,4ef70 <__muldf3+0xa4>
   4ef48:	1880cc26 	beq	r3,r2,4f27c <__muldf3+0x3b0>
   4ef4c:	00800084 	movi	r2,2
   4ef50:	20800926 	beq	r4,r2,4ef78 <__muldf3+0xac>
   4ef54:	1880191e 	bne	r3,r2,4efbc <__muldf3+0xf0>
   4ef58:	d8c00a17 	ldw	r3,40(sp)
   4ef5c:	d8800517 	ldw	r2,20(sp)
   4ef60:	8009883a 	mov	r4,r16
   4ef64:	10c4c03a 	cmpne	r2,r2,r3
   4ef68:	d8800a15 	stw	r2,40(sp)
   4ef6c:	00000706 	br	4ef8c <__muldf3+0xc0>
   4ef70:	00800084 	movi	r2,2
   4ef74:	1880c326 	beq	r3,r2,4f284 <__muldf3+0x3b8>
   4ef78:	d8800517 	ldw	r2,20(sp)
   4ef7c:	d8c00a17 	ldw	r3,40(sp)
   4ef80:	8809883a 	mov	r4,r17
   4ef84:	10c4c03a 	cmpne	r2,r2,r3
   4ef88:	d8800515 	stw	r2,20(sp)
   4ef8c:	0040a780 	call	40a78 <__pack_d>
   4ef90:	dfc01f17 	ldw	ra,124(sp)
   4ef94:	ddc01e17 	ldw	r23,120(sp)
   4ef98:	dd801d17 	ldw	r22,116(sp)
   4ef9c:	dd401c17 	ldw	r21,112(sp)
   4efa0:	dd001b17 	ldw	r20,108(sp)
   4efa4:	dcc01a17 	ldw	r19,104(sp)
   4efa8:	dc801917 	ldw	r18,100(sp)
   4efac:	dc401817 	ldw	r17,96(sp)
   4efb0:	dc001717 	ldw	r16,92(sp)
   4efb4:	dec02004 	addi	sp,sp,128
   4efb8:	f800283a 	ret
   4efbc:	dd800717 	ldw	r22,28(sp)
   4efc0:	dc800c17 	ldw	r18,48(sp)
   4efc4:	002b883a 	mov	r21,zero
   4efc8:	0023883a 	mov	r17,zero
   4efcc:	a80b883a 	mov	r5,r21
   4efd0:	b00d883a 	mov	r6,r22
   4efd4:	880f883a 	mov	r7,r17
   4efd8:	ddc00817 	ldw	r23,32(sp)
   4efdc:	dcc00d17 	ldw	r19,52(sp)
   4efe0:	9009883a 	mov	r4,r18
   4efe4:	004d9cc0 	call	4d9cc <__muldi3>
   4efe8:	001b883a 	mov	r13,zero
   4efec:	680f883a 	mov	r7,r13
   4eff0:	b009883a 	mov	r4,r22
   4eff4:	000b883a 	mov	r5,zero
   4eff8:	980d883a 	mov	r6,r19
   4effc:	b82d883a 	mov	r22,r23
   4f000:	002f883a 	mov	r23,zero
   4f004:	db401615 	stw	r13,88(sp)
   4f008:	d8801315 	stw	r2,76(sp)
   4f00c:	d8c01415 	stw	r3,80(sp)
   4f010:	dcc01515 	stw	r19,84(sp)
   4f014:	004d9cc0 	call	4d9cc <__muldi3>
   4f018:	b00d883a 	mov	r6,r22
   4f01c:	000b883a 	mov	r5,zero
   4f020:	9009883a 	mov	r4,r18
   4f024:	b80f883a 	mov	r7,r23
   4f028:	1021883a 	mov	r16,r2
   4f02c:	1823883a 	mov	r17,r3
   4f030:	004d9cc0 	call	4d9cc <__muldi3>
   4f034:	8085883a 	add	r2,r16,r2
   4f038:	140d803a 	cmpltu	r6,r2,r16
   4f03c:	88c7883a 	add	r3,r17,r3
   4f040:	30cd883a 	add	r6,r6,r3
   4f044:	1029883a 	mov	r20,r2
   4f048:	302b883a 	mov	r21,r6
   4f04c:	da801317 	ldw	r10,76(sp)
   4f050:	dac01417 	ldw	r11,80(sp)
   4f054:	db001517 	ldw	r12,84(sp)
   4f058:	db401617 	ldw	r13,88(sp)
   4f05c:	3440612e 	bgeu	r6,r17,4f1e4 <__muldf3+0x318>
   4f060:	0009883a 	mov	r4,zero
   4f064:	5105883a 	add	r2,r10,r4
   4f068:	128d803a 	cmpltu	r6,r2,r10
   4f06c:	5d07883a 	add	r3,r11,r20
   4f070:	30cd883a 	add	r6,r6,r3
   4f074:	0021883a 	mov	r16,zero
   4f078:	04400044 	movi	r17,1
   4f07c:	1025883a 	mov	r18,r2
   4f080:	3027883a 	mov	r19,r6
   4f084:	32c06236 	bltu	r6,r11,4f210 <__muldf3+0x344>
   4f088:	59807a26 	beq	r11,r6,4f274 <__muldf3+0x3a8>
   4f08c:	680b883a 	mov	r5,r13
   4f090:	b80f883a 	mov	r7,r23
   4f094:	6009883a 	mov	r4,r12
   4f098:	b00d883a 	mov	r6,r22
   4f09c:	004d9cc0 	call	4d9cc <__muldi3>
   4f0a0:	1009883a 	mov	r4,r2
   4f0a4:	000f883a 	mov	r7,zero
   4f0a8:	1545883a 	add	r2,r2,r21
   4f0ac:	1111803a 	cmpltu	r8,r2,r4
   4f0b0:	19c7883a 	add	r3,r3,r7
   4f0b4:	40c7883a 	add	r3,r8,r3
   4f0b8:	88cb883a 	add	r5,r17,r3
   4f0bc:	d8c00617 	ldw	r3,24(sp)
   4f0c0:	8089883a 	add	r4,r16,r2
   4f0c4:	d8800b17 	ldw	r2,44(sp)
   4f0c8:	18c00104 	addi	r3,r3,4
   4f0cc:	240d803a 	cmpltu	r6,r4,r16
   4f0d0:	10c7883a 	add	r3,r2,r3
   4f0d4:	2013883a 	mov	r9,r4
   4f0d8:	d8800a17 	ldw	r2,40(sp)
   4f0dc:	d9000517 	ldw	r4,20(sp)
   4f0e0:	314d883a 	add	r6,r6,r5
   4f0e4:	3015883a 	mov	r10,r6
   4f0e8:	2088c03a 	cmpne	r4,r4,r2
   4f0ec:	00880034 	movhi	r2,8192
   4f0f0:	10bfffc4 	addi	r2,r2,-1
   4f0f4:	d9000f15 	stw	r4,60(sp)
   4f0f8:	d8c01015 	stw	r3,64(sp)
   4f0fc:	1180162e 	bgeu	r2,r6,4f158 <__muldf3+0x28c>
   4f100:	1811883a 	mov	r8,r3
   4f104:	101f883a 	mov	r15,r2
   4f108:	980497fa 	slli	r2,r19,31
   4f10c:	9016d07a 	srli	r11,r18,1
   4f110:	500697fa 	slli	r3,r10,31
   4f114:	480cd07a 	srli	r6,r9,1
   4f118:	500ed07a 	srli	r7,r10,1
   4f11c:	12d6b03a 	or	r11,r2,r11
   4f120:	00800044 	movi	r2,1
   4f124:	198cb03a 	or	r6,r3,r6
   4f128:	4888703a 	and	r4,r9,r2
   4f12c:	9818d07a 	srli	r12,r19,1
   4f130:	001b883a 	mov	r13,zero
   4f134:	03a00034 	movhi	r14,32768
   4f138:	3013883a 	mov	r9,r6
   4f13c:	3815883a 	mov	r10,r7
   4f140:	4091883a 	add	r8,r8,r2
   4f144:	20000226 	beq	r4,zero,4f150 <__muldf3+0x284>
   4f148:	5b64b03a 	or	r18,r11,r13
   4f14c:	63a6b03a 	or	r19,r12,r14
   4f150:	7abfed36 	bltu	r15,r10,4f108 <__muldf3+0x23c>
   4f154:	da001015 	stw	r8,64(sp)
   4f158:	00840034 	movhi	r2,4096
   4f15c:	10bfffc4 	addi	r2,r2,-1
   4f160:	12801436 	bltu	r2,r10,4f1b4 <__muldf3+0x2e8>
   4f164:	da001017 	ldw	r8,64(sp)
   4f168:	101f883a 	mov	r15,r2
   4f16c:	4a45883a 	add	r2,r9,r9
   4f170:	124d803a 	cmpltu	r6,r2,r9
   4f174:	5287883a 	add	r3,r10,r10
   4f178:	9497883a 	add	r11,r18,r18
   4f17c:	5c8f803a 	cmpltu	r7,r11,r18
   4f180:	9cd9883a 	add	r12,r19,r19
   4f184:	01000044 	movi	r4,1
   4f188:	30cd883a 	add	r6,r6,r3
   4f18c:	3b0f883a 	add	r7,r7,r12
   4f190:	423fffc4 	addi	r8,r8,-1
   4f194:	1013883a 	mov	r9,r2
   4f198:	3015883a 	mov	r10,r6
   4f19c:	111ab03a 	or	r13,r2,r4
   4f1a0:	98003016 	blt	r19,zero,4f264 <__muldf3+0x398>
   4f1a4:	5825883a 	mov	r18,r11
   4f1a8:	3827883a 	mov	r19,r7
   4f1ac:	7abfef2e 	bgeu	r15,r10,4f16c <__muldf3+0x2a0>
   4f1b0:	da001015 	stw	r8,64(sp)
   4f1b4:	00803fc4 	movi	r2,255
   4f1b8:	488e703a 	and	r7,r9,r2
   4f1bc:	00802004 	movi	r2,128
   4f1c0:	0007883a 	mov	r3,zero
   4f1c4:	0011883a 	mov	r8,zero
   4f1c8:	38801826 	beq	r7,r2,4f22c <__muldf3+0x360>
   4f1cc:	008000c4 	movi	r2,3
   4f1d0:	d9000e04 	addi	r4,sp,56
   4f1d4:	da801215 	stw	r10,72(sp)
   4f1d8:	d8800e15 	stw	r2,56(sp)
   4f1dc:	da401115 	stw	r9,68(sp)
   4f1e0:	003f6a06 	br	4ef8c <__muldf3+0xc0>
   4f1e4:	89802126 	beq	r17,r6,4f26c <__muldf3+0x3a0>
   4f1e8:	0009883a 	mov	r4,zero
   4f1ec:	5105883a 	add	r2,r10,r4
   4f1f0:	128d803a 	cmpltu	r6,r2,r10
   4f1f4:	5d07883a 	add	r3,r11,r20
   4f1f8:	30cd883a 	add	r6,r6,r3
   4f1fc:	0021883a 	mov	r16,zero
   4f200:	0023883a 	mov	r17,zero
   4f204:	1025883a 	mov	r18,r2
   4f208:	3027883a 	mov	r19,r6
   4f20c:	32ff9e2e 	bgeu	r6,r11,4f088 <__muldf3+0x1bc>
   4f210:	00800044 	movi	r2,1
   4f214:	8089883a 	add	r4,r16,r2
   4f218:	240d803a 	cmpltu	r6,r4,r16
   4f21c:	344d883a 	add	r6,r6,r17
   4f220:	2021883a 	mov	r16,r4
   4f224:	3023883a 	mov	r17,r6
   4f228:	003f9806 	br	4f08c <__muldf3+0x1c0>
   4f22c:	403fe71e 	bne	r8,zero,4f1cc <__muldf3+0x300>
   4f230:	01004004 	movi	r4,256
   4f234:	4904703a 	and	r2,r9,r4
   4f238:	10c4b03a 	or	r2,r2,r3
   4f23c:	103fe31e 	bne	r2,zero,4f1cc <__muldf3+0x300>
   4f240:	94c4b03a 	or	r2,r18,r19
   4f244:	103fe126 	beq	r2,zero,4f1cc <__muldf3+0x300>
   4f248:	49c5883a 	add	r2,r9,r7
   4f24c:	1251803a 	cmpltu	r8,r2,r9
   4f250:	4291883a 	add	r8,r8,r10
   4f254:	013fc004 	movi	r4,-256
   4f258:	1112703a 	and	r9,r2,r4
   4f25c:	4015883a 	mov	r10,r8
   4f260:	003fda06 	br	4f1cc <__muldf3+0x300>
   4f264:	6813883a 	mov	r9,r13
   4f268:	003fce06 	br	4f1a4 <__muldf3+0x2d8>
   4f26c:	143f7c36 	bltu	r2,r16,4f060 <__muldf3+0x194>
   4f270:	003fdd06 	br	4f1e8 <__muldf3+0x31c>
   4f274:	12bf852e 	bgeu	r2,r10,4f08c <__muldf3+0x1c0>
   4f278:	003fe506 	br	4f210 <__muldf3+0x344>
   4f27c:	00800084 	movi	r2,2
   4f280:	20bf351e 	bne	r4,r2,4ef58 <__muldf3+0x8c>
   4f284:	01000174 	movhi	r4,5
   4f288:	210edf04 	addi	r4,r4,15228
   4f28c:	003f3f06 	br	4ef8c <__muldf3+0xc0>

0004f290 <__divdf3>:
   4f290:	deffed04 	addi	sp,sp,-76
   4f294:	dcc01115 	stw	r19,68(sp)
   4f298:	dcc00404 	addi	r19,sp,16
   4f29c:	2011883a 	mov	r8,r4
   4f2a0:	2813883a 	mov	r9,r5
   4f2a4:	dc000e15 	stw	r16,56(sp)
   4f2a8:	d809883a 	mov	r4,sp
   4f2ac:	980b883a 	mov	r5,r19
   4f2b0:	dc000904 	addi	r16,sp,36
   4f2b4:	dfc01215 	stw	ra,72(sp)
   4f2b8:	da400115 	stw	r9,4(sp)
   4f2bc:	d9c00315 	stw	r7,12(sp)
   4f2c0:	da000015 	stw	r8,0(sp)
   4f2c4:	d9800215 	stw	r6,8(sp)
   4f2c8:	dc801015 	stw	r18,64(sp)
   4f2cc:	dc400f15 	stw	r17,60(sp)
   4f2d0:	004fec80 	call	4fec8 <__unpack_d>
   4f2d4:	d9000204 	addi	r4,sp,8
   4f2d8:	800b883a 	mov	r5,r16
   4f2dc:	004fec80 	call	4fec8 <__unpack_d>
   4f2e0:	d9000417 	ldw	r4,16(sp)
   4f2e4:	00800044 	movi	r2,1
   4f2e8:	11000b2e 	bgeu	r2,r4,4f318 <__divdf3+0x88>
   4f2ec:	d9400917 	ldw	r5,36(sp)
   4f2f0:	1140762e 	bgeu	r2,r5,4f4cc <__divdf3+0x23c>
   4f2f4:	d8800517 	ldw	r2,20(sp)
   4f2f8:	d8c00a17 	ldw	r3,40(sp)
   4f2fc:	01800104 	movi	r6,4
   4f300:	10c4f03a 	xor	r2,r2,r3
   4f304:	d8800515 	stw	r2,20(sp)
   4f308:	21800226 	beq	r4,r6,4f314 <__divdf3+0x84>
   4f30c:	00800084 	movi	r2,2
   4f310:	2080141e 	bne	r4,r2,4f364 <__divdf3+0xd4>
   4f314:	29000926 	beq	r5,r4,4f33c <__divdf3+0xac>
   4f318:	9809883a 	mov	r4,r19
   4f31c:	0040a780 	call	40a78 <__pack_d>
   4f320:	dfc01217 	ldw	ra,72(sp)
   4f324:	dcc01117 	ldw	r19,68(sp)
   4f328:	dc801017 	ldw	r18,64(sp)
   4f32c:	dc400f17 	ldw	r17,60(sp)
   4f330:	dc000e17 	ldw	r16,56(sp)
   4f334:	dec01304 	addi	sp,sp,76
   4f338:	f800283a 	ret
   4f33c:	01000174 	movhi	r4,5
   4f340:	210edf04 	addi	r4,r4,15228
   4f344:	0040a780 	call	40a78 <__pack_d>
   4f348:	dfc01217 	ldw	ra,72(sp)
   4f34c:	dcc01117 	ldw	r19,68(sp)
   4f350:	dc801017 	ldw	r18,64(sp)
   4f354:	dc400f17 	ldw	r17,60(sp)
   4f358:	dc000e17 	ldw	r16,56(sp)
   4f35c:	dec01304 	addi	sp,sp,76
   4f360:	f800283a 	ret
   4f364:	29805b26 	beq	r5,r6,4f4d4 <__divdf3+0x244>
   4f368:	28802d26 	beq	r5,r2,4f420 <__divdf3+0x190>
   4f36c:	d8c00617 	ldw	r3,24(sp)
   4f370:	d8800b17 	ldw	r2,44(sp)
   4f374:	d9c00817 	ldw	r7,32(sp)
   4f378:	dc400d17 	ldw	r17,52(sp)
   4f37c:	188bc83a 	sub	r5,r3,r2
   4f380:	d9800717 	ldw	r6,28(sp)
   4f384:	dc000c17 	ldw	r16,48(sp)
   4f388:	d9400615 	stw	r5,24(sp)
   4f38c:	3c403836 	bltu	r7,r17,4f470 <__divdf3+0x1e0>
   4f390:	89c03626 	beq	r17,r7,4f46c <__divdf3+0x1dc>
   4f394:	0015883a 	mov	r10,zero
   4f398:	001d883a 	mov	r14,zero
   4f39c:	02c40034 	movhi	r11,4096
   4f3a0:	001f883a 	mov	r15,zero
   4f3a4:	003f883a 	mov	ra,zero
   4f3a8:	04800f44 	movi	r18,61
   4f3ac:	00000f06 	br	4f3ec <__divdf3+0x15c>
   4f3b0:	601d883a 	mov	r14,r12
   4f3b4:	681f883a 	mov	r15,r13
   4f3b8:	400d883a 	mov	r6,r8
   4f3bc:	100f883a 	mov	r7,r2
   4f3c0:	3191883a 	add	r8,r6,r6
   4f3c4:	5808d07a 	srli	r4,r11,1
   4f3c8:	4185803a 	cmpltu	r2,r8,r6
   4f3cc:	39d3883a 	add	r9,r7,r7
   4f3d0:	28c6b03a 	or	r3,r5,r3
   4f3d4:	1245883a 	add	r2,r2,r9
   4f3d8:	1815883a 	mov	r10,r3
   4f3dc:	2017883a 	mov	r11,r4
   4f3e0:	400d883a 	mov	r6,r8
   4f3e4:	100f883a 	mov	r7,r2
   4f3e8:	fc801726 	beq	ra,r18,4f448 <__divdf3+0x1b8>
   4f3ec:	580a97fa 	slli	r5,r11,31
   4f3f0:	5006d07a 	srli	r3,r10,1
   4f3f4:	ffc00044 	addi	ra,ra,1
   4f3f8:	3c7ff136 	bltu	r7,r17,4f3c0 <__divdf3+0x130>
   4f3fc:	3411c83a 	sub	r8,r6,r16
   4f400:	3205803a 	cmpltu	r2,r6,r8
   4f404:	3c53c83a 	sub	r9,r7,r17
   4f408:	7298b03a 	or	r12,r14,r10
   4f40c:	7adab03a 	or	r13,r15,r11
   4f410:	4885c83a 	sub	r2,r9,r2
   4f414:	89ffe61e 	bne	r17,r7,4f3b0 <__divdf3+0x120>
   4f418:	343fe936 	bltu	r6,r16,4f3c0 <__divdf3+0x130>
   4f41c:	003fe406 	br	4f3b0 <__divdf3+0x120>
   4f420:	9809883a 	mov	r4,r19
   4f424:	d9800415 	stw	r6,16(sp)
   4f428:	0040a780 	call	40a78 <__pack_d>
   4f42c:	dfc01217 	ldw	ra,72(sp)
   4f430:	dcc01117 	ldw	r19,68(sp)
   4f434:	dc801017 	ldw	r18,64(sp)
   4f438:	dc400f17 	ldw	r17,60(sp)
   4f43c:	dc000e17 	ldw	r16,56(sp)
   4f440:	dec01304 	addi	sp,sp,76
   4f444:	f800283a 	ret
   4f448:	00803fc4 	movi	r2,255
   4f44c:	7090703a 	and	r8,r14,r2
   4f450:	00802004 	movi	r2,128
   4f454:	0007883a 	mov	r3,zero
   4f458:	0013883a 	mov	r9,zero
   4f45c:	40800d26 	beq	r8,r2,4f494 <__divdf3+0x204>
   4f460:	dbc00815 	stw	r15,32(sp)
   4f464:	db800715 	stw	r14,28(sp)
   4f468:	003fab06 	br	4f318 <__divdf3+0x88>
   4f46c:	343fc92e 	bgeu	r6,r16,4f394 <__divdf3+0x104>
   4f470:	3185883a 	add	r2,r6,r6
   4f474:	1189803a 	cmpltu	r4,r2,r6
   4f478:	39c7883a 	add	r3,r7,r7
   4f47c:	20c9883a 	add	r4,r4,r3
   4f480:	297fffc4 	addi	r5,r5,-1
   4f484:	100d883a 	mov	r6,r2
   4f488:	200f883a 	mov	r7,r4
   4f48c:	d9400615 	stw	r5,24(sp)
   4f490:	003fc006 	br	4f394 <__divdf3+0x104>
   4f494:	483ff21e 	bne	r9,zero,4f460 <__divdf3+0x1d0>
   4f498:	01004004 	movi	r4,256
   4f49c:	7104703a 	and	r2,r14,r4
   4f4a0:	10c4b03a 	or	r2,r2,r3
   4f4a4:	103fee1e 	bne	r2,zero,4f460 <__divdf3+0x1d0>
   4f4a8:	31c4b03a 	or	r2,r6,r7
   4f4ac:	103fec26 	beq	r2,zero,4f460 <__divdf3+0x1d0>
   4f4b0:	7205883a 	add	r2,r14,r8
   4f4b4:	1391803a 	cmpltu	r8,r2,r14
   4f4b8:	43d1883a 	add	r8,r8,r15
   4f4bc:	013fc004 	movi	r4,-256
   4f4c0:	111c703a 	and	r14,r2,r4
   4f4c4:	401f883a 	mov	r15,r8
   4f4c8:	003fe506 	br	4f460 <__divdf3+0x1d0>
   4f4cc:	8009883a 	mov	r4,r16
   4f4d0:	003f9206 	br	4f31c <__divdf3+0x8c>
   4f4d4:	9809883a 	mov	r4,r19
   4f4d8:	d8000715 	stw	zero,28(sp)
   4f4dc:	d8000815 	stw	zero,32(sp)
   4f4e0:	d8000615 	stw	zero,24(sp)
   4f4e4:	003f8d06 	br	4f31c <__divdf3+0x8c>

0004f4e8 <__eqdf2>:
   4f4e8:	deffef04 	addi	sp,sp,-68
   4f4ec:	dc400f15 	stw	r17,60(sp)
   4f4f0:	dc400404 	addi	r17,sp,16
   4f4f4:	2005883a 	mov	r2,r4
   4f4f8:	2807883a 	mov	r3,r5
   4f4fc:	dc000e15 	stw	r16,56(sp)
   4f500:	d809883a 	mov	r4,sp
   4f504:	880b883a 	mov	r5,r17
   4f508:	dc000904 	addi	r16,sp,36
   4f50c:	d8c00115 	stw	r3,4(sp)
   4f510:	d8800015 	stw	r2,0(sp)
   4f514:	d9800215 	stw	r6,8(sp)
   4f518:	dfc01015 	stw	ra,64(sp)
   4f51c:	d9c00315 	stw	r7,12(sp)
   4f520:	004fec80 	call	4fec8 <__unpack_d>
   4f524:	d9000204 	addi	r4,sp,8
   4f528:	800b883a 	mov	r5,r16
   4f52c:	004fec80 	call	4fec8 <__unpack_d>
   4f530:	d8800417 	ldw	r2,16(sp)
   4f534:	00c00044 	movi	r3,1
   4f538:	180d883a 	mov	r6,r3
   4f53c:	1880062e 	bgeu	r3,r2,4f558 <__eqdf2+0x70>
   4f540:	d8800917 	ldw	r2,36(sp)
   4f544:	8809883a 	mov	r4,r17
   4f548:	800b883a 	mov	r5,r16
   4f54c:	1880022e 	bgeu	r3,r2,4f558 <__eqdf2+0x70>
   4f550:	00500000 	call	50000 <__fpcmp_parts_d>
   4f554:	100d883a 	mov	r6,r2
   4f558:	3005883a 	mov	r2,r6
   4f55c:	dfc01017 	ldw	ra,64(sp)
   4f560:	dc400f17 	ldw	r17,60(sp)
   4f564:	dc000e17 	ldw	r16,56(sp)
   4f568:	dec01104 	addi	sp,sp,68
   4f56c:	f800283a 	ret

0004f570 <__nedf2>:
   4f570:	deffef04 	addi	sp,sp,-68
   4f574:	dc400f15 	stw	r17,60(sp)
   4f578:	dc400404 	addi	r17,sp,16
   4f57c:	2005883a 	mov	r2,r4
   4f580:	2807883a 	mov	r3,r5
   4f584:	dc000e15 	stw	r16,56(sp)
   4f588:	d809883a 	mov	r4,sp
   4f58c:	880b883a 	mov	r5,r17
   4f590:	dc000904 	addi	r16,sp,36
   4f594:	d8c00115 	stw	r3,4(sp)
   4f598:	d8800015 	stw	r2,0(sp)
   4f59c:	d9800215 	stw	r6,8(sp)
   4f5a0:	dfc01015 	stw	ra,64(sp)
   4f5a4:	d9c00315 	stw	r7,12(sp)
   4f5a8:	004fec80 	call	4fec8 <__unpack_d>
   4f5ac:	d9000204 	addi	r4,sp,8
   4f5b0:	800b883a 	mov	r5,r16
   4f5b4:	004fec80 	call	4fec8 <__unpack_d>
   4f5b8:	d8800417 	ldw	r2,16(sp)
   4f5bc:	00c00044 	movi	r3,1
   4f5c0:	180d883a 	mov	r6,r3
   4f5c4:	1880062e 	bgeu	r3,r2,4f5e0 <__nedf2+0x70>
   4f5c8:	d8800917 	ldw	r2,36(sp)
   4f5cc:	8809883a 	mov	r4,r17
   4f5d0:	800b883a 	mov	r5,r16
   4f5d4:	1880022e 	bgeu	r3,r2,4f5e0 <__nedf2+0x70>
   4f5d8:	00500000 	call	50000 <__fpcmp_parts_d>
   4f5dc:	100d883a 	mov	r6,r2
   4f5e0:	3005883a 	mov	r2,r6
   4f5e4:	dfc01017 	ldw	ra,64(sp)
   4f5e8:	dc400f17 	ldw	r17,60(sp)
   4f5ec:	dc000e17 	ldw	r16,56(sp)
   4f5f0:	dec01104 	addi	sp,sp,68
   4f5f4:	f800283a 	ret

0004f5f8 <__gtdf2>:
   4f5f8:	deffef04 	addi	sp,sp,-68
   4f5fc:	dc400f15 	stw	r17,60(sp)
   4f600:	dc400404 	addi	r17,sp,16
   4f604:	2005883a 	mov	r2,r4
   4f608:	2807883a 	mov	r3,r5
   4f60c:	dc000e15 	stw	r16,56(sp)
   4f610:	d809883a 	mov	r4,sp
   4f614:	880b883a 	mov	r5,r17
   4f618:	dc000904 	addi	r16,sp,36
   4f61c:	d8c00115 	stw	r3,4(sp)
   4f620:	d8800015 	stw	r2,0(sp)
   4f624:	d9800215 	stw	r6,8(sp)
   4f628:	dfc01015 	stw	ra,64(sp)
   4f62c:	d9c00315 	stw	r7,12(sp)
   4f630:	004fec80 	call	4fec8 <__unpack_d>
   4f634:	d9000204 	addi	r4,sp,8
   4f638:	800b883a 	mov	r5,r16
   4f63c:	004fec80 	call	4fec8 <__unpack_d>
   4f640:	d8800417 	ldw	r2,16(sp)
   4f644:	00c00044 	movi	r3,1
   4f648:	01bfffc4 	movi	r6,-1
   4f64c:	1880062e 	bgeu	r3,r2,4f668 <__gtdf2+0x70>
   4f650:	d8800917 	ldw	r2,36(sp)
   4f654:	8809883a 	mov	r4,r17
   4f658:	800b883a 	mov	r5,r16
   4f65c:	1880022e 	bgeu	r3,r2,4f668 <__gtdf2+0x70>
   4f660:	00500000 	call	50000 <__fpcmp_parts_d>
   4f664:	100d883a 	mov	r6,r2
   4f668:	3005883a 	mov	r2,r6
   4f66c:	dfc01017 	ldw	ra,64(sp)
   4f670:	dc400f17 	ldw	r17,60(sp)
   4f674:	dc000e17 	ldw	r16,56(sp)
   4f678:	dec01104 	addi	sp,sp,68
   4f67c:	f800283a 	ret

0004f680 <__gedf2>:
   4f680:	deffef04 	addi	sp,sp,-68
   4f684:	dc400f15 	stw	r17,60(sp)
   4f688:	dc400404 	addi	r17,sp,16
   4f68c:	2005883a 	mov	r2,r4
   4f690:	2807883a 	mov	r3,r5
   4f694:	dc000e15 	stw	r16,56(sp)
   4f698:	d809883a 	mov	r4,sp
   4f69c:	880b883a 	mov	r5,r17
   4f6a0:	dc000904 	addi	r16,sp,36
   4f6a4:	d8c00115 	stw	r3,4(sp)
   4f6a8:	d8800015 	stw	r2,0(sp)
   4f6ac:	d9800215 	stw	r6,8(sp)
   4f6b0:	dfc01015 	stw	ra,64(sp)
   4f6b4:	d9c00315 	stw	r7,12(sp)
   4f6b8:	004fec80 	call	4fec8 <__unpack_d>
   4f6bc:	d9000204 	addi	r4,sp,8
   4f6c0:	800b883a 	mov	r5,r16
   4f6c4:	004fec80 	call	4fec8 <__unpack_d>
   4f6c8:	d8800417 	ldw	r2,16(sp)
   4f6cc:	00c00044 	movi	r3,1
   4f6d0:	01bfffc4 	movi	r6,-1
   4f6d4:	1880062e 	bgeu	r3,r2,4f6f0 <__gedf2+0x70>
   4f6d8:	d8800917 	ldw	r2,36(sp)
   4f6dc:	8809883a 	mov	r4,r17
   4f6e0:	800b883a 	mov	r5,r16
   4f6e4:	1880022e 	bgeu	r3,r2,4f6f0 <__gedf2+0x70>
   4f6e8:	00500000 	call	50000 <__fpcmp_parts_d>
   4f6ec:	100d883a 	mov	r6,r2
   4f6f0:	3005883a 	mov	r2,r6
   4f6f4:	dfc01017 	ldw	ra,64(sp)
   4f6f8:	dc400f17 	ldw	r17,60(sp)
   4f6fc:	dc000e17 	ldw	r16,56(sp)
   4f700:	dec01104 	addi	sp,sp,68
   4f704:	f800283a 	ret

0004f708 <__ltdf2>:
   4f708:	deffef04 	addi	sp,sp,-68
   4f70c:	dc400f15 	stw	r17,60(sp)
   4f710:	dc400404 	addi	r17,sp,16
   4f714:	2005883a 	mov	r2,r4
   4f718:	2807883a 	mov	r3,r5
   4f71c:	dc000e15 	stw	r16,56(sp)
   4f720:	d809883a 	mov	r4,sp
   4f724:	880b883a 	mov	r5,r17
   4f728:	dc000904 	addi	r16,sp,36
   4f72c:	d8c00115 	stw	r3,4(sp)
   4f730:	d8800015 	stw	r2,0(sp)
   4f734:	d9800215 	stw	r6,8(sp)
   4f738:	dfc01015 	stw	ra,64(sp)
   4f73c:	d9c00315 	stw	r7,12(sp)
   4f740:	004fec80 	call	4fec8 <__unpack_d>
   4f744:	d9000204 	addi	r4,sp,8
   4f748:	800b883a 	mov	r5,r16
   4f74c:	004fec80 	call	4fec8 <__unpack_d>
   4f750:	d8800417 	ldw	r2,16(sp)
   4f754:	00c00044 	movi	r3,1
   4f758:	180d883a 	mov	r6,r3
   4f75c:	1880062e 	bgeu	r3,r2,4f778 <__ltdf2+0x70>
   4f760:	d8800917 	ldw	r2,36(sp)
   4f764:	8809883a 	mov	r4,r17
   4f768:	800b883a 	mov	r5,r16
   4f76c:	1880022e 	bgeu	r3,r2,4f778 <__ltdf2+0x70>
   4f770:	00500000 	call	50000 <__fpcmp_parts_d>
   4f774:	100d883a 	mov	r6,r2
   4f778:	3005883a 	mov	r2,r6
   4f77c:	dfc01017 	ldw	ra,64(sp)
   4f780:	dc400f17 	ldw	r17,60(sp)
   4f784:	dc000e17 	ldw	r16,56(sp)
   4f788:	dec01104 	addi	sp,sp,68
   4f78c:	f800283a 	ret

0004f790 <__ledf2>:
   4f790:	deffef04 	addi	sp,sp,-68
   4f794:	dc400f15 	stw	r17,60(sp)
   4f798:	dc400404 	addi	r17,sp,16
   4f79c:	2005883a 	mov	r2,r4
   4f7a0:	2807883a 	mov	r3,r5
   4f7a4:	dc000e15 	stw	r16,56(sp)
   4f7a8:	d809883a 	mov	r4,sp
   4f7ac:	880b883a 	mov	r5,r17
   4f7b0:	dc000904 	addi	r16,sp,36
   4f7b4:	d8c00115 	stw	r3,4(sp)
   4f7b8:	d8800015 	stw	r2,0(sp)
   4f7bc:	d9800215 	stw	r6,8(sp)
   4f7c0:	dfc01015 	stw	ra,64(sp)
   4f7c4:	d9c00315 	stw	r7,12(sp)
   4f7c8:	004fec80 	call	4fec8 <__unpack_d>
   4f7cc:	d9000204 	addi	r4,sp,8
   4f7d0:	800b883a 	mov	r5,r16
   4f7d4:	004fec80 	call	4fec8 <__unpack_d>
   4f7d8:	d8800417 	ldw	r2,16(sp)
   4f7dc:	00c00044 	movi	r3,1
   4f7e0:	180d883a 	mov	r6,r3
   4f7e4:	1880062e 	bgeu	r3,r2,4f800 <__ledf2+0x70>
   4f7e8:	d8800917 	ldw	r2,36(sp)
   4f7ec:	8809883a 	mov	r4,r17
   4f7f0:	800b883a 	mov	r5,r16
   4f7f4:	1880022e 	bgeu	r3,r2,4f800 <__ledf2+0x70>
   4f7f8:	00500000 	call	50000 <__fpcmp_parts_d>
   4f7fc:	100d883a 	mov	r6,r2
   4f800:	3005883a 	mov	r2,r6
   4f804:	dfc01017 	ldw	ra,64(sp)
   4f808:	dc400f17 	ldw	r17,60(sp)
   4f80c:	dc000e17 	ldw	r16,56(sp)
   4f810:	dec01104 	addi	sp,sp,68
   4f814:	f800283a 	ret

0004f818 <__floatsidf>:
   4f818:	2006d7fa 	srli	r3,r4,31
   4f81c:	defff604 	addi	sp,sp,-40
   4f820:	008000c4 	movi	r2,3
   4f824:	dfc00915 	stw	ra,36(sp)
   4f828:	dcc00815 	stw	r19,32(sp)
   4f82c:	dc800715 	stw	r18,28(sp)
   4f830:	dc400615 	stw	r17,24(sp)
   4f834:	dc000515 	stw	r16,20(sp)
   4f838:	d8800015 	stw	r2,0(sp)
   4f83c:	d8c00115 	stw	r3,4(sp)
   4f840:	20000f1e 	bne	r4,zero,4f880 <__floatsidf+0x68>
   4f844:	00800084 	movi	r2,2
   4f848:	d8800015 	stw	r2,0(sp)
   4f84c:	d809883a 	mov	r4,sp
   4f850:	0040a780 	call	40a78 <__pack_d>
   4f854:	1009883a 	mov	r4,r2
   4f858:	180b883a 	mov	r5,r3
   4f85c:	2005883a 	mov	r2,r4
   4f860:	2807883a 	mov	r3,r5
   4f864:	dfc00917 	ldw	ra,36(sp)
   4f868:	dcc00817 	ldw	r19,32(sp)
   4f86c:	dc800717 	ldw	r18,28(sp)
   4f870:	dc400617 	ldw	r17,24(sp)
   4f874:	dc000517 	ldw	r16,20(sp)
   4f878:	dec00a04 	addi	sp,sp,40
   4f87c:	f800283a 	ret
   4f880:	00800f04 	movi	r2,60
   4f884:	1807003a 	cmpeq	r3,r3,zero
   4f888:	d8800215 	stw	r2,8(sp)
   4f88c:	18001126 	beq	r3,zero,4f8d4 <__floatsidf+0xbc>
   4f890:	0027883a 	mov	r19,zero
   4f894:	2025883a 	mov	r18,r4
   4f898:	d9000315 	stw	r4,12(sp)
   4f89c:	dcc00415 	stw	r19,16(sp)
   4f8a0:	004fd740 	call	4fd74 <__clzsi2>
   4f8a4:	11000744 	addi	r4,r2,29
   4f8a8:	013fe80e 	bge	zero,r4,4f84c <__floatsidf+0x34>
   4f8ac:	10bfff44 	addi	r2,r2,-3
   4f8b0:	10000c16 	blt	r2,zero,4f8e4 <__floatsidf+0xcc>
   4f8b4:	90a2983a 	sll	r17,r18,r2
   4f8b8:	0021883a 	mov	r16,zero
   4f8bc:	d8800217 	ldw	r2,8(sp)
   4f8c0:	dc400415 	stw	r17,16(sp)
   4f8c4:	dc000315 	stw	r16,12(sp)
   4f8c8:	1105c83a 	sub	r2,r2,r4
   4f8cc:	d8800215 	stw	r2,8(sp)
   4f8d0:	003fde06 	br	4f84c <__floatsidf+0x34>
   4f8d4:	00a00034 	movhi	r2,32768
   4f8d8:	20800a26 	beq	r4,r2,4f904 <__floatsidf+0xec>
   4f8dc:	0109c83a 	sub	r4,zero,r4
   4f8e0:	003feb06 	br	4f890 <__floatsidf+0x78>
   4f8e4:	9006d07a 	srli	r3,r18,1
   4f8e8:	008007c4 	movi	r2,31
   4f8ec:	1105c83a 	sub	r2,r2,r4
   4f8f0:	1886d83a 	srl	r3,r3,r2
   4f8f4:	9922983a 	sll	r17,r19,r4
   4f8f8:	9120983a 	sll	r16,r18,r4
   4f8fc:	1c62b03a 	or	r17,r3,r17
   4f900:	003fee06 	br	4f8bc <__floatsidf+0xa4>
   4f904:	0009883a 	mov	r4,zero
   4f908:	01707834 	movhi	r5,49632
   4f90c:	003fd306 	br	4f85c <__floatsidf+0x44>

0004f910 <__fixdfsi>:
   4f910:	defff804 	addi	sp,sp,-32
   4f914:	2005883a 	mov	r2,r4
   4f918:	2807883a 	mov	r3,r5
   4f91c:	d809883a 	mov	r4,sp
   4f920:	d9400204 	addi	r5,sp,8
   4f924:	d8c00115 	stw	r3,4(sp)
   4f928:	d8800015 	stw	r2,0(sp)
   4f92c:	dfc00715 	stw	ra,28(sp)
   4f930:	004fec80 	call	4fec8 <__unpack_d>
   4f934:	d8c00217 	ldw	r3,8(sp)
   4f938:	00800084 	movi	r2,2
   4f93c:	1880051e 	bne	r3,r2,4f954 <__fixdfsi+0x44>
   4f940:	0007883a 	mov	r3,zero
   4f944:	1805883a 	mov	r2,r3
   4f948:	dfc00717 	ldw	ra,28(sp)
   4f94c:	dec00804 	addi	sp,sp,32
   4f950:	f800283a 	ret
   4f954:	00800044 	movi	r2,1
   4f958:	10fff92e 	bgeu	r2,r3,4f940 <__fixdfsi+0x30>
   4f95c:	00800104 	movi	r2,4
   4f960:	18800426 	beq	r3,r2,4f974 <__fixdfsi+0x64>
   4f964:	d8c00417 	ldw	r3,16(sp)
   4f968:	183ff516 	blt	r3,zero,4f940 <__fixdfsi+0x30>
   4f96c:	00800784 	movi	r2,30
   4f970:	10c0080e 	bge	r2,r3,4f994 <__fixdfsi+0x84>
   4f974:	d8800317 	ldw	r2,12(sp)
   4f978:	1000121e 	bne	r2,zero,4f9c4 <__fixdfsi+0xb4>
   4f97c:	00e00034 	movhi	r3,32768
   4f980:	18ffffc4 	addi	r3,r3,-1
   4f984:	1805883a 	mov	r2,r3
   4f988:	dfc00717 	ldw	ra,28(sp)
   4f98c:	dec00804 	addi	sp,sp,32
   4f990:	f800283a 	ret
   4f994:	00800f04 	movi	r2,60
   4f998:	10d1c83a 	sub	r8,r2,r3
   4f99c:	40bff804 	addi	r2,r8,-32
   4f9a0:	d9800517 	ldw	r6,20(sp)
   4f9a4:	d9c00617 	ldw	r7,24(sp)
   4f9a8:	10000816 	blt	r2,zero,4f9cc <__fixdfsi+0xbc>
   4f9ac:	3888d83a 	srl	r4,r7,r2
   4f9b0:	d8800317 	ldw	r2,12(sp)
   4f9b4:	2007883a 	mov	r3,r4
   4f9b8:	103fe226 	beq	r2,zero,4f944 <__fixdfsi+0x34>
   4f9bc:	0107c83a 	sub	r3,zero,r4
   4f9c0:	003fe006 	br	4f944 <__fixdfsi+0x34>
   4f9c4:	00e00034 	movhi	r3,32768
   4f9c8:	003fde06 	br	4f944 <__fixdfsi+0x34>
   4f9cc:	39c7883a 	add	r3,r7,r7
   4f9d0:	008007c4 	movi	r2,31
   4f9d4:	1205c83a 	sub	r2,r2,r8
   4f9d8:	1886983a 	sll	r3,r3,r2
   4f9dc:	3208d83a 	srl	r4,r6,r8
   4f9e0:	1908b03a 	or	r4,r3,r4
   4f9e4:	003ff206 	br	4f9b0 <__fixdfsi+0xa0>

0004f9e8 <__truncdfsf2>:
   4f9e8:	defff804 	addi	sp,sp,-32
   4f9ec:	2005883a 	mov	r2,r4
   4f9f0:	2807883a 	mov	r3,r5
   4f9f4:	d809883a 	mov	r4,sp
   4f9f8:	d9400204 	addi	r5,sp,8
   4f9fc:	d8c00115 	stw	r3,4(sp)
   4fa00:	d8800015 	stw	r2,0(sp)
   4fa04:	dfc00715 	stw	ra,28(sp)
   4fa08:	004fec80 	call	4fec8 <__unpack_d>
   4fa0c:	d9c00517 	ldw	r7,20(sp)
   4fa10:	da000617 	ldw	r8,24(sp)
   4fa14:	02d00034 	movhi	r11,16384
   4fa18:	5affffc4 	addi	r11,r11,-1
   4fa1c:	3812d7ba 	srli	r9,r7,30
   4fa20:	401a90ba 	slli	r13,r8,2
   4fa24:	3ac4703a 	and	r2,r7,r11
   4fa28:	0007883a 	mov	r3,zero
   4fa2c:	6a52b03a 	or	r9,r13,r9
   4fa30:	10c4b03a 	or	r2,r2,r3
   4fa34:	d9000217 	ldw	r4,8(sp)
   4fa38:	d9400317 	ldw	r5,12(sp)
   4fa3c:	d9800417 	ldw	r6,16(sp)
   4fa40:	480f883a 	mov	r7,r9
   4fa44:	10000126 	beq	r2,zero,4fa4c <__truncdfsf2+0x64>
   4fa48:	49c00054 	ori	r7,r9,1
   4fa4c:	004fe9c0 	call	4fe9c <__make_fp>
   4fa50:	dfc00717 	ldw	ra,28(sp)
   4fa54:	dec00804 	addi	sp,sp,32
   4fa58:	f800283a 	ret

0004fa5c <__floatunsidf>:
   4fa5c:	defff204 	addi	sp,sp,-56
   4fa60:	dfc00d15 	stw	ra,52(sp)
   4fa64:	ddc00c15 	stw	r23,48(sp)
   4fa68:	dd800b15 	stw	r22,44(sp)
   4fa6c:	dd400a15 	stw	r21,40(sp)
   4fa70:	dd000915 	stw	r20,36(sp)
   4fa74:	dcc00815 	stw	r19,32(sp)
   4fa78:	dc800715 	stw	r18,28(sp)
   4fa7c:	dc400615 	stw	r17,24(sp)
   4fa80:	dc000515 	stw	r16,20(sp)
   4fa84:	d8000115 	stw	zero,4(sp)
   4fa88:	20000f1e 	bne	r4,zero,4fac8 <__floatunsidf+0x6c>
   4fa8c:	00800084 	movi	r2,2
   4fa90:	d8800015 	stw	r2,0(sp)
   4fa94:	d809883a 	mov	r4,sp
   4fa98:	0040a780 	call	40a78 <__pack_d>
   4fa9c:	dfc00d17 	ldw	ra,52(sp)
   4faa0:	ddc00c17 	ldw	r23,48(sp)
   4faa4:	dd800b17 	ldw	r22,44(sp)
   4faa8:	dd400a17 	ldw	r21,40(sp)
   4faac:	dd000917 	ldw	r20,36(sp)
   4fab0:	dcc00817 	ldw	r19,32(sp)
   4fab4:	dc800717 	ldw	r18,28(sp)
   4fab8:	dc400617 	ldw	r17,24(sp)
   4fabc:	dc000517 	ldw	r16,20(sp)
   4fac0:	dec00e04 	addi	sp,sp,56
   4fac4:	f800283a 	ret
   4fac8:	008000c4 	movi	r2,3
   4facc:	00c00f04 	movi	r3,60
   4fad0:	002f883a 	mov	r23,zero
   4fad4:	202d883a 	mov	r22,r4
   4fad8:	d8800015 	stw	r2,0(sp)
   4fadc:	d8c00215 	stw	r3,8(sp)
   4fae0:	d9000315 	stw	r4,12(sp)
   4fae4:	ddc00415 	stw	r23,16(sp)
   4fae8:	004fd740 	call	4fd74 <__clzsi2>
   4faec:	12400744 	addi	r9,r2,29
   4faf0:	48000b16 	blt	r9,zero,4fb20 <__floatunsidf+0xc4>
   4faf4:	483fe726 	beq	r9,zero,4fa94 <__floatunsidf+0x38>
   4faf8:	10bfff44 	addi	r2,r2,-3
   4fafc:	10002e16 	blt	r2,zero,4fbb8 <__floatunsidf+0x15c>
   4fb00:	b0a2983a 	sll	r17,r22,r2
   4fb04:	0021883a 	mov	r16,zero
   4fb08:	d8800217 	ldw	r2,8(sp)
   4fb0c:	dc400415 	stw	r17,16(sp)
   4fb10:	dc000315 	stw	r16,12(sp)
   4fb14:	1245c83a 	sub	r2,r2,r9
   4fb18:	d8800215 	stw	r2,8(sp)
   4fb1c:	003fdd06 	br	4fa94 <__floatunsidf+0x38>
   4fb20:	0255c83a 	sub	r10,zero,r9
   4fb24:	51bff804 	addi	r6,r10,-32
   4fb28:	30001b16 	blt	r6,zero,4fb98 <__floatunsidf+0x13c>
   4fb2c:	b9a8d83a 	srl	r20,r23,r6
   4fb30:	002b883a 	mov	r21,zero
   4fb34:	000f883a 	mov	r7,zero
   4fb38:	01000044 	movi	r4,1
   4fb3c:	0011883a 	mov	r8,zero
   4fb40:	30002516 	blt	r6,zero,4fbd8 <__floatunsidf+0x17c>
   4fb44:	21a6983a 	sll	r19,r4,r6
   4fb48:	0025883a 	mov	r18,zero
   4fb4c:	00bfffc4 	movi	r2,-1
   4fb50:	9089883a 	add	r4,r18,r2
   4fb54:	988b883a 	add	r5,r19,r2
   4fb58:	248d803a 	cmpltu	r6,r4,r18
   4fb5c:	314b883a 	add	r5,r6,r5
   4fb60:	b104703a 	and	r2,r22,r4
   4fb64:	b946703a 	and	r3,r23,r5
   4fb68:	10c4b03a 	or	r2,r2,r3
   4fb6c:	10000226 	beq	r2,zero,4fb78 <__floatunsidf+0x11c>
   4fb70:	01c00044 	movi	r7,1
   4fb74:	0011883a 	mov	r8,zero
   4fb78:	d9000217 	ldw	r4,8(sp)
   4fb7c:	a1c4b03a 	or	r2,r20,r7
   4fb80:	aa06b03a 	or	r3,r21,r8
   4fb84:	2249c83a 	sub	r4,r4,r9
   4fb88:	d8c00415 	stw	r3,16(sp)
   4fb8c:	d9000215 	stw	r4,8(sp)
   4fb90:	d8800315 	stw	r2,12(sp)
   4fb94:	003fbf06 	br	4fa94 <__floatunsidf+0x38>
   4fb98:	bdc7883a 	add	r3,r23,r23
   4fb9c:	008007c4 	movi	r2,31
   4fba0:	1285c83a 	sub	r2,r2,r10
   4fba4:	1886983a 	sll	r3,r3,r2
   4fba8:	b2a8d83a 	srl	r20,r22,r10
   4fbac:	baaad83a 	srl	r21,r23,r10
   4fbb0:	1d28b03a 	or	r20,r3,r20
   4fbb4:	003fdf06 	br	4fb34 <__floatunsidf+0xd8>
   4fbb8:	b006d07a 	srli	r3,r22,1
   4fbbc:	008007c4 	movi	r2,31
   4fbc0:	1245c83a 	sub	r2,r2,r9
   4fbc4:	1886d83a 	srl	r3,r3,r2
   4fbc8:	ba62983a 	sll	r17,r23,r9
   4fbcc:	b260983a 	sll	r16,r22,r9
   4fbd0:	1c62b03a 	or	r17,r3,r17
   4fbd4:	003fcc06 	br	4fb08 <__floatunsidf+0xac>
   4fbd8:	2006d07a 	srli	r3,r4,1
   4fbdc:	008007c4 	movi	r2,31
   4fbe0:	1285c83a 	sub	r2,r2,r10
   4fbe4:	18a6d83a 	srl	r19,r3,r2
   4fbe8:	22a4983a 	sll	r18,r4,r10
   4fbec:	003fd706 	br	4fb4c <__floatunsidf+0xf0>

0004fbf0 <udivmodsi4>:
   4fbf0:	29001b2e 	bgeu	r5,r4,4fc60 <udivmodsi4+0x70>
   4fbf4:	28001a16 	blt	r5,zero,4fc60 <udivmodsi4+0x70>
   4fbf8:	00800044 	movi	r2,1
   4fbfc:	0007883a 	mov	r3,zero
   4fc00:	01c007c4 	movi	r7,31
   4fc04:	00000306 	br	4fc14 <udivmodsi4+0x24>
   4fc08:	19c01326 	beq	r3,r7,4fc58 <udivmodsi4+0x68>
   4fc0c:	18c00044 	addi	r3,r3,1
   4fc10:	28000416 	blt	r5,zero,4fc24 <udivmodsi4+0x34>
   4fc14:	294b883a 	add	r5,r5,r5
   4fc18:	1085883a 	add	r2,r2,r2
   4fc1c:	293ffa36 	bltu	r5,r4,4fc08 <udivmodsi4+0x18>
   4fc20:	10000d26 	beq	r2,zero,4fc58 <udivmodsi4+0x68>
   4fc24:	0007883a 	mov	r3,zero
   4fc28:	21400236 	bltu	r4,r5,4fc34 <udivmodsi4+0x44>
   4fc2c:	2149c83a 	sub	r4,r4,r5
   4fc30:	1886b03a 	or	r3,r3,r2
   4fc34:	1004d07a 	srli	r2,r2,1
   4fc38:	280ad07a 	srli	r5,r5,1
   4fc3c:	103ffa1e 	bne	r2,zero,4fc28 <udivmodsi4+0x38>
   4fc40:	30000226 	beq	r6,zero,4fc4c <udivmodsi4+0x5c>
   4fc44:	2005883a 	mov	r2,r4
   4fc48:	f800283a 	ret
   4fc4c:	1809883a 	mov	r4,r3
   4fc50:	2005883a 	mov	r2,r4
   4fc54:	f800283a 	ret
   4fc58:	0007883a 	mov	r3,zero
   4fc5c:	003ff806 	br	4fc40 <udivmodsi4+0x50>
   4fc60:	00800044 	movi	r2,1
   4fc64:	0007883a 	mov	r3,zero
   4fc68:	003fef06 	br	4fc28 <udivmodsi4+0x38>

0004fc6c <__divsi3>:
   4fc6c:	defffe04 	addi	sp,sp,-8
   4fc70:	dc000015 	stw	r16,0(sp)
   4fc74:	dfc00115 	stw	ra,4(sp)
   4fc78:	0021883a 	mov	r16,zero
   4fc7c:	20000c16 	blt	r4,zero,4fcb0 <__divsi3+0x44>
   4fc80:	000d883a 	mov	r6,zero
   4fc84:	28000e16 	blt	r5,zero,4fcc0 <__divsi3+0x54>
   4fc88:	004fbf00 	call	4fbf0 <udivmodsi4>
   4fc8c:	1007883a 	mov	r3,r2
   4fc90:	8005003a 	cmpeq	r2,r16,zero
   4fc94:	1000011e 	bne	r2,zero,4fc9c <__divsi3+0x30>
   4fc98:	00c7c83a 	sub	r3,zero,r3
   4fc9c:	1805883a 	mov	r2,r3
   4fca0:	dfc00117 	ldw	ra,4(sp)
   4fca4:	dc000017 	ldw	r16,0(sp)
   4fca8:	dec00204 	addi	sp,sp,8
   4fcac:	f800283a 	ret
   4fcb0:	0109c83a 	sub	r4,zero,r4
   4fcb4:	04000044 	movi	r16,1
   4fcb8:	000d883a 	mov	r6,zero
   4fcbc:	283ff20e 	bge	r5,zero,4fc88 <__divsi3+0x1c>
   4fcc0:	014bc83a 	sub	r5,zero,r5
   4fcc4:	8021003a 	cmpeq	r16,r16,zero
   4fcc8:	003fef06 	br	4fc88 <__divsi3+0x1c>

0004fccc <__modsi3>:
   4fccc:	deffff04 	addi	sp,sp,-4
   4fcd0:	dfc00015 	stw	ra,0(sp)
   4fcd4:	01800044 	movi	r6,1
   4fcd8:	2807883a 	mov	r3,r5
   4fcdc:	20000416 	blt	r4,zero,4fcf0 <__modsi3+0x24>
   4fce0:	28000c16 	blt	r5,zero,4fd14 <__modsi3+0x48>
   4fce4:	dfc00017 	ldw	ra,0(sp)
   4fce8:	dec00104 	addi	sp,sp,4
   4fcec:	004fbf01 	jmpi	4fbf0 <udivmodsi4>
   4fcf0:	0109c83a 	sub	r4,zero,r4
   4fcf4:	28000b16 	blt	r5,zero,4fd24 <__modsi3+0x58>
   4fcf8:	180b883a 	mov	r5,r3
   4fcfc:	01800044 	movi	r6,1
   4fd00:	004fbf00 	call	4fbf0 <udivmodsi4>
   4fd04:	0085c83a 	sub	r2,zero,r2
   4fd08:	dfc00017 	ldw	ra,0(sp)
   4fd0c:	dec00104 	addi	sp,sp,4
   4fd10:	f800283a 	ret
   4fd14:	014bc83a 	sub	r5,zero,r5
   4fd18:	dfc00017 	ldw	ra,0(sp)
   4fd1c:	dec00104 	addi	sp,sp,4
   4fd20:	004fbf01 	jmpi	4fbf0 <udivmodsi4>
   4fd24:	0147c83a 	sub	r3,zero,r5
   4fd28:	003ff306 	br	4fcf8 <__modsi3+0x2c>

0004fd2c <__udivsi3>:
   4fd2c:	000d883a 	mov	r6,zero
   4fd30:	004fbf01 	jmpi	4fbf0 <udivmodsi4>

0004fd34 <__umodsi3>:
   4fd34:	01800044 	movi	r6,1
   4fd38:	004fbf01 	jmpi	4fbf0 <udivmodsi4>

0004fd3c <__mulsi3>:
   4fd3c:	20000a26 	beq	r4,zero,4fd68 <__mulsi3+0x2c>
   4fd40:	0007883a 	mov	r3,zero
   4fd44:	2080004c 	andi	r2,r4,1
   4fd48:	1005003a 	cmpeq	r2,r2,zero
   4fd4c:	2008d07a 	srli	r4,r4,1
   4fd50:	1000011e 	bne	r2,zero,4fd58 <__mulsi3+0x1c>
   4fd54:	1947883a 	add	r3,r3,r5
   4fd58:	294b883a 	add	r5,r5,r5
   4fd5c:	203ff91e 	bne	r4,zero,4fd44 <__mulsi3+0x8>
   4fd60:	1805883a 	mov	r2,r3
   4fd64:	f800283a 	ret
   4fd68:	0007883a 	mov	r3,zero
   4fd6c:	1805883a 	mov	r2,r3
   4fd70:	f800283a 	ret

0004fd74 <__clzsi2>:
   4fd74:	00bfffd4 	movui	r2,65535
   4fd78:	11000e36 	bltu	r2,r4,4fdb4 <__clzsi2+0x40>
   4fd7c:	00803fc4 	movi	r2,255
   4fd80:	01400204 	movi	r5,8
   4fd84:	0007883a 	mov	r3,zero
   4fd88:	11001036 	bltu	r2,r4,4fdcc <__clzsi2+0x58>
   4fd8c:	000b883a 	mov	r5,zero
   4fd90:	20c6d83a 	srl	r3,r4,r3
   4fd94:	00800174 	movhi	r2,5
   4fd98:	108ee404 	addi	r2,r2,15248
   4fd9c:	1887883a 	add	r3,r3,r2
   4fda0:	18800003 	ldbu	r2,0(r3)
   4fda4:	00c00804 	movi	r3,32
   4fda8:	2885883a 	add	r2,r5,r2
   4fdac:	1885c83a 	sub	r2,r3,r2
   4fdb0:	f800283a 	ret
   4fdb4:	01400404 	movi	r5,16
   4fdb8:	00804034 	movhi	r2,256
   4fdbc:	10bfffc4 	addi	r2,r2,-1
   4fdc0:	2807883a 	mov	r3,r5
   4fdc4:	113ff22e 	bgeu	r2,r4,4fd90 <__clzsi2+0x1c>
   4fdc8:	01400604 	movi	r5,24
   4fdcc:	2807883a 	mov	r3,r5
   4fdd0:	20c6d83a 	srl	r3,r4,r3
   4fdd4:	00800174 	movhi	r2,5
   4fdd8:	108ee404 	addi	r2,r2,15248
   4fddc:	1887883a 	add	r3,r3,r2
   4fde0:	18800003 	ldbu	r2,0(r3)
   4fde4:	00c00804 	movi	r3,32
   4fde8:	2885883a 	add	r2,r5,r2
   4fdec:	1885c83a 	sub	r2,r3,r2
   4fdf0:	f800283a 	ret

0004fdf4 <__fpcmp_parts_f>:
   4fdf4:	21800017 	ldw	r6,0(r4)
   4fdf8:	00c00044 	movi	r3,1
   4fdfc:	19800a2e 	bgeu	r3,r6,4fe28 <__fpcmp_parts_f+0x34>
   4fe00:	28800017 	ldw	r2,0(r5)
   4fe04:	1880082e 	bgeu	r3,r2,4fe28 <__fpcmp_parts_f+0x34>
   4fe08:	00c00104 	movi	r3,4
   4fe0c:	30c01e26 	beq	r6,r3,4fe88 <__fpcmp_parts_f+0x94>
   4fe10:	10c01a26 	beq	r2,r3,4fe7c <__fpcmp_parts_f+0x88>
   4fe14:	00c00084 	movi	r3,2
   4fe18:	30c00526 	beq	r6,r3,4fe30 <__fpcmp_parts_f+0x3c>
   4fe1c:	10c0071e 	bne	r2,r3,4fe3c <__fpcmp_parts_f+0x48>
   4fe20:	20800117 	ldw	r2,4(r4)
   4fe24:	1000091e 	bne	r2,zero,4fe4c <__fpcmp_parts_f+0x58>
   4fe28:	00800044 	movi	r2,1
   4fe2c:	f800283a 	ret
   4fe30:	10c0121e 	bne	r2,r3,4fe7c <__fpcmp_parts_f+0x88>
   4fe34:	0005883a 	mov	r2,zero
   4fe38:	f800283a 	ret
   4fe3c:	20c00117 	ldw	r3,4(r4)
   4fe40:	28800117 	ldw	r2,4(r5)
   4fe44:	18800326 	beq	r3,r2,4fe54 <__fpcmp_parts_f+0x60>
   4fe48:	183ff726 	beq	r3,zero,4fe28 <__fpcmp_parts_f+0x34>
   4fe4c:	00bfffc4 	movi	r2,-1
   4fe50:	f800283a 	ret
   4fe54:	21800217 	ldw	r6,8(r4)
   4fe58:	28800217 	ldw	r2,8(r5)
   4fe5c:	11bffa16 	blt	r2,r6,4fe48 <__fpcmp_parts_f+0x54>
   4fe60:	30800416 	blt	r6,r2,4fe74 <__fpcmp_parts_f+0x80>
   4fe64:	21000317 	ldw	r4,12(r4)
   4fe68:	29400317 	ldw	r5,12(r5)
   4fe6c:	293ff636 	bltu	r5,r4,4fe48 <__fpcmp_parts_f+0x54>
   4fe70:	217ff02e 	bgeu	r4,r5,4fe34 <__fpcmp_parts_f+0x40>
   4fe74:	183fec1e 	bne	r3,zero,4fe28 <__fpcmp_parts_f+0x34>
   4fe78:	003ff406 	br	4fe4c <__fpcmp_parts_f+0x58>
   4fe7c:	28800117 	ldw	r2,4(r5)
   4fe80:	103fe91e 	bne	r2,zero,4fe28 <__fpcmp_parts_f+0x34>
   4fe84:	003ff106 	br	4fe4c <__fpcmp_parts_f+0x58>
   4fe88:	11bfe51e 	bne	r2,r6,4fe20 <__fpcmp_parts_f+0x2c>
   4fe8c:	28c00117 	ldw	r3,4(r5)
   4fe90:	20800117 	ldw	r2,4(r4)
   4fe94:	1885c83a 	sub	r2,r3,r2
   4fe98:	f800283a 	ret

0004fe9c <__make_fp>:
   4fe9c:	defffb04 	addi	sp,sp,-20
   4fea0:	d9000015 	stw	r4,0(sp)
   4fea4:	d809883a 	mov	r4,sp
   4fea8:	dfc00415 	stw	ra,16(sp)
   4feac:	d9400115 	stw	r5,4(sp)
   4feb0:	d9800215 	stw	r6,8(sp)
   4feb4:	d9c00315 	stw	r7,12(sp)
   4feb8:	00500c80 	call	500c8 <__pack_f>
   4febc:	dfc00417 	ldw	ra,16(sp)
   4fec0:	dec00504 	addi	sp,sp,20
   4fec4:	f800283a 	ret

0004fec8 <__unpack_d>:
   4fec8:	20c00117 	ldw	r3,4(r4)
   4fecc:	22400017 	ldw	r9,0(r4)
   4fed0:	00800434 	movhi	r2,16
   4fed4:	10bfffc4 	addi	r2,r2,-1
   4fed8:	1808d53a 	srli	r4,r3,20
   4fedc:	180cd7fa 	srli	r6,r3,31
   4fee0:	1894703a 	and	r10,r3,r2
   4fee4:	2201ffcc 	andi	r8,r4,2047
   4fee8:	281b883a 	mov	r13,r5
   4feec:	4817883a 	mov	r11,r9
   4fef0:	29800115 	stw	r6,4(r5)
   4fef4:	5019883a 	mov	r12,r10
   4fef8:	40001e1e 	bne	r8,zero,4ff74 <__unpack_d+0xac>
   4fefc:	4a84b03a 	or	r2,r9,r10
   4ff00:	10001926 	beq	r2,zero,4ff68 <__unpack_d+0xa0>
   4ff04:	4804d63a 	srli	r2,r9,24
   4ff08:	500c923a 	slli	r6,r10,8
   4ff0c:	013f0084 	movi	r4,-1022
   4ff10:	00c40034 	movhi	r3,4096
   4ff14:	18ffffc4 	addi	r3,r3,-1
   4ff18:	118cb03a 	or	r6,r2,r6
   4ff1c:	008000c4 	movi	r2,3
   4ff20:	480a923a 	slli	r5,r9,8
   4ff24:	68800015 	stw	r2,0(r13)
   4ff28:	69000215 	stw	r4,8(r13)
   4ff2c:	19800b36 	bltu	r3,r6,4ff5c <__unpack_d+0x94>
   4ff30:	200f883a 	mov	r7,r4
   4ff34:	1811883a 	mov	r8,r3
   4ff38:	2945883a 	add	r2,r5,r5
   4ff3c:	1149803a 	cmpltu	r4,r2,r5
   4ff40:	3187883a 	add	r3,r6,r6
   4ff44:	20c9883a 	add	r4,r4,r3
   4ff48:	100b883a 	mov	r5,r2
   4ff4c:	200d883a 	mov	r6,r4
   4ff50:	39ffffc4 	addi	r7,r7,-1
   4ff54:	413ff82e 	bgeu	r8,r4,4ff38 <__unpack_d+0x70>
   4ff58:	69c00215 	stw	r7,8(r13)
   4ff5c:	69800415 	stw	r6,16(r13)
   4ff60:	69400315 	stw	r5,12(r13)
   4ff64:	f800283a 	ret
   4ff68:	00800084 	movi	r2,2
   4ff6c:	28800015 	stw	r2,0(r5)
   4ff70:	f800283a 	ret
   4ff74:	0081ffc4 	movi	r2,2047
   4ff78:	40800f26 	beq	r8,r2,4ffb8 <__unpack_d+0xf0>
   4ff7c:	480cd63a 	srli	r6,r9,24
   4ff80:	5006923a 	slli	r3,r10,8
   4ff84:	4804923a 	slli	r2,r9,8
   4ff88:	0009883a 	mov	r4,zero
   4ff8c:	30c6b03a 	or	r3,r6,r3
   4ff90:	01440034 	movhi	r5,4096
   4ff94:	110cb03a 	or	r6,r2,r4
   4ff98:	423f0044 	addi	r8,r8,-1023
   4ff9c:	194eb03a 	or	r7,r3,r5
   4ffa0:	008000c4 	movi	r2,3
   4ffa4:	69c00415 	stw	r7,16(r13)
   4ffa8:	6a000215 	stw	r8,8(r13)
   4ffac:	68800015 	stw	r2,0(r13)
   4ffb0:	69800315 	stw	r6,12(r13)
   4ffb4:	f800283a 	ret
   4ffb8:	4a84b03a 	or	r2,r9,r10
   4ffbc:	1000031e 	bne	r2,zero,4ffcc <__unpack_d+0x104>
   4ffc0:	00800104 	movi	r2,4
   4ffc4:	28800015 	stw	r2,0(r5)
   4ffc8:	f800283a 	ret
   4ffcc:	0009883a 	mov	r4,zero
   4ffd0:	01400234 	movhi	r5,8
   4ffd4:	4904703a 	and	r2,r9,r4
   4ffd8:	5146703a 	and	r3,r10,r5
   4ffdc:	10c4b03a 	or	r2,r2,r3
   4ffe0:	10000526 	beq	r2,zero,4fff8 <__unpack_d+0x130>
   4ffe4:	00800044 	movi	r2,1
   4ffe8:	68800015 	stw	r2,0(r13)
   4ffec:	6b000415 	stw	r12,16(r13)
   4fff0:	6ac00315 	stw	r11,12(r13)
   4fff4:	f800283a 	ret
   4fff8:	68000015 	stw	zero,0(r13)
   4fffc:	003ffb06 	br	4ffec <__unpack_d+0x124>

00050000 <__fpcmp_parts_d>:
   50000:	21800017 	ldw	r6,0(r4)
   50004:	00c00044 	movi	r3,1
   50008:	19800a2e 	bgeu	r3,r6,50034 <__fpcmp_parts_d+0x34>
   5000c:	28800017 	ldw	r2,0(r5)
   50010:	1880082e 	bgeu	r3,r2,50034 <__fpcmp_parts_d+0x34>
   50014:	00c00104 	movi	r3,4
   50018:	30c02626 	beq	r6,r3,500b4 <__fpcmp_parts_d+0xb4>
   5001c:	10c02226 	beq	r2,r3,500a8 <__fpcmp_parts_d+0xa8>
   50020:	00c00084 	movi	r3,2
   50024:	30c00526 	beq	r6,r3,5003c <__fpcmp_parts_d+0x3c>
   50028:	10c0071e 	bne	r2,r3,50048 <__fpcmp_parts_d+0x48>
   5002c:	20800117 	ldw	r2,4(r4)
   50030:	1000091e 	bne	r2,zero,50058 <__fpcmp_parts_d+0x58>
   50034:	00800044 	movi	r2,1
   50038:	f800283a 	ret
   5003c:	10c01a1e 	bne	r2,r3,500a8 <__fpcmp_parts_d+0xa8>
   50040:	0005883a 	mov	r2,zero
   50044:	f800283a 	ret
   50048:	22000117 	ldw	r8,4(r4)
   5004c:	28800117 	ldw	r2,4(r5)
   50050:	40800326 	beq	r8,r2,50060 <__fpcmp_parts_d+0x60>
   50054:	403ff726 	beq	r8,zero,50034 <__fpcmp_parts_d+0x34>
   50058:	00bfffc4 	movi	r2,-1
   5005c:	f800283a 	ret
   50060:	20c00217 	ldw	r3,8(r4)
   50064:	28800217 	ldw	r2,8(r5)
   50068:	10fffa16 	blt	r2,r3,50054 <__fpcmp_parts_d+0x54>
   5006c:	18800916 	blt	r3,r2,50094 <__fpcmp_parts_d+0x94>
   50070:	21c00417 	ldw	r7,16(r4)
   50074:	28c00417 	ldw	r3,16(r5)
   50078:	21800317 	ldw	r6,12(r4)
   5007c:	28800317 	ldw	r2,12(r5)
   50080:	19fff436 	bltu	r3,r7,50054 <__fpcmp_parts_d+0x54>
   50084:	38c00526 	beq	r7,r3,5009c <__fpcmp_parts_d+0x9c>
   50088:	38c00236 	bltu	r7,r3,50094 <__fpcmp_parts_d+0x94>
   5008c:	19ffec1e 	bne	r3,r7,50040 <__fpcmp_parts_d+0x40>
   50090:	30bfeb2e 	bgeu	r6,r2,50040 <__fpcmp_parts_d+0x40>
   50094:	403fe71e 	bne	r8,zero,50034 <__fpcmp_parts_d+0x34>
   50098:	003fef06 	br	50058 <__fpcmp_parts_d+0x58>
   5009c:	11bffa2e 	bgeu	r2,r6,50088 <__fpcmp_parts_d+0x88>
   500a0:	403fe426 	beq	r8,zero,50034 <__fpcmp_parts_d+0x34>
   500a4:	003fec06 	br	50058 <__fpcmp_parts_d+0x58>
   500a8:	28800117 	ldw	r2,4(r5)
   500ac:	103fe11e 	bne	r2,zero,50034 <__fpcmp_parts_d+0x34>
   500b0:	003fe906 	br	50058 <__fpcmp_parts_d+0x58>
   500b4:	11bfdd1e 	bne	r2,r6,5002c <__fpcmp_parts_d+0x2c>
   500b8:	28c00117 	ldw	r3,4(r5)
   500bc:	20800117 	ldw	r2,4(r4)
   500c0:	1885c83a 	sub	r2,r3,r2
   500c4:	f800283a 	ret

000500c8 <__pack_f>:
   500c8:	20c00017 	ldw	r3,0(r4)
   500cc:	01c00044 	movi	r7,1
   500d0:	21800317 	ldw	r6,12(r4)
   500d4:	21400117 	ldw	r5,4(r4)
   500d8:	38c02d2e 	bgeu	r7,r3,50190 <__pack_f+0xc8>
   500dc:	00800104 	movi	r2,4
   500e0:	18802826 	beq	r3,r2,50184 <__pack_f+0xbc>
   500e4:	00800084 	movi	r2,2
   500e8:	18800126 	beq	r3,r2,500f0 <__pack_f+0x28>
   500ec:	3000101e 	bne	r6,zero,50130 <__pack_f+0x68>
   500f0:	000d883a 	mov	r6,zero
   500f4:	0007883a 	mov	r3,zero
   500f8:	19003fcc 	andi	r4,r3,255
   500fc:	200895fa 	slli	r4,r4,23
   50100:	00c02034 	movhi	r3,128
   50104:	18ffffc4 	addi	r3,r3,-1
   50108:	30c6703a 	and	r3,r6,r3
   5010c:	10a0002c 	andhi	r2,r2,32768
   50110:	10c4b03a 	or	r2,r2,r3
   50114:	280a97fa 	slli	r5,r5,31
   50118:	1104b03a 	or	r2,r2,r4
   5011c:	00e00034 	movhi	r3,32768
   50120:	18ffffc4 	addi	r3,r3,-1
   50124:	10c4703a 	and	r2,r2,r3
   50128:	1144b03a 	or	r2,r2,r5
   5012c:	f800283a 	ret
   50130:	21000217 	ldw	r4,8(r4)
   50134:	00bfe084 	movi	r2,-126
   50138:	20801b16 	blt	r4,r2,501a8 <__pack_f+0xe0>
   5013c:	00801fc4 	movi	r2,127
   50140:	11001016 	blt	r2,r4,50184 <__pack_f+0xbc>
   50144:	308e703a 	and	r7,r6,r2
   50148:	2087883a 	add	r3,r4,r2
   5014c:	00801004 	movi	r2,64
   50150:	38800526 	beq	r7,r2,50168 <__pack_f+0xa0>
   50154:	31800fc4 	addi	r6,r6,63
   50158:	30000716 	blt	r6,zero,50178 <__pack_f+0xb0>
   5015c:	300490ba 	slli	r2,r6,2
   50160:	100cd27a 	srli	r6,r2,9
   50164:	003fe406 	br	500f8 <__pack_f+0x30>
   50168:	3080200c 	andi	r2,r6,128
   5016c:	103ffa26 	beq	r2,zero,50158 <__pack_f+0x90>
   50170:	31cd883a 	add	r6,r6,r7
   50174:	003ff806 	br	50158 <__pack_f+0x90>
   50178:	300cd07a 	srli	r6,r6,1
   5017c:	18c00044 	addi	r3,r3,1
   50180:	003ff606 	br	5015c <__pack_f+0x94>
   50184:	000d883a 	mov	r6,zero
   50188:	00ffffc4 	movi	r3,-1
   5018c:	003fda06 	br	500f8 <__pack_f+0x30>
   50190:	31800434 	orhi	r6,r6,16
   50194:	00802034 	movhi	r2,128
   50198:	10bfffc4 	addi	r2,r2,-1
   5019c:	308c703a 	and	r6,r6,r2
   501a0:	00ffffc4 	movi	r3,-1
   501a4:	003fd406 	br	500f8 <__pack_f+0x30>
   501a8:	1109c83a 	sub	r4,r2,r4
   501ac:	00800644 	movi	r2,25
   501b0:	11001216 	blt	r2,r4,501fc <__pack_f+0x134>
   501b4:	3904983a 	sll	r2,r7,r4
   501b8:	3106d83a 	srl	r3,r6,r4
   501bc:	10bfffc4 	addi	r2,r2,-1
   501c0:	3084703a 	and	r2,r6,r2
   501c4:	1004c03a 	cmpne	r2,r2,zero
   501c8:	1886b03a 	or	r3,r3,r2
   501cc:	19001fcc 	andi	r4,r3,127
   501d0:	00801004 	movi	r2,64
   501d4:	20800c26 	beq	r4,r2,50208 <__pack_f+0x140>
   501d8:	18c00fc4 	addi	r3,r3,63
   501dc:	00900034 	movhi	r2,16384
   501e0:	10bfffc4 	addi	r2,r2,-1
   501e4:	180cd1fa 	srli	r6,r3,7
   501e8:	10c7803a 	cmpltu	r3,r2,r3
   501ec:	00802034 	movhi	r2,128
   501f0:	10bfffc4 	addi	r2,r2,-1
   501f4:	308c703a 	and	r6,r6,r2
   501f8:	003fbf06 	br	500f8 <__pack_f+0x30>
   501fc:	0007883a 	mov	r3,zero
   50200:	000d883a 	mov	r6,zero
   50204:	003ff906 	br	501ec <__pack_f+0x124>
   50208:	1880200c 	andi	r2,r3,128
   5020c:	10000126 	beq	r2,zero,50214 <__pack_f+0x14c>
   50210:	1907883a 	add	r3,r3,r4
   50214:	180cd1fa 	srli	r6,r3,7
   50218:	00900034 	movhi	r2,16384
   5021c:	10bfffc4 	addi	r2,r2,-1
   50220:	10c7803a 	cmpltu	r3,r2,r3
   50224:	003ff106 	br	501ec <__pack_f+0x124>

00050228 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   50228:	defff804 	addi	sp,sp,-32
   5022c:	dfc00715 	stw	ra,28(sp)
   50230:	df000615 	stw	fp,24(sp)
   50234:	df000604 	addi	fp,sp,24
   50238:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   5023c:	e0bffc17 	ldw	r2,-16(fp)
   50240:	1004803a 	cmplt	r2,r2,zero
   50244:	1000091e 	bne	r2,zero,5026c <close+0x44>
   50248:	e13ffc17 	ldw	r4,-16(fp)
   5024c:	01400304 	movi	r5,12
   50250:	004fd3c0 	call	4fd3c <__mulsi3>
   50254:	1007883a 	mov	r3,r2
   50258:	00800174 	movhi	r2,5
   5025c:	10914d04 	addi	r2,r2,17716
   50260:	1887883a 	add	r3,r3,r2
   50264:	e0ffff15 	stw	r3,-4(fp)
   50268:	00000106 	br	50270 <close+0x48>
   5026c:	e03fff15 	stw	zero,-4(fp)
   50270:	e0bfff17 	ldw	r2,-4(fp)
   50274:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   50278:	e0bffb17 	ldw	r2,-20(fp)
   5027c:	1005003a 	cmpeq	r2,r2,zero
   50280:	10001d1e 	bne	r2,zero,502f8 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   50284:	e0bffb17 	ldw	r2,-20(fp)
   50288:	10800017 	ldw	r2,0(r2)
   5028c:	10800417 	ldw	r2,16(r2)
   50290:	1005003a 	cmpeq	r2,r2,zero
   50294:	1000071e 	bne	r2,zero,502b4 <close+0x8c>
   50298:	e0bffb17 	ldw	r2,-20(fp)
   5029c:	10800017 	ldw	r2,0(r2)
   502a0:	10800417 	ldw	r2,16(r2)
   502a4:	e13ffb17 	ldw	r4,-20(fp)
   502a8:	103ee83a 	callr	r2
   502ac:	e0bffe15 	stw	r2,-8(fp)
   502b0:	00000106 	br	502b8 <close+0x90>
   502b4:	e03ffe15 	stw	zero,-8(fp)
   502b8:	e0bffe17 	ldw	r2,-8(fp)
   502bc:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   502c0:	e13ffc17 	ldw	r4,-16(fp)
   502c4:	0050d640 	call	50d64 <alt_release_fd>
    if (rval < 0)
   502c8:	e0bffa17 	ldw	r2,-24(fp)
   502cc:	1004403a 	cmpge	r2,r2,zero
   502d0:	1000071e 	bne	r2,zero,502f0 <close+0xc8>
    {
      ALT_ERRNO = -rval;
   502d4:	00503280 	call	50328 <alt_get_errno>
   502d8:	e0fffa17 	ldw	r3,-24(fp)
   502dc:	00c7c83a 	sub	r3,zero,r3
   502e0:	10c00015 	stw	r3,0(r2)
      return -1;
   502e4:	00bfffc4 	movi	r2,-1
   502e8:	e0bffd15 	stw	r2,-12(fp)
   502ec:	00000806 	br	50310 <close+0xe8>
    }
    return 0;
   502f0:	e03ffd15 	stw	zero,-12(fp)
   502f4:	00000606 	br	50310 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   502f8:	00503280 	call	50328 <alt_get_errno>
   502fc:	1007883a 	mov	r3,r2
   50300:	00801444 	movi	r2,81
   50304:	18800015 	stw	r2,0(r3)
    return -1;
   50308:	00bfffc4 	movi	r2,-1
   5030c:	e0bffd15 	stw	r2,-12(fp)
   50310:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   50314:	e037883a 	mov	sp,fp
   50318:	dfc00117 	ldw	ra,4(sp)
   5031c:	df000017 	ldw	fp,0(sp)
   50320:	dec00204 	addi	sp,sp,8
   50324:	f800283a 	ret

00050328 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   50328:	defffd04 	addi	sp,sp,-12
   5032c:	dfc00215 	stw	ra,8(sp)
   50330:	df000115 	stw	fp,4(sp)
   50334:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   50338:	00800174 	movhi	r2,5
   5033c:	1095db04 	addi	r2,r2,22380
   50340:	10800017 	ldw	r2,0(r2)
   50344:	1005003a 	cmpeq	r2,r2,zero
   50348:	1000061e 	bne	r2,zero,50364 <alt_get_errno+0x3c>
   5034c:	00800174 	movhi	r2,5
   50350:	1095db04 	addi	r2,r2,22380
   50354:	10800017 	ldw	r2,0(r2)
   50358:	103ee83a 	callr	r2
   5035c:	e0bfff15 	stw	r2,-4(fp)
   50360:	00000306 	br	50370 <alt_get_errno+0x48>
   50364:	00800174 	movhi	r2,5
   50368:	109cb304 	addi	r2,r2,29388
   5036c:	e0bfff15 	stw	r2,-4(fp)
   50370:	e0bfff17 	ldw	r2,-4(fp)
}
   50374:	e037883a 	mov	sp,fp
   50378:	dfc00117 	ldw	ra,4(sp)
   5037c:	df000017 	ldw	fp,0(sp)
   50380:	dec00204 	addi	sp,sp,8
   50384:	f800283a 	ret

00050388 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   50388:	defffc04 	addi	sp,sp,-16
   5038c:	df000315 	stw	fp,12(sp)
   50390:	df000304 	addi	fp,sp,12
   50394:	e13ffd15 	stw	r4,-12(fp)
   50398:	e17ffe15 	stw	r5,-8(fp)
   5039c:	e1bfff15 	stw	r6,-4(fp)
  return len;
   503a0:	e0bfff17 	ldw	r2,-4(fp)
}
   503a4:	e037883a 	mov	sp,fp
   503a8:	df000017 	ldw	fp,0(sp)
   503ac:	dec00104 	addi	sp,sp,4
   503b0:	f800283a 	ret

000503b4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   503b4:	defff904 	addi	sp,sp,-28
   503b8:	dfc00615 	stw	ra,24(sp)
   503bc:	df000515 	stw	fp,20(sp)
   503c0:	df000504 	addi	fp,sp,20
   503c4:	e13ffc15 	stw	r4,-16(fp)
   503c8:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   503cc:	e0bffc17 	ldw	r2,-16(fp)
   503d0:	1004803a 	cmplt	r2,r2,zero
   503d4:	1000091e 	bne	r2,zero,503fc <fstat+0x48>
   503d8:	e13ffc17 	ldw	r4,-16(fp)
   503dc:	01400304 	movi	r5,12
   503e0:	004fd3c0 	call	4fd3c <__mulsi3>
   503e4:	1007883a 	mov	r3,r2
   503e8:	00800174 	movhi	r2,5
   503ec:	10914d04 	addi	r2,r2,17716
   503f0:	1887883a 	add	r3,r3,r2
   503f4:	e0ffff15 	stw	r3,-4(fp)
   503f8:	00000106 	br	50400 <fstat+0x4c>
   503fc:	e03fff15 	stw	zero,-4(fp)
   50400:	e0bfff17 	ldw	r2,-4(fp)
   50404:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   50408:	e0bffb17 	ldw	r2,-20(fp)
   5040c:	1005003a 	cmpeq	r2,r2,zero
   50410:	1000121e 	bne	r2,zero,5045c <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   50414:	e0bffb17 	ldw	r2,-20(fp)
   50418:	10800017 	ldw	r2,0(r2)
   5041c:	10800817 	ldw	r2,32(r2)
   50420:	1005003a 	cmpeq	r2,r2,zero
   50424:	1000081e 	bne	r2,zero,50448 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
   50428:	e0bffb17 	ldw	r2,-20(fp)
   5042c:	10800017 	ldw	r2,0(r2)
   50430:	10800817 	ldw	r2,32(r2)
   50434:	e13ffb17 	ldw	r4,-20(fp)
   50438:	e17ffd17 	ldw	r5,-12(fp)
   5043c:	103ee83a 	callr	r2
   50440:	e0bffe15 	stw	r2,-8(fp)
   50444:	00000b06 	br	50474 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   50448:	e0fffd17 	ldw	r3,-12(fp)
   5044c:	00880004 	movi	r2,8192
   50450:	18800115 	stw	r2,4(r3)
      return 0;
   50454:	e03ffe15 	stw	zero,-8(fp)
   50458:	00000606 	br	50474 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   5045c:	005048c0 	call	5048c <alt_get_errno>
   50460:	1007883a 	mov	r3,r2
   50464:	00801444 	movi	r2,81
   50468:	18800015 	stw	r2,0(r3)
    return -1;
   5046c:	00bfffc4 	movi	r2,-1
   50470:	e0bffe15 	stw	r2,-8(fp)
   50474:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   50478:	e037883a 	mov	sp,fp
   5047c:	dfc00117 	ldw	ra,4(sp)
   50480:	df000017 	ldw	fp,0(sp)
   50484:	dec00204 	addi	sp,sp,8
   50488:	f800283a 	ret

0005048c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   5048c:	defffd04 	addi	sp,sp,-12
   50490:	dfc00215 	stw	ra,8(sp)
   50494:	df000115 	stw	fp,4(sp)
   50498:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   5049c:	00800174 	movhi	r2,5
   504a0:	1095db04 	addi	r2,r2,22380
   504a4:	10800017 	ldw	r2,0(r2)
   504a8:	1005003a 	cmpeq	r2,r2,zero
   504ac:	1000061e 	bne	r2,zero,504c8 <alt_get_errno+0x3c>
   504b0:	00800174 	movhi	r2,5
   504b4:	1095db04 	addi	r2,r2,22380
   504b8:	10800017 	ldw	r2,0(r2)
   504bc:	103ee83a 	callr	r2
   504c0:	e0bfff15 	stw	r2,-4(fp)
   504c4:	00000306 	br	504d4 <alt_get_errno+0x48>
   504c8:	00800174 	movhi	r2,5
   504cc:	109cb304 	addi	r2,r2,29388
   504d0:	e0bfff15 	stw	r2,-4(fp)
   504d4:	e0bfff17 	ldw	r2,-4(fp)
}
   504d8:	e037883a 	mov	sp,fp
   504dc:	dfc00117 	ldw	ra,4(sp)
   504e0:	df000017 	ldw	fp,0(sp)
   504e4:	dec00204 	addi	sp,sp,8
   504e8:	f800283a 	ret

000504ec <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   504ec:	deffeb04 	addi	sp,sp,-84
   504f0:	dfc01415 	stw	ra,80(sp)
   504f4:	df001315 	stw	fp,76(sp)
   504f8:	df001304 	addi	fp,sp,76
   504fc:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   50500:	e0bffd17 	ldw	r2,-12(fp)
   50504:	1004803a 	cmplt	r2,r2,zero
   50508:	1000091e 	bne	r2,zero,50530 <isatty+0x44>
   5050c:	e13ffd17 	ldw	r4,-12(fp)
   50510:	01400304 	movi	r5,12
   50514:	004fd3c0 	call	4fd3c <__mulsi3>
   50518:	1007883a 	mov	r3,r2
   5051c:	00800174 	movhi	r2,5
   50520:	10914d04 	addi	r2,r2,17716
   50524:	1887883a 	add	r3,r3,r2
   50528:	e0ffff15 	stw	r3,-4(fp)
   5052c:	00000106 	br	50534 <isatty+0x48>
   50530:	e03fff15 	stw	zero,-4(fp)
   50534:	e0bfff17 	ldw	r2,-4(fp)
   50538:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
   5053c:	e0bfed17 	ldw	r2,-76(fp)
   50540:	1005003a 	cmpeq	r2,r2,zero
   50544:	10000f1e 	bne	r2,zero,50584 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   50548:	e0bfed17 	ldw	r2,-76(fp)
   5054c:	10800017 	ldw	r2,0(r2)
   50550:	10800817 	ldw	r2,32(r2)
   50554:	1004c03a 	cmpne	r2,r2,zero
   50558:	1000031e 	bne	r2,zero,50568 <isatty+0x7c>
    {
      return 1;
   5055c:	00800044 	movi	r2,1
   50560:	e0bffe15 	stw	r2,-8(fp)
   50564:	00000c06 	br	50598 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   50568:	e17fee04 	addi	r5,fp,-72
   5056c:	e13ffd17 	ldw	r4,-12(fp)
   50570:	00503b40 	call	503b4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   50574:	e0bfef17 	ldw	r2,-68(fp)
   50578:	10880020 	cmpeqi	r2,r2,8192
   5057c:	e0bffe15 	stw	r2,-8(fp)
   50580:	00000506 	br	50598 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   50584:	00505b00 	call	505b0 <alt_get_errno>
   50588:	1007883a 	mov	r3,r2
   5058c:	00801444 	movi	r2,81
   50590:	18800015 	stw	r2,0(r3)
    return 0;
   50594:	e03ffe15 	stw	zero,-8(fp)
   50598:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   5059c:	e037883a 	mov	sp,fp
   505a0:	dfc00117 	ldw	ra,4(sp)
   505a4:	df000017 	ldw	fp,0(sp)
   505a8:	dec00204 	addi	sp,sp,8
   505ac:	f800283a 	ret

000505b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   505b0:	defffd04 	addi	sp,sp,-12
   505b4:	dfc00215 	stw	ra,8(sp)
   505b8:	df000115 	stw	fp,4(sp)
   505bc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   505c0:	00800174 	movhi	r2,5
   505c4:	1095db04 	addi	r2,r2,22380
   505c8:	10800017 	ldw	r2,0(r2)
   505cc:	1005003a 	cmpeq	r2,r2,zero
   505d0:	1000061e 	bne	r2,zero,505ec <alt_get_errno+0x3c>
   505d4:	00800174 	movhi	r2,5
   505d8:	1095db04 	addi	r2,r2,22380
   505dc:	10800017 	ldw	r2,0(r2)
   505e0:	103ee83a 	callr	r2
   505e4:	e0bfff15 	stw	r2,-4(fp)
   505e8:	00000306 	br	505f8 <alt_get_errno+0x48>
   505ec:	00800174 	movhi	r2,5
   505f0:	109cb304 	addi	r2,r2,29388
   505f4:	e0bfff15 	stw	r2,-4(fp)
   505f8:	e0bfff17 	ldw	r2,-4(fp)
}
   505fc:	e037883a 	mov	sp,fp
   50600:	dfc00117 	ldw	ra,4(sp)
   50604:	df000017 	ldw	fp,0(sp)
   50608:	dec00204 	addi	sp,sp,8
   5060c:	f800283a 	ret

00050610 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   50610:	defffe04 	addi	sp,sp,-8
   50614:	dfc00115 	stw	ra,4(sp)
   50618:	df000015 	stw	fp,0(sp)
   5061c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   50620:	01000174 	movhi	r4,5
   50624:	2115f204 	addi	r4,r4,22472
   50628:	01400174 	movhi	r5,5
   5062c:	294f3404 	addi	r5,r5,15568
   50630:	01800174 	movhi	r6,5
   50634:	3195f204 	addi	r6,r6,22472
   50638:	00506900 	call	50690 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   5063c:	01000134 	movhi	r4,4
   50640:	21000804 	addi	r4,r4,32
   50644:	01400134 	movhi	r5,4
   50648:	29400804 	addi	r5,r5,32
   5064c:	01800134 	movhi	r6,4
   50650:	31806d04 	addi	r6,r6,436
   50654:	00506900 	call	50690 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   50658:	01000174 	movhi	r4,5
   5065c:	210d3504 	addi	r4,r4,13524
   50660:	01400174 	movhi	r5,5
   50664:	294d3504 	addi	r5,r5,13524
   50668:	01800174 	movhi	r6,5
   5066c:	318f3404 	addi	r6,r6,15568
   50670:	00506900 	call	50690 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   50674:	005251c0 	call	5251c <alt_dcache_flush_all>
  alt_icache_flush_all();
   50678:	0052a280 	call	52a28 <alt_icache_flush_all>
}
   5067c:	e037883a 	mov	sp,fp
   50680:	dfc00117 	ldw	ra,4(sp)
   50684:	df000017 	ldw	fp,0(sp)
   50688:	dec00204 	addi	sp,sp,8
   5068c:	f800283a 	ret

00050690 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   50690:	defffc04 	addi	sp,sp,-16
   50694:	df000315 	stw	fp,12(sp)
   50698:	df000304 	addi	fp,sp,12
   5069c:	e13ffd15 	stw	r4,-12(fp)
   506a0:	e17ffe15 	stw	r5,-8(fp)
   506a4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   506a8:	e0fffe17 	ldw	r3,-8(fp)
   506ac:	e0bffd17 	ldw	r2,-12(fp)
   506b0:	18800e26 	beq	r3,r2,506ec <alt_load_section+0x5c>
  {
    while( to != end )
   506b4:	00000a06 	br	506e0 <alt_load_section+0x50>
    {
      *to++ = *from++;
   506b8:	e0bffd17 	ldw	r2,-12(fp)
   506bc:	10c00017 	ldw	r3,0(r2)
   506c0:	e0bffe17 	ldw	r2,-8(fp)
   506c4:	10c00015 	stw	r3,0(r2)
   506c8:	e0bffe17 	ldw	r2,-8(fp)
   506cc:	10800104 	addi	r2,r2,4
   506d0:	e0bffe15 	stw	r2,-8(fp)
   506d4:	e0bffd17 	ldw	r2,-12(fp)
   506d8:	10800104 	addi	r2,r2,4
   506dc:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   506e0:	e0fffe17 	ldw	r3,-8(fp)
   506e4:	e0bfff17 	ldw	r2,-4(fp)
   506e8:	18bff31e 	bne	r3,r2,506b8 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   506ec:	e037883a 	mov	sp,fp
   506f0:	df000017 	ldw	fp,0(sp)
   506f4:	dec00104 	addi	sp,sp,4
   506f8:	f800283a 	ret

000506fc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   506fc:	defff804 	addi	sp,sp,-32
   50700:	dfc00715 	stw	ra,28(sp)
   50704:	df000615 	stw	fp,24(sp)
   50708:	df000604 	addi	fp,sp,24
   5070c:	e13ffc15 	stw	r4,-16(fp)
   50710:	e17ffd15 	stw	r5,-12(fp)
   50714:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   50718:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   5071c:	e0bffc17 	ldw	r2,-16(fp)
   50720:	1004803a 	cmplt	r2,r2,zero
   50724:	1000091e 	bne	r2,zero,5074c <lseek+0x50>
   50728:	e13ffc17 	ldw	r4,-16(fp)
   5072c:	01400304 	movi	r5,12
   50730:	004fd3c0 	call	4fd3c <__mulsi3>
   50734:	1007883a 	mov	r3,r2
   50738:	00800174 	movhi	r2,5
   5073c:	10914d04 	addi	r2,r2,17716
   50740:	1887883a 	add	r3,r3,r2
   50744:	e0ffff15 	stw	r3,-4(fp)
   50748:	00000106 	br	50750 <lseek+0x54>
   5074c:	e03fff15 	stw	zero,-4(fp)
   50750:	e0bfff17 	ldw	r2,-4(fp)
   50754:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
   50758:	e0bffb17 	ldw	r2,-20(fp)
   5075c:	1005003a 	cmpeq	r2,r2,zero
   50760:	1000111e 	bne	r2,zero,507a8 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   50764:	e0bffb17 	ldw	r2,-20(fp)
   50768:	10800017 	ldw	r2,0(r2)
   5076c:	10800717 	ldw	r2,28(r2)
   50770:	1005003a 	cmpeq	r2,r2,zero
   50774:	1000091e 	bne	r2,zero,5079c <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   50778:	e0bffb17 	ldw	r2,-20(fp)
   5077c:	10800017 	ldw	r2,0(r2)
   50780:	10800717 	ldw	r2,28(r2)
   50784:	e13ffb17 	ldw	r4,-20(fp)
   50788:	e17ffd17 	ldw	r5,-12(fp)
   5078c:	e1bffe17 	ldw	r6,-8(fp)
   50790:	103ee83a 	callr	r2
   50794:	e0bffa15 	stw	r2,-24(fp)
   50798:	00000506 	br	507b0 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   5079c:	00bfde84 	movi	r2,-134
   507a0:	e0bffa15 	stw	r2,-24(fp)
   507a4:	00000206 	br	507b0 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
   507a8:	00bfebc4 	movi	r2,-81
   507ac:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
   507b0:	e0bffa17 	ldw	r2,-24(fp)
   507b4:	1004403a 	cmpge	r2,r2,zero
   507b8:	1000071e 	bne	r2,zero,507d8 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
   507bc:	00507f00 	call	507f0 <alt_get_errno>
   507c0:	1007883a 	mov	r3,r2
   507c4:	e0bffa17 	ldw	r2,-24(fp)
   507c8:	0085c83a 	sub	r2,zero,r2
   507cc:	18800015 	stw	r2,0(r3)
    rc = -1;
   507d0:	00bfffc4 	movi	r2,-1
   507d4:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
   507d8:	e0bffa17 	ldw	r2,-24(fp)
}
   507dc:	e037883a 	mov	sp,fp
   507e0:	dfc00117 	ldw	ra,4(sp)
   507e4:	df000017 	ldw	fp,0(sp)
   507e8:	dec00204 	addi	sp,sp,8
   507ec:	f800283a 	ret

000507f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   507f0:	defffd04 	addi	sp,sp,-12
   507f4:	dfc00215 	stw	ra,8(sp)
   507f8:	df000115 	stw	fp,4(sp)
   507fc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   50800:	00800174 	movhi	r2,5
   50804:	1095db04 	addi	r2,r2,22380
   50808:	10800017 	ldw	r2,0(r2)
   5080c:	1005003a 	cmpeq	r2,r2,zero
   50810:	1000061e 	bne	r2,zero,5082c <alt_get_errno+0x3c>
   50814:	00800174 	movhi	r2,5
   50818:	1095db04 	addi	r2,r2,22380
   5081c:	10800017 	ldw	r2,0(r2)
   50820:	103ee83a 	callr	r2
   50824:	e0bfff15 	stw	r2,-4(fp)
   50828:	00000306 	br	50838 <alt_get_errno+0x48>
   5082c:	00800174 	movhi	r2,5
   50830:	109cb304 	addi	r2,r2,29388
   50834:	e0bfff15 	stw	r2,-4(fp)
   50838:	e0bfff17 	ldw	r2,-4(fp)
}
   5083c:	e037883a 	mov	sp,fp
   50840:	dfc00117 	ldw	ra,4(sp)
   50844:	df000017 	ldw	fp,0(sp)
   50848:	dec00204 	addi	sp,sp,8
   5084c:	f800283a 	ret

00050850 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   50850:	defffd04 	addi	sp,sp,-12
   50854:	dfc00215 	stw	ra,8(sp)
   50858:	df000115 	stw	fp,4(sp)
   5085c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   50860:	0009883a 	mov	r4,zero
   50864:	005104c0 	call	5104c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   50868:	00510800 	call	51080 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   5086c:	01000174 	movhi	r4,5
   50870:	210f2704 	addi	r4,r4,15516
   50874:	01400174 	movhi	r5,5
   50878:	294f2704 	addi	r5,r5,15516
   5087c:	01800174 	movhi	r6,5
   50880:	318f2704 	addi	r6,r6,15516
   50884:	0052dfc0 	call	52dfc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   50888:	005264c0 	call	5264c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   5088c:	01000174 	movhi	r4,5
   50890:	2109ac04 	addi	r4,r4,9904
   50894:	00530c80 	call	530c8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   50898:	d126eb17 	ldw	r4,-25684(gp)
   5089c:	d166ec17 	ldw	r5,-25680(gp)
   508a0:	d1a6ed17 	ldw	r6,-25676(gp)
   508a4:	00408300 	call	40830 <main>
   508a8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   508ac:	01000044 	movi	r4,1
   508b0:	00502280 	call	50228 <close>
  exit (result);
   508b4:	e13fff17 	ldw	r4,-4(fp)
   508b8:	00530dc0 	call	530dc <exit>

000508bc <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   508bc:	defffe04 	addi	sp,sp,-8
   508c0:	df000115 	stw	fp,4(sp)
   508c4:	df000104 	addi	fp,sp,4
   508c8:	e13fff15 	stw	r4,-4(fp)
}
   508cc:	e037883a 	mov	sp,fp
   508d0:	df000017 	ldw	fp,0(sp)
   508d4:	dec00104 	addi	sp,sp,4
   508d8:	f800283a 	ret

000508dc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   508dc:	defffe04 	addi	sp,sp,-8
   508e0:	df000115 	stw	fp,4(sp)
   508e4:	df000104 	addi	fp,sp,4
   508e8:	e13fff15 	stw	r4,-4(fp)
}
   508ec:	e037883a 	mov	sp,fp
   508f0:	df000017 	ldw	fp,0(sp)
   508f4:	dec00104 	addi	sp,sp,4
   508f8:	f800283a 	ret

000508fc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   508fc:	defffa04 	addi	sp,sp,-24
   50900:	dfc00515 	stw	ra,20(sp)
   50904:	df000415 	stw	fp,16(sp)
   50908:	dc000315 	stw	r16,12(sp)
   5090c:	df000304 	addi	fp,sp,12
   50910:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   50914:	e0bffe17 	ldw	r2,-8(fp)
   50918:	10800217 	ldw	r2,8(r2)
   5091c:	10d00034 	orhi	r3,r2,16384
   50920:	e0bffe17 	ldw	r2,-8(fp)
   50924:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   50928:	e03ffd15 	stw	zero,-12(fp)
   5092c:	00002306 	br	509bc <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   50930:	e13ffd17 	ldw	r4,-12(fp)
   50934:	04000174 	movhi	r16,5
   50938:	84114d04 	addi	r16,r16,17716
   5093c:	01400304 	movi	r5,12
   50940:	004fd3c0 	call	4fd3c <__mulsi3>
   50944:	1405883a 	add	r2,r2,r16
   50948:	10c00017 	ldw	r3,0(r2)
   5094c:	e0bffe17 	ldw	r2,-8(fp)
   50950:	10800017 	ldw	r2,0(r2)
   50954:	1880161e 	bne	r3,r2,509b0 <alt_file_locked+0xb4>
   50958:	e13ffd17 	ldw	r4,-12(fp)
   5095c:	04000174 	movhi	r16,5
   50960:	84114d04 	addi	r16,r16,17716
   50964:	01400304 	movi	r5,12
   50968:	004fd3c0 	call	4fd3c <__mulsi3>
   5096c:	1405883a 	add	r2,r2,r16
   50970:	10800204 	addi	r2,r2,8
   50974:	10800017 	ldw	r2,0(r2)
   50978:	1004403a 	cmpge	r2,r2,zero
   5097c:	10000c1e 	bne	r2,zero,509b0 <alt_file_locked+0xb4>
   50980:	e13ffd17 	ldw	r4,-12(fp)
   50984:	01400304 	movi	r5,12
   50988:	004fd3c0 	call	4fd3c <__mulsi3>
   5098c:	1007883a 	mov	r3,r2
   50990:	00800174 	movhi	r2,5
   50994:	10914d04 	addi	r2,r2,17716
   50998:	1887883a 	add	r3,r3,r2
   5099c:	e0bffe17 	ldw	r2,-8(fp)
   509a0:	18800326 	beq	r3,r2,509b0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   509a4:	00bffcc4 	movi	r2,-13
   509a8:	e0bfff15 	stw	r2,-4(fp)
   509ac:	00000a06 	br	509d8 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   509b0:	e0bffd17 	ldw	r2,-12(fp)
   509b4:	10800044 	addi	r2,r2,1
   509b8:	e0bffd15 	stw	r2,-12(fp)
   509bc:	00800174 	movhi	r2,5
   509c0:	1095da04 	addi	r2,r2,22376
   509c4:	10800017 	ldw	r2,0(r2)
   509c8:	1007883a 	mov	r3,r2
   509cc:	e0bffd17 	ldw	r2,-12(fp)
   509d0:	18bfd72e 	bgeu	r3,r2,50930 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   509d4:	e03fff15 	stw	zero,-4(fp)
   509d8:	e0bfff17 	ldw	r2,-4(fp)
}
   509dc:	e037883a 	mov	sp,fp
   509e0:	dfc00217 	ldw	ra,8(sp)
   509e4:	df000117 	ldw	fp,4(sp)
   509e8:	dc000017 	ldw	r16,0(sp)
   509ec:	dec00304 	addi	sp,sp,12
   509f0:	f800283a 	ret

000509f4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   509f4:	defff404 	addi	sp,sp,-48
   509f8:	dfc00b15 	stw	ra,44(sp)
   509fc:	df000a15 	stw	fp,40(sp)
   50a00:	df000a04 	addi	fp,sp,40
   50a04:	e13ffb15 	stw	r4,-20(fp)
   50a08:	e17ffc15 	stw	r5,-16(fp)
   50a0c:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   50a10:	00bfffc4 	movi	r2,-1
   50a14:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   50a18:	00bffb44 	movi	r2,-19
   50a1c:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   50a20:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   50a24:	e13ffb17 	ldw	r4,-20(fp)
   50a28:	01400174 	movhi	r5,5
   50a2c:	2955d804 	addi	r5,r5,22368
   50a30:	00527140 	call	52714 <alt_find_dev>
   50a34:	e0bffa15 	stw	r2,-24(fp)
   50a38:	e0bffa17 	ldw	r2,-24(fp)
   50a3c:	1004c03a 	cmpne	r2,r2,zero
   50a40:	1000051e 	bne	r2,zero,50a58 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   50a44:	e13ffb17 	ldw	r4,-20(fp)
   50a48:	00527a80 	call	527a8 <alt_find_file>
   50a4c:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   50a50:	00800044 	movi	r2,1
   50a54:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   50a58:	e0bffa17 	ldw	r2,-24(fp)
   50a5c:	1005003a 	cmpeq	r2,r2,zero
   50a60:	1000311e 	bne	r2,zero,50b28 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
   50a64:	e13ffa17 	ldw	r4,-24(fp)
   50a68:	00529580 	call	52958 <alt_get_fd>
   50a6c:	e0bff815 	stw	r2,-32(fp)
   50a70:	e0bff817 	ldw	r2,-32(fp)
   50a74:	1004403a 	cmpge	r2,r2,zero
   50a78:	1000031e 	bne	r2,zero,50a88 <open+0x94>
    {
      status = index;
   50a7c:	e0bff817 	ldw	r2,-32(fp)
   50a80:	e0bff715 	stw	r2,-36(fp)
   50a84:	00002a06 	br	50b30 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
   50a88:	e13ff817 	ldw	r4,-32(fp)
   50a8c:	01400304 	movi	r5,12
   50a90:	004fd3c0 	call	4fd3c <__mulsi3>
   50a94:	1007883a 	mov	r3,r2
   50a98:	00800174 	movhi	r2,5
   50a9c:	10914d04 	addi	r2,r2,17716
   50aa0:	1885883a 	add	r2,r3,r2
   50aa4:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   50aa8:	e0fffc17 	ldw	r3,-16(fp)
   50aac:	00900034 	movhi	r2,16384
   50ab0:	10bfffc4 	addi	r2,r2,-1
   50ab4:	1886703a 	and	r3,r3,r2
   50ab8:	e0bff917 	ldw	r2,-28(fp)
   50abc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   50ac0:	e0bff617 	ldw	r2,-40(fp)
   50ac4:	1004c03a 	cmpne	r2,r2,zero
   50ac8:	1000061e 	bne	r2,zero,50ae4 <open+0xf0>
   50acc:	e13ff917 	ldw	r4,-28(fp)
   50ad0:	00508fc0 	call	508fc <alt_file_locked>
   50ad4:	e0bff715 	stw	r2,-36(fp)
   50ad8:	e0bff717 	ldw	r2,-36(fp)
   50adc:	1004803a 	cmplt	r2,r2,zero
   50ae0:	1000131e 	bne	r2,zero,50b30 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   50ae4:	e0bffa17 	ldw	r2,-24(fp)
   50ae8:	10800317 	ldw	r2,12(r2)
   50aec:	1005003a 	cmpeq	r2,r2,zero
   50af0:	1000091e 	bne	r2,zero,50b18 <open+0x124>
   50af4:	e0bffa17 	ldw	r2,-24(fp)
   50af8:	10800317 	ldw	r2,12(r2)
   50afc:	e13ff917 	ldw	r4,-28(fp)
   50b00:	e17ffb17 	ldw	r5,-20(fp)
   50b04:	e1bffc17 	ldw	r6,-16(fp)
   50b08:	e1fffd17 	ldw	r7,-12(fp)
   50b0c:	103ee83a 	callr	r2
   50b10:	e0bfff15 	stw	r2,-4(fp)
   50b14:	00000106 	br	50b1c <open+0x128>
   50b18:	e03fff15 	stw	zero,-4(fp)
   50b1c:	e0bfff17 	ldw	r2,-4(fp)
   50b20:	e0bff715 	stw	r2,-36(fp)
   50b24:	00000206 	br	50b30 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   50b28:	00bffb44 	movi	r2,-19
   50b2c:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   50b30:	e0bff717 	ldw	r2,-36(fp)
   50b34:	1004403a 	cmpge	r2,r2,zero
   50b38:	1000091e 	bne	r2,zero,50b60 <open+0x16c>
  {
    alt_release_fd (index);  
   50b3c:	e13ff817 	ldw	r4,-32(fp)
   50b40:	0050d640 	call	50d64 <alt_release_fd>
    ALT_ERRNO = -status;
   50b44:	0050b800 	call	50b80 <alt_get_errno>
   50b48:	e0fff717 	ldw	r3,-36(fp)
   50b4c:	00c7c83a 	sub	r3,zero,r3
   50b50:	10c00015 	stw	r3,0(r2)
    return -1;
   50b54:	00bfffc4 	movi	r2,-1
   50b58:	e0bffe15 	stw	r2,-8(fp)
   50b5c:	00000206 	br	50b68 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
   50b60:	e0bff817 	ldw	r2,-32(fp)
   50b64:	e0bffe15 	stw	r2,-8(fp)
   50b68:	e0bffe17 	ldw	r2,-8(fp)
}
   50b6c:	e037883a 	mov	sp,fp
   50b70:	dfc00117 	ldw	ra,4(sp)
   50b74:	df000017 	ldw	fp,0(sp)
   50b78:	dec00204 	addi	sp,sp,8
   50b7c:	f800283a 	ret

00050b80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   50b80:	defffd04 	addi	sp,sp,-12
   50b84:	dfc00215 	stw	ra,8(sp)
   50b88:	df000115 	stw	fp,4(sp)
   50b8c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   50b90:	00800174 	movhi	r2,5
   50b94:	1095db04 	addi	r2,r2,22380
   50b98:	10800017 	ldw	r2,0(r2)
   50b9c:	1005003a 	cmpeq	r2,r2,zero
   50ba0:	1000061e 	bne	r2,zero,50bbc <alt_get_errno+0x3c>
   50ba4:	00800174 	movhi	r2,5
   50ba8:	1095db04 	addi	r2,r2,22380
   50bac:	10800017 	ldw	r2,0(r2)
   50bb0:	103ee83a 	callr	r2
   50bb4:	e0bfff15 	stw	r2,-4(fp)
   50bb8:	00000306 	br	50bc8 <alt_get_errno+0x48>
   50bbc:	00800174 	movhi	r2,5
   50bc0:	109cb304 	addi	r2,r2,29388
   50bc4:	e0bfff15 	stw	r2,-4(fp)
   50bc8:	e0bfff17 	ldw	r2,-4(fp)
}
   50bcc:	e037883a 	mov	sp,fp
   50bd0:	dfc00117 	ldw	ra,4(sp)
   50bd4:	df000017 	ldw	fp,0(sp)
   50bd8:	dec00204 	addi	sp,sp,8
   50bdc:	f800283a 	ret

00050be0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   50be0:	defff704 	addi	sp,sp,-36
   50be4:	dfc00815 	stw	ra,32(sp)
   50be8:	df000715 	stw	fp,28(sp)
   50bec:	df000704 	addi	fp,sp,28
   50bf0:	e13ffb15 	stw	r4,-20(fp)
   50bf4:	e17ffc15 	stw	r5,-16(fp)
   50bf8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   50bfc:	e0bffb17 	ldw	r2,-20(fp)
   50c00:	1004803a 	cmplt	r2,r2,zero
   50c04:	1000091e 	bne	r2,zero,50c2c <read+0x4c>
   50c08:	e13ffb17 	ldw	r4,-20(fp)
   50c0c:	01400304 	movi	r5,12
   50c10:	004fd3c0 	call	4fd3c <__mulsi3>
   50c14:	1007883a 	mov	r3,r2
   50c18:	00800174 	movhi	r2,5
   50c1c:	10914d04 	addi	r2,r2,17716
   50c20:	1887883a 	add	r3,r3,r2
   50c24:	e0ffff15 	stw	r3,-4(fp)
   50c28:	00000106 	br	50c30 <read+0x50>
   50c2c:	e03fff15 	stw	zero,-4(fp)
   50c30:	e0bfff17 	ldw	r2,-4(fp)
   50c34:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   50c38:	e0bffa17 	ldw	r2,-24(fp)
   50c3c:	1005003a 	cmpeq	r2,r2,zero
   50c40:	1000241e 	bne	r2,zero,50cd4 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   50c44:	e0bffa17 	ldw	r2,-24(fp)
   50c48:	10800217 	ldw	r2,8(r2)
   50c4c:	108000cc 	andi	r2,r2,3
   50c50:	10800060 	cmpeqi	r2,r2,1
   50c54:	10001a1e 	bne	r2,zero,50cc0 <read+0xe0>
   50c58:	e0bffa17 	ldw	r2,-24(fp)
   50c5c:	10800017 	ldw	r2,0(r2)
   50c60:	10800517 	ldw	r2,20(r2)
   50c64:	1005003a 	cmpeq	r2,r2,zero
   50c68:	1000151e 	bne	r2,zero,50cc0 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   50c6c:	e0bffa17 	ldw	r2,-24(fp)
   50c70:	10800017 	ldw	r2,0(r2)
   50c74:	10800517 	ldw	r2,20(r2)
   50c78:	e17ffc17 	ldw	r5,-16(fp)
   50c7c:	e1bffd17 	ldw	r6,-12(fp)
   50c80:	e13ffa17 	ldw	r4,-24(fp)
   50c84:	103ee83a 	callr	r2
   50c88:	e0bff915 	stw	r2,-28(fp)
   50c8c:	e0bff917 	ldw	r2,-28(fp)
   50c90:	1004403a 	cmpge	r2,r2,zero
   50c94:	1000071e 	bne	r2,zero,50cb4 <read+0xd4>
        {
          ALT_ERRNO = -rval;
   50c98:	0050d040 	call	50d04 <alt_get_errno>
   50c9c:	e0fff917 	ldw	r3,-28(fp)
   50ca0:	00c7c83a 	sub	r3,zero,r3
   50ca4:	10c00015 	stw	r3,0(r2)
          return -1;
   50ca8:	00bfffc4 	movi	r2,-1
   50cac:	e0bffe15 	stw	r2,-8(fp)
   50cb0:	00000e06 	br	50cec <read+0x10c>
        }
        return rval;
   50cb4:	e0bff917 	ldw	r2,-28(fp)
   50cb8:	e0bffe15 	stw	r2,-8(fp)
   50cbc:	00000b06 	br	50cec <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
   50cc0:	0050d040 	call	50d04 <alt_get_errno>
   50cc4:	1007883a 	mov	r3,r2
   50cc8:	00800344 	movi	r2,13
   50ccc:	18800015 	stw	r2,0(r3)
   50cd0:	00000406 	br	50ce4 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   50cd4:	0050d040 	call	50d04 <alt_get_errno>
   50cd8:	1007883a 	mov	r3,r2
   50cdc:	00801444 	movi	r2,81
   50ce0:	18800015 	stw	r2,0(r3)
  }
  return -1;
   50ce4:	00bfffc4 	movi	r2,-1
   50ce8:	e0bffe15 	stw	r2,-8(fp)
   50cec:	e0bffe17 	ldw	r2,-8(fp)
}
   50cf0:	e037883a 	mov	sp,fp
   50cf4:	dfc00117 	ldw	ra,4(sp)
   50cf8:	df000017 	ldw	fp,0(sp)
   50cfc:	dec00204 	addi	sp,sp,8
   50d00:	f800283a 	ret

00050d04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   50d04:	defffd04 	addi	sp,sp,-12
   50d08:	dfc00215 	stw	ra,8(sp)
   50d0c:	df000115 	stw	fp,4(sp)
   50d10:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   50d14:	00800174 	movhi	r2,5
   50d18:	1095db04 	addi	r2,r2,22380
   50d1c:	10800017 	ldw	r2,0(r2)
   50d20:	1005003a 	cmpeq	r2,r2,zero
   50d24:	1000061e 	bne	r2,zero,50d40 <alt_get_errno+0x3c>
   50d28:	00800174 	movhi	r2,5
   50d2c:	1095db04 	addi	r2,r2,22380
   50d30:	10800017 	ldw	r2,0(r2)
   50d34:	103ee83a 	callr	r2
   50d38:	e0bfff15 	stw	r2,-4(fp)
   50d3c:	00000306 	br	50d4c <alt_get_errno+0x48>
   50d40:	00800174 	movhi	r2,5
   50d44:	109cb304 	addi	r2,r2,29388
   50d48:	e0bfff15 	stw	r2,-4(fp)
   50d4c:	e0bfff17 	ldw	r2,-4(fp)
}
   50d50:	e037883a 	mov	sp,fp
   50d54:	dfc00117 	ldw	ra,4(sp)
   50d58:	df000017 	ldw	fp,0(sp)
   50d5c:	dec00204 	addi	sp,sp,8
   50d60:	f800283a 	ret

00050d64 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   50d64:	defffc04 	addi	sp,sp,-16
   50d68:	dfc00315 	stw	ra,12(sp)
   50d6c:	df000215 	stw	fp,8(sp)
   50d70:	dc000115 	stw	r16,4(sp)
   50d74:	df000104 	addi	fp,sp,4
   50d78:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   50d7c:	e0bfff17 	ldw	r2,-4(fp)
   50d80:	108000d0 	cmplti	r2,r2,3
   50d84:	10000f1e 	bne	r2,zero,50dc4 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
   50d88:	e13fff17 	ldw	r4,-4(fp)
   50d8c:	04000174 	movhi	r16,5
   50d90:	84114d04 	addi	r16,r16,17716
   50d94:	01400304 	movi	r5,12
   50d98:	004fd3c0 	call	4fd3c <__mulsi3>
   50d9c:	1405883a 	add	r2,r2,r16
   50da0:	10800204 	addi	r2,r2,8
   50da4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   50da8:	e13fff17 	ldw	r4,-4(fp)
   50dac:	04000174 	movhi	r16,5
   50db0:	84114d04 	addi	r16,r16,17716
   50db4:	01400304 	movi	r5,12
   50db8:	004fd3c0 	call	4fd3c <__mulsi3>
   50dbc:	1405883a 	add	r2,r2,r16
   50dc0:	10000015 	stw	zero,0(r2)
  }
}
   50dc4:	e037883a 	mov	sp,fp
   50dc8:	dfc00217 	ldw	ra,8(sp)
   50dcc:	df000117 	ldw	fp,4(sp)
   50dd0:	dc000017 	ldw	r16,0(sp)
   50dd4:	dec00304 	addi	sp,sp,12
   50dd8:	f800283a 	ret

00050ddc <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   50ddc:	defff804 	addi	sp,sp,-32
   50de0:	df000715 	stw	fp,28(sp)
   50de4:	df000704 	addi	fp,sp,28
   50de8:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   50dec:	0005303a 	rdctl	r2,status
   50df0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   50df4:	e0fffb17 	ldw	r3,-20(fp)
   50df8:	00bfff84 	movi	r2,-2
   50dfc:	1884703a 	and	r2,r3,r2
   50e00:	1001703a 	wrctl	status,r2
  
  return context;
   50e04:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   50e08:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   50e0c:	d0a00d17 	ldw	r2,-32716(gp)
   50e10:	10c000c4 	addi	r3,r2,3
   50e14:	00bfff04 	movi	r2,-4
   50e18:	1884703a 	and	r2,r3,r2
   50e1c:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   50e20:	d0e00d17 	ldw	r3,-32716(gp)
   50e24:	e0bffe17 	ldw	r2,-8(fp)
   50e28:	1887883a 	add	r3,r3,r2
   50e2c:	00800234 	movhi	r2,8
   50e30:	10800004 	addi	r2,r2,0
   50e34:	10c0072e 	bgeu	r2,r3,50e54 <sbrk+0x78>
   50e38:	e0bffd17 	ldw	r2,-12(fp)
   50e3c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   50e40:	e0bffa17 	ldw	r2,-24(fp)
   50e44:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   50e48:	00bfffc4 	movi	r2,-1
   50e4c:	e0bfff15 	stw	r2,-4(fp)
   50e50:	00000c06 	br	50e84 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   50e54:	d0a00d17 	ldw	r2,-32716(gp)
   50e58:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
   50e5c:	d0e00d17 	ldw	r3,-32716(gp)
   50e60:	e0bffe17 	ldw	r2,-8(fp)
   50e64:	1885883a 	add	r2,r3,r2
   50e68:	d0a00d15 	stw	r2,-32716(gp)
   50e6c:	e0bffd17 	ldw	r2,-12(fp)
   50e70:	e0bff915 	stw	r2,-28(fp)
   50e74:	e0bff917 	ldw	r2,-28(fp)
   50e78:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   50e7c:	e0bffc17 	ldw	r2,-16(fp)
   50e80:	e0bfff15 	stw	r2,-4(fp)
   50e84:	e0bfff17 	ldw	r2,-4(fp)
} 
   50e88:	e037883a 	mov	sp,fp
   50e8c:	df000017 	ldw	fp,0(sp)
   50e90:	dec00104 	addi	sp,sp,4
   50e94:	f800283a 	ret

00050e98 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   50e98:	defffd04 	addi	sp,sp,-12
   50e9c:	dfc00215 	stw	ra,8(sp)
   50ea0:	df000115 	stw	fp,4(sp)
   50ea4:	df000104 	addi	fp,sp,4
   50ea8:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   50eac:	e13fff17 	ldw	r4,-4(fp)
   50eb0:	00523c00 	call	523c0 <alt_busy_sleep>
}
   50eb4:	e037883a 	mov	sp,fp
   50eb8:	dfc00117 	ldw	ra,4(sp)
   50ebc:	df000017 	ldw	fp,0(sp)
   50ec0:	dec00204 	addi	sp,sp,8
   50ec4:	f800283a 	ret

00050ec8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   50ec8:	defff704 	addi	sp,sp,-36
   50ecc:	dfc00815 	stw	ra,32(sp)
   50ed0:	df000715 	stw	fp,28(sp)
   50ed4:	df000704 	addi	fp,sp,28
   50ed8:	e13ffb15 	stw	r4,-20(fp)
   50edc:	e17ffc15 	stw	r5,-16(fp)
   50ee0:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   50ee4:	e0bffb17 	ldw	r2,-20(fp)
   50ee8:	1004803a 	cmplt	r2,r2,zero
   50eec:	1000091e 	bne	r2,zero,50f14 <write+0x4c>
   50ef0:	e13ffb17 	ldw	r4,-20(fp)
   50ef4:	01400304 	movi	r5,12
   50ef8:	004fd3c0 	call	4fd3c <__mulsi3>
   50efc:	1007883a 	mov	r3,r2
   50f00:	00800174 	movhi	r2,5
   50f04:	10914d04 	addi	r2,r2,17716
   50f08:	1887883a 	add	r3,r3,r2
   50f0c:	e0ffff15 	stw	r3,-4(fp)
   50f10:	00000106 	br	50f18 <write+0x50>
   50f14:	e03fff15 	stw	zero,-4(fp)
   50f18:	e0bfff17 	ldw	r2,-4(fp)
   50f1c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   50f20:	e0bffa17 	ldw	r2,-24(fp)
   50f24:	1005003a 	cmpeq	r2,r2,zero
   50f28:	1000241e 	bne	r2,zero,50fbc <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   50f2c:	e0bffa17 	ldw	r2,-24(fp)
   50f30:	10800217 	ldw	r2,8(r2)
   50f34:	108000cc 	andi	r2,r2,3
   50f38:	1005003a 	cmpeq	r2,r2,zero
   50f3c:	10001a1e 	bne	r2,zero,50fa8 <write+0xe0>
   50f40:	e0bffa17 	ldw	r2,-24(fp)
   50f44:	10800017 	ldw	r2,0(r2)
   50f48:	10800617 	ldw	r2,24(r2)
   50f4c:	1005003a 	cmpeq	r2,r2,zero
   50f50:	1000151e 	bne	r2,zero,50fa8 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   50f54:	e0bffa17 	ldw	r2,-24(fp)
   50f58:	10800017 	ldw	r2,0(r2)
   50f5c:	10800617 	ldw	r2,24(r2)
   50f60:	e17ffc17 	ldw	r5,-16(fp)
   50f64:	e1bffd17 	ldw	r6,-12(fp)
   50f68:	e13ffa17 	ldw	r4,-24(fp)
   50f6c:	103ee83a 	callr	r2
   50f70:	e0bff915 	stw	r2,-28(fp)
   50f74:	e0bff917 	ldw	r2,-28(fp)
   50f78:	1004403a 	cmpge	r2,r2,zero
   50f7c:	1000071e 	bne	r2,zero,50f9c <write+0xd4>
      {
        ALT_ERRNO = -rval;
   50f80:	0050fec0 	call	50fec <alt_get_errno>
   50f84:	e0fff917 	ldw	r3,-28(fp)
   50f88:	00c7c83a 	sub	r3,zero,r3
   50f8c:	10c00015 	stw	r3,0(r2)
        return -1;
   50f90:	00bfffc4 	movi	r2,-1
   50f94:	e0bffe15 	stw	r2,-8(fp)
   50f98:	00000e06 	br	50fd4 <write+0x10c>
      }
      return rval;
   50f9c:	e0bff917 	ldw	r2,-28(fp)
   50fa0:	e0bffe15 	stw	r2,-8(fp)
   50fa4:	00000b06 	br	50fd4 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
   50fa8:	0050fec0 	call	50fec <alt_get_errno>
   50fac:	1007883a 	mov	r3,r2
   50fb0:	00800344 	movi	r2,13
   50fb4:	18800015 	stw	r2,0(r3)
   50fb8:	00000406 	br	50fcc <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   50fbc:	0050fec0 	call	50fec <alt_get_errno>
   50fc0:	1007883a 	mov	r3,r2
   50fc4:	00801444 	movi	r2,81
   50fc8:	18800015 	stw	r2,0(r3)
  }
  return -1;
   50fcc:	00bfffc4 	movi	r2,-1
   50fd0:	e0bffe15 	stw	r2,-8(fp)
   50fd4:	e0bffe17 	ldw	r2,-8(fp)
}
   50fd8:	e037883a 	mov	sp,fp
   50fdc:	dfc00117 	ldw	ra,4(sp)
   50fe0:	df000017 	ldw	fp,0(sp)
   50fe4:	dec00204 	addi	sp,sp,8
   50fe8:	f800283a 	ret

00050fec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   50fec:	defffd04 	addi	sp,sp,-12
   50ff0:	dfc00215 	stw	ra,8(sp)
   50ff4:	df000115 	stw	fp,4(sp)
   50ff8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   50ffc:	00800174 	movhi	r2,5
   51000:	1095db04 	addi	r2,r2,22380
   51004:	10800017 	ldw	r2,0(r2)
   51008:	1005003a 	cmpeq	r2,r2,zero
   5100c:	1000061e 	bne	r2,zero,51028 <alt_get_errno+0x3c>
   51010:	00800174 	movhi	r2,5
   51014:	1095db04 	addi	r2,r2,22380
   51018:	10800017 	ldw	r2,0(r2)
   5101c:	103ee83a 	callr	r2
   51020:	e0bfff15 	stw	r2,-4(fp)
   51024:	00000306 	br	51034 <alt_get_errno+0x48>
   51028:	00800174 	movhi	r2,5
   5102c:	109cb304 	addi	r2,r2,29388
   51030:	e0bfff15 	stw	r2,-4(fp)
   51034:	e0bfff17 	ldw	r2,-4(fp)
}
   51038:	e037883a 	mov	sp,fp
   5103c:	dfc00117 	ldw	ra,4(sp)
   51040:	df000017 	ldw	fp,0(sp)
   51044:	dec00204 	addi	sp,sp,8
   51048:	f800283a 	ret

0005104c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   5104c:	defffd04 	addi	sp,sp,-12
   51050:	dfc00215 	stw	ra,8(sp)
   51054:	df000115 	stw	fp,4(sp)
   51058:	df000104 	addi	fp,sp,4
   5105c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
   51060:	00530180 	call	53018 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   51064:	00800044 	movi	r2,1
   51068:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   5106c:	e037883a 	mov	sp,fp
   51070:	dfc00117 	ldw	ra,4(sp)
   51074:	df000017 	ldw	fp,0(sp)
   51078:	dec00204 	addi	sp,sp,8
   5107c:	f800283a 	ret

00051080 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   51080:	defffe04 	addi	sp,sp,-8
   51084:	dfc00115 	stw	ra,4(sp)
   51088:	df000015 	stw	fp,0(sp)
   5108c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   51090:	01000234 	movhi	r4,8
   51094:	21040004 	addi	r4,r4,4096
   51098:	000b883a 	mov	r5,zero
   5109c:	01800044 	movi	r6,1
   510a0:	01c0fa04 	movi	r7,1000
   510a4:	0051c3c0 	call	51c3c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   510a8:	01000174 	movhi	r4,5
   510ac:	2111b704 	addi	r4,r4,18140
   510b0:	000b883a 	mov	r5,zero
   510b4:	01800404 	movi	r6,16
   510b8:	00512680 	call	51268 <altera_avalon_jtag_uart_init>
   510bc:	01000174 	movhi	r4,5
   510c0:	2111ad04 	addi	r4,r4,18100
   510c4:	00510e80 	call	510e8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_HOSTFS_INIT ( ALTERA_HOSTFS, altera_hostfs);
   510c8:	01000174 	movhi	r4,5
   510cc:	2115c504 	addi	r4,r4,22292
   510d0:	00528c80 	call	528c8 <alt_fs_reg>
}
   510d4:	e037883a 	mov	sp,fp
   510d8:	dfc00117 	ldw	ra,4(sp)
   510dc:	df000017 	ldw	fp,0(sp)
   510e0:	dec00204 	addi	sp,sp,8
   510e4:	f800283a 	ret

000510e8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   510e8:	defffd04 	addi	sp,sp,-12
   510ec:	dfc00215 	stw	ra,8(sp)
   510f0:	df000115 	stw	fp,4(sp)
   510f4:	df000104 	addi	fp,sp,4
   510f8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   510fc:	e13fff17 	ldw	r4,-4(fp)
   51100:	01400174 	movhi	r5,5
   51104:	2955d804 	addi	r5,r5,22368
   51108:	00525380 	call	52538 <alt_dev_llist_insert>
}
   5110c:	e037883a 	mov	sp,fp
   51110:	dfc00117 	ldw	ra,4(sp)
   51114:	df000017 	ldw	fp,0(sp)
   51118:	dec00204 	addi	sp,sp,8
   5111c:	f800283a 	ret

00051120 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   51120:	defffa04 	addi	sp,sp,-24
   51124:	dfc00515 	stw	ra,20(sp)
   51128:	df000415 	stw	fp,16(sp)
   5112c:	df000404 	addi	fp,sp,16
   51130:	e13ffd15 	stw	r4,-12(fp)
   51134:	e17ffe15 	stw	r5,-8(fp)
   51138:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   5113c:	e0bffd17 	ldw	r2,-12(fp)
   51140:	10800017 	ldw	r2,0(r2)
   51144:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   51148:	e0bffc17 	ldw	r2,-16(fp)
   5114c:	11000a04 	addi	r4,r2,40
   51150:	e0bffd17 	ldw	r2,-12(fp)
   51154:	11c00217 	ldw	r7,8(r2)
   51158:	e17ffe17 	ldw	r5,-8(fp)
   5115c:	e1bfff17 	ldw	r6,-4(fp)
   51160:	00517680 	call	51768 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   51164:	e037883a 	mov	sp,fp
   51168:	dfc00117 	ldw	ra,4(sp)
   5116c:	df000017 	ldw	fp,0(sp)
   51170:	dec00204 	addi	sp,sp,8
   51174:	f800283a 	ret

00051178 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   51178:	defffa04 	addi	sp,sp,-24
   5117c:	dfc00515 	stw	ra,20(sp)
   51180:	df000415 	stw	fp,16(sp)
   51184:	df000404 	addi	fp,sp,16
   51188:	e13ffd15 	stw	r4,-12(fp)
   5118c:	e17ffe15 	stw	r5,-8(fp)
   51190:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   51194:	e0bffd17 	ldw	r2,-12(fp)
   51198:	10800017 	ldw	r2,0(r2)
   5119c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   511a0:	e0bffc17 	ldw	r2,-16(fp)
   511a4:	11000a04 	addi	r4,r2,40
   511a8:	e0bffd17 	ldw	r2,-12(fp)
   511ac:	11c00217 	ldw	r7,8(r2)
   511b0:	e17ffe17 	ldw	r5,-8(fp)
   511b4:	e1bfff17 	ldw	r6,-4(fp)
   511b8:	005198c0 	call	5198c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   511bc:	e037883a 	mov	sp,fp
   511c0:	dfc00117 	ldw	ra,4(sp)
   511c4:	df000017 	ldw	fp,0(sp)
   511c8:	dec00204 	addi	sp,sp,8
   511cc:	f800283a 	ret

000511d0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   511d0:	defffc04 	addi	sp,sp,-16
   511d4:	dfc00315 	stw	ra,12(sp)
   511d8:	df000215 	stw	fp,8(sp)
   511dc:	df000204 	addi	fp,sp,8
   511e0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   511e4:	e0bfff17 	ldw	r2,-4(fp)
   511e8:	10800017 	ldw	r2,0(r2)
   511ec:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   511f0:	e0bffe17 	ldw	r2,-8(fp)
   511f4:	11000a04 	addi	r4,r2,40
   511f8:	e0bfff17 	ldw	r2,-4(fp)
   511fc:	11400217 	ldw	r5,8(r2)
   51200:	00516000 	call	51600 <altera_avalon_jtag_uart_close>
}
   51204:	e037883a 	mov	sp,fp
   51208:	dfc00117 	ldw	ra,4(sp)
   5120c:	df000017 	ldw	fp,0(sp)
   51210:	dec00204 	addi	sp,sp,8
   51214:	f800283a 	ret

00051218 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   51218:	defffa04 	addi	sp,sp,-24
   5121c:	dfc00515 	stw	ra,20(sp)
   51220:	df000415 	stw	fp,16(sp)
   51224:	df000404 	addi	fp,sp,16
   51228:	e13ffd15 	stw	r4,-12(fp)
   5122c:	e17ffe15 	stw	r5,-8(fp)
   51230:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   51234:	e0bffd17 	ldw	r2,-12(fp)
   51238:	10800017 	ldw	r2,0(r2)
   5123c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   51240:	e0bffc17 	ldw	r2,-16(fp)
   51244:	11000a04 	addi	r4,r2,40
   51248:	e17ffe17 	ldw	r5,-8(fp)
   5124c:	e1bfff17 	ldw	r6,-4(fp)
   51250:	00516740 	call	51674 <altera_avalon_jtag_uart_ioctl>
}
   51254:	e037883a 	mov	sp,fp
   51258:	dfc00117 	ldw	ra,4(sp)
   5125c:	df000017 	ldw	fp,0(sp)
   51260:	dec00204 	addi	sp,sp,8
   51264:	f800283a 	ret

00051268 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   51268:	defffa04 	addi	sp,sp,-24
   5126c:	dfc00515 	stw	ra,20(sp)
   51270:	df000415 	stw	fp,16(sp)
   51274:	df000404 	addi	fp,sp,16
   51278:	e13ffd15 	stw	r4,-12(fp)
   5127c:	e17ffe15 	stw	r5,-8(fp)
   51280:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   51284:	e0fffd17 	ldw	r3,-12(fp)
   51288:	00800044 	movi	r2,1
   5128c:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   51290:	e0bffd17 	ldw	r2,-12(fp)
   51294:	10800017 	ldw	r2,0(r2)
   51298:	11000104 	addi	r4,r2,4
   5129c:	e0bffd17 	ldw	r2,-12(fp)
   512a0:	10800817 	ldw	r2,32(r2)
   512a4:	1007883a 	mov	r3,r2
   512a8:	2005883a 	mov	r2,r4
   512ac:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   512b0:	e13ffe17 	ldw	r4,-8(fp)
   512b4:	e17fff17 	ldw	r5,-4(fp)
   512b8:	d8000015 	stw	zero,0(sp)
   512bc:	01800174 	movhi	r6,5
   512c0:	3184ca04 	addi	r6,r6,4904
   512c4:	e1fffd17 	ldw	r7,-12(fp)
   512c8:	0052a580 	call	52a58 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   512cc:	e0bffd17 	ldw	r2,-12(fp)
   512d0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   512d4:	e0bffd17 	ldw	r2,-12(fp)
   512d8:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   512dc:	00800174 	movhi	r2,5
   512e0:	109cbe04 	addi	r2,r2,29432
   512e4:	10800017 	ldw	r2,0(r2)
   512e8:	100b883a 	mov	r5,r2
   512ec:	01800174 	movhi	r6,5
   512f0:	31855404 	addi	r6,r6,5456
   512f4:	e1fffd17 	ldw	r7,-12(fp)
   512f8:	005226c0 	call	5226c <alt_alarm_start>
   512fc:	1004403a 	cmpge	r2,r2,zero
   51300:	1000041e 	bne	r2,zero,51314 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   51304:	e0fffd17 	ldw	r3,-12(fp)
   51308:	00a00034 	movhi	r2,32768
   5130c:	10bfffc4 	addi	r2,r2,-1
   51310:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   51314:	e037883a 	mov	sp,fp
   51318:	dfc00117 	ldw	ra,4(sp)
   5131c:	df000017 	ldw	fp,0(sp)
   51320:	dec00204 	addi	sp,sp,8
   51324:	f800283a 	ret

00051328 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   51328:	defff804 	addi	sp,sp,-32
   5132c:	df000715 	stw	fp,28(sp)
   51330:	df000704 	addi	fp,sp,28
   51334:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   51338:	e0bfff17 	ldw	r2,-4(fp)
   5133c:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
   51340:	e0bffe17 	ldw	r2,-8(fp)
   51344:	10800017 	ldw	r2,0(r2)
   51348:	e0bffd15 	stw	r2,-12(fp)
   5134c:	00000006 	br	51350 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   51350:	e0bffd17 	ldw	r2,-12(fp)
   51354:	10800104 	addi	r2,r2,4
   51358:	10800037 	ldwio	r2,0(r2)
   5135c:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   51360:	e0bffc17 	ldw	r2,-16(fp)
   51364:	1080c00c 	andi	r2,r2,768
   51368:	1005003a 	cmpeq	r2,r2,zero
   5136c:	1000741e 	bne	r2,zero,51540 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   51370:	e0bffc17 	ldw	r2,-16(fp)
   51374:	1080400c 	andi	r2,r2,256
   51378:	1005003a 	cmpeq	r2,r2,zero
   5137c:	1000351e 	bne	r2,zero,51454 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   51380:	00800074 	movhi	r2,1
   51384:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   51388:	e0bffe17 	ldw	r2,-8(fp)
   5138c:	10800a17 	ldw	r2,40(r2)
   51390:	10800044 	addi	r2,r2,1
   51394:	1081ffcc 	andi	r2,r2,2047
   51398:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   5139c:	e0bffe17 	ldw	r2,-8(fp)
   513a0:	10c00b17 	ldw	r3,44(r2)
   513a4:	e0bffa17 	ldw	r2,-24(fp)
   513a8:	18801626 	beq	r3,r2,51404 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   513ac:	e0bffd17 	ldw	r2,-12(fp)
   513b0:	10800037 	ldwio	r2,0(r2)
   513b4:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   513b8:	e0bffb17 	ldw	r2,-20(fp)
   513bc:	10a0000c 	andi	r2,r2,32768
   513c0:	1005003a 	cmpeq	r2,r2,zero
   513c4:	10000f1e 	bne	r2,zero,51404 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   513c8:	e0bffe17 	ldw	r2,-8(fp)
   513cc:	10c00a17 	ldw	r3,40(r2)
   513d0:	e0bffb17 	ldw	r2,-20(fp)
   513d4:	1009883a 	mov	r4,r2
   513d8:	e0bffe17 	ldw	r2,-8(fp)
   513dc:	1885883a 	add	r2,r3,r2
   513e0:	10800e04 	addi	r2,r2,56
   513e4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   513e8:	e0bffe17 	ldw	r2,-8(fp)
   513ec:	10800a17 	ldw	r2,40(r2)
   513f0:	10800044 	addi	r2,r2,1
   513f4:	10c1ffcc 	andi	r3,r2,2047
   513f8:	e0bffe17 	ldw	r2,-8(fp)
   513fc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   51400:	003fe106 	br	51388 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   51404:	e0bffb17 	ldw	r2,-20(fp)
   51408:	10bfffec 	andhi	r2,r2,65535
   5140c:	1005003a 	cmpeq	r2,r2,zero
   51410:	1000101e 	bne	r2,zero,51454 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   51414:	e0bffe17 	ldw	r2,-8(fp)
   51418:	10c00817 	ldw	r3,32(r2)
   5141c:	00bfff84 	movi	r2,-2
   51420:	1886703a 	and	r3,r3,r2
   51424:	e0bffe17 	ldw	r2,-8(fp)
   51428:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   5142c:	e0bffd17 	ldw	r2,-12(fp)
   51430:	11000104 	addi	r4,r2,4
   51434:	e0bffe17 	ldw	r2,-8(fp)
   51438:	10800817 	ldw	r2,32(r2)
   5143c:	1007883a 	mov	r3,r2
   51440:	2005883a 	mov	r2,r4
   51444:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   51448:	e0bffd17 	ldw	r2,-12(fp)
   5144c:	10800104 	addi	r2,r2,4
   51450:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   51454:	e0bffc17 	ldw	r2,-16(fp)
   51458:	1080800c 	andi	r2,r2,512
   5145c:	1005003a 	cmpeq	r2,r2,zero
   51460:	103fbb1e 	bne	r2,zero,51350 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   51464:	e0bffc17 	ldw	r2,-16(fp)
   51468:	10bfffec 	andhi	r2,r2,65535
   5146c:	1004d43a 	srli	r2,r2,16
   51470:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   51474:	00001506 	br	514cc <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   51478:	e13ffd17 	ldw	r4,-12(fp)
   5147c:	e0bffe17 	ldw	r2,-8(fp)
   51480:	10c00d17 	ldw	r3,52(r2)
   51484:	e0bffe17 	ldw	r2,-8(fp)
   51488:	1885883a 	add	r2,r3,r2
   5148c:	10820e04 	addi	r2,r2,2104
   51490:	10800003 	ldbu	r2,0(r2)
   51494:	10c03fcc 	andi	r3,r2,255
   51498:	18c0201c 	xori	r3,r3,128
   5149c:	18ffe004 	addi	r3,r3,-128
   514a0:	2005883a 	mov	r2,r4
   514a4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   514a8:	e0bffe17 	ldw	r2,-8(fp)
   514ac:	10800d17 	ldw	r2,52(r2)
   514b0:	10800044 	addi	r2,r2,1
   514b4:	10c1ffcc 	andi	r3,r2,2047
   514b8:	e0bffe17 	ldw	r2,-8(fp)
   514bc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   514c0:	e0bff917 	ldw	r2,-28(fp)
   514c4:	10bfffc4 	addi	r2,r2,-1
   514c8:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   514cc:	e0bff917 	ldw	r2,-28(fp)
   514d0:	1005003a 	cmpeq	r2,r2,zero
   514d4:	1000051e 	bne	r2,zero,514ec <altera_avalon_jtag_uart_irq+0x1c4>
   514d8:	e0bffe17 	ldw	r2,-8(fp)
   514dc:	10c00d17 	ldw	r3,52(r2)
   514e0:	e0bffe17 	ldw	r2,-8(fp)
   514e4:	10800c17 	ldw	r2,48(r2)
   514e8:	18bfe31e 	bne	r3,r2,51478 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   514ec:	e0bff917 	ldw	r2,-28(fp)
   514f0:	1005003a 	cmpeq	r2,r2,zero
   514f4:	103f961e 	bne	r2,zero,51350 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   514f8:	e0bffe17 	ldw	r2,-8(fp)
   514fc:	10c00817 	ldw	r3,32(r2)
   51500:	00bfff44 	movi	r2,-3
   51504:	1886703a 	and	r3,r3,r2
   51508:	e0bffe17 	ldw	r2,-8(fp)
   5150c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   51510:	e0bffe17 	ldw	r2,-8(fp)
   51514:	10800017 	ldw	r2,0(r2)
   51518:	11000104 	addi	r4,r2,4
   5151c:	e0bffe17 	ldw	r2,-8(fp)
   51520:	10800817 	ldw	r2,32(r2)
   51524:	1007883a 	mov	r3,r2
   51528:	2005883a 	mov	r2,r4
   5152c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   51530:	e0bffd17 	ldw	r2,-12(fp)
   51534:	10800104 	addi	r2,r2,4
   51538:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   5153c:	003f8406 	br	51350 <altera_avalon_jtag_uart_irq+0x28>
}
   51540:	e037883a 	mov	sp,fp
   51544:	df000017 	ldw	fp,0(sp)
   51548:	dec00104 	addi	sp,sp,4
   5154c:	f800283a 	ret

00051550 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   51550:	defffc04 	addi	sp,sp,-16
   51554:	df000315 	stw	fp,12(sp)
   51558:	df000304 	addi	fp,sp,12
   5155c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   51560:	e0bfff17 	ldw	r2,-4(fp)
   51564:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   51568:	e0bffe17 	ldw	r2,-8(fp)
   5156c:	10800017 	ldw	r2,0(r2)
   51570:	10800104 	addi	r2,r2,4
   51574:	10800037 	ldwio	r2,0(r2)
   51578:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   5157c:	e0bffd17 	ldw	r2,-12(fp)
   51580:	1081000c 	andi	r2,r2,1024
   51584:	1005003a 	cmpeq	r2,r2,zero
   51588:	10000c1e 	bne	r2,zero,515bc <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   5158c:	e0bffe17 	ldw	r2,-8(fp)
   51590:	10800017 	ldw	r2,0(r2)
   51594:	11000104 	addi	r4,r2,4
   51598:	e0bffe17 	ldw	r2,-8(fp)
   5159c:	10800817 	ldw	r2,32(r2)
   515a0:	10810014 	ori	r2,r2,1024
   515a4:	1007883a 	mov	r3,r2
   515a8:	2005883a 	mov	r2,r4
   515ac:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   515b0:	e0bffe17 	ldw	r2,-8(fp)
   515b4:	10000915 	stw	zero,36(r2)
   515b8:	00000a06 	br	515e4 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   515bc:	e0bffe17 	ldw	r2,-8(fp)
   515c0:	10c00917 	ldw	r3,36(r2)
   515c4:	00a00034 	movhi	r2,32768
   515c8:	10bfff04 	addi	r2,r2,-4
   515cc:	10c00536 	bltu	r2,r3,515e4 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
   515d0:	e0bffe17 	ldw	r2,-8(fp)
   515d4:	10800917 	ldw	r2,36(r2)
   515d8:	10c00044 	addi	r3,r2,1
   515dc:	e0bffe17 	ldw	r2,-8(fp)
   515e0:	10c00915 	stw	r3,36(r2)
   515e4:	00800174 	movhi	r2,5
   515e8:	109cbe04 	addi	r2,r2,29432
   515ec:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   515f0:	e037883a 	mov	sp,fp
   515f4:	df000017 	ldw	fp,0(sp)
   515f8:	dec00104 	addi	sp,sp,4
   515fc:	f800283a 	ret

00051600 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   51600:	defffc04 	addi	sp,sp,-16
   51604:	df000315 	stw	fp,12(sp)
   51608:	df000304 	addi	fp,sp,12
   5160c:	e13ffd15 	stw	r4,-12(fp)
   51610:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   51614:	00000706 	br	51634 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   51618:	e0bffe17 	ldw	r2,-8(fp)
   5161c:	1090000c 	andi	r2,r2,16384
   51620:	1005003a 	cmpeq	r2,r2,zero
   51624:	1000031e 	bne	r2,zero,51634 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
   51628:	00bffd44 	movi	r2,-11
   5162c:	e0bfff15 	stw	r2,-4(fp)
   51630:	00000b06 	br	51660 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   51634:	e0bffd17 	ldw	r2,-12(fp)
   51638:	10c00d17 	ldw	r3,52(r2)
   5163c:	e0bffd17 	ldw	r2,-12(fp)
   51640:	10800c17 	ldw	r2,48(r2)
   51644:	18800526 	beq	r3,r2,5165c <altera_avalon_jtag_uart_close+0x5c>
   51648:	e0bffd17 	ldw	r2,-12(fp)
   5164c:	10c00917 	ldw	r3,36(r2)
   51650:	e0bffd17 	ldw	r2,-12(fp)
   51654:	10800117 	ldw	r2,4(r2)
   51658:	18bfef36 	bltu	r3,r2,51618 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   5165c:	e03fff15 	stw	zero,-4(fp)
   51660:	e0bfff17 	ldw	r2,-4(fp)
}
   51664:	e037883a 	mov	sp,fp
   51668:	df000017 	ldw	fp,0(sp)
   5166c:	dec00104 	addi	sp,sp,4
   51670:	f800283a 	ret

00051674 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   51674:	defff804 	addi	sp,sp,-32
   51678:	df000715 	stw	fp,28(sp)
   5167c:	df000704 	addi	fp,sp,28
   51680:	e13ffb15 	stw	r4,-20(fp)
   51684:	e17ffc15 	stw	r5,-16(fp)
   51688:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
   5168c:	00bff9c4 	movi	r2,-25
   51690:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
   51694:	e0bffc17 	ldw	r2,-16(fp)
   51698:	e0bfff15 	stw	r2,-4(fp)
   5169c:	e0ffff17 	ldw	r3,-4(fp)
   516a0:	189a8060 	cmpeqi	r2,r3,27137
   516a4:	1000041e 	bne	r2,zero,516b8 <altera_avalon_jtag_uart_ioctl+0x44>
   516a8:	e0ffff17 	ldw	r3,-4(fp)
   516ac:	189a80a0 	cmpeqi	r2,r3,27138
   516b0:	10001b1e 	bne	r2,zero,51720 <altera_avalon_jtag_uart_ioctl+0xac>
   516b4:	00002706 	br	51754 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   516b8:	e0bffb17 	ldw	r2,-20(fp)
   516bc:	10c00117 	ldw	r3,4(r2)
   516c0:	00a00034 	movhi	r2,32768
   516c4:	10bfffc4 	addi	r2,r2,-1
   516c8:	18802226 	beq	r3,r2,51754 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
   516cc:	e0bffd17 	ldw	r2,-12(fp)
   516d0:	10800017 	ldw	r2,0(r2)
   516d4:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   516d8:	e0bff917 	ldw	r2,-28(fp)
   516dc:	10800090 	cmplti	r2,r2,2
   516e0:	1000071e 	bne	r2,zero,51700 <altera_avalon_jtag_uart_ioctl+0x8c>
   516e4:	e0fff917 	ldw	r3,-28(fp)
   516e8:	00a00034 	movhi	r2,32768
   516ec:	10bfffc4 	addi	r2,r2,-1
   516f0:	18800326 	beq	r3,r2,51700 <altera_avalon_jtag_uart_ioctl+0x8c>
   516f4:	e0bff917 	ldw	r2,-28(fp)
   516f8:	e0bffe15 	stw	r2,-8(fp)
   516fc:	00000306 	br	5170c <altera_avalon_jtag_uart_ioctl+0x98>
   51700:	00e00034 	movhi	r3,32768
   51704:	18ffff84 	addi	r3,r3,-2
   51708:	e0fffe15 	stw	r3,-8(fp)
   5170c:	e0bffb17 	ldw	r2,-20(fp)
   51710:	e0fffe17 	ldw	r3,-8(fp)
   51714:	10c00115 	stw	r3,4(r2)
      rc = 0;
   51718:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
   5171c:	00000d06 	br	51754 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   51720:	e0bffb17 	ldw	r2,-20(fp)
   51724:	10c00117 	ldw	r3,4(r2)
   51728:	00a00034 	movhi	r2,32768
   5172c:	10bfffc4 	addi	r2,r2,-1
   51730:	18800826 	beq	r3,r2,51754 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   51734:	e13ffd17 	ldw	r4,-12(fp)
   51738:	e0bffb17 	ldw	r2,-20(fp)
   5173c:	10c00917 	ldw	r3,36(r2)
   51740:	e0bffb17 	ldw	r2,-20(fp)
   51744:	10800117 	ldw	r2,4(r2)
   51748:	1885803a 	cmpltu	r2,r3,r2
   5174c:	20800015 	stw	r2,0(r4)
      rc = 0;
   51750:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
   51754:	e0bffa17 	ldw	r2,-24(fp)
}
   51758:	e037883a 	mov	sp,fp
   5175c:	df000017 	ldw	fp,0(sp)
   51760:	dec00104 	addi	sp,sp,4
   51764:	f800283a 	ret

00051768 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   51768:	defff204 	addi	sp,sp,-56
   5176c:	dfc00d15 	stw	ra,52(sp)
   51770:	df000c15 	stw	fp,48(sp)
   51774:	df000c04 	addi	fp,sp,48
   51778:	e13ffb15 	stw	r4,-20(fp)
   5177c:	e17ffc15 	stw	r5,-16(fp)
   51780:	e1bffd15 	stw	r6,-12(fp)
   51784:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
   51788:	e0bffc17 	ldw	r2,-16(fp)
   5178c:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   51790:	00004806 	br	518b4 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   51794:	e0bffb17 	ldw	r2,-20(fp)
   51798:	10800a17 	ldw	r2,40(r2)
   5179c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   517a0:	e0bffb17 	ldw	r2,-20(fp)
   517a4:	10800b17 	ldw	r2,44(r2)
   517a8:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
   517ac:	e0fff717 	ldw	r3,-36(fp)
   517b0:	e0bff617 	ldw	r2,-40(fp)
   517b4:	18800536 	bltu	r3,r2,517cc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   517b8:	e0bff717 	ldw	r2,-36(fp)
   517bc:	e0fff617 	ldw	r3,-40(fp)
   517c0:	10c5c83a 	sub	r2,r2,r3
   517c4:	e0bff815 	stw	r2,-32(fp)
   517c8:	00000406 	br	517dc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   517cc:	00820004 	movi	r2,2048
   517d0:	e0fff617 	ldw	r3,-40(fp)
   517d4:	10c5c83a 	sub	r2,r2,r3
   517d8:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   517dc:	e0bff817 	ldw	r2,-32(fp)
   517e0:	1005003a 	cmpeq	r2,r2,zero
   517e4:	10001f1e 	bne	r2,zero,51864 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
   517e8:	e0fffd17 	ldw	r3,-12(fp)
   517ec:	e0bff817 	ldw	r2,-32(fp)
   517f0:	1880022e 	bgeu	r3,r2,517fc <altera_avalon_jtag_uart_read+0x94>
        n = space;
   517f4:	e0bffd17 	ldw	r2,-12(fp)
   517f8:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   517fc:	e0bffb17 	ldw	r2,-20(fp)
   51800:	10c00e04 	addi	r3,r2,56
   51804:	e0bff617 	ldw	r2,-40(fp)
   51808:	1887883a 	add	r3,r3,r2
   5180c:	e0bffa17 	ldw	r2,-24(fp)
   51810:	1009883a 	mov	r4,r2
   51814:	180b883a 	mov	r5,r3
   51818:	e1bff817 	ldw	r6,-32(fp)
   5181c:	0048de80 	call	48de8 <memcpy>
      ptr   += n;
   51820:	e0fff817 	ldw	r3,-32(fp)
   51824:	e0bffa17 	ldw	r2,-24(fp)
   51828:	10c5883a 	add	r2,r2,r3
   5182c:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
   51830:	e0fffd17 	ldw	r3,-12(fp)
   51834:	e0bff817 	ldw	r2,-32(fp)
   51838:	1885c83a 	sub	r2,r3,r2
   5183c:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   51840:	e0fff617 	ldw	r3,-40(fp)
   51844:	e0bff817 	ldw	r2,-32(fp)
   51848:	1885883a 	add	r2,r3,r2
   5184c:	10c1ffcc 	andi	r3,r2,2047
   51850:	e0bffb17 	ldw	r2,-20(fp)
   51854:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   51858:	e0bffd17 	ldw	r2,-12(fp)
   5185c:	10800048 	cmpgei	r2,r2,1
   51860:	103fcc1e 	bne	r2,zero,51794 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
   51864:	e0fffa17 	ldw	r3,-24(fp)
   51868:	e0bffc17 	ldw	r2,-16(fp)
   5186c:	1880141e 	bne	r3,r2,518c0 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   51870:	e0bffe17 	ldw	r2,-8(fp)
   51874:	1090000c 	andi	r2,r2,16384
   51878:	1004c03a 	cmpne	r2,r2,zero
   5187c:	1000101e 	bne	r2,zero,518c0 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   51880:	e0bffb17 	ldw	r2,-20(fp)
   51884:	10c00a17 	ldw	r3,40(r2)
   51888:	e0bff717 	ldw	r2,-36(fp)
   5188c:	1880051e 	bne	r3,r2,518a4 <altera_avalon_jtag_uart_read+0x13c>
   51890:	e0bffb17 	ldw	r2,-20(fp)
   51894:	10c00917 	ldw	r3,36(r2)
   51898:	e0bffb17 	ldw	r2,-20(fp)
   5189c:	10800117 	ldw	r2,4(r2)
   518a0:	18bff736 	bltu	r3,r2,51880 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   518a4:	e0bffb17 	ldw	r2,-20(fp)
   518a8:	10c00a17 	ldw	r3,40(r2)
   518ac:	e0bff717 	ldw	r2,-36(fp)
   518b0:	18800326 	beq	r3,r2,518c0 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   518b4:	e0bffd17 	ldw	r2,-12(fp)
   518b8:	10800048 	cmpgei	r2,r2,1
   518bc:	103fb51e 	bne	r2,zero,51794 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   518c0:	e0fffa17 	ldw	r3,-24(fp)
   518c4:	e0bffc17 	ldw	r2,-16(fp)
   518c8:	18801926 	beq	r3,r2,51930 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   518cc:	0005303a 	rdctl	r2,status
   518d0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   518d4:	e0fff517 	ldw	r3,-44(fp)
   518d8:	00bfff84 	movi	r2,-2
   518dc:	1884703a 	and	r2,r3,r2
   518e0:	1001703a 	wrctl	status,r2
  
  return context;
   518e4:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   518e8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   518ec:	e0bffb17 	ldw	r2,-20(fp)
   518f0:	10800817 	ldw	r2,32(r2)
   518f4:	10c00054 	ori	r3,r2,1
   518f8:	e0bffb17 	ldw	r2,-20(fp)
   518fc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   51900:	e0bffb17 	ldw	r2,-20(fp)
   51904:	10800017 	ldw	r2,0(r2)
   51908:	11000104 	addi	r4,r2,4
   5190c:	e0bffb17 	ldw	r2,-20(fp)
   51910:	10800817 	ldw	r2,32(r2)
   51914:	1007883a 	mov	r3,r2
   51918:	2005883a 	mov	r2,r4
   5191c:	10c00035 	stwio	r3,0(r2)
   51920:	e0bff917 	ldw	r2,-28(fp)
   51924:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   51928:	e0bff417 	ldw	r2,-48(fp)
   5192c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   51930:	e0fffa17 	ldw	r3,-24(fp)
   51934:	e0bffc17 	ldw	r2,-16(fp)
   51938:	18800526 	beq	r3,r2,51950 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
   5193c:	e0fffa17 	ldw	r3,-24(fp)
   51940:	e0bffc17 	ldw	r2,-16(fp)
   51944:	1887c83a 	sub	r3,r3,r2
   51948:	e0ffff15 	stw	r3,-4(fp)
   5194c:	00000906 	br	51974 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   51950:	e0bffe17 	ldw	r2,-8(fp)
   51954:	1090000c 	andi	r2,r2,16384
   51958:	1005003a 	cmpeq	r2,r2,zero
   5195c:	1000031e 	bne	r2,zero,5196c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   51960:	00bffd44 	movi	r2,-11
   51964:	e0bfff15 	stw	r2,-4(fp)
   51968:	00000206 	br	51974 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   5196c:	00bffec4 	movi	r2,-5
   51970:	e0bfff15 	stw	r2,-4(fp)
   51974:	e0bfff17 	ldw	r2,-4(fp)
}
   51978:	e037883a 	mov	sp,fp
   5197c:	dfc00117 	ldw	ra,4(sp)
   51980:	df000017 	ldw	fp,0(sp)
   51984:	dec00204 	addi	sp,sp,8
   51988:	f800283a 	ret

0005198c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   5198c:	defff204 	addi	sp,sp,-56
   51990:	dfc00d15 	stw	ra,52(sp)
   51994:	df000c15 	stw	fp,48(sp)
   51998:	df000c04 	addi	fp,sp,48
   5199c:	e13ffb15 	stw	r4,-20(fp)
   519a0:	e17ffc15 	stw	r5,-16(fp)
   519a4:	e1bffd15 	stw	r6,-12(fp)
   519a8:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   519ac:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   519b0:	e0bffc17 	ldw	r2,-16(fp)
   519b4:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   519b8:	00003a06 	br	51aa4 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   519bc:	e0bffb17 	ldw	r2,-20(fp)
   519c0:	10800c17 	ldw	r2,48(r2)
   519c4:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
   519c8:	e0bffb17 	ldw	r2,-20(fp)
   519cc:	10800d17 	ldw	r2,52(r2)
   519d0:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
   519d4:	e0fffa17 	ldw	r3,-24(fp)
   519d8:	e0bff917 	ldw	r2,-28(fp)
   519dc:	1880062e 	bgeu	r3,r2,519f8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   519e0:	e0fff917 	ldw	r3,-28(fp)
   519e4:	e0bffa17 	ldw	r2,-24(fp)
   519e8:	1885c83a 	sub	r2,r3,r2
   519ec:	10bfffc4 	addi	r2,r2,-1
   519f0:	e0bff815 	stw	r2,-32(fp)
   519f4:	00000c06 	br	51a28 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
   519f8:	e0bff917 	ldw	r2,-28(fp)
   519fc:	1005003a 	cmpeq	r2,r2,zero
   51a00:	1000051e 	bne	r2,zero,51a18 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   51a04:	00820004 	movi	r2,2048
   51a08:	e0fffa17 	ldw	r3,-24(fp)
   51a0c:	10c5c83a 	sub	r2,r2,r3
   51a10:	e0bff815 	stw	r2,-32(fp)
   51a14:	00000406 	br	51a28 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   51a18:	0081ffc4 	movi	r2,2047
   51a1c:	e0fffa17 	ldw	r3,-24(fp)
   51a20:	10c5c83a 	sub	r2,r2,r3
   51a24:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   51a28:	e0bff817 	ldw	r2,-32(fp)
   51a2c:	1005003a 	cmpeq	r2,r2,zero
   51a30:	10001f1e 	bne	r2,zero,51ab0 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
   51a34:	e0fffd17 	ldw	r3,-12(fp)
   51a38:	e0bff817 	ldw	r2,-32(fp)
   51a3c:	1880022e 	bgeu	r3,r2,51a48 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
   51a40:	e0bffd17 	ldw	r2,-12(fp)
   51a44:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   51a48:	e0bffb17 	ldw	r2,-20(fp)
   51a4c:	10c20e04 	addi	r3,r2,2104
   51a50:	e0bffa17 	ldw	r2,-24(fp)
   51a54:	1885883a 	add	r2,r3,r2
   51a58:	e0fffc17 	ldw	r3,-16(fp)
   51a5c:	1009883a 	mov	r4,r2
   51a60:	180b883a 	mov	r5,r3
   51a64:	e1bff817 	ldw	r6,-32(fp)
   51a68:	0048de80 	call	48de8 <memcpy>
      ptr   += n;
   51a6c:	e0fff817 	ldw	r3,-32(fp)
   51a70:	e0bffc17 	ldw	r2,-16(fp)
   51a74:	10c5883a 	add	r2,r2,r3
   51a78:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
   51a7c:	e0fffd17 	ldw	r3,-12(fp)
   51a80:	e0bff817 	ldw	r2,-32(fp)
   51a84:	1885c83a 	sub	r2,r3,r2
   51a88:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   51a8c:	e0fffa17 	ldw	r3,-24(fp)
   51a90:	e0bff817 	ldw	r2,-32(fp)
   51a94:	1885883a 	add	r2,r3,r2
   51a98:	10c1ffcc 	andi	r3,r2,2047
   51a9c:	e0bffb17 	ldw	r2,-20(fp)
   51aa0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   51aa4:	e0bffd17 	ldw	r2,-12(fp)
   51aa8:	10800048 	cmpgei	r2,r2,1
   51aac:	103fc31e 	bne	r2,zero,519bc <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   51ab0:	0005303a 	rdctl	r2,status
   51ab4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   51ab8:	e0fff517 	ldw	r3,-44(fp)
   51abc:	00bfff84 	movi	r2,-2
   51ac0:	1884703a 	and	r2,r3,r2
   51ac4:	1001703a 	wrctl	status,r2
  
  return context;
   51ac8:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   51acc:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   51ad0:	e0bffb17 	ldw	r2,-20(fp)
   51ad4:	10800817 	ldw	r2,32(r2)
   51ad8:	10c00094 	ori	r3,r2,2
   51adc:	e0bffb17 	ldw	r2,-20(fp)
   51ae0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   51ae4:	e0bffb17 	ldw	r2,-20(fp)
   51ae8:	10800017 	ldw	r2,0(r2)
   51aec:	11000104 	addi	r4,r2,4
   51af0:	e0bffb17 	ldw	r2,-20(fp)
   51af4:	10800817 	ldw	r2,32(r2)
   51af8:	1007883a 	mov	r3,r2
   51afc:	2005883a 	mov	r2,r4
   51b00:	10c00035 	stwio	r3,0(r2)
   51b04:	e0bff717 	ldw	r2,-36(fp)
   51b08:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   51b0c:	e0bff417 	ldw	r2,-48(fp)
   51b10:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   51b14:	e0bffd17 	ldw	r2,-12(fp)
   51b18:	10800050 	cmplti	r2,r2,1
   51b1c:	1000111e 	bne	r2,zero,51b64 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
   51b20:	e0bffe17 	ldw	r2,-8(fp)
   51b24:	1090000c 	andi	r2,r2,16384
   51b28:	1004c03a 	cmpne	r2,r2,zero
   51b2c:	1000101e 	bne	r2,zero,51b70 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   51b30:	e0bffb17 	ldw	r2,-20(fp)
   51b34:	10c00d17 	ldw	r3,52(r2)
   51b38:	e0bff917 	ldw	r2,-28(fp)
   51b3c:	1880051e 	bne	r3,r2,51b54 <altera_avalon_jtag_uart_write+0x1c8>
   51b40:	e0bffb17 	ldw	r2,-20(fp)
   51b44:	10c00917 	ldw	r3,36(r2)
   51b48:	e0bffb17 	ldw	r2,-20(fp)
   51b4c:	10800117 	ldw	r2,4(r2)
   51b50:	18bff736 	bltu	r3,r2,51b30 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   51b54:	e0bffb17 	ldw	r2,-20(fp)
   51b58:	10c00d17 	ldw	r3,52(r2)
   51b5c:	e0bff917 	ldw	r2,-28(fp)
   51b60:	18800326 	beq	r3,r2,51b70 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
   51b64:	e0bffd17 	ldw	r2,-12(fp)
   51b68:	10800048 	cmpgei	r2,r2,1
   51b6c:	103fcd1e 	bne	r2,zero,51aa4 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   51b70:	e0fffc17 	ldw	r3,-16(fp)
   51b74:	e0bff617 	ldw	r2,-40(fp)
   51b78:	18800526 	beq	r3,r2,51b90 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
   51b7c:	e0fffc17 	ldw	r3,-16(fp)
   51b80:	e0bff617 	ldw	r2,-40(fp)
   51b84:	1887c83a 	sub	r3,r3,r2
   51b88:	e0ffff15 	stw	r3,-4(fp)
   51b8c:	00000906 	br	51bb4 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
   51b90:	e0bffe17 	ldw	r2,-8(fp)
   51b94:	1090000c 	andi	r2,r2,16384
   51b98:	1005003a 	cmpeq	r2,r2,zero
   51b9c:	1000031e 	bne	r2,zero,51bac <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
   51ba0:	00bffd44 	movi	r2,-11
   51ba4:	e0bfff15 	stw	r2,-4(fp)
   51ba8:	00000206 	br	51bb4 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
   51bac:	00bffec4 	movi	r2,-5
   51bb0:	e0bfff15 	stw	r2,-4(fp)
   51bb4:	e0bfff17 	ldw	r2,-4(fp)
}
   51bb8:	e037883a 	mov	sp,fp
   51bbc:	dfc00117 	ldw	ra,4(sp)
   51bc0:	df000017 	ldw	fp,0(sp)
   51bc4:	dec00204 	addi	sp,sp,8
   51bc8:	f800283a 	ret

00051bcc <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   51bcc:	defffa04 	addi	sp,sp,-24
   51bd0:	dfc00515 	stw	ra,20(sp)
   51bd4:	df000415 	stw	fp,16(sp)
   51bd8:	df000404 	addi	fp,sp,16
   51bdc:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   51be0:	e0bfff17 	ldw	r2,-4(fp)
   51be4:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   51be8:	e0bfff17 	ldw	r2,-4(fp)
   51bec:	10800104 	addi	r2,r2,4
   51bf0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   51bf4:	0005303a 	rdctl	r2,status
   51bf8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   51bfc:	e0fffd17 	ldw	r3,-12(fp)
   51c00:	00bfff84 	movi	r2,-2
   51c04:	1884703a 	and	r2,r3,r2
   51c08:	1001703a 	wrctl	status,r2
  
  return context;
   51c0c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   51c10:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
   51c14:	0052f0c0 	call	52f0c <alt_tick>
   51c18:	e0bffe17 	ldw	r2,-8(fp)
   51c1c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   51c20:	e0bffc17 	ldw	r2,-16(fp)
   51c24:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   51c28:	e037883a 	mov	sp,fp
   51c2c:	dfc00117 	ldw	ra,4(sp)
   51c30:	df000017 	ldw	fp,0(sp)
   51c34:	dec00204 	addi	sp,sp,8
   51c38:	f800283a 	ret

00051c3c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   51c3c:	defff804 	addi	sp,sp,-32
   51c40:	dfc00715 	stw	ra,28(sp)
   51c44:	df000615 	stw	fp,24(sp)
   51c48:	df000604 	addi	fp,sp,24
   51c4c:	e13ffc15 	stw	r4,-16(fp)
   51c50:	e17ffd15 	stw	r5,-12(fp)
   51c54:	e1bffe15 	stw	r6,-8(fp)
   51c58:	e1ffff15 	stw	r7,-4(fp)
   51c5c:	e0bfff17 	ldw	r2,-4(fp)
   51c60:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   51c64:	00800174 	movhi	r2,5
   51c68:	109cbe04 	addi	r2,r2,29432
   51c6c:	10800017 	ldw	r2,0(r2)
   51c70:	1004c03a 	cmpne	r2,r2,zero
   51c74:	1000041e 	bne	r2,zero,51c88 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
   51c78:	00c00174 	movhi	r3,5
   51c7c:	18dcbe04 	addi	r3,r3,29432
   51c80:	e0bffb17 	ldw	r2,-20(fp)
   51c84:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   51c88:	e0bffc17 	ldw	r2,-16(fp)
   51c8c:	10800104 	addi	r2,r2,4
   51c90:	1007883a 	mov	r3,r2
   51c94:	008001c4 	movi	r2,7
   51c98:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   51c9c:	d8000015 	stw	zero,0(sp)
   51ca0:	e13ffd17 	ldw	r4,-12(fp)
   51ca4:	e17ffe17 	ldw	r5,-8(fp)
   51ca8:	01800174 	movhi	r6,5
   51cac:	3186f304 	addi	r6,r6,7116
   51cb0:	e1fffc17 	ldw	r7,-16(fp)
   51cb4:	0052a580 	call	52a58 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   51cb8:	e037883a 	mov	sp,fp
   51cbc:	dfc00117 	ldw	ra,4(sp)
   51cc0:	df000017 	ldw	fp,0(sp)
   51cc4:	dec00204 	addi	sp,sp,8
   51cc8:	f800283a 	ret

00051ccc <alt_hostfs_open>:
* alt_hostfs_open
*
* If we can't find anything return -1
*/
int alt_hostfs_open(alt_fd* fd, const char * name, int flags, int mode)
{
   51ccc:	deffee04 	addi	sp,sp,-72
   51cd0:	df001115 	stw	fp,68(sp)
   51cd4:	df001104 	addi	fp,sp,68
   51cd8:	e13ffc15 	stw	r4,-16(fp)
   51cdc:	e17ffd15 	stw	r5,-12(fp)
   51ce0:	e1bffe15 	stw	r6,-8(fp)
   51ce4:	e1ffff15 	stw	r7,-4(fp)
  static const struct HOSTCALL_INFO hcinfo = { 0x0103, "open" };

  alt_hostfs_dev* dev= (alt_hostfs_dev*)fd->dev;
   51ce8:	e0bffc17 	ldw	r2,-16(fp)
   51cec:	10800017 	ldw	r2,0(r2)
   51cf0:	e0bffb15 	stw	r2,-20(fp)
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
   51cf4:	e0bffb17 	ldw	r2,-20(fp)
   51cf8:	10800217 	ldw	r2,8(r2)
   51cfc:	e0bff115 	stw	r2,-60(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
   51d00:	e0bff117 	ldw	r2,-60(fp)
   51d04:	10bfffc4 	addi	r2,r2,-1
   51d08:	e0bff215 	stw	r2,-56(fp)

  while (*++ptr != 0)
   51d0c:	e0bff217 	ldw	r2,-56(fp)
   51d10:	10800044 	addi	r2,r2,1
   51d14:	e0bff215 	stw	r2,-56(fp)
   51d18:	e0bff217 	ldw	r2,-56(fp)
   51d1c:	10800003 	ldbu	r2,0(r2)
   51d20:	10803fcc 	andi	r2,r2,255
   51d24:	1080201c 	xori	r2,r2,128
   51d28:	10bfe004 	addi	r2,r2,-128
   51d2c:	1004c03a 	cmpne	r2,r2,zero
   51d30:	103ff61e 	bne	r2,zero,51d0c <alt_hostfs_open+0x40>
    ;

  return ptr - string;
   51d34:	e0fff217 	ldw	r3,-56(fp)
   51d38:	e0bff117 	ldw	r2,-60(fp)
   51d3c:	1885c83a 	sub	r2,r3,r2
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
   51d40:	1007883a 	mov	r3,r2
   51d44:	e0bffd17 	ldw	r2,-12(fp)
   51d48:	1885883a 	add	r2,r3,r2
   51d4c:	10800044 	addi	r2,r2,1
   51d50:	e0bffd15 	stw	r2,-12(fp)

  r3 = (int)&hcinfo;
   51d54:	d0a00e04 	addi	r2,gp,-32712
   51d58:	e0bff715 	stw	r2,-36(fp)
  r4 = (int)name;
   51d5c:	e0bffd17 	ldw	r2,-12(fp)
   51d60:	e0bff615 	stw	r2,-40(fp)
  r5 = flags;
   51d64:	e0bffe17 	ldw	r2,-8(fp)
   51d68:	e0bff515 	stw	r2,-44(fp)
  r6 = mode;
   51d6c:	e0bfff17 	ldw	r2,-4(fp)
   51d70:	e0bff415 	stw	r2,-48(fp)
   51d74:	e0bffd17 	ldw	r2,-12(fp)
   51d78:	e0bfef15 	stw	r2,-68(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
   51d7c:	e0bfef17 	ldw	r2,-68(fp)
   51d80:	10bfffc4 	addi	r2,r2,-1
   51d84:	e0bff015 	stw	r2,-64(fp)

  while (*++ptr != 0)
   51d88:	e0bff017 	ldw	r2,-64(fp)
   51d8c:	10800044 	addi	r2,r2,1
   51d90:	e0bff015 	stw	r2,-64(fp)
   51d94:	e0bff017 	ldw	r2,-64(fp)
   51d98:	10800003 	ldbu	r2,0(r2)
   51d9c:	10803fcc 	andi	r2,r2,255
   51da0:	1080201c 	xori	r2,r2,128
   51da4:	10bfe004 	addi	r2,r2,-128
   51da8:	1004c03a 	cmpne	r2,r2,zero
   51dac:	103ff61e 	bne	r2,zero,51d88 <alt_hostfs_open+0xbc>
    ;

  return ptr - string;
   51db0:	e0fff017 	ldw	r3,-64(fp)
   51db4:	e0bfef17 	ldw	r2,-68(fp)
   51db8:	1885c83a 	sub	r2,r3,r2

  r3 = (int)&hcinfo;
  r4 = (int)name;
  r5 = flags;
  r6 = mode;
  r7 = inline_strlen(name);
   51dbc:	e0bff315 	stw	r2,-52(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6), "D07" (r7) : "memory" );
   51dc0:	e13ff617 	ldw	r4,-40(fp)
   51dc4:	e17ff517 	ldw	r5,-44(fp)
   51dc8:	e1bff417 	ldw	r6,-48(fp)
   51dcc:	e1fff317 	ldw	r7,-52(fp)
   51dd0:	e0fff717 	ldw	r3,-36(fp)
   51dd4:	003da07a 	break	1
   51dd8:	e0bff815 	stw	r2,-32(fp)
   51ddc:	e0fff715 	stw	r3,-36(fp)

  handle = (void *)r2;
   51de0:	e0bff817 	ldw	r2,-32(fp)
   51de4:	e0bff915 	stw	r2,-28(fp)
  error = r3;
   51de8:	e0bff717 	ldw	r2,-36(fp)
   51dec:	e0bffa15 	stw	r2,-24(fp)

  if (error == 0)
   51df0:	e0bffa17 	ldw	r2,-24(fp)
   51df4:	1004c03a 	cmpne	r2,r2,zero
   51df8:	1000031e 	bne	r2,zero,51e08 <alt_hostfs_open+0x13c>
    fd->priv = handle;
   51dfc:	e0fff917 	ldw	r3,-28(fp)
   51e00:	e0bffc17 	ldw	r2,-16(fp)
   51e04:	10c00115 	stw	r3,4(r2)

  return -error;
   51e08:	e0bffa17 	ldw	r2,-24(fp)
   51e0c:	0085c83a 	sub	r2,zero,r2
}
   51e10:	e037883a 	mov	sp,fp
   51e14:	df000017 	ldw	fp,0(sp)
   51e18:	dec00104 	addi	sp,sp,4
   51e1c:	f800283a 	ret

00051e20 <alt_hostfs_close>:
* alt_hostfs_close
*
* Read the file
*/
int alt_hostfs_close(alt_fd* fd)
{
   51e20:	defffb04 	addi	sp,sp,-20
   51e24:	df000415 	stw	fp,16(sp)
   51e28:	df000404 	addi	fp,sp,16
   51e2c:	e13fff15 	stw	r4,-4(fp)
  int error;

  /* Input and output parameters for the hostcall */
  int r3, r4;

  r3 = (int)&hcinfo;
   51e30:	d0a01104 	addi	r2,gp,-32700
   51e34:	e0bffd15 	stw	r2,-12(fp)
  r4 = (int)fd->priv;
   51e38:	e0bfff17 	ldw	r2,-4(fp)
   51e3c:	10800117 	ldw	r2,4(r2)
   51e40:	e0bffc15 	stw	r2,-16(fp)

  __asm__ volatile("break 1" : "+D03" (r3) : "D04" (r4) );
   51e44:	e13ffc17 	ldw	r4,-16(fp)
   51e48:	e0fffd17 	ldw	r3,-12(fp)
   51e4c:	003da07a 	break	1
   51e50:	e0fffd15 	stw	r3,-12(fp)

  error = r3;
   51e54:	e0bffd17 	ldw	r2,-12(fp)
   51e58:	e0bffe15 	stw	r2,-8(fp)

  return -error;
   51e5c:	e0bffe17 	ldw	r2,-8(fp)
   51e60:	0085c83a 	sub	r2,zero,r2
}
   51e64:	e037883a 	mov	sp,fp
   51e68:	df000017 	ldw	fp,0(sp)
   51e6c:	dec00104 	addi	sp,sp,4
   51e70:	f800283a 	ret

00051e74 <alt_hostfs_read>:
* alt_hostfs_read
*
* Read the file
*/
int alt_hostfs_read(alt_fd* fd, char * ptr, int len)
{
   51e74:	defff404 	addi	sp,sp,-48
   51e78:	df000b15 	stw	fp,44(sp)
   51e7c:	df000b04 	addi	fp,sp,44
   51e80:	e13ffc15 	stw	r4,-16(fp)
   51e84:	e17ffd15 	stw	r5,-12(fp)
   51e88:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
   51e8c:	d0a01404 	addi	r2,gp,-32688
   51e90:	e0bff815 	stw	r2,-32(fp)
  r4 = (int)fd->priv;
   51e94:	e0bffc17 	ldw	r2,-16(fp)
   51e98:	10800117 	ldw	r2,4(r2)
   51e9c:	e0bff715 	stw	r2,-36(fp)
  r5 = (int)ptr;
   51ea0:	e0bffd17 	ldw	r2,-12(fp)
   51ea4:	e0bff615 	stw	r2,-40(fp)
  r6 = len;
   51ea8:	e0bffe17 	ldw	r2,-8(fp)
   51eac:	e0bff515 	stw	r2,-44(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
   51eb0:	e13ff717 	ldw	r4,-36(fp)
   51eb4:	e17ff617 	ldw	r5,-40(fp)
   51eb8:	e1bff517 	ldw	r6,-44(fp)
   51ebc:	e0fff817 	ldw	r3,-32(fp)
   51ec0:	003da07a 	break	1
   51ec4:	e0bff915 	stw	r2,-28(fp)
   51ec8:	e0fff815 	stw	r3,-32(fp)

  rc = r2;
   51ecc:	e0bff917 	ldw	r2,-28(fp)
   51ed0:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
   51ed4:	e0bff817 	ldw	r2,-32(fp)
   51ed8:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
   51edc:	e0bffb17 	ldw	r2,-20(fp)
   51ee0:	1005003a 	cmpeq	r2,r2,zero
   51ee4:	1000041e 	bne	r2,zero,51ef8 <alt_hostfs_read+0x84>
   51ee8:	e0bffb17 	ldw	r2,-20(fp)
   51eec:	0085c83a 	sub	r2,zero,r2
   51ef0:	e0bfff15 	stw	r2,-4(fp)
   51ef4:	00000206 	br	51f00 <alt_hostfs_read+0x8c>
   51ef8:	e0bffa17 	ldw	r2,-24(fp)
   51efc:	e0bfff15 	stw	r2,-4(fp)
   51f00:	e0bfff17 	ldw	r2,-4(fp)
}
   51f04:	e037883a 	mov	sp,fp
   51f08:	df000017 	ldw	fp,0(sp)
   51f0c:	dec00104 	addi	sp,sp,4
   51f10:	f800283a 	ret

00051f14 <alt_hostfs_write>:
* alt_hostfs_write
*
* Read the file
*/
int alt_hostfs_write(alt_fd* fd, const char * ptr, int len)
{
   51f14:	defff404 	addi	sp,sp,-48
   51f18:	df000b15 	stw	fp,44(sp)
   51f1c:	df000b04 	addi	fp,sp,44
   51f20:	e13ffc15 	stw	r4,-16(fp)
   51f24:	e17ffd15 	stw	r5,-12(fp)
   51f28:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
   51f2c:	d0a01704 	addi	r2,gp,-32676
   51f30:	e0bff815 	stw	r2,-32(fp)
  r4 = (int)fd->priv;
   51f34:	e0bffc17 	ldw	r2,-16(fp)
   51f38:	10800117 	ldw	r2,4(r2)
   51f3c:	e0bff715 	stw	r2,-36(fp)
  r5 = (int)ptr;
   51f40:	e0bffd17 	ldw	r2,-12(fp)
   51f44:	e0bff615 	stw	r2,-40(fp)
  r6 = len;
   51f48:	e0bffe17 	ldw	r2,-8(fp)
   51f4c:	e0bff515 	stw	r2,-44(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
   51f50:	e13ff717 	ldw	r4,-36(fp)
   51f54:	e17ff617 	ldw	r5,-40(fp)
   51f58:	e1bff517 	ldw	r6,-44(fp)
   51f5c:	e0fff817 	ldw	r3,-32(fp)
   51f60:	003da07a 	break	1
   51f64:	e0bff915 	stw	r2,-28(fp)
   51f68:	e0fff815 	stw	r3,-32(fp)

  rc = r2;
   51f6c:	e0bff917 	ldw	r2,-28(fp)
   51f70:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
   51f74:	e0bff817 	ldw	r2,-32(fp)
   51f78:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
   51f7c:	e0bffb17 	ldw	r2,-20(fp)
   51f80:	1005003a 	cmpeq	r2,r2,zero
   51f84:	1000041e 	bne	r2,zero,51f98 <alt_hostfs_write+0x84>
   51f88:	e0bffb17 	ldw	r2,-20(fp)
   51f8c:	0085c83a 	sub	r2,zero,r2
   51f90:	e0bfff15 	stw	r2,-4(fp)
   51f94:	00000206 	br	51fa0 <alt_hostfs_write+0x8c>
   51f98:	e0bffa17 	ldw	r2,-24(fp)
   51f9c:	e0bfff15 	stw	r2,-4(fp)
   51fa0:	e0bfff17 	ldw	r2,-4(fp)
}
   51fa4:	e037883a 	mov	sp,fp
   51fa8:	df000017 	ldw	fp,0(sp)
   51fac:	dec00104 	addi	sp,sp,4
   51fb0:	f800283a 	ret

00051fb4 <alt_hostfs_seek>:
* Move around within a file
*
* returns -errno for an error or the offset within the file
*/
int alt_hostfs_seek(alt_fd* fd, int ptr, int dir)
{
   51fb4:	defff404 	addi	sp,sp,-48
   51fb8:	df000b15 	stw	fp,44(sp)
   51fbc:	df000b04 	addi	fp,sp,44
   51fc0:	e13ffc15 	stw	r4,-16(fp)
   51fc4:	e17ffd15 	stw	r5,-12(fp)
   51fc8:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
   51fcc:	d0a01a04 	addi	r2,gp,-32664
   51fd0:	e0bff815 	stw	r2,-32(fp)
  r4 = (int)fd->priv;
   51fd4:	e0bffc17 	ldw	r2,-16(fp)
   51fd8:	10800117 	ldw	r2,4(r2)
   51fdc:	e0bff715 	stw	r2,-36(fp)
  r5 = ptr;
   51fe0:	e0bffd17 	ldw	r2,-12(fp)
   51fe4:	e0bff615 	stw	r2,-40(fp)
  r6 = dir;
   51fe8:	e0bffe17 	ldw	r2,-8(fp)
   51fec:	e0bff515 	stw	r2,-44(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
   51ff0:	e13ff717 	ldw	r4,-36(fp)
   51ff4:	e17ff617 	ldw	r5,-40(fp)
   51ff8:	e1bff517 	ldw	r6,-44(fp)
   51ffc:	e0fff817 	ldw	r3,-32(fp)
   52000:	003da07a 	break	1
   52004:	e0bff915 	stw	r2,-28(fp)
   52008:	e0fff815 	stw	r3,-32(fp)

  rc = r2;
   5200c:	e0bff917 	ldw	r2,-28(fp)
   52010:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
   52014:	e0bff817 	ldw	r2,-32(fp)
   52018:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
   5201c:	e0bffb17 	ldw	r2,-20(fp)
   52020:	1005003a 	cmpeq	r2,r2,zero
   52024:	1000041e 	bne	r2,zero,52038 <alt_hostfs_seek+0x84>
   52028:	e0bffb17 	ldw	r2,-20(fp)
   5202c:	0085c83a 	sub	r2,zero,r2
   52030:	e0bfff15 	stw	r2,-4(fp)
   52034:	00000206 	br	52040 <alt_hostfs_seek+0x8c>
   52038:	e0bffa17 	ldw	r2,-24(fp)
   5203c:	e0bfff15 	stw	r2,-4(fp)
   52040:	e0bfff17 	ldw	r2,-4(fp)
}
   52044:	e037883a 	mov	sp,fp
   52048:	df000017 	ldw	fp,0(sp)
   5204c:	dec00104 	addi	sp,sp,4
   52050:	f800283a 	ret

00052054 <alt_hostfs_fstat>:
* at the lower address.
* We need to copy the structure and byte swap it to make it match our local
* layout of struct stat.
*/
int alt_hostfs_fstat(alt_fd* fd, struct stat* st)
{
   52054:	deffe404 	addi	sp,sp,-112
   52058:	df001b15 	stw	fp,108(sp)
   5205c:	df001b04 	addi	fp,sp,108
   52060:	e13ffd15 	stw	r4,-12(fp)
   52064:	e17ffe15 	stw	r5,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5;

  r3 = (int)&hcinfo;
   52068:	d0a01d04 	addi	r2,gp,-32652
   5206c:	e0bfe915 	stw	r2,-92(fp)
  r4 = (int)fd->priv;
   52070:	e0bffd17 	ldw	r2,-12(fp)
   52074:	10800117 	ldw	r2,4(r2)
   52078:	e0bfe815 	stw	r2,-96(fp)
  r5 = (int)&hoststat;
   5207c:	e0bfed04 	addi	r2,fp,-76
   52080:	e0bfe715 	stw	r2,-100(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5) : "memory" );
   52084:	e13fe817 	ldw	r4,-96(fp)
   52088:	e17fe717 	ldw	r5,-100(fp)
   5208c:	e0ffe917 	ldw	r3,-92(fp)
   52090:	003da07a 	break	1
   52094:	e0bfea15 	stw	r2,-88(fp)
   52098:	e0ffe915 	stw	r3,-92(fp)

  rc = r2;
   5209c:	e0bfea17 	ldw	r2,-88(fp)
   520a0:	e0bfeb15 	stw	r2,-84(fp)
  error = r3;
   520a4:	e0bfe917 	ldw	r2,-92(fp)
   520a8:	e0bfec15 	stw	r2,-80(fp)

  if (error == 0)
   520ac:	e0bfec17 	ldw	r2,-80(fp)
   520b0:	1004c03a 	cmpne	r2,r2,zero
   520b4:	1000651e 	bne	r2,zero,5224c <alt_hostfs_fstat+0x1f8>
     * no change is required.  On a little-endian processor we need to swap
     * the bytes in each word.
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
   520b8:	e0bfed04 	addi	r2,fp,-76
   520bc:	e0bfe615 	stw	r2,-104(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
   520c0:	e0bfe617 	ldw	r2,-104(fp)
   520c4:	10801004 	addi	r2,r2,64
   520c8:	e0bfe515 	stw	r2,-108(fp)
    for ( ; ptr < end ; ptr++)
   520cc:	00001806 	br	52130 <alt_hostfs_fstat+0xdc>
      *ptr = ((*ptr & 0xFF000000) >> 24) |
   520d0:	e0bfe617 	ldw	r2,-104(fp)
   520d4:	10800017 	ldw	r2,0(r2)
   520d8:	10bfc02c 	andhi	r2,r2,65280
   520dc:	1006d63a 	srli	r3,r2,24
   520e0:	e0bfe617 	ldw	r2,-104(fp)
   520e4:	10800017 	ldw	r2,0(r2)
   520e8:	10803fec 	andhi	r2,r2,255
   520ec:	1004d23a 	srli	r2,r2,8
   520f0:	1886b03a 	or	r3,r3,r2
   520f4:	e0bfe617 	ldw	r2,-104(fp)
   520f8:	10800017 	ldw	r2,0(r2)
   520fc:	10bfc00c 	andi	r2,r2,65280
   52100:	1004923a 	slli	r2,r2,8
   52104:	1886b03a 	or	r3,r3,r2
   52108:	e0bfe617 	ldw	r2,-104(fp)
   5210c:	10800017 	ldw	r2,0(r2)
   52110:	10803fcc 	andi	r2,r2,255
   52114:	1004963a 	slli	r2,r2,24
   52118:	1886b03a 	or	r3,r3,r2
   5211c:	e0bfe617 	ldw	r2,-104(fp)
   52120:	10c00015 	stw	r3,0(r2)
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
   52124:	e0bfe617 	ldw	r2,-104(fp)
   52128:	10800104 	addi	r2,r2,4
   5212c:	e0bfe615 	stw	r2,-104(fp)
   52130:	e0ffe617 	ldw	r3,-104(fp)
   52134:	e0bfe517 	ldw	r2,-108(fp)
   52138:	18bfe536 	bltu	r3,r2,520d0 <alt_hostfs_fstat+0x7c>
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
   5213c:	e0bffe17 	ldw	r2,-8(fp)
   52140:	e0bfe615 	stw	r2,-104(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
   52144:	e0bfe617 	ldw	r2,-104(fp)
   52148:	10800f04 	addi	r2,r2,60
   5214c:	e0bfe515 	stw	r2,-108(fp)
    for ( ; ptr < end ; ptr++)
   52150:	00000506 	br	52168 <alt_hostfs_fstat+0x114>
      *ptr = 0;
   52154:	e0bfe617 	ldw	r2,-104(fp)
   52158:	10000015 	stw	zero,0(r2)
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
    for ( ; ptr < end ; ptr++)
   5215c:	e0bfe617 	ldw	r2,-104(fp)
   52160:	10800104 	addi	r2,r2,4
   52164:	e0bfe615 	stw	r2,-104(fp)
   52168:	e0ffe617 	ldw	r3,-104(fp)
   5216c:	e0bfe517 	ldw	r2,-108(fp)
   52170:	18bff836 	bltu	r3,r2,52154 <alt_hostfs_fstat+0x100>

    /* Copy the data provided by the host into our local copy, for data which
     * is provided as 64bit values by the host we just use the least
     * significant word.
     */
    st->st_dev     = hoststat.fst_dev;
   52174:	e0bfed17 	ldw	r2,-76(fp)
   52178:	1007883a 	mov	r3,r2
   5217c:	e0bffe17 	ldw	r2,-8(fp)
   52180:	10c0000d 	sth	r3,0(r2)
    st->st_ino     = hoststat.fst_ino;
   52184:	e0bfee17 	ldw	r2,-72(fp)
   52188:	1007883a 	mov	r3,r2
   5218c:	e0bffe17 	ldw	r2,-8(fp)
   52190:	10c0008d 	sth	r3,2(r2)
    st->st_mode    = hoststat.fst_mode;
   52194:	e0ffef17 	ldw	r3,-68(fp)
   52198:	e0bffe17 	ldw	r2,-8(fp)
   5219c:	10c00115 	stw	r3,4(r2)
    st->st_nlink   = hoststat.fst_nlink;
   521a0:	e0bff017 	ldw	r2,-64(fp)
   521a4:	1007883a 	mov	r3,r2
   521a8:	e0bffe17 	ldw	r2,-8(fp)
   521ac:	10c0020d 	sth	r3,8(r2)
    st->st_uid     = hoststat.fst_uid;
   521b0:	e0bff117 	ldw	r2,-60(fp)
   521b4:	1007883a 	mov	r3,r2
   521b8:	e0bffe17 	ldw	r2,-8(fp)
   521bc:	10c0028d 	sth	r3,10(r2)
    st->st_gid     = hoststat.fst_gid;
   521c0:	e0bff217 	ldw	r2,-56(fp)
   521c4:	1007883a 	mov	r3,r2
   521c8:	e0bffe17 	ldw	r2,-8(fp)
   521cc:	10c0030d 	sth	r3,12(r2)
    st->st_rdev    = hoststat.fst_rdev;
   521d0:	e0bff317 	ldw	r2,-52(fp)
   521d4:	1007883a 	mov	r3,r2
   521d8:	e0bffe17 	ldw	r2,-8(fp)
   521dc:	10c0038d 	sth	r3,14(r2)
    st->st_size    = hoststat.fst_size[1];
   521e0:	e0bff517 	ldw	r2,-44(fp)
   521e4:	1007883a 	mov	r3,r2
   521e8:	e0bffe17 	ldw	r2,-8(fp)
   521ec:	10c00415 	stw	r3,16(r2)

    st->st_atime   = hoststat.fst_atime;
   521f0:	e0bffa17 	ldw	r2,-24(fp)
   521f4:	1007883a 	mov	r3,r2
   521f8:	e0bffe17 	ldw	r2,-8(fp)
   521fc:	10c00515 	stw	r3,20(r2)
    st->st_mtime   = hoststat.fst_mtime;
   52200:	e0bffb17 	ldw	r2,-20(fp)
   52204:	1007883a 	mov	r3,r2
   52208:	e0bffe17 	ldw	r2,-8(fp)
   5220c:	10c00715 	stw	r3,28(r2)
    st->st_ctime   = hoststat.fst_ctime;
   52210:	e0bffc17 	ldw	r2,-16(fp)
   52214:	1007883a 	mov	r3,r2
   52218:	e0bffe17 	ldw	r2,-8(fp)
   5221c:	10c00915 	stw	r3,36(r2)

    st->st_blksize = hoststat.fst_blksize[1];
   52220:	e0bff717 	ldw	r2,-36(fp)
   52224:	1007883a 	mov	r3,r2
   52228:	e0bffe17 	ldw	r2,-8(fp)
   5222c:	10c00b15 	stw	r3,44(r2)
    st->st_blocks  = hoststat.fst_blocks[1];
   52230:	e0bff917 	ldw	r2,-28(fp)
   52234:	1007883a 	mov	r3,r2
   52238:	e0bffe17 	ldw	r2,-8(fp)
   5223c:	10c00c15 	stw	r3,48(r2)

    return rc;
   52240:	e0bfeb17 	ldw	r2,-84(fp)
   52244:	e0bfff15 	stw	r2,-4(fp)
   52248:	00000306 	br	52258 <alt_hostfs_fstat+0x204>
  }
  else
    return -error;
   5224c:	e0bfec17 	ldw	r2,-80(fp)
   52250:	0085c83a 	sub	r2,zero,r2
   52254:	e0bfff15 	stw	r2,-4(fp)
   52258:	e0bfff17 	ldw	r2,-4(fp)
}
   5225c:	e037883a 	mov	sp,fp
   52260:	df000017 	ldw	fp,0(sp)
   52264:	dec00104 	addi	sp,sp,4
   52268:	f800283a 	ret

0005226c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   5226c:	defff404 	addi	sp,sp,-48
   52270:	df000b15 	stw	fp,44(sp)
   52274:	df000b04 	addi	fp,sp,44
   52278:	e13ffb15 	stw	r4,-20(fp)
   5227c:	e17ffc15 	stw	r5,-16(fp)
   52280:	e1bffd15 	stw	r6,-12(fp)
   52284:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   52288:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   5228c:	00800174 	movhi	r2,5
   52290:	109cbe04 	addi	r2,r2,29432
   52294:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   52298:	1005003a 	cmpeq	r2,r2,zero
   5229c:	1000411e 	bne	r2,zero,523a4 <alt_alarm_start+0x138>
  {
    if (alarm)
   522a0:	e0bffb17 	ldw	r2,-20(fp)
   522a4:	1005003a 	cmpeq	r2,r2,zero
   522a8:	10003b1e 	bne	r2,zero,52398 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   522ac:	e0fffb17 	ldw	r3,-20(fp)
   522b0:	e0bffd17 	ldw	r2,-12(fp)
   522b4:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   522b8:	e0fffb17 	ldw	r3,-20(fp)
   522bc:	e0bffe17 	ldw	r2,-8(fp)
   522c0:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   522c4:	0005303a 	rdctl	r2,status
   522c8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   522cc:	e0fff817 	ldw	r3,-32(fp)
   522d0:	00bfff84 	movi	r2,-2
   522d4:	1884703a 	and	r2,r3,r2
   522d8:	1001703a 	wrctl	status,r2
  
  return context;
   522dc:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   522e0:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   522e4:	00800174 	movhi	r2,5
   522e8:	109cbf04 	addi	r2,r2,29436
   522ec:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   522f0:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   522f4:	e0fffc17 	ldw	r3,-16(fp)
   522f8:	e0bff917 	ldw	r2,-28(fp)
   522fc:	1885883a 	add	r2,r3,r2
   52300:	10c00044 	addi	r3,r2,1
   52304:	e0bffb17 	ldw	r2,-20(fp)
   52308:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   5230c:	e0bffb17 	ldw	r2,-20(fp)
   52310:	10c00217 	ldw	r3,8(r2)
   52314:	e0bff917 	ldw	r2,-28(fp)
   52318:	1880042e 	bgeu	r3,r2,5232c <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   5231c:	e0fffb17 	ldw	r3,-20(fp)
   52320:	00800044 	movi	r2,1
   52324:	18800405 	stb	r2,16(r3)
   52328:	00000206 	br	52334 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   5232c:	e0bffb17 	ldw	r2,-20(fp)
   52330:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   52334:	e0fffb17 	ldw	r3,-20(fp)
   52338:	00800174 	movhi	r2,5
   5233c:	1095f004 	addi	r2,r2,22464
   52340:	e0bff615 	stw	r2,-40(fp)
   52344:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   52348:	e0fff717 	ldw	r3,-36(fp)
   5234c:	e0bff617 	ldw	r2,-40(fp)
   52350:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   52354:	e0bff617 	ldw	r2,-40(fp)
   52358:	10c00017 	ldw	r3,0(r2)
   5235c:	e0bff717 	ldw	r2,-36(fp)
   52360:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   52364:	e0bff617 	ldw	r2,-40(fp)
   52368:	10c00017 	ldw	r3,0(r2)
   5236c:	e0bff717 	ldw	r2,-36(fp)
   52370:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   52374:	e0fff617 	ldw	r3,-40(fp)
   52378:	e0bff717 	ldw	r2,-36(fp)
   5237c:	18800015 	stw	r2,0(r3)
   52380:	e0bffa17 	ldw	r2,-24(fp)
   52384:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   52388:	e0bff517 	ldw	r2,-44(fp)
   5238c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   52390:	e03fff15 	stw	zero,-4(fp)
   52394:	00000506 	br	523ac <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   52398:	00bffa84 	movi	r2,-22
   5239c:	e0bfff15 	stw	r2,-4(fp)
   523a0:	00000206 	br	523ac <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   523a4:	00bfde84 	movi	r2,-134
   523a8:	e0bfff15 	stw	r2,-4(fp)
   523ac:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   523b0:	e037883a 	mov	sp,fp
   523b4:	df000017 	ldw	fp,0(sp)
   523b8:	dec00104 	addi	sp,sp,4
   523bc:	f800283a 	ret

000523c0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   523c0:	defffa04 	addi	sp,sp,-24
   523c4:	dfc00515 	stw	ra,20(sp)
   523c8:	df000415 	stw	fp,16(sp)
   523cc:	df000404 	addi	fp,sp,16
   523d0:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   523d4:	008000c4 	movi	r2,3
   523d8:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
   523dc:	e13ffc17 	ldw	r4,-16(fp)
   523e0:	014003f4 	movhi	r5,15
   523e4:	29509004 	addi	r5,r5,16960
   523e8:	004fd3c0 	call	4fd3c <__mulsi3>
   523ec:	100b883a 	mov	r5,r2
   523f0:	0100bef4 	movhi	r4,763
   523f4:	213c2004 	addi	r4,r4,-3968
   523f8:	004fd2c0 	call	4fd2c <__udivsi3>
   523fc:	100b883a 	mov	r5,r2
   52400:	01200034 	movhi	r4,32768
   52404:	213fffc4 	addi	r4,r4,-1
   52408:	004fd2c0 	call	4fd2c <__udivsi3>
   5240c:	100b883a 	mov	r5,r2
   52410:	e13fff17 	ldw	r4,-4(fp)
   52414:	004fd2c0 	call	4fd2c <__udivsi3>
   52418:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   5241c:	e0bffd17 	ldw	r2,-12(fp)
   52420:	1005003a 	cmpeq	r2,r2,zero
   52424:	10002a1e 	bne	r2,zero,524d0 <alt_busy_sleep+0x110>
  {
    for(i=0;i<big_loops;i++)
   52428:	e03ffe15 	stw	zero,-8(fp)
   5242c:	00001706 	br	5248c <alt_busy_sleep+0xcc>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   52430:	00a00034 	movhi	r2,32768
   52434:	10bfffc4 	addi	r2,r2,-1
   52438:	10bfffc4 	addi	r2,r2,-1
   5243c:	103ffe1e 	bne	r2,zero,52438 <alt_busy_sleep+0x78>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   52440:	e13ffc17 	ldw	r4,-16(fp)
   52444:	014003f4 	movhi	r5,15
   52448:	29509004 	addi	r5,r5,16960
   5244c:	004fd3c0 	call	4fd3c <__mulsi3>
   52450:	100b883a 	mov	r5,r2
   52454:	0100bef4 	movhi	r4,763
   52458:	213c2004 	addi	r4,r4,-3968
   5245c:	004fd2c0 	call	4fd2c <__udivsi3>
   52460:	100b883a 	mov	r5,r2
   52464:	01200034 	movhi	r4,32768
   52468:	213fffc4 	addi	r4,r4,-1
   5246c:	004fd2c0 	call	4fd2c <__udivsi3>
   52470:	1007883a 	mov	r3,r2
   52474:	e0bfff17 	ldw	r2,-4(fp)
   52478:	10c5c83a 	sub	r2,r2,r3
   5247c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   52480:	e0bffe17 	ldw	r2,-8(fp)
   52484:	10800044 	addi	r2,r2,1
   52488:	e0bffe15 	stw	r2,-8(fp)
   5248c:	e0fffe17 	ldw	r3,-8(fp)
   52490:	e0bffd17 	ldw	r2,-12(fp)
   52494:	18bfe616 	blt	r3,r2,52430 <alt_busy_sleep+0x70>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   52498:	e13ffc17 	ldw	r4,-16(fp)
   5249c:	014003f4 	movhi	r5,15
   524a0:	29509004 	addi	r5,r5,16960
   524a4:	004fd3c0 	call	4fd3c <__mulsi3>
   524a8:	100b883a 	mov	r5,r2
   524ac:	0100bef4 	movhi	r4,763
   524b0:	213c2004 	addi	r4,r4,-3968
   524b4:	004fd2c0 	call	4fd2c <__udivsi3>
   524b8:	1009883a 	mov	r4,r2
   524bc:	e17fff17 	ldw	r5,-4(fp)
   524c0:	004fd3c0 	call	4fd3c <__mulsi3>
   524c4:	10bfffc4 	addi	r2,r2,-1
   524c8:	103ffe1e 	bne	r2,zero,524c4 <alt_busy_sleep+0x104>
   524cc:	00000d06 	br	52504 <alt_busy_sleep+0x144>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   524d0:	e13ffc17 	ldw	r4,-16(fp)
   524d4:	014003f4 	movhi	r5,15
   524d8:	29509004 	addi	r5,r5,16960
   524dc:	004fd3c0 	call	4fd3c <__mulsi3>
   524e0:	100b883a 	mov	r5,r2
   524e4:	0100bef4 	movhi	r4,763
   524e8:	213c2004 	addi	r4,r4,-3968
   524ec:	004fd2c0 	call	4fd2c <__udivsi3>
   524f0:	1009883a 	mov	r4,r2
   524f4:	e17fff17 	ldw	r5,-4(fp)
   524f8:	004fd3c0 	call	4fd3c <__mulsi3>
   524fc:	10bfffc4 	addi	r2,r2,-1
   52500:	00bffe16 	blt	zero,r2,524fc <alt_busy_sleep+0x13c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   52504:	0005883a 	mov	r2,zero
}
   52508:	e037883a 	mov	sp,fp
   5250c:	dfc00117 	ldw	ra,4(sp)
   52510:	df000017 	ldw	fp,0(sp)
   52514:	dec00204 	addi	sp,sp,8
   52518:	f800283a 	ret

0005251c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   5251c:	deffff04 	addi	sp,sp,-4
   52520:	df000015 	stw	fp,0(sp)
   52524:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   52528:	e037883a 	mov	sp,fp
   5252c:	df000017 	ldw	fp,0(sp)
   52530:	dec00104 	addi	sp,sp,4
   52534:	f800283a 	ret

00052538 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   52538:	defff904 	addi	sp,sp,-28
   5253c:	dfc00615 	stw	ra,24(sp)
   52540:	df000515 	stw	fp,20(sp)
   52544:	df000504 	addi	fp,sp,20
   52548:	e13ffd15 	stw	r4,-12(fp)
   5254c:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   52550:	e0bffd17 	ldw	r2,-12(fp)
   52554:	1005003a 	cmpeq	r2,r2,zero
   52558:	1000041e 	bne	r2,zero,5256c <alt_dev_llist_insert+0x34>
   5255c:	e0bffd17 	ldw	r2,-12(fp)
   52560:	10800217 	ldw	r2,8(r2)
   52564:	1004c03a 	cmpne	r2,r2,zero
   52568:	1000071e 	bne	r2,zero,52588 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   5256c:	00525ec0 	call	525ec <alt_get_errno>
   52570:	1007883a 	mov	r3,r2
   52574:	00800584 	movi	r2,22
   52578:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   5257c:	00bffa84 	movi	r2,-22
   52580:	e0bfff15 	stw	r2,-4(fp)
   52584:	00001306 	br	525d4 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   52588:	e0fffd17 	ldw	r3,-12(fp)
   5258c:	e0bffe17 	ldw	r2,-8(fp)
   52590:	e0bffb15 	stw	r2,-20(fp)
   52594:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   52598:	e0fffc17 	ldw	r3,-16(fp)
   5259c:	e0bffb17 	ldw	r2,-20(fp)
   525a0:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   525a4:	e0bffb17 	ldw	r2,-20(fp)
   525a8:	10c00017 	ldw	r3,0(r2)
   525ac:	e0bffc17 	ldw	r2,-16(fp)
   525b0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   525b4:	e0bffb17 	ldw	r2,-20(fp)
   525b8:	10c00017 	ldw	r3,0(r2)
   525bc:	e0bffc17 	ldw	r2,-16(fp)
   525c0:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   525c4:	e0fffb17 	ldw	r3,-20(fp)
   525c8:	e0bffc17 	ldw	r2,-16(fp)
   525cc:	18800015 	stw	r2,0(r3)

  return 0;  
   525d0:	e03fff15 	stw	zero,-4(fp)
   525d4:	e0bfff17 	ldw	r2,-4(fp)
}
   525d8:	e037883a 	mov	sp,fp
   525dc:	dfc00117 	ldw	ra,4(sp)
   525e0:	df000017 	ldw	fp,0(sp)
   525e4:	dec00204 	addi	sp,sp,8
   525e8:	f800283a 	ret

000525ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   525ec:	defffd04 	addi	sp,sp,-12
   525f0:	dfc00215 	stw	ra,8(sp)
   525f4:	df000115 	stw	fp,4(sp)
   525f8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   525fc:	00800174 	movhi	r2,5
   52600:	1095db04 	addi	r2,r2,22380
   52604:	10800017 	ldw	r2,0(r2)
   52608:	1005003a 	cmpeq	r2,r2,zero
   5260c:	1000061e 	bne	r2,zero,52628 <alt_get_errno+0x3c>
   52610:	00800174 	movhi	r2,5
   52614:	1095db04 	addi	r2,r2,22380
   52618:	10800017 	ldw	r2,0(r2)
   5261c:	103ee83a 	callr	r2
   52620:	e0bfff15 	stw	r2,-4(fp)
   52624:	00000306 	br	52634 <alt_get_errno+0x48>
   52628:	00800174 	movhi	r2,5
   5262c:	109cb304 	addi	r2,r2,29388
   52630:	e0bfff15 	stw	r2,-4(fp)
   52634:	e0bfff17 	ldw	r2,-4(fp)
}
   52638:	e037883a 	mov	sp,fp
   5263c:	dfc00117 	ldw	ra,4(sp)
   52640:	df000017 	ldw	fp,0(sp)
   52644:	dec00204 	addi	sp,sp,8
   52648:	f800283a 	ret

0005264c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   5264c:	defffd04 	addi	sp,sp,-12
   52650:	dfc00215 	stw	ra,8(sp)
   52654:	df000115 	stw	fp,4(sp)
   52658:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   5265c:	00bfff04 	movi	r2,-4
   52660:	00c00174 	movhi	r3,5
   52664:	18cd3504 	addi	r3,r3,13524
   52668:	1885883a 	add	r2,r3,r2
   5266c:	e0bfff15 	stw	r2,-4(fp)
   52670:	00000606 	br	5268c <_do_ctors+0x40>
        (*ctor) (); 
   52674:	e0bfff17 	ldw	r2,-4(fp)
   52678:	10800017 	ldw	r2,0(r2)
   5267c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   52680:	e0bfff17 	ldw	r2,-4(fp)
   52684:	10bfff04 	addi	r2,r2,-4
   52688:	e0bfff15 	stw	r2,-4(fp)
   5268c:	e0ffff17 	ldw	r3,-4(fp)
   52690:	00800174 	movhi	r2,5
   52694:	108d3404 	addi	r2,r2,13520
   52698:	18bff62e 	bgeu	r3,r2,52674 <_do_ctors+0x28>
        (*ctor) (); 
}
   5269c:	e037883a 	mov	sp,fp
   526a0:	dfc00117 	ldw	ra,4(sp)
   526a4:	df000017 	ldw	fp,0(sp)
   526a8:	dec00204 	addi	sp,sp,8
   526ac:	f800283a 	ret

000526b0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   526b0:	defffd04 	addi	sp,sp,-12
   526b4:	dfc00215 	stw	ra,8(sp)
   526b8:	df000115 	stw	fp,4(sp)
   526bc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   526c0:	00bfff04 	movi	r2,-4
   526c4:	00c00174 	movhi	r3,5
   526c8:	18cd3504 	addi	r3,r3,13524
   526cc:	1885883a 	add	r2,r3,r2
   526d0:	e0bfff15 	stw	r2,-4(fp)
   526d4:	00000606 	br	526f0 <_do_dtors+0x40>
        (*dtor) (); 
   526d8:	e0bfff17 	ldw	r2,-4(fp)
   526dc:	10800017 	ldw	r2,0(r2)
   526e0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   526e4:	e0bfff17 	ldw	r2,-4(fp)
   526e8:	10bfff04 	addi	r2,r2,-4
   526ec:	e0bfff15 	stw	r2,-4(fp)
   526f0:	e0ffff17 	ldw	r3,-4(fp)
   526f4:	00800174 	movhi	r2,5
   526f8:	108d3504 	addi	r2,r2,13524
   526fc:	18bff62e 	bgeu	r3,r2,526d8 <_do_dtors+0x28>
        (*dtor) (); 
}
   52700:	e037883a 	mov	sp,fp
   52704:	dfc00117 	ldw	ra,4(sp)
   52708:	df000017 	ldw	fp,0(sp)
   5270c:	dec00204 	addi	sp,sp,8
   52710:	f800283a 	ret

00052714 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   52714:	defff904 	addi	sp,sp,-28
   52718:	dfc00615 	stw	ra,24(sp)
   5271c:	df000515 	stw	fp,20(sp)
   52720:	df000504 	addi	fp,sp,20
   52724:	e13ffd15 	stw	r4,-12(fp)
   52728:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   5272c:	e0bffe17 	ldw	r2,-8(fp)
   52730:	10800017 	ldw	r2,0(r2)
   52734:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   52738:	e13ffd17 	ldw	r4,-12(fp)
   5273c:	00423f40 	call	423f4 <strlen>
   52740:	10800044 	addi	r2,r2,1
   52744:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   52748:	00000d06 	br	52780 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   5274c:	e0bffc17 	ldw	r2,-16(fp)
   52750:	11000217 	ldw	r4,8(r2)
   52754:	e1bffb17 	ldw	r6,-20(fp)
   52758:	e17ffd17 	ldw	r5,-12(fp)
   5275c:	00531140 	call	53114 <memcmp>
   52760:	1004c03a 	cmpne	r2,r2,zero
   52764:	1000031e 	bne	r2,zero,52774 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   52768:	e0bffc17 	ldw	r2,-16(fp)
   5276c:	e0bfff15 	stw	r2,-4(fp)
   52770:	00000706 	br	52790 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   52774:	e0bffc17 	ldw	r2,-16(fp)
   52778:	10800017 	ldw	r2,0(r2)
   5277c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   52780:	e0fffe17 	ldw	r3,-8(fp)
   52784:	e0bffc17 	ldw	r2,-16(fp)
   52788:	10fff01e 	bne	r2,r3,5274c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   5278c:	e03fff15 	stw	zero,-4(fp)
   52790:	e0bfff17 	ldw	r2,-4(fp)
}
   52794:	e037883a 	mov	sp,fp
   52798:	dfc00117 	ldw	ra,4(sp)
   5279c:	df000017 	ldw	fp,0(sp)
   527a0:	dec00204 	addi	sp,sp,8
   527a4:	f800283a 	ret

000527a8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   527a8:	defffa04 	addi	sp,sp,-24
   527ac:	dfc00515 	stw	ra,20(sp)
   527b0:	df000415 	stw	fp,16(sp)
   527b4:	df000404 	addi	fp,sp,16
   527b8:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   527bc:	00800174 	movhi	r2,5
   527c0:	1095d604 	addi	r2,r2,22360
   527c4:	10800017 	ldw	r2,0(r2)
   527c8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   527cc:	00003306 	br	5289c <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   527d0:	e0bffd17 	ldw	r2,-12(fp)
   527d4:	11000217 	ldw	r4,8(r2)
   527d8:	00423f40 	call	423f4 <strlen>
   527dc:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   527e0:	e0bffd17 	ldw	r2,-12(fp)
   527e4:	10c00217 	ldw	r3,8(r2)
   527e8:	e0bffc17 	ldw	r2,-16(fp)
   527ec:	1885883a 	add	r2,r3,r2
   527f0:	10bfffc4 	addi	r2,r2,-1
   527f4:	10800003 	ldbu	r2,0(r2)
   527f8:	10803fcc 	andi	r2,r2,255
   527fc:	1080201c 	xori	r2,r2,128
   52800:	10bfe004 	addi	r2,r2,-128
   52804:	10800bd8 	cmpnei	r2,r2,47
   52808:	1000031e 	bne	r2,zero,52818 <alt_find_file+0x70>
    {
      len -= 1;
   5280c:	e0bffc17 	ldw	r2,-16(fp)
   52810:	10bfffc4 	addi	r2,r2,-1
   52814:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   52818:	e0bffc17 	ldw	r2,-16(fp)
   5281c:	1007883a 	mov	r3,r2
   52820:	e0bffe17 	ldw	r2,-8(fp)
   52824:	1885883a 	add	r2,r3,r2
   52828:	10800003 	ldbu	r2,0(r2)
   5282c:	10803fcc 	andi	r2,r2,255
   52830:	1080201c 	xori	r2,r2,128
   52834:	10bfe004 	addi	r2,r2,-128
   52838:	10800be0 	cmpeqi	r2,r2,47
   5283c:	10000a1e 	bne	r2,zero,52868 <alt_find_file+0xc0>
   52840:	e0bffc17 	ldw	r2,-16(fp)
   52844:	1007883a 	mov	r3,r2
   52848:	e0bffe17 	ldw	r2,-8(fp)
   5284c:	1885883a 	add	r2,r3,r2
   52850:	10800003 	ldbu	r2,0(r2)
   52854:	10803fcc 	andi	r2,r2,255
   52858:	1080201c 	xori	r2,r2,128
   5285c:	10bfe004 	addi	r2,r2,-128
   52860:	1004c03a 	cmpne	r2,r2,zero
   52864:	10000a1e 	bne	r2,zero,52890 <alt_find_file+0xe8>
   52868:	e0bffd17 	ldw	r2,-12(fp)
   5286c:	11000217 	ldw	r4,8(r2)
   52870:	e1bffc17 	ldw	r6,-16(fp)
   52874:	e17ffe17 	ldw	r5,-8(fp)
   52878:	00531140 	call	53114 <memcmp>
   5287c:	1004c03a 	cmpne	r2,r2,zero
   52880:	1000031e 	bne	r2,zero,52890 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   52884:	e0bffd17 	ldw	r2,-12(fp)
   52888:	e0bfff15 	stw	r2,-4(fp)
   5288c:	00000806 	br	528b0 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   52890:	e0bffd17 	ldw	r2,-12(fp)
   52894:	10800017 	ldw	r2,0(r2)
   52898:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   5289c:	00c00174 	movhi	r3,5
   528a0:	18d5d604 	addi	r3,r3,22360
   528a4:	e0bffd17 	ldw	r2,-12(fp)
   528a8:	10ffc91e 	bne	r2,r3,527d0 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   528ac:	e03fff15 	stw	zero,-4(fp)
   528b0:	e0bfff17 	ldw	r2,-4(fp)
}
   528b4:	e037883a 	mov	sp,fp
   528b8:	dfc00117 	ldw	ra,4(sp)
   528bc:	df000017 	ldw	fp,0(sp)
   528c0:	dec00204 	addi	sp,sp,8
   528c4:	f800283a 	ret

000528c8 <alt_fs_reg>:
 * A return value of zero indicates success. A negative return value indicates
 * failure. 
 */
 
int alt_fs_reg (alt_dev* dev)
{
   528c8:	defffb04 	addi	sp,sp,-20
   528cc:	df000415 	stw	fp,16(sp)
   528d0:	df000404 	addi	fp,sp,16
   528d4:	e13ffe15 	stw	r4,-8(fp)
  /*
   * check that the device has a name.
   */

  if (!dev->name)
   528d8:	e0bffe17 	ldw	r2,-8(fp)
   528dc:	10800217 	ldw	r2,8(r2)
   528e0:	1004c03a 	cmpne	r2,r2,zero
   528e4:	1000031e 	bne	r2,zero,528f4 <alt_fs_reg+0x2c>
  {
    return -ENODEV;
   528e8:	00bffb44 	movi	r2,-19
   528ec:	e0bfff15 	stw	r2,-4(fp)
   528f0:	00001406 	br	52944 <alt_fs_reg+0x7c>
  
  /*
   * register the file system.
   */

  alt_llist_insert(&alt_fs_list, &dev->llist);
   528f4:	e0fffe17 	ldw	r3,-8(fp)
   528f8:	00800174 	movhi	r2,5
   528fc:	1095d604 	addi	r2,r2,22360
   52900:	e0bffc15 	stw	r2,-16(fp)
   52904:	e0fffd15 	stw	r3,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   52908:	e0fffd17 	ldw	r3,-12(fp)
   5290c:	e0bffc17 	ldw	r2,-16(fp)
   52910:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   52914:	e0bffc17 	ldw	r2,-16(fp)
   52918:	10c00017 	ldw	r3,0(r2)
   5291c:	e0bffd17 	ldw	r2,-12(fp)
   52920:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   52924:	e0bffc17 	ldw	r2,-16(fp)
   52928:	10c00017 	ldw	r3,0(r2)
   5292c:	e0bffd17 	ldw	r2,-12(fp)
   52930:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   52934:	e0fffc17 	ldw	r3,-16(fp)
   52938:	e0bffd17 	ldw	r2,-12(fp)
   5293c:	18800015 	stw	r2,0(r3)

  return 0;
   52940:	e03fff15 	stw	zero,-4(fp)
   52944:	e0bfff17 	ldw	r2,-4(fp)
} 
   52948:	e037883a 	mov	sp,fp
   5294c:	df000017 	ldw	fp,0(sp)
   52950:	dec00104 	addi	sp,sp,4
   52954:	f800283a 	ret

00052958 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   52958:	defffa04 	addi	sp,sp,-24
   5295c:	dfc00515 	stw	ra,20(sp)
   52960:	df000415 	stw	fp,16(sp)
   52964:	dc000315 	stw	r16,12(sp)
   52968:	df000304 	addi	fp,sp,12
   5296c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   52970:	00bffa04 	movi	r2,-24
   52974:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   52978:	e03ffe15 	stw	zero,-8(fp)
   5297c:	00002006 	br	52a00 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
   52980:	e13ffe17 	ldw	r4,-8(fp)
   52984:	04000174 	movhi	r16,5
   52988:	84114d04 	addi	r16,r16,17716
   5298c:	01400304 	movi	r5,12
   52990:	004fd3c0 	call	4fd3c <__mulsi3>
   52994:	1405883a 	add	r2,r2,r16
   52998:	10800017 	ldw	r2,0(r2)
   5299c:	1004c03a 	cmpne	r2,r2,zero
   529a0:	1000141e 	bne	r2,zero,529f4 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
   529a4:	e13ffe17 	ldw	r4,-8(fp)
   529a8:	04000174 	movhi	r16,5
   529ac:	84114d04 	addi	r16,r16,17716
   529b0:	01400304 	movi	r5,12
   529b4:	004fd3c0 	call	4fd3c <__mulsi3>
   529b8:	1407883a 	add	r3,r2,r16
   529bc:	e0bfff17 	ldw	r2,-4(fp)
   529c0:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   529c4:	00800174 	movhi	r2,5
   529c8:	1095da04 	addi	r2,r2,22376
   529cc:	10c00017 	ldw	r3,0(r2)
   529d0:	e0bffe17 	ldw	r2,-8(fp)
   529d4:	1880040e 	bge	r3,r2,529e8 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
   529d8:	00c00174 	movhi	r3,5
   529dc:	18d5da04 	addi	r3,r3,22376
   529e0:	e0bffe17 	ldw	r2,-8(fp)
   529e4:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   529e8:	e0bffe17 	ldw	r2,-8(fp)
   529ec:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   529f0:	00000606 	br	52a0c <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   529f4:	e0bffe17 	ldw	r2,-8(fp)
   529f8:	10800044 	addi	r2,r2,1
   529fc:	e0bffe15 	stw	r2,-8(fp)
   52a00:	e0bffe17 	ldw	r2,-8(fp)
   52a04:	10800810 	cmplti	r2,r2,32
   52a08:	103fdd1e 	bne	r2,zero,52980 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   52a0c:	e0bffd17 	ldw	r2,-12(fp)
}
   52a10:	e037883a 	mov	sp,fp
   52a14:	dfc00217 	ldw	ra,8(sp)
   52a18:	df000117 	ldw	fp,4(sp)
   52a1c:	dc000017 	ldw	r16,0(sp)
   52a20:	dec00304 	addi	sp,sp,12
   52a24:	f800283a 	ret

00052a28 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   52a28:	defffe04 	addi	sp,sp,-8
   52a2c:	dfc00115 	stw	ra,4(sp)
   52a30:	df000015 	stw	fp,0(sp)
   52a34:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   52a38:	0009883a 	mov	r4,zero
   52a3c:	01440004 	movi	r5,4096
   52a40:	00530380 	call	53038 <alt_icache_flush>
#endif
}
   52a44:	e037883a 	mov	sp,fp
   52a48:	dfc00117 	ldw	ra,4(sp)
   52a4c:	df000017 	ldw	fp,0(sp)
   52a50:	dec00204 	addi	sp,sp,8
   52a54:	f800283a 	ret

00052a58 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   52a58:	defff904 	addi	sp,sp,-28
   52a5c:	dfc00615 	stw	ra,24(sp)
   52a60:	df000515 	stw	fp,20(sp)
   52a64:	df000504 	addi	fp,sp,20
   52a68:	e13ffc15 	stw	r4,-16(fp)
   52a6c:	e17ffd15 	stw	r5,-12(fp)
   52a70:	e1bffe15 	stw	r6,-8(fp)
   52a74:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   52a78:	e0800217 	ldw	r2,8(fp)
   52a7c:	d8800015 	stw	r2,0(sp)
   52a80:	e13ffc17 	ldw	r4,-16(fp)
   52a84:	e17ffd17 	ldw	r5,-12(fp)
   52a88:	e1bffe17 	ldw	r6,-8(fp)
   52a8c:	e1ffff17 	ldw	r7,-4(fp)
   52a90:	0052c2c0 	call	52c2c <alt_iic_isr_register>
}  
   52a94:	e037883a 	mov	sp,fp
   52a98:	dfc00117 	ldw	ra,4(sp)
   52a9c:	df000017 	ldw	fp,0(sp)
   52aa0:	dec00204 	addi	sp,sp,8
   52aa4:	f800283a 	ret

00052aa8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   52aa8:	defff904 	addi	sp,sp,-28
   52aac:	df000615 	stw	fp,24(sp)
   52ab0:	df000604 	addi	fp,sp,24
   52ab4:	e13ffe15 	stw	r4,-8(fp)
   52ab8:	e17fff15 	stw	r5,-4(fp)
   52abc:	e0bfff17 	ldw	r2,-4(fp)
   52ac0:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   52ac4:	0005303a 	rdctl	r2,status
   52ac8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   52acc:	e0fffb17 	ldw	r3,-20(fp)
   52ad0:	00bfff84 	movi	r2,-2
   52ad4:	1884703a 	and	r2,r3,r2
   52ad8:	1001703a 	wrctl	status,r2
  
  return context;
   52adc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   52ae0:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   52ae4:	e0fffc17 	ldw	r3,-16(fp)
   52ae8:	00800044 	movi	r2,1
   52aec:	10c4983a 	sll	r2,r2,r3
   52af0:	1007883a 	mov	r3,r2
   52af4:	00800174 	movhi	r2,5
   52af8:	109cbd04 	addi	r2,r2,29428
   52afc:	10800017 	ldw	r2,0(r2)
   52b00:	1886b03a 	or	r3,r3,r2
   52b04:	00800174 	movhi	r2,5
   52b08:	109cbd04 	addi	r2,r2,29428
   52b0c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   52b10:	00800174 	movhi	r2,5
   52b14:	109cbd04 	addi	r2,r2,29428
   52b18:	10800017 	ldw	r2,0(r2)
   52b1c:	100170fa 	wrctl	ienable,r2
   52b20:	e0bffd17 	ldw	r2,-12(fp)
   52b24:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   52b28:	e0bffa17 	ldw	r2,-24(fp)
   52b2c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   52b30:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   52b34:	e037883a 	mov	sp,fp
   52b38:	df000017 	ldw	fp,0(sp)
   52b3c:	dec00104 	addi	sp,sp,4
   52b40:	f800283a 	ret

00052b44 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   52b44:	defff904 	addi	sp,sp,-28
   52b48:	df000615 	stw	fp,24(sp)
   52b4c:	df000604 	addi	fp,sp,24
   52b50:	e13ffe15 	stw	r4,-8(fp)
   52b54:	e17fff15 	stw	r5,-4(fp)
   52b58:	e0bfff17 	ldw	r2,-4(fp)
   52b5c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   52b60:	0005303a 	rdctl	r2,status
   52b64:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   52b68:	e0fffb17 	ldw	r3,-20(fp)
   52b6c:	00bfff84 	movi	r2,-2
   52b70:	1884703a 	and	r2,r3,r2
   52b74:	1001703a 	wrctl	status,r2
  
  return context;
   52b78:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   52b7c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   52b80:	e0fffc17 	ldw	r3,-16(fp)
   52b84:	00800044 	movi	r2,1
   52b88:	10c4983a 	sll	r2,r2,r3
   52b8c:	0084303a 	nor	r2,zero,r2
   52b90:	1007883a 	mov	r3,r2
   52b94:	00800174 	movhi	r2,5
   52b98:	109cbd04 	addi	r2,r2,29428
   52b9c:	10800017 	ldw	r2,0(r2)
   52ba0:	1886703a 	and	r3,r3,r2
   52ba4:	00800174 	movhi	r2,5
   52ba8:	109cbd04 	addi	r2,r2,29428
   52bac:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   52bb0:	00800174 	movhi	r2,5
   52bb4:	109cbd04 	addi	r2,r2,29428
   52bb8:	10800017 	ldw	r2,0(r2)
   52bbc:	100170fa 	wrctl	ienable,r2
   52bc0:	e0bffd17 	ldw	r2,-12(fp)
   52bc4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   52bc8:	e0bffa17 	ldw	r2,-24(fp)
   52bcc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   52bd0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   52bd4:	e037883a 	mov	sp,fp
   52bd8:	df000017 	ldw	fp,0(sp)
   52bdc:	dec00104 	addi	sp,sp,4
   52be0:	f800283a 	ret

00052be4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   52be4:	defffc04 	addi	sp,sp,-16
   52be8:	df000315 	stw	fp,12(sp)
   52bec:	df000304 	addi	fp,sp,12
   52bf0:	e13ffe15 	stw	r4,-8(fp)
   52bf4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   52bf8:	000530fa 	rdctl	r2,ienable
   52bfc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   52c00:	e0ffff17 	ldw	r3,-4(fp)
   52c04:	00800044 	movi	r2,1
   52c08:	10c4983a 	sll	r2,r2,r3
   52c0c:	1007883a 	mov	r3,r2
   52c10:	e0bffd17 	ldw	r2,-12(fp)
   52c14:	1884703a 	and	r2,r3,r2
   52c18:	1004c03a 	cmpne	r2,r2,zero
}
   52c1c:	e037883a 	mov	sp,fp
   52c20:	df000017 	ldw	fp,0(sp)
   52c24:	dec00104 	addi	sp,sp,4
   52c28:	f800283a 	ret

00052c2c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   52c2c:	defff404 	addi	sp,sp,-48
   52c30:	dfc00b15 	stw	ra,44(sp)
   52c34:	df000a15 	stw	fp,40(sp)
   52c38:	df000a04 	addi	fp,sp,40
   52c3c:	e13ffb15 	stw	r4,-20(fp)
   52c40:	e17ffc15 	stw	r5,-16(fp)
   52c44:	e1bffd15 	stw	r6,-12(fp)
   52c48:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   52c4c:	00bffa84 	movi	r2,-22
   52c50:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   52c54:	e0bffc17 	ldw	r2,-16(fp)
   52c58:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   52c5c:	e0bff917 	ldw	r2,-28(fp)
   52c60:	10800808 	cmpgei	r2,r2,32
   52c64:	1000291e 	bne	r2,zero,52d0c <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   52c68:	0005303a 	rdctl	r2,status
   52c6c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   52c70:	e0fff717 	ldw	r3,-36(fp)
   52c74:	00bfff84 	movi	r2,-2
   52c78:	1884703a 	and	r2,r3,r2
   52c7c:	1001703a 	wrctl	status,r2
  
  return context;
   52c80:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   52c84:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   52c88:	e0bff917 	ldw	r2,-28(fp)
   52c8c:	00c00174 	movhi	r3,5
   52c90:	18dd0e04 	addi	r3,r3,29752
   52c94:	100490fa 	slli	r2,r2,3
   52c98:	10c7883a 	add	r3,r2,r3
   52c9c:	e0bffd17 	ldw	r2,-12(fp)
   52ca0:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   52ca4:	e0bff917 	ldw	r2,-28(fp)
   52ca8:	00c00174 	movhi	r3,5
   52cac:	18dd0e04 	addi	r3,r3,29752
   52cb0:	100490fa 	slli	r2,r2,3
   52cb4:	10c5883a 	add	r2,r2,r3
   52cb8:	10c00104 	addi	r3,r2,4
   52cbc:	e0bffe17 	ldw	r2,-8(fp)
   52cc0:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   52cc4:	e0bffd17 	ldw	r2,-12(fp)
   52cc8:	1005003a 	cmpeq	r2,r2,zero
   52ccc:	1000051e 	bne	r2,zero,52ce4 <alt_iic_isr_register+0xb8>
   52cd0:	e17ff917 	ldw	r5,-28(fp)
   52cd4:	e13ffb17 	ldw	r4,-20(fp)
   52cd8:	0052aa80 	call	52aa8 <alt_ic_irq_enable>
   52cdc:	e0bfff15 	stw	r2,-4(fp)
   52ce0:	00000406 	br	52cf4 <alt_iic_isr_register+0xc8>
   52ce4:	e17ff917 	ldw	r5,-28(fp)
   52ce8:	e13ffb17 	ldw	r4,-20(fp)
   52cec:	0052b440 	call	52b44 <alt_ic_irq_disable>
   52cf0:	e0bfff15 	stw	r2,-4(fp)
   52cf4:	e0bfff17 	ldw	r2,-4(fp)
   52cf8:	e0bffa15 	stw	r2,-24(fp)
   52cfc:	e0bff817 	ldw	r2,-32(fp)
   52d00:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   52d04:	e0bff617 	ldw	r2,-40(fp)
   52d08:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   52d0c:	e0bffa17 	ldw	r2,-24(fp)
}
   52d10:	e037883a 	mov	sp,fp
   52d14:	dfc00117 	ldw	ra,4(sp)
   52d18:	df000017 	ldw	fp,0(sp)
   52d1c:	dec00204 	addi	sp,sp,8
   52d20:	f800283a 	ret

00052d24 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   52d24:	defff804 	addi	sp,sp,-32
   52d28:	dfc00715 	stw	ra,28(sp)
   52d2c:	df000615 	stw	fp,24(sp)
   52d30:	dc000515 	stw	r16,20(sp)
   52d34:	df000504 	addi	fp,sp,20
   52d38:	e13ffc15 	stw	r4,-16(fp)
   52d3c:	e17ffd15 	stw	r5,-12(fp)
   52d40:	e1bffe15 	stw	r6,-8(fp)
   52d44:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   52d48:	e13ffd17 	ldw	r4,-12(fp)
   52d4c:	e17ffe17 	ldw	r5,-8(fp)
   52d50:	e1bfff17 	ldw	r6,-4(fp)
   52d54:	00509f40 	call	509f4 <open>
   52d58:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   52d5c:	e0bffb17 	ldw	r2,-20(fp)
   52d60:	1004803a 	cmplt	r2,r2,zero
   52d64:	10001f1e 	bne	r2,zero,52de4 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
   52d68:	e13ffb17 	ldw	r4,-20(fp)
   52d6c:	04000174 	movhi	r16,5
   52d70:	84114d04 	addi	r16,r16,17716
   52d74:	01400304 	movi	r5,12
   52d78:	004fd3c0 	call	4fd3c <__mulsi3>
   52d7c:	1405883a 	add	r2,r2,r16
   52d80:	10c00017 	ldw	r3,0(r2)
   52d84:	e0bffc17 	ldw	r2,-16(fp)
   52d88:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   52d8c:	e13ffb17 	ldw	r4,-20(fp)
   52d90:	04000174 	movhi	r16,5
   52d94:	84114d04 	addi	r16,r16,17716
   52d98:	01400304 	movi	r5,12
   52d9c:	004fd3c0 	call	4fd3c <__mulsi3>
   52da0:	1405883a 	add	r2,r2,r16
   52da4:	10800104 	addi	r2,r2,4
   52da8:	10c00017 	ldw	r3,0(r2)
   52dac:	e0bffc17 	ldw	r2,-16(fp)
   52db0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   52db4:	e13ffb17 	ldw	r4,-20(fp)
   52db8:	04000174 	movhi	r16,5
   52dbc:	84114d04 	addi	r16,r16,17716
   52dc0:	01400304 	movi	r5,12
   52dc4:	004fd3c0 	call	4fd3c <__mulsi3>
   52dc8:	1405883a 	add	r2,r2,r16
   52dcc:	10800204 	addi	r2,r2,8
   52dd0:	10c00017 	ldw	r3,0(r2)
   52dd4:	e0bffc17 	ldw	r2,-16(fp)
   52dd8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   52ddc:	e13ffb17 	ldw	r4,-20(fp)
   52de0:	0050d640 	call	50d64 <alt_release_fd>
  }
} 
   52de4:	e037883a 	mov	sp,fp
   52de8:	dfc00217 	ldw	ra,8(sp)
   52dec:	df000117 	ldw	fp,4(sp)
   52df0:	dc000017 	ldw	r16,0(sp)
   52df4:	dec00304 	addi	sp,sp,12
   52df8:	f800283a 	ret

00052dfc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   52dfc:	defffb04 	addi	sp,sp,-20
   52e00:	dfc00415 	stw	ra,16(sp)
   52e04:	df000315 	stw	fp,12(sp)
   52e08:	df000304 	addi	fp,sp,12
   52e0c:	e13ffd15 	stw	r4,-12(fp)
   52e10:	e17ffe15 	stw	r5,-8(fp)
   52e14:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   52e18:	01000174 	movhi	r4,5
   52e1c:	21115004 	addi	r4,r4,17728
   52e20:	e17ffd17 	ldw	r5,-12(fp)
   52e24:	01800044 	movi	r6,1
   52e28:	01c07fc4 	movi	r7,511
   52e2c:	0052d240 	call	52d24 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   52e30:	01000174 	movhi	r4,5
   52e34:	21114d04 	addi	r4,r4,17716
   52e38:	e17ffe17 	ldw	r5,-8(fp)
   52e3c:	000d883a 	mov	r6,zero
   52e40:	01c07fc4 	movi	r7,511
   52e44:	0052d240 	call	52d24 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   52e48:	01000174 	movhi	r4,5
   52e4c:	21115304 	addi	r4,r4,17740
   52e50:	e17fff17 	ldw	r5,-4(fp)
   52e54:	01800044 	movi	r6,1
   52e58:	01c07fc4 	movi	r7,511
   52e5c:	0052d240 	call	52d24 <alt_open_fd>
}  
   52e60:	e037883a 	mov	sp,fp
   52e64:	dfc00117 	ldw	ra,4(sp)
   52e68:	df000017 	ldw	fp,0(sp)
   52e6c:	dec00204 	addi	sp,sp,8
   52e70:	f800283a 	ret

00052e74 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   52e74:	defffa04 	addi	sp,sp,-24
   52e78:	df000515 	stw	fp,20(sp)
   52e7c:	df000504 	addi	fp,sp,20
   52e80:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   52e84:	0005303a 	rdctl	r2,status
   52e88:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   52e8c:	e0fffd17 	ldw	r3,-12(fp)
   52e90:	00bfff84 	movi	r2,-2
   52e94:	1884703a 	and	r2,r3,r2
   52e98:	1001703a 	wrctl	status,r2
  
  return context;
   52e9c:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   52ea0:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   52ea4:	e0bfff17 	ldw	r2,-4(fp)
   52ea8:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   52eac:	e0bffc17 	ldw	r2,-16(fp)
   52eb0:	10c00017 	ldw	r3,0(r2)
   52eb4:	e0bffc17 	ldw	r2,-16(fp)
   52eb8:	10800117 	ldw	r2,4(r2)
   52ebc:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   52ec0:	e0bffc17 	ldw	r2,-16(fp)
   52ec4:	10c00117 	ldw	r3,4(r2)
   52ec8:	e0bffc17 	ldw	r2,-16(fp)
   52ecc:	10800017 	ldw	r2,0(r2)
   52ed0:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   52ed4:	e0fffc17 	ldw	r3,-16(fp)
   52ed8:	e0bffc17 	ldw	r2,-16(fp)
   52edc:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   52ee0:	e0fffc17 	ldw	r3,-16(fp)
   52ee4:	e0bffc17 	ldw	r2,-16(fp)
   52ee8:	18800015 	stw	r2,0(r3)
   52eec:	e0bffe17 	ldw	r2,-8(fp)
   52ef0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   52ef4:	e0bffb17 	ldw	r2,-20(fp)
   52ef8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   52efc:	e037883a 	mov	sp,fp
   52f00:	df000017 	ldw	fp,0(sp)
   52f04:	dec00104 	addi	sp,sp,4
   52f08:	f800283a 	ret

00052f0c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   52f0c:	defffb04 	addi	sp,sp,-20
   52f10:	dfc00415 	stw	ra,16(sp)
   52f14:	df000315 	stw	fp,12(sp)
   52f18:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   52f1c:	d0a02117 	ldw	r2,-32636(gp)
   52f20:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   52f24:	d0a6f017 	ldw	r2,-25664(gp)
   52f28:	10800044 	addi	r2,r2,1
   52f2c:	d0a6f015 	stw	r2,-25664(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   52f30:	00003106 	br	52ff8 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   52f34:	e0bffe17 	ldw	r2,-8(fp)
   52f38:	10800017 	ldw	r2,0(r2)
   52f3c:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   52f40:	e0bffe17 	ldw	r2,-8(fp)
   52f44:	10800403 	ldbu	r2,16(r2)
   52f48:	10803fcc 	andi	r2,r2,255
   52f4c:	1005003a 	cmpeq	r2,r2,zero
   52f50:	1000051e 	bne	r2,zero,52f68 <alt_tick+0x5c>
   52f54:	d0a6f017 	ldw	r2,-25664(gp)
   52f58:	1004c03a 	cmpne	r2,r2,zero
   52f5c:	1000021e 	bne	r2,zero,52f68 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   52f60:	e0bffe17 	ldw	r2,-8(fp)
   52f64:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   52f68:	e0bffe17 	ldw	r2,-8(fp)
   52f6c:	10c00217 	ldw	r3,8(r2)
   52f70:	d0a6f017 	ldw	r2,-25664(gp)
   52f74:	10c01e36 	bltu	r2,r3,52ff0 <alt_tick+0xe4>
   52f78:	e0bffe17 	ldw	r2,-8(fp)
   52f7c:	10800403 	ldbu	r2,16(r2)
   52f80:	10803fcc 	andi	r2,r2,255
   52f84:	1004c03a 	cmpne	r2,r2,zero
   52f88:	1000191e 	bne	r2,zero,52ff0 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   52f8c:	e0bffe17 	ldw	r2,-8(fp)
   52f90:	10c00317 	ldw	r3,12(r2)
   52f94:	e0bffe17 	ldw	r2,-8(fp)
   52f98:	11000517 	ldw	r4,20(r2)
   52f9c:	183ee83a 	callr	r3
   52fa0:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   52fa4:	e0bffd17 	ldw	r2,-12(fp)
   52fa8:	1004c03a 	cmpne	r2,r2,zero
   52fac:	1000031e 	bne	r2,zero,52fbc <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   52fb0:	e13ffe17 	ldw	r4,-8(fp)
   52fb4:	0052e740 	call	52e74 <alt_alarm_stop>
   52fb8:	00000d06 	br	52ff0 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   52fbc:	e0bffe17 	ldw	r2,-8(fp)
   52fc0:	10c00217 	ldw	r3,8(r2)
   52fc4:	e0bffd17 	ldw	r2,-12(fp)
   52fc8:	1887883a 	add	r3,r3,r2
   52fcc:	e0bffe17 	ldw	r2,-8(fp)
   52fd0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   52fd4:	e0bffe17 	ldw	r2,-8(fp)
   52fd8:	10c00217 	ldw	r3,8(r2)
   52fdc:	d0a6f017 	ldw	r2,-25664(gp)
   52fe0:	1880032e 	bgeu	r3,r2,52ff0 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   52fe4:	e0fffe17 	ldw	r3,-8(fp)
   52fe8:	00800044 	movi	r2,1
   52fec:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   52ff0:	e0bfff17 	ldw	r2,-4(fp)
   52ff4:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   52ff8:	d0e02104 	addi	r3,gp,-32636
   52ffc:	e0bffe17 	ldw	r2,-8(fp)
   53000:	10ffcc1e 	bne	r2,r3,52f34 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   53004:	e037883a 	mov	sp,fp
   53008:	dfc00117 	ldw	ra,4(sp)
   5300c:	df000017 	ldw	fp,0(sp)
   53010:	dec00204 	addi	sp,sp,8
   53014:	f800283a 	ret

00053018 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   53018:	deffff04 	addi	sp,sp,-4
   5301c:	df000015 	stw	fp,0(sp)
   53020:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   53024:	000170fa 	wrctl	ienable,zero
}
   53028:	e037883a 	mov	sp,fp
   5302c:	df000017 	ldw	fp,0(sp)
   53030:	dec00104 	addi	sp,sp,4
   53034:	f800283a 	ret

00053038 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   53038:	defffb04 	addi	sp,sp,-20
   5303c:	df000415 	stw	fp,16(sp)
   53040:	df000404 	addi	fp,sp,16
   53044:	e13ffe15 	stw	r4,-8(fp)
   53048:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   5304c:	e0bfff17 	ldw	r2,-4(fp)
   53050:	10840070 	cmpltui	r2,r2,4097
   53054:	1000021e 	bne	r2,zero,53060 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   53058:	00840004 	movi	r2,4096
   5305c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   53060:	e0fffe17 	ldw	r3,-8(fp)
   53064:	e0bfff17 	ldw	r2,-4(fp)
   53068:	1885883a 	add	r2,r3,r2
   5306c:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   53070:	e0bffe17 	ldw	r2,-8(fp)
   53074:	e0bffd15 	stw	r2,-12(fp)
   53078:	00000506 	br	53090 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   5307c:	e0bffd17 	ldw	r2,-12(fp)
   53080:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   53084:	e0bffd17 	ldw	r2,-12(fp)
   53088:	10800804 	addi	r2,r2,32
   5308c:	e0bffd15 	stw	r2,-12(fp)
   53090:	e0fffd17 	ldw	r3,-12(fp)
   53094:	e0bffc17 	ldw	r2,-16(fp)
   53098:	18bff836 	bltu	r3,r2,5307c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   5309c:	e0bffe17 	ldw	r2,-8(fp)
   530a0:	108007cc 	andi	r2,r2,31
   530a4:	1005003a 	cmpeq	r2,r2,zero
   530a8:	1000021e 	bne	r2,zero,530b4 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   530ac:	e0bffd17 	ldw	r2,-12(fp)
   530b0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   530b4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   530b8:	e037883a 	mov	sp,fp
   530bc:	df000017 	ldw	fp,0(sp)
   530c0:	dec00104 	addi	sp,sp,4
   530c4:	f800283a 	ret

000530c8 <atexit>:
   530c8:	200b883a 	mov	r5,r4
   530cc:	000d883a 	mov	r6,zero
   530d0:	0009883a 	mov	r4,zero
   530d4:	000f883a 	mov	r7,zero
   530d8:	00531881 	jmpi	53188 <__register_exitproc>

000530dc <exit>:
   530dc:	defffe04 	addi	sp,sp,-8
   530e0:	000b883a 	mov	r5,zero
   530e4:	dc000015 	stw	r16,0(sp)
   530e8:	dfc00115 	stw	ra,4(sp)
   530ec:	2021883a 	mov	r16,r4
   530f0:	00532c00 	call	532c0 <__call_exitprocs>
   530f4:	00800174 	movhi	r2,5
   530f8:	1095d004 	addi	r2,r2,22336
   530fc:	11000017 	ldw	r4,0(r2)
   53100:	20800f17 	ldw	r2,60(r4)
   53104:	10000126 	beq	r2,zero,5310c <exit+0x30>
   53108:	103ee83a 	callr	r2
   5310c:	8009883a 	mov	r4,r16
   53110:	00534b00 	call	534b0 <_exit>

00053114 <memcmp>:
   53114:	00c000c4 	movi	r3,3
   53118:	1980032e 	bgeu	r3,r6,53128 <memcmp+0x14>
   5311c:	2144b03a 	or	r2,r4,r5
   53120:	10c4703a 	and	r2,r2,r3
   53124:	10000f26 	beq	r2,zero,53164 <memcmp+0x50>
   53128:	31ffffc4 	addi	r7,r6,-1
   5312c:	3000061e 	bne	r6,zero,53148 <memcmp+0x34>
   53130:	00000a06 	br	5315c <memcmp+0x48>
   53134:	39ffffc4 	addi	r7,r7,-1
   53138:	00bfffc4 	movi	r2,-1
   5313c:	21000044 	addi	r4,r4,1
   53140:	29400044 	addi	r5,r5,1
   53144:	38800526 	beq	r7,r2,5315c <memcmp+0x48>
   53148:	20c00003 	ldbu	r3,0(r4)
   5314c:	28800003 	ldbu	r2,0(r5)
   53150:	18bff826 	beq	r3,r2,53134 <memcmp+0x20>
   53154:	1885c83a 	sub	r2,r3,r2
   53158:	f800283a 	ret
   5315c:	0005883a 	mov	r2,zero
   53160:	f800283a 	ret
   53164:	180f883a 	mov	r7,r3
   53168:	20c00017 	ldw	r3,0(r4)
   5316c:	28800017 	ldw	r2,0(r5)
   53170:	18bfed1e 	bne	r3,r2,53128 <memcmp+0x14>
   53174:	31bfff04 	addi	r6,r6,-4
   53178:	21000104 	addi	r4,r4,4
   5317c:	29400104 	addi	r5,r5,4
   53180:	39bff936 	bltu	r7,r6,53168 <memcmp+0x54>
   53184:	003fe806 	br	53128 <memcmp+0x14>

00053188 <__register_exitproc>:
   53188:	defffa04 	addi	sp,sp,-24
   5318c:	00800174 	movhi	r2,5
   53190:	1095d004 	addi	r2,r2,22336
   53194:	dc000015 	stw	r16,0(sp)
   53198:	14000017 	ldw	r16,0(r2)
   5319c:	dd000415 	stw	r20,16(sp)
   531a0:	2829883a 	mov	r20,r5
   531a4:	81405217 	ldw	r5,328(r16)
   531a8:	dcc00315 	stw	r19,12(sp)
   531ac:	dc800215 	stw	r18,8(sp)
   531b0:	dc400115 	stw	r17,4(sp)
   531b4:	dfc00515 	stw	ra,20(sp)
   531b8:	2023883a 	mov	r17,r4
   531bc:	3027883a 	mov	r19,r6
   531c0:	3825883a 	mov	r18,r7
   531c4:	28002526 	beq	r5,zero,5325c <__register_exitproc+0xd4>
   531c8:	29000117 	ldw	r4,4(r5)
   531cc:	008007c4 	movi	r2,31
   531d0:	11002716 	blt	r2,r4,53270 <__register_exitproc+0xe8>
   531d4:	8800101e 	bne	r17,zero,53218 <__register_exitproc+0x90>
   531d8:	2105883a 	add	r2,r4,r4
   531dc:	1085883a 	add	r2,r2,r2
   531e0:	20c00044 	addi	r3,r4,1
   531e4:	1145883a 	add	r2,r2,r5
   531e8:	0009883a 	mov	r4,zero
   531ec:	15000215 	stw	r20,8(r2)
   531f0:	28c00115 	stw	r3,4(r5)
   531f4:	2005883a 	mov	r2,r4
   531f8:	dfc00517 	ldw	ra,20(sp)
   531fc:	dd000417 	ldw	r20,16(sp)
   53200:	dcc00317 	ldw	r19,12(sp)
   53204:	dc800217 	ldw	r18,8(sp)
   53208:	dc400117 	ldw	r17,4(sp)
   5320c:	dc000017 	ldw	r16,0(sp)
   53210:	dec00604 	addi	sp,sp,24
   53214:	f800283a 	ret
   53218:	29802204 	addi	r6,r5,136
   5321c:	00800044 	movi	r2,1
   53220:	110e983a 	sll	r7,r2,r4
   53224:	30c04017 	ldw	r3,256(r6)
   53228:	2105883a 	add	r2,r4,r4
   5322c:	1085883a 	add	r2,r2,r2
   53230:	1185883a 	add	r2,r2,r6
   53234:	19c6b03a 	or	r3,r3,r7
   53238:	14802015 	stw	r18,128(r2)
   5323c:	14c00015 	stw	r19,0(r2)
   53240:	00800084 	movi	r2,2
   53244:	30c04015 	stw	r3,256(r6)
   53248:	88bfe31e 	bne	r17,r2,531d8 <__register_exitproc+0x50>
   5324c:	30804117 	ldw	r2,260(r6)
   53250:	11c4b03a 	or	r2,r2,r7
   53254:	30804115 	stw	r2,260(r6)
   53258:	003fdf06 	br	531d8 <__register_exitproc+0x50>
   5325c:	00800174 	movhi	r2,5
   53260:	109d4e04 	addi	r2,r2,30008
   53264:	100b883a 	mov	r5,r2
   53268:	80805215 	stw	r2,328(r16)
   5326c:	003fd606 	br	531c8 <__register_exitproc+0x40>
   53270:	00800034 	movhi	r2,0
   53274:	10800004 	addi	r2,r2,0
   53278:	1000021e 	bne	r2,zero,53284 <__register_exitproc+0xfc>
   5327c:	013fffc4 	movi	r4,-1
   53280:	003fdc06 	br	531f4 <__register_exitproc+0x6c>
   53284:	01006404 	movi	r4,400
   53288:	103ee83a 	callr	r2
   5328c:	1007883a 	mov	r3,r2
   53290:	103ffa26 	beq	r2,zero,5327c <__register_exitproc+0xf4>
   53294:	80805217 	ldw	r2,328(r16)
   53298:	180b883a 	mov	r5,r3
   5329c:	18000115 	stw	zero,4(r3)
   532a0:	18800015 	stw	r2,0(r3)
   532a4:	80c05215 	stw	r3,328(r16)
   532a8:	18006215 	stw	zero,392(r3)
   532ac:	18006315 	stw	zero,396(r3)
   532b0:	0009883a 	mov	r4,zero
   532b4:	883fc826 	beq	r17,zero,531d8 <__register_exitproc+0x50>
   532b8:	003fd706 	br	53218 <__register_exitproc+0x90>

000532bc <register_fini>:
   532bc:	f800283a 	ret

000532c0 <__call_exitprocs>:
   532c0:	00800174 	movhi	r2,5
   532c4:	1095d004 	addi	r2,r2,22336
   532c8:	10800017 	ldw	r2,0(r2)
   532cc:	defff304 	addi	sp,sp,-52
   532d0:	df000b15 	stw	fp,44(sp)
   532d4:	d8800115 	stw	r2,4(sp)
   532d8:	00800034 	movhi	r2,0
   532dc:	10800004 	addi	r2,r2,0
   532e0:	1005003a 	cmpeq	r2,r2,zero
   532e4:	d8800215 	stw	r2,8(sp)
   532e8:	d8800117 	ldw	r2,4(sp)
   532ec:	dd400815 	stw	r21,32(sp)
   532f0:	dd000715 	stw	r20,28(sp)
   532f4:	10805204 	addi	r2,r2,328
   532f8:	dfc00c15 	stw	ra,48(sp)
   532fc:	ddc00a15 	stw	r23,40(sp)
   53300:	dd800915 	stw	r22,36(sp)
   53304:	dcc00615 	stw	r19,24(sp)
   53308:	dc800515 	stw	r18,20(sp)
   5330c:	dc400415 	stw	r17,16(sp)
   53310:	dc000315 	stw	r16,12(sp)
   53314:	282b883a 	mov	r21,r5
   53318:	2039883a 	mov	fp,r4
   5331c:	d8800015 	stw	r2,0(sp)
   53320:	2829003a 	cmpeq	r20,r5,zero
   53324:	d8800117 	ldw	r2,4(sp)
   53328:	14405217 	ldw	r17,328(r2)
   5332c:	88001026 	beq	r17,zero,53370 <__call_exitprocs+0xb0>
   53330:	ddc00017 	ldw	r23,0(sp)
   53334:	88800117 	ldw	r2,4(r17)
   53338:	8c802204 	addi	r18,r17,136
   5333c:	143fffc4 	addi	r16,r2,-1
   53340:	80000916 	blt	r16,zero,53368 <__call_exitprocs+0xa8>
   53344:	05bfffc4 	movi	r22,-1
   53348:	a000151e 	bne	r20,zero,533a0 <__call_exitprocs+0xe0>
   5334c:	8409883a 	add	r4,r16,r16
   53350:	2105883a 	add	r2,r4,r4
   53354:	1485883a 	add	r2,r2,r18
   53358:	10c02017 	ldw	r3,128(r2)
   5335c:	a8c01126 	beq	r21,r3,533a4 <__call_exitprocs+0xe4>
   53360:	843fffc4 	addi	r16,r16,-1
   53364:	85bff81e 	bne	r16,r22,53348 <__call_exitprocs+0x88>
   53368:	d8800217 	ldw	r2,8(sp)
   5336c:	10003126 	beq	r2,zero,53434 <__call_exitprocs+0x174>
   53370:	dfc00c17 	ldw	ra,48(sp)
   53374:	df000b17 	ldw	fp,44(sp)
   53378:	ddc00a17 	ldw	r23,40(sp)
   5337c:	dd800917 	ldw	r22,36(sp)
   53380:	dd400817 	ldw	r21,32(sp)
   53384:	dd000717 	ldw	r20,28(sp)
   53388:	dcc00617 	ldw	r19,24(sp)
   5338c:	dc800517 	ldw	r18,20(sp)
   53390:	dc400417 	ldw	r17,16(sp)
   53394:	dc000317 	ldw	r16,12(sp)
   53398:	dec00d04 	addi	sp,sp,52
   5339c:	f800283a 	ret
   533a0:	8409883a 	add	r4,r16,r16
   533a4:	88c00117 	ldw	r3,4(r17)
   533a8:	2105883a 	add	r2,r4,r4
   533ac:	1445883a 	add	r2,r2,r17
   533b0:	18ffffc4 	addi	r3,r3,-1
   533b4:	11800217 	ldw	r6,8(r2)
   533b8:	1c001526 	beq	r3,r16,53410 <__call_exitprocs+0x150>
   533bc:	10000215 	stw	zero,8(r2)
   533c0:	303fe726 	beq	r6,zero,53360 <__call_exitprocs+0xa0>
   533c4:	00c00044 	movi	r3,1
   533c8:	1c06983a 	sll	r3,r3,r16
   533cc:	90804017 	ldw	r2,256(r18)
   533d0:	8cc00117 	ldw	r19,4(r17)
   533d4:	1884703a 	and	r2,r3,r2
   533d8:	10001426 	beq	r2,zero,5342c <__call_exitprocs+0x16c>
   533dc:	90804117 	ldw	r2,260(r18)
   533e0:	1884703a 	and	r2,r3,r2
   533e4:	10000c1e 	bne	r2,zero,53418 <__call_exitprocs+0x158>
   533e8:	2105883a 	add	r2,r4,r4
   533ec:	1485883a 	add	r2,r2,r18
   533f0:	11400017 	ldw	r5,0(r2)
   533f4:	e009883a 	mov	r4,fp
   533f8:	303ee83a 	callr	r6
   533fc:	88800117 	ldw	r2,4(r17)
   53400:	98bfc81e 	bne	r19,r2,53324 <__call_exitprocs+0x64>
   53404:	b8800017 	ldw	r2,0(r23)
   53408:	147fd526 	beq	r2,r17,53360 <__call_exitprocs+0xa0>
   5340c:	003fc506 	br	53324 <__call_exitprocs+0x64>
   53410:	8c000115 	stw	r16,4(r17)
   53414:	003fea06 	br	533c0 <__call_exitprocs+0x100>
   53418:	2105883a 	add	r2,r4,r4
   5341c:	1485883a 	add	r2,r2,r18
   53420:	11000017 	ldw	r4,0(r2)
   53424:	303ee83a 	callr	r6
   53428:	003ff406 	br	533fc <__call_exitprocs+0x13c>
   5342c:	303ee83a 	callr	r6
   53430:	003ff206 	br	533fc <__call_exitprocs+0x13c>
   53434:	88800117 	ldw	r2,4(r17)
   53438:	1000081e 	bne	r2,zero,5345c <__call_exitprocs+0x19c>
   5343c:	89000017 	ldw	r4,0(r17)
   53440:	20000726 	beq	r4,zero,53460 <__call_exitprocs+0x1a0>
   53444:	b9000015 	stw	r4,0(r23)
   53448:	8809883a 	mov	r4,r17
   5344c:	00000000 	call	0 <__alt_mem_onchip_mem-0x40000>
   53450:	bc400017 	ldw	r17,0(r23)
   53454:	883fb71e 	bne	r17,zero,53334 <__call_exitprocs+0x74>
   53458:	003fc506 	br	53370 <__call_exitprocs+0xb0>
   5345c:	89000017 	ldw	r4,0(r17)
   53460:	882f883a 	mov	r23,r17
   53464:	2023883a 	mov	r17,r4
   53468:	883fb21e 	bne	r17,zero,53334 <__call_exitprocs+0x74>
   5346c:	003fc006 	br	53370 <__call_exitprocs+0xb0>

00053470 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   53470:	defffd04 	addi	sp,sp,-12
   53474:	df000215 	stw	fp,8(sp)
   53478:	df000204 	addi	fp,sp,8
   5347c:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   53480:	e0bfff17 	ldw	r2,-4(fp)
   53484:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   53488:	e0bffe17 	ldw	r2,-8(fp)
   5348c:	1005003a 	cmpeq	r2,r2,zero
   53490:	1000021e 	bne	r2,zero,5349c <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   53494:	002af070 	cmpltui	zero,zero,43969
   53498:	00000106 	br	534a0 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   5349c:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   534a0:	e037883a 	mov	sp,fp
   534a4:	df000017 	ldw	fp,0(sp)
   534a8:	dec00104 	addi	sp,sp,4
   534ac:	f800283a 	ret

000534b0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   534b0:	defffd04 	addi	sp,sp,-12
   534b4:	dfc00215 	stw	ra,8(sp)
   534b8:	df000115 	stw	fp,4(sp)
   534bc:	df000104 	addi	fp,sp,4
   534c0:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   534c4:	e13fff17 	ldw	r4,-4(fp)
   534c8:	00534700 	call	53470 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   534cc:	003fff06 	br	534cc <_exit+0x1c>
   534d0:	000532bc 	xorhi	zero,zero,5322
